// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Medea_Parser_Permutation = require("../Data.Medea.Parser.Permutation/index.js");
var Data_Medea_Parser_Primitive = require("../Data.Medea.Parser.Primitive/index.js");
var Data_Medea_Parser_Types = require("../Data.Medea.Parser.Types/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_Show = require("../Data.Show/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Specification = (function () {
    function Specification(value0) {
        this.value0 = value0;
    };
    Specification.create = function (value0) {
        return new Specification(value0);
    };
    return Specification;
})();
var parseTupleSpec = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Medea_Parser_Primitive.parseLine(4)(Data_Medea_Parser_Primitive.parseReserved(Data_Medea_Parser_Primitive.RTuple.value)))(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Primitive.parseLine(8)(Data_Medea_Parser_Primitive.parseIdentifier))))(function (elemList) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Maybe.Just(elemList));
    });
});
var parseMinSpec = Data_Medea_Parser_Primitive.parseLine(4)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(Data_Medea_Parser_Primitive.parseKeyVal(Data_Medea_Parser_Primitive.RMinLength.value)(Data_Medea_Parser_Primitive.parseNatural)));
var parseMaxSpec = Data_Medea_Parser_Primitive.parseLine(4)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(Data_Medea_Parser_Primitive.parseKeyVal(Data_Medea_Parser_Primitive.RMaxLength.value)(Data_Medea_Parser_Primitive.parseNatural)));
var parseElementType = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Medea_Parser_Primitive.parseLine(4)(Data_Medea_Parser_Primitive.parseReserved(Data_Medea_Parser_Primitive.RElementType.value)))(function () {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Medea_Parser_Primitive.parseLine(8)(Data_Medea_Parser_Primitive.parseIdentifier))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.EmptyArrayElements.value))))(function (element) {
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Maybe.Just(element));
    });
});
var mkSpec = function (minLen) {
    return function (maxLen) {
        return function (elemType) {
            return function (tupleS) {
                return new Specification({
                    minLength: minLen,
                    maxLength: maxLen,
                    elementType: elemType,
                    tupleSpec: tupleS
                });
            };
        };
    };
};
var parseSpecification = (function () {
    var permute = Data_Medea_Parser_Permutation.runPermutation(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.monadParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Data_Medea_Parser_Permutation.applyPermutation(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity)))(Control_Apply.apply(Data_Medea_Parser_Permutation.applyPermutation(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity)))(Control_Apply.apply(Data_Medea_Parser_Permutation.applyPermutation(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity)))(Data_Functor.map(Data_Medea_Parser_Permutation.functorPermutation(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity)))(mkSpec)(Data_Medea_Parser_Permutation.toPermutationWithDefault(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseMinSpec))))(Data_Medea_Parser_Permutation.toPermutationWithDefault(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseMaxSpec))))(Data_Medea_Parser_Permutation.toPermutationWithDefault(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseElementType))))(Data_Medea_Parser_Permutation.toPermutationWithDefault(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(parseTupleSpec))));
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(permute))(function (spec) {
        if (spec.value0.minLength instanceof Data_Maybe.Nothing && (spec.value0.maxLength instanceof Data_Maybe.Nothing && (spec.value0.elementType instanceof Data_Maybe.Nothing && spec.value0.tupleSpec instanceof Data_Maybe.Nothing))) {
            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.EmptyLengthArraySpec.value));
        };
        if (spec.value0.elementType instanceof Data_Maybe.Just && spec.value0.tupleSpec instanceof Data_Maybe.Just) {
            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.ConflictingSpecRequirements.value));
        };
        if (spec.value0.minLength instanceof Data_Maybe.Just && spec.value0.tupleSpec instanceof Data_Maybe.Just) {
            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.ConflictingSpecRequirements.value));
        };
        if (spec.value0.maxLength instanceof Data_Maybe.Just && spec.value0.tupleSpec instanceof Data_Maybe.Just) {
            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.EmptyLengthArraySpec.value));
        };
        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(spec);
    });
})();
var minLength = function (v) {
    return v.value0.minLength;
};
var maxLength = function (v) {
    return v.value0.maxLength;
};
var eqSpecification = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Medea_Parser_Primitive.eqIdentifier))(x.value0.elementType)(y.value0.elementType) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Natural.eqNatural))(x.value0.maxLength)(y.value0.maxLength) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Natural.eqNatural))(x.value0.minLength)(y.value0.minLength) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqArray(Data_Medea_Parser_Primitive.eqIdentifier)))(x.value0.tupleSpec)(y.value0.tupleSpec);
        };
    }
};
var defaultSpec = new Specification({
    minLength: Data_Maybe.Nothing.value,
    maxLength: Data_Maybe.Nothing.value,
    elementType: Data_Maybe.Nothing.value,
    tupleSpec: Data_Maybe.Nothing.value
});
var combineSpec = function (v) {
    return function (v1) {
        return new Specification({
            minLength: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.minLength)(v1.value0.minLength),
            maxLength: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.maxLength)(v1.value0.maxLength),
            elementType: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.elementType)(v1.value0.elementType),
            tupleSpec: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.tupleSpec)(v1.value0.tupleSpec)
        });
    };
};
module.exports = {
    Specification: Specification,
    parseSpecification: parseSpecification,
    mkSpec: mkSpec,
    defaultSpec: defaultSpec,
    eqSpecification: eqSpecification
};
