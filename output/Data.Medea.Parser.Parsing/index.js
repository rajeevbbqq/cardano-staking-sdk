// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var updatePosString = function (pos$prime) {
    return function (str) {
        var updatePosChar = function (v) {
            return function (c) {
                if (c === "\x0a") {
                    return {
                        line: v.line + 1 | 0,
                        column: 1
                    };
                };
                if (c === "\x0d") {
                    return {
                        line: v.line + 1 | 0,
                        column: 1
                    };
                };
                if (c === "\x09") {
                    return {
                        line: v.line,
                        column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                    };
                };
                return {
                    line: v.line,
                    column: v.column + 1 | 0
                };
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap()(""))(str));
    };
};
var takeWhile1P = function (dictMonad) {
    return function (errormsg) {
        return function (pred) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_String_CodeUnits.toCharArray)(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                return v.value0;
            })))(function (input) {
                var result = Data_Array.takeWhile(pred)(input);
                var $17 = Data_Array.length(result) === 0;
                if ($17) {
                    return Text_Parsing_Parser.fail(dictMonad)(errormsg);
                };
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                    return new Text_Parsing_Parser.ParseState(Data_String_CodePoints.drop(Data_Array.length(result))(Data_String_CodeUnits.fromCharArray(input)), updatePosString(v.value1)(Data_String_CodeUnits.fromCharArray(result)), true);
                }))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(result);
                });
            });
        };
    };
};
var isWhitespace = (function () {
    var fromRight = function (dictPartial) {
        return function (eab) {
            if (eab instanceof Data_Either.Right) {
                return eab.value0;
            };
            throw new Error("Failed pattern match at Data.Medea.Parser.Parsing (line 54, column 19 - line 55, column 35): " + [ eab.constructor.name ]);
        };
    };
    var wsRegex = fromRight()(Data_String_Regex.regex("^\\s$")(Data_String_Regex_Flags.noFlags));
    var $24 = Data_String_Regex.test(wsRegex);
    return function ($25) {
        return $24(Data_String_CodeUnits.singleton($25));
    };
})();
var eol = function (dictMonad) {
    return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(dictMonad)("\x0a")))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(dictMonad)("\x0d\x0a"))))(Text_Parsing_Parser_String.eof(dictMonad)))(Text_Parsing_Parser.fail(dictMonad)("expected EOL"));
};
module.exports = {
    updatePosString: updatePosString,
    takeWhile1P: takeWhile1P,
    isWhitespace: isWhitespace,
    eol: eol
};
