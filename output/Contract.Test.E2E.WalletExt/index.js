// Generated by purs version 0.14.5
"use strict";
var Contract_Test_E2E_Helpers = require("../Contract.Test.E2E.Helpers/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Node_Process = require("../Node.Process/index.js");
var Record = require("../Record/index.js");
var FlintExt = (function () {
    function FlintExt() {

    };
    FlintExt.value = new FlintExt();
    return FlintExt;
})();
var NamiExt = (function () {
    function NamiExt() {

    };
    NamiExt.value = new NamiExt();
    return NamiExt;
})();
var GeroExt = (function () {
    function GeroExt() {

    };
    GeroExt.value = new GeroExt();
    return GeroExt;
})();
var LodeExt = (function () {
    function LodeExt() {

    };
    LodeExt.value = new LodeExt();
    return LodeExt;
})();
var EternlExt = (function () {
    function EternlExt() {

    };
    EternlExt.value = new EternlExt();
    return EternlExt;
})();
var WalletConfig = (function () {
    function WalletConfig(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WalletConfig.create = function (value0) {
        return function (value1) {
            return new WalletConfig(value0, value1);
        };
    };
    return WalletConfig;
})();
var SomeWallet = function (x) {
    return x;
};
var newtypeSomeWallet_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqWalletExt = {
    eq: function (x) {
        return function (y) {
            if (x instanceof FlintExt && y instanceof FlintExt) {
                return true;
            };
            if (x instanceof NamiExt && y instanceof NamiExt) {
                return true;
            };
            if (x instanceof GeroExt && y instanceof GeroExt) {
                return true;
            };
            if (x instanceof LodeExt && y instanceof LodeExt) {
                return true;
            };
            if (x instanceof EternlExt && y instanceof EternlExt) {
                return true;
            };
            return false;
        };
    }
};
var ordWalletExt = {
    compare: function (x) {
        return function (y) {
            if (x instanceof FlintExt && y instanceof FlintExt) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof FlintExt) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof FlintExt) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof NamiExt && y instanceof NamiExt) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof NamiExt) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof NamiExt) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof GeroExt && y instanceof GeroExt) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof GeroExt) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof GeroExt) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof LodeExt && y instanceof LodeExt) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof LodeExt) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof LodeExt) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof EternlExt && y instanceof EternlExt) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Contract.Test.E2E.WalletExt (line 42, column 1 - line 42, column 30): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqWalletExt;
    }
};
var walletName = function (v) {
    if (v instanceof EternlExt) {
        return "eternl";
    };
    if (v instanceof FlintExt) {
        return "flint";
    };
    if (v instanceof GeroExt) {
        return "gero";
    };
    if (v instanceof LodeExt) {
        return "lode";
    };
    if (v instanceof NamiExt) {
        return "nami";
    };
    throw new Error("Failed pattern match at Contract.Test.E2E.WalletExt (line 116, column 14 - line 121, column 20): " + [ v.constructor.name ]);
};
var readExtIdEnvVar = function (varName) {
    return function __do() {
        var mbStr = Node_Process.lookupEnv(varName)();
        return Data_Functor.map(Effect.functorEffect)(Contract_Test_E2E_Helpers.ExtensionId)(Control_Monad_Error_Class.liftMaybe(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error("Unable to get " + (varName + " environment variable")))(mbStr))();
    };
};
var getWalletByType = function (walletExt) {
    var addName = function (m) {
        return Data_Functor.mapFlipped(Effect.functorEffect)(m)((function () {
            var $16 = Data_Newtype.wrap();
            var $17 = Record.merge()()({
                name: walletName(walletExt)
            });
            return function ($18) {
                return $16($17($18));
            };
        })());
    };
    return addName((function () {
        if (walletExt instanceof EternlExt) {
            return function __do() {
                var id = readExtIdEnvVar("ETERNL_EXTID")();
                return {
                    wallet: EternlExt.value,
                    id: id,
                    confirmAccess: Contract_Test_E2E_Helpers.eternlConfirmAccess,
                    sign: Contract_Test_E2E_Helpers.eternlSign
                };
            };
        };
        if (walletExt instanceof FlintExt) {
            return function __do() {
                var id = readExtIdEnvVar("FLINT_EXTID")();
                return {
                    wallet: FlintExt.value,
                    id: id,
                    confirmAccess: Contract_Test_E2E_Helpers.flintConfirmAccess,
                    sign: Contract_Test_E2E_Helpers.flintSign
                };
            };
        };
        if (walletExt instanceof GeroExt) {
            return function __do() {
                var id = readExtIdEnvVar("GERO_EXTID")();
                return {
                    wallet: GeroExt.value,
                    id: id,
                    confirmAccess: Contract_Test_E2E_Helpers.geroConfirmAccess,
                    sign: Contract_Test_E2E_Helpers.geroSign
                };
            };
        };
        if (walletExt instanceof LodeExt) {
            return function __do() {
                var id = readExtIdEnvVar("LODE_EXTID")();
                return {
                    wallet: LodeExt.value,
                    id: id,
                    confirmAccess: Contract_Test_E2E_Helpers.lodeConfirmAccess,
                    sign: Contract_Test_E2E_Helpers.lodeSign
                };
            };
        };
        if (walletExt instanceof NamiExt) {
            return function __do() {
                var id = readExtIdEnvVar("NAMI_EXTID")();
                return {
                    wallet: NamiExt.value,
                    id: id,
                    confirmAccess: Contract_Test_E2E_Helpers.namiConfirmAccess,
                    sign: Contract_Test_E2E_Helpers.namiSign
                };
            };
        };
        throw new Error("Failed pattern match at Contract.Test.E2E.WalletExt (line 71, column 37 - line 111, column 8): " + [ walletExt.constructor.name ]);
    })());
};
var getWalletByName = function (v) {
    if (v === "eternl") {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(getWalletByType(EternlExt.value));
    };
    if (v === "flint") {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(getWalletByType(FlintExt.value));
    };
    if (v === "gero") {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(getWalletByType(GeroExt.value));
    };
    if (v === "lode") {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(getWalletByType(LodeExt.value));
    };
    if (v === "nami") {
        return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(getWalletByType(NamiExt.value));
    };
    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
};
module.exports = {
    SomeWallet: SomeWallet,
    FlintExt: FlintExt,
    GeroExt: GeroExt,
    LodeExt: LodeExt,
    NamiExt: NamiExt,
    EternlExt: EternlExt,
    WalletConfig: WalletConfig,
    getWalletByName: getWalletByName,
    getWalletByType: getWalletByType,
    walletName: walletName,
    eqWalletExt: eqWalletExt,
    ordWalletExt: ordWalletExt,
    newtypeSomeWallet_: newtypeSomeWallet_,
    ExtensionId: Contract_Test_E2E_Helpers.ExtensionId
};
