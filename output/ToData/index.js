// Generated by purs version 0.14.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ratio = require("../Data.Ratio/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_TextEncoder = require("../Data.TextEncoder/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Void = require("../Data.Void/index.js");
var Helpers = require("../Helpers/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var TypeLevel_Nat = require("../TypeLevel.Nat/index.js");
var Types_BigNum = require("../Types.BigNum/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var toDataVoid = {
    toData: Data_Void.absurd
};
var toDataUnit = {
    toData: function (v) {
        return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
    }
};
var toDataRawBytes = {
    toData: (function () {
        var $126 = Data_Newtype.unwrap();
        return function ($127) {
            return Types_PlutusData.Bytes.create($126($127));
        };
    })()
};
var toDataPlutusData = {
    toData: Control_Category.identity(Control_Category.categoryFn)
};
var toDataCborBytes = {
    toData: (function () {
        var $128 = Data_Newtype.unwrap();
        return function ($129) {
            return Types_PlutusData.Bytes.create($128($129));
        };
    })()
};
var toDataByteArray = {
    toData: Types_PlutusData.Bytes.create
};
var toDataBoolean = {
    toData: function (v) {
        if (!v) {
            return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
        };
        if (v) {
            return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [  ]);
        };
        throw new Error("Failed pattern match at ToData (line 240, column 1 - line 242, column 30): " + [ v.constructor.name ]);
    }
};
var toDataBigInt = {
    toData: Types_PlutusData.Integer.create
};
var toDataArgsRLHelperNilRow = {
    "toDataArgsRec'": function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    return [  ];
                };
            };
        };
    }
};
var toDataArgsNoArguments = function (dictIsSymbol) {
    return {
        toDataArgs: function (v) {
            return function (v1) {
                return function (v2) {
                    return [  ];
                };
            };
        },
        IsSymbol0: function () {
            return dictIsSymbol;
        }
    };
};
var toDataWithSchema = function (dict) {
    return dict.toDataWithSchema;
};
var toDataWithSchemaSum = function (dictToDataWithSchema) {
    return function (dictToDataWithSchema1) {
        return {
            toDataWithSchema: function (p) {
                return function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        return toDataWithSchema(dictToDataWithSchema)(p)(v.value0);
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        return toDataWithSchema(dictToDataWithSchema1)(p)(v.value0);
                    };
                    throw new Error("Failed pattern match at ToData (line 122, column 1 - line 128, column 54): " + [ p.constructor.name, v.constructor.name ]);
                };
            }
        };
    };
};
var toDataArgsRec$prime = function (dict) {
    return dict["toDataArgsRec'"];
};
var toDataArgsRL = function (dictToDataArgsRLHelper) {
    return {
        toDataArgsRec: function (proxy) {
            return function (constr) {
                return function (list) {
                    return function (rec) {
                        return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(toDataArgsRec$prime(dictToDataArgsRLHelper)(proxy)(constr)(list)(rec)));
                    };
                };
            };
        },
        ToDataArgsRLHelper0: function () {
            return dictToDataArgsRLHelper;
        }
    };
};
var toDataArgsRec = function (dict) {
    return dict.toDataArgsRec;
};
var toDataArgsRecord = function (dictIsSymbol) {
    return function (dictToDataArgsRL) {
        return function (dictRowToList) {
            return {
                toDataArgs: function (proxy) {
                    return function (constr) {
                        return function (rec) {
                            return toDataArgsRec(dictToDataArgsRL)(proxy)(constr)(Type_Proxy["Proxy"].value)(rec);
                        };
                    };
                },
                IsSymbol0: function () {
                    return dictIsSymbol;
                }
            };
        };
    };
};
var toDataArgs = function (dict) {
    return dict.toDataArgs;
};
var toDataArgsArgumentRecord = function (dictToDataArgs) {
    return {
        toDataArgs: function (proxy) {
            return function (constr) {
                return function (v) {
                    return toDataArgs(dictToDataArgs)(proxy)(constr)(v);
                };
            };
        },
        IsSymbol0: dictToDataArgs.IsSymbol0
    };
};
var toDataArgsProduct = function (dictToDataArgs) {
    return function (dictToDataArgs1) {
        return {
            toDataArgs: function (proxy) {
                return function (constr) {
                    return function (v) {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(toDataArgs(dictToDataArgs)(proxy)(constr)(v.value0))(toDataArgs(dictToDataArgs1)(proxy)(constr)(v.value1));
                    };
                };
            },
            IsSymbol0: dictToDataArgs.IsSymbol0
        };
    };
};
var toDataWithSchemaConstruct = function (dictIsSymbol) {
    return function (dictToDataArgs) {
        return function (dictHasPlutusSchema) {
            return function (dictValidPlutusSchema) {
                return function (dictGetIndexWithLabel) {
                    return function (dictKnownNat) {
                        return {
                            toDataWithSchema: function (p) {
                                return function (v) {
                                    return new Types_PlutusData.Constr(Data_BigInt.fromInt(TypeLevel_Nat.natVal(dictKnownNat)(Type_Proxy["Proxy"].value)), toDataArgs(dictToDataArgs)(p)(Type_Proxy["Proxy"].value)(v));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var toData = function (dict) {
    return dict.toData;
};
var toDataArgsArgument = function (dictToData) {
    return function (dictIsSymbol) {
        return {
            toDataArgs: function (v) {
                return function (v1) {
                    return function (v2) {
                        return [ toData(dictToData)(v2) ];
                    };
                };
            },
            IsSymbol0: function () {
                return dictIsSymbol;
            }
        };
    };
};
var toDataArgsRLHelperCons = function (dictToData) {
    return function (dictToDataArgsRLHelper) {
        return function (dictLacks) {
            return function (dictCons) {
                return function (dictRowToList) {
                    return function (dictIsSymbol) {
                        return function (dictIsSymbol1) {
                            return function (dictHasPlutusSchema) {
                                return function (dictValidPlutusSchema) {
                                    return function (dictGetWithLabel) {
                                        return function (dictGetLabelIndex) {
                                            return function (dictKnownNat) {
                                                return {
                                                    "toDataArgsRec'": function (v) {
                                                        return function (constr) {
                                                            return function (v1) {
                                                                return function (x) {
                                                                    var ix = TypeLevel_Nat.natVal(dictKnownNat)(Type_Proxy["Proxy"].value);
                                                                    var field = Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(x);
                                                                    return Data_Array.cons(new Data_Tuple.Tuple(ix, toData(dictToData)(field)))(toDataArgsRec$prime(dictToDataArgsRLHelper)(Type_Proxy["Proxy"].value)(constr)(Type_Proxy["Proxy"].value)(Record["delete"](dictIsSymbol)()()(Type_Proxy["Proxy"].value)(x)));
                                                                };
                                                            };
                                                        };
                                                    }
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var toDataArray = function (dictToData) {
    return {
        toData: (function () {
            var $130 = Data_Functor.map(Data_Functor.functorArray)(toData(dictToData));
            return function ($131) {
                return Types_PlutusData.List.create($130($131));
            };
        })()
    };
};
var toDataBigNum = {
    toData: (function () {
        var $132 = toData(toDataBigInt);
        return function ($133) {
            return $132(Types_BigNum.toBigIntUnsafe($133));
        };
    })()
};
var toDataEither = function (dictToData) {
    return function (dictToData1) {
        return {
            toData: function (v) {
                if (v instanceof Data_Either.Left) {
                    return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ toData(dictToData)(v.value0) ]);
                };
                if (v instanceof Data_Either.Right) {
                    return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [ toData(dictToData1)(v.value0) ]);
                };
                throw new Error("Failed pattern match at ToData (line 248, column 1 - line 250, column 45): " + [ v.constructor.name ]);
            }
        };
    };
};
var toDataInt = function (dictFail) {
    return {
        toData: (function () {
            var $134 = toData(toDataBigInt);
            return function ($135) {
                return $134(Data_BigInt.fromInt($135));
            };
        })()
    };
};
var toDataMaybe = function (dictToData) {
    return {
        toData: function (v) {
            if (v instanceof Data_Maybe.Just) {
                return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ toData(dictToData)(v.value0) ]);
            };
            if (v instanceof Data_Maybe.Nothing) {
                return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [  ]);
            };
            throw new Error("Failed pattern match at ToData (line 244, column 1 - line 246, column 33): " + [ v.constructor.name ]);
        }
    };
};
var toDataRatio = function (dictToData) {
    return {
        toData: function (ratio) {
            return new Types_PlutusData.List([ toData(dictToData)(Data_Ratio.numerator(ratio)), toData(dictToData)(Data_Ratio.denominator(ratio)) ]);
        }
    };
};
var toDataString = {
    toData: (function () {
        var $136 = toData(toDataByteArray);
        return function ($137) {
            return $136(Types_ByteArray.ByteArray(Data_TextEncoder.encodeUtf8($137)));
        };
    })()
};
var toDataTuple = function (dictToData) {
    return function (dictToData1) {
        return {
            toData: function (v) {
                return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ toData(dictToData)(v.value0), toData(dictToData1)(v.value1) ]);
            }
        };
    };
};
var toDataUInt = {
    toData: (function () {
        var $138 = toData(toDataBigInt);
        return function ($139) {
            return $138(Helpers.uIntToBigInt($139));
        };
    })()
};
var genericToData = function (dictGeneric) {
    return function (dictToDataWithSchema) {
        var $140 = toDataWithSchema(dictToDataWithSchema)(Type_Proxy["Proxy"].value);
        var $141 = Data_Generic_Rep.from(dictGeneric);
        return function ($142) {
            return $140($141($142));
        };
    };
};
var foldableToPlutusData = function (dictFoldable) {
    return function (dictToData) {
        var $143 = Data_Functor.map(Data_Functor.functorArray)(toData(dictToData));
        var $144 = Data_Array.fromFoldable(dictFoldable);
        return function ($145) {
            return Types_PlutusData.List.create($143($144($145)));
        };
    };
};
var toDataList = function (dictToData) {
    return {
        toData: foldableToPlutusData(Data_List_Types.foldableList)(dictToData)
    };
};
var toDataNonEmpty = function (dictFoldable) {
    return function (dictToData) {
        return {
            toData: foldableToPlutusData(Data_NonEmpty.foldableNonEmpty(dictFoldable))(dictToData)
        };
    };
};
module.exports = {
    genericToData: genericToData,
    toDataArgsRec: toDataArgsRec,
    "toDataArgsRec'": toDataArgsRec$prime,
    toData: toData,
    toDataArgs: toDataArgs,
    toDataWithSchema: toDataWithSchema,
    toDataArgsRL: toDataArgsRL,
    toDataWithSchemaSum: toDataWithSchemaSum,
    toDataWithSchemaConstruct: toDataWithSchemaConstruct,
    toDataArgsNoArguments: toDataArgsNoArguments,
    toDataArgsArgumentRecord: toDataArgsArgumentRecord,
    toDataArgsArgument: toDataArgsArgument,
    toDataArgsRecord: toDataArgsRecord,
    toDataArgsProduct: toDataArgsProduct,
    toDataArgsRLHelperNilRow: toDataArgsRLHelperNilRow,
    toDataArgsRLHelperCons: toDataArgsRLHelperCons,
    toDataVoid: toDataVoid,
    toDataUnit: toDataUnit,
    toDataBoolean: toDataBoolean,
    toDataMaybe: toDataMaybe,
    toDataEither: toDataEither,
    toDataInt: toDataInt,
    toDataBigInt: toDataBigInt,
    toDataBigNum: toDataBigNum,
    toDataUInt: toDataUInt,
    toDataArray: toDataArray,
    toDataNonEmpty: toDataNonEmpty,
    toDataList: toDataList,
    toDataTuple: toDataTuple,
    toDataRatio: toDataRatio,
    toDataByteArray: toDataByteArray,
    toDataCborBytes: toDataCborBytes,
    toDataRawBytes: toDataRawBytes,
    toDataString: toDataString,
    toDataPlutusData: toDataPlutusData
};
