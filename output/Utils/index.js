// Generated by purs version 0.14.5
"use strict";
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Chain = require("../Contract.Chain/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_ScriptLookups = require("../Contract.ScriptLookups/index.js");
var Contract_Time = require("../Contract.Time/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Combinators = require("../Data.Argonaut.Decode.Combinators/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Log_Tag = require("../Data.Log.Tag/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var FromData = require("../FromData/index.js");
var Hashing = require("../Hashing/index.js");
var Helpers = require("../Helpers/index.js");
var IsData = require("../IsData/index.js");
var $$Math = require("../Math/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_CurrencySymbol = require("../Plutus.Types.CurrencySymbol/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var Record = require("../Record/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Chain = require("../Types.Chain/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_OutputDatum = require("../Types.OutputDatum/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var toIntUnsafe = (function () {
    var $120 = Data_Maybe.fromMaybe(0);
    return function ($121) {
        return $120(Data_BigInt.toInt(Types_Natural.toBigInt($121)));
    };
})();
var splitByLength = function (size) {
    return function (array) {
        if (size === 0 || Data_Foldable["null"](Data_Foldable.foldableArray)(array)) {
            return [  ];
        };
        if (Data_Boolean.otherwise) {
            var sublistCount = (function () {
                var $30 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size) === 0;
                if ($30) {
                    return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size) - 1 | 0;
                };
                return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size);
            })();
            return Data_Functor.map(Data_Functor.functorArray)(function (i) {
                return Data_Array.slice(i * size | 0)((i * size | 0) + size | 0)(array);
            })(Data_Array.range(0)(sublistCount));
        };
        throw new Error("Failed pattern match at Utils (line 477, column 1 - line 477, column 71): " + [ size.constructor.name, array.constructor.name ]);
    };
};
var roundUp = function (r) {
    var n = Types_Rational.numerator(r);
    var d = Types_Rational.denominator(r);
    var $31 = Data_Eq.eq(Data_BigInt.eqBigInt)(d)(Data_Semiring.one(Data_BigInt.semiringBigInt));
    if ($31) {
        return n;
    };
    return Data_BigInt.quot(Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(n)(d))(Data_BigInt.rem(n)(d)))(d);
};
var roundDown = function (r) {
    var n = Types_Rational.numerator(r);
    var d = Types_Rational.denominator(r);
    return Data_BigInt.quot(Data_Ring.sub(Data_BigInt.ringBigInt)(n)(Data_BigInt.rem(n)(d)))(d);
};
var nat = function ($122) {
    return Types_Natural["fromBigInt'"](Data_BigInt.fromInt($122));
};
var mustPayToScript = function (vh) {
    return function (dat) {
        return Types_TxConstraints.mustPayToScript(vh)(dat)(Types_TxConstraints.DatumWitness.value);
    };
};
var mkRatUnsafe = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return Data_Semiring.zero(Types_Rational.semiringRational);
    };
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    throw new Error("Failed pattern match at Utils (line 253, column 1 - line 253, column 42): " + [ v.constructor.name ]);
};
var mkBondedPoolParams = function (admin) {
    return function (nftCs) {
        return function (assocListCs) {
            return function (v) {
                return {
                    iterations: v.iterations,
                    start: v.start,
                    end: v.end,
                    userLength: v.userLength,
                    bondingLength: v.bondingLength,
                    interest: v.interest,
                    minStake: v.minStake,
                    maxStake: v.maxStake,
                    admin: admin,
                    bondedAssetClass: v.bondedAssetClass,
                    nftCs: nftCs,
                    assocListCs: assocListCs
                };
            };
        };
    };
};
var mkAssetUtxosConstraints = function (utxos) {
    return function (redeemer) {
        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)(function (v) {
            return Types_TxConstraints.mustSpendScriptOutput(v.value0)(redeemer);
        })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos));
    };
};
var logInfo_ = function (dictShow) {
    return function (k) {
        var $123 = Data_Function.flip(Contract_Log.logInfo(Contract_Monad.monadLoggerContract))(Data_Monoid.mempty(Data_Monoid.monoidString));
        var $124 = Data_Log_Tag.tag(k);
        var $125 = Data_Show.show(dictShow);
        return function ($126) {
            return $123($124($125($126)));
        };
    };
};
var repeatUntilConfirmed = function (dictLacks) {
    return function (dictLacks1) {
        return function (timeout) {
            return function (maxTrials) {
                return function (contract) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(contract)(function (v) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction built successfully"))(function () {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Transaction.submit(v.signedTx))(function (txHash) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction submitted. Waiting for confirmation"))(function () {
                                    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class["try"](Contract_Monad.monadErrorErrorContract)(Contract_Transaction.awaitTxConfirmedWithTimeout(timeout)(txHash)))(function (confirmation) {
                                        if (confirmation instanceof Data_Either.Left) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: timeout reached, the transaction was not confirmed"))(function () {
                                                var $43 = maxTrials === 0;
                                                if ($43) {
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: no more trials remaining, throwing exception..."))(function () {
                                                        return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Failed to submit transaction"));
                                                    });
                                                };
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: running transaction again, " + (Data_Show.show(Data_Show.showInt)(maxTrials) + " trials remaining")))(function () {
                                                    return repeatUntilConfirmed()()(timeout)(maxTrials - 1 | 0)(contract);
                                                });
                                            });
                                        };
                                        if (confirmation instanceof Data_Either.Right) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction confirmed!"))(function () {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(logInfo_(Types_Transaction.showTransactionHash)("TX Hash")(txHash))(function () {
                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Record.insert({
                                                        reflectSymbol: function () {
                                                            return "txId";
                                                        }
                                                    })()()(Data_Symbol.SProxy.value)(Types_ByteArray.byteArrayToHex(Data_Newtype.unwrap()(txHash)))(Record["delete"]({
                                                        reflectSymbol: function () {
                                                            return "signedTx";
                                                        }
                                                    })()()(Data_Symbol.SProxy.value)(v)));
                                                });
                                            });
                                        };
                                        throw new Error("Failed pattern match at Utils (line 552, column 3 - line 570, column 54): " + [ confirmation.constructor.name ]);
                                    });
                                });
                            });
                        });
                    });
                };
            };
        };
    };
};
var submitTransaction = function (baseConstraints) {
    return function (baseLookups) {
        return function (updateList) {
            return function (timeout) {
                return function (maxAttempts) {
                    var lookupList = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(updateList);
                    var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(baseLookups)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)(lookupList));
                    var constraintList = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(updateList);
                    var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(baseConstraints)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)(constraintList));
                    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class["try"](Contract_Monad.monadErrorErrorContract)(repeatUntilConfirmed()()(timeout)(maxAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(lookups)(constraints)))(function (unattachedBalancedTx) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("submitTransaction: Cannot balance, reindex redeemers, /attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                    signedTx: signedTx
                                });
                            });
                        });
                    }))))(function (result) {
                        if (result instanceof Data_Either.Left) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(logInfo_(Effect_Exception.showError)("submitTransaction:")(result.value0))(function () {
                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(updateList);
                            });
                        };
                        if (result instanceof Data_Either.Right) {
                            return Control_Applicative.pure(Contract_Monad.applicativeContract)([  ]);
                        };
                        throw new Error("Failed pattern match at Utils (line 525, column 5 - line 530, column 16): " + [ result.constructor.name ]);
                    });
                };
            };
        };
    };
};
var jsonReader = function (field) {
    return Data_Argonaut_Core.caseJsonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")))(function (o) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)(field))(function (hex) {
            var v = Types_ByteArray.hexToByteArray(hex);
            if (v instanceof Data_Maybe.Nothing) {
                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Could not convert to bytes"));
            };
            if (v instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(Types_Scripts.plutusV1Script(v.value0));
            };
            throw new Error("Failed pattern match at Utils (line 162, column 5 - line 164, column 48): " + [ v.constructor.name ]);
        });
    });
};
var hashPkh = (function () {
    var $127 = Control_Applicative.pure(Effect_Aff.applicativeAff);
    var $128 = Data_Newtype.unwrap();
    var $129 = Data_Newtype.unwrap();
    var $130 = Data_Newtype.unwrap();
    return function ($131) {
        return $127(Hashing.blake2b256Hash($128(Serialization_Hash.ed25519KeyHashToBytes($129($130($131))))));
    };
})();
var getUtxoWithNFT = function (utxoM) {
    return function (cs) {
        return function (tn) {
            var hasNFT = function (v) {
                var txOutput = Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.value1)).output);
                return Data_Eq.eq(Data_BigInt.eqBigInt)(Plutus_Types_Value.valueOf(txOutput.amount)(cs)(tn))(Data_Semiring.one(Data_BigInt.semiringBigInt));
            };
            var utxos = Data_Array.filter(hasNFT)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxoM));
            var $55 = Data_Array.length(utxos) > 1;
            if ($55) {
                return Data_Maybe.Nothing.value;
            };
            return Data_Array.head(utxos);
        };
    };
};
var getUtxoDatumHash = (function () {
    var $132 = Data_Newtype.unwrap();
    var $133 = Data_Newtype.unwrap();
    return function ($134) {
        return (function (v) {
            if (v instanceof Types_OutputDatum.OutputDatumHash) {
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0);
            };
            return Data_Maybe.Nothing.value;
        })((function (v) {
            return v.datum;
        })($132((function (v) {
            return v.output;
        })($133($134)))));
    };
})();
var getAssetsToConsume = function (v) {
    return function (withdrawAmt) {
        return function (assetUtxos) {
            var go = function (arr) {
                return function (toConsume) {
                    return function (sum) {
                        if (Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(sum)(withdrawAmt)) {
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(toConsume, Data_Ring.sub(Data_BigInt.ringBigInt)(sum)(withdrawAmt)));
                        };
                        if (Data_Foldable["null"](Data_Foldable.foldableArray)(arr)) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(arr))(function (v1) {
                                return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.tail(arr))(function (arr$prime) {
                                    var toConsume$prime = Data_Map_Internal.insert(Types_Transaction.ordTransactionInput)(v1.value0)(v1.value1)(toConsume);
                                    var assetCount = Plutus_Types_Value.valueOf((Data_Newtype.unwrap()((Data_Newtype.unwrap()(v1.value1)).output)).amount)(v.currencySymbol)(v.tokenName);
                                    var sum$prime = Data_Semiring.add(Data_BigInt.semiringBigInt)(sum)(assetCount);
                                    return go(arr$prime)(toConsume$prime)(sum$prime);
                                });
                            });
                        };
                        throw new Error("Failed pattern match at Utils (line 200, column 3 - line 204, column 33): " + [ arr.constructor.name, toConsume.constructor.name, sum.constructor.name ]);
                    };
                };
            };
            var assetList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(assetUtxos);
            return go(assetList)(Data_Map_Internal.empty)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
        };
    };
};
var findRemoveOtherElem = function (assocList) {
    return function (hashedKey) {
        var v = Data_Array.partition((function () {
            var $135 = Data_Ord.lessThan(Types_ByteArray.ordByteArray)(hashedKey);
            return function ($136) {
                return $135(Data_Tuple.fst($136));
            };
        })())(assocList);
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(v.yes))(function (v1) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(v.no))(function (v2) {
                var $70 = Data_Eq.notEq(Types_ByteArray.eqByteArray)(v2.value0)(hashedKey);
                if ($70) {
                    return Data_Maybe.Nothing.value;
                };
                return Data_Maybe.Just.create(new Data_Tuple.Tuple({
                    firstInput: v1.value1.value0,
                    secondInput: v2.value1.value0
                }, new Data_Tuple.Tuple({
                    firstOutput: v1.value1.value1,
                    secondOutput: v2.value1.value1
                }, {
                    firstKey: v1.value0,
                    secondKey: v2.value0
                })));
            });
        });
    };
};
var findInsertUpdateElem = function (assocList) {
    return function (hashedKey) {
        var v = Data_Array.partition((function () {
            var $137 = Data_Ord.greaterThanOrEq(Types_ByteArray.ordByteArray)(hashedKey);
            return function ($138) {
                return $137(Data_Tuple.fst($138));
            };
        })())(assocList);
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(v.yes))(function (v1) {
            var $83 = Data_Array.length(v.no) === 0;
            if ($83) {
                var mintingAction = (function () {
                    var $84 = Data_Eq.eq(Types_ByteArray.eqByteArray)(v1.value0)(hashedKey);
                    if ($84) {
                        return Data_Maybe.Nothing.value;
                    };
                    return Data_Maybe.Just.create(new Types.MintEnd(v1.value1.value0));
                })();
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(mintingAction, new Data_Tuple.Tuple({
                    firstInput: v1.value1.value0,
                    secondInput: Data_Maybe.Nothing.value
                }, new Data_Tuple.Tuple({
                    firstOutput: v1.value1.value1,
                    secondOutput: Data_Maybe.Nothing.value
                }, {
                    firstKey: v1.value0,
                    secondKey: Data_Maybe.Nothing.value
                }))));
            };
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(v.no))(function (v2) {
                var mintingAction = (function () {
                    var $86 = Data_Eq.eq(Types_ByteArray.eqByteArray)(v1.value0)(hashedKey);
                    if ($86) {
                        return Data_Maybe.Nothing.value;
                    };
                    return Data_Maybe.Just.create(new Types.MintInBetween(v1.value1.value0, v2.value1.value0));
                })();
                return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(mintingAction, new Data_Tuple.Tuple({
                    firstInput: v1.value1.value0,
                    secondInput: new Data_Maybe.Just(v2.value1.value0)
                }, new Data_Tuple.Tuple({
                    firstOutput: v1.value1.value1,
                    secondOutput: new Data_Maybe.Just(v2.value1.value1)
                }, {
                    firstKey: v1.value0,
                    secondKey: new Data_Maybe.Just(v2.value0)
                }))));
            });
        });
    };
};
var currentTime = Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Chain.getTip)(function (v) {
    if (v instanceof Types_Chain.Tip) {
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(v.value0);
    };
    if (v instanceof Types_Chain.TipAtGenesis) {
        return Contract_Monad.throwContractError(Data_Show.showString)("currentTime: node returned TipAtGenesis");
    };
    throw new Error("Failed pattern match at Utils (line 436, column 35 - line 438, column 81): " + [ v.constructor.name ]);
}))(function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getEraSummaries)(function (es) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getSystemStart)(function (ss) {
            return Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
                var $139 = Helpers.liftEither(Contract_Monad.monadErrorErrorContract);
                var $140 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)((function () {
                    var $142 = Data_Show.show(Types_Interval.showSlotToPosixTimeError);
                    return function ($143) {
                        return Effect_Exception.error($142($143));
                    };
                })());
                return function ($141) {
                    return $139($140($141));
                };
            })())(Effect_Class.liftEffect(Contract_Monad.monadEffectContract))(Types_Interval.slotToPosixTime(es)(ss)(v.slot));
        });
    });
});
var currentRoundedTime = Control_Bind.bind(Contract_Monad.bindContract)(currentTime)(function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("currentRoundedTime: could not convert Number to BigInt"))(Data_BigInt.fromNumber($$Math.ceil(Data_BigInt.toNumber(v) / 1000.0) * 1000.0)))(function (t$prime) {
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(t$prime);
    });
});
var countdownTo = function (targetTime) {
    var wait = function (n) {
        return Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Effect_Aff.delay((function () {
            var $102 = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(n)(Data_BigInt.fromInt(5000));
            if ($102) {
                return 5000.0;
            };
            return Data_Time_Duration.Milliseconds(Data_BigInt.toNumber(n));
        })()));
    };
    var timeChanged = function (prevTime) {
        return function (currTime) {
            return Data_Maybe.maybe(true)(function (v) {
                return Data_Eq.notEq(Types_Interval.eqPOSIXTime)(v)(currTime);
            })(prevTime);
        };
    };
    var showSeconds = function (n) {
        return Data_Show.show(Data_Show.showNumber)(Data_BigInt.toNumber(n) / 1000.0);
    };
    var countdownTo$prime = function (prevTime) {
        return Control_Bind.bind(Contract_Monad.bindContract)(currentTime)(function (currTime) {
            var delta = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Newtype.unwrap()(targetTime))(Data_Newtype.unwrap()(currTime));
            var msg = "Countdown: " + showSeconds(delta);
            var $103 = Data_Ord.greaterThanOrEq(Types_Interval.ordPOSIXTime)(currTime)(targetTime);
            if ($103) {
                return Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("GO");
            };
            var $104 = timeChanged(prevTime)(currTime);
            if ($104) {
                return Control_Apply.applySecond(Contract_Monad.applyContract)(Control_Apply.applySecond(Contract_Monad.applyContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)(msg))(wait(delta)))(countdownTo$prime(new Data_Maybe.Just(currTime)));
            };
            return Control_Apply.applySecond(Contract_Monad.applyContract)(wait(delta))(countdownTo$prime(new Data_Maybe.Just(currTime)));
        });
    };
    return countdownTo$prime(Data_Maybe.Nothing.value);
};
var compareBytes = function (v) {
    return function (v1) {
        return Data_Ord.compare(Types_ByteArray.ordByteArray)(v.value0)(v1.value0);
    };
};
var mkOnchainAssocList = function (assocListCs) {
    return function (utxos) {
        var getAssocListUtxos = function (v) {
            var val = Plutus_Types_Value.flattenNonAdaAssets((Data_Newtype.unwrap()(v.value1.output)).amount);
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(val))(function (v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(Data_Array.length(val) === 1 && (Data_Eq.eq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v1.value0)(assocListCs) && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value1.value1)(Data_Semiring.one(Data_BigInt.semiringBigInt)))))(function () {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Types_TokenName.getTokenName(v1.value1.value0), v));
                });
            });
        };
        return Data_Array.sortBy(compareBytes)(Data_Array.mapMaybe(getAssocListUtxos)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos)));
    };
};
var bigIntRange = function (lim) {
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (acc) {
        var $119 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(acc)(lim);
        if ($119) {
            return Data_Maybe.Nothing.value;
        };
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(acc, Data_Semiring.add(Data_BigInt.semiringBigInt)(acc)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
    })(Data_Semiring.zero(Data_BigInt.semiringBigInt));
};
var big = Data_BigInt.fromInt;
var addressFromBech32 = function (str) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("addressFromBech32: unable to read address")(Serialization_Address.addressFromBech32(str)))(function (cslAddress) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("addressFromBech32: unable to convert to plutus address")(Plutus_Conversion_Address.toPlutusAddress(cslAddress)))(function (address) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Eq.notEq(Serialization_Address.eqNetworkId)(networkId)(Serialization_Address.addressNetworkId(cslAddress)))(Control_Monad_Error_Class.throwError(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("addressFromBech32: address has wrong NetworkId"))))(function () {
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(address);
                });
            });
        });
    });
};
module.exports = {
    big: big,
    bigIntRange: bigIntRange,
    currentRoundedTime: currentRoundedTime,
    currentTime: currentTime,
    countdownTo: countdownTo,
    findInsertUpdateElem: findInsertUpdateElem,
    findRemoveOtherElem: findRemoveOtherElem,
    getAssetsToConsume: getAssetsToConsume,
    getUtxoWithNFT: getUtxoWithNFT,
    hashPkh: hashPkh,
    jsonReader: jsonReader,
    logInfo_: logInfo_,
    mkAssetUtxosConstraints: mkAssetUtxosConstraints,
    mkBondedPoolParams: mkBondedPoolParams,
    mkOnchainAssocList: mkOnchainAssocList,
    mkRatUnsafe: mkRatUnsafe,
    nat: nat,
    roundDown: roundDown,
    roundUp: roundUp,
    splitByLength: splitByLength,
    submitTransaction: submitTransaction,
    toIntUnsafe: toIntUnsafe,
    repeatUntilConfirmed: repeatUntilConfirmed,
    mustPayToScript: mustPayToScript,
    getUtxoDatumHash: getUtxoDatumHash,
    addressFromBech32: addressFromBech32
};
