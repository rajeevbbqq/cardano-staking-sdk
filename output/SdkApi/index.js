// Generated by purs version 0.14.5
"use strict";
var ClosePool = require("../ClosePool/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Promise = require("../Control.Promise/index.js");
var CreatePool = require("../CreatePool/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Log_Level = require("../Data.Log.Level/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var DepositPool = require("../DepositPool/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Helpers = require("../Helpers/index.js");
var Plutus_Types_CurrencySymbol = require("../Plutus.Types.CurrencySymbol/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_NatRatio = require("../Types.NatRatio/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var Types_RawBytes = require("../Types.RawBytes/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var UnbondedStaking_ClosePool = require("../UnbondedStaking.ClosePool/index.js");
var UnbondedStaking_CreatePool = require("../UnbondedStaking.CreatePool/index.js");
var UnbondedStaking_DepositPool = require("../UnbondedStaking.DepositPool/index.js");
var UnbondedStaking_UserStake = require("../UnbondedStaking.UserStake/index.js");
var UnbondedStaking_UserWithdraw = require("../UnbondedStaking.UserWithdraw/index.js");
var UserStake = require("../UserStake/index.js");
var UserWithdraw = require("../UserWithdraw/index.js");
var Utils = require("../Utils/index.js");
var Wallet_Spec = require("../Wallet.Spec/index.js");
var toSdkInterest = function (i) {
    return {
        numerator: Types_Rational.numerator(i),
        denominator: Types_Rational.denominator(i)
    };
};
var toSdkCurrencySymbol = function ($41) {
    return Types_ByteArray.byteArrayToHex(Plutus_Types_CurrencySymbol.getCurrencySymbol($41));
};
var toSdkAssetClass = function (v) {
    var tokenNameAscii = (function (dictPartial) {
        var $42 = Data_Maybe.fromJust();
        var $43 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_CodeUnits.fromCharArray);
        var $44 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Char.fromCharCode);
        return function ($45) {
            return $42($43($44(Types_ByteArray.byteArrayToIntArray(Types_TokenName.getTokenName($45)))));
        };
    })();
    return {
        currencySymbol: Types_ByteArray.byteArrayToHex(Plutus_Types_CurrencySymbol.getCurrencySymbol(v.currencySymbol)),
        tokenName: tokenNameAscii(v.tokenName)
    };
};
var toSdkAdmin = (function () {
    var $46 = Data_Newtype.unwrap();
    var $47 = Data_Newtype.unwrap();
    return function ($48) {
        return Types_RawBytes.rawBytesToHex(Serialization_Hash.ed25519KeyHashToBytes($46($47($48))));
    };
})();
var toUnbondedPoolArgs = function (v) {
    return {
        start: v.start,
        userLength: v.userLength,
        adminLength: v.adminLength,
        bondingLength: v.bondingLength,
        interestLength: v.interestLength,
        increments: Types_Natural.toBigInt(v.increments),
        interest: toSdkInterest(v.interest),
        minStake: Types_Natural.toBigInt(v.minStake),
        maxStake: Types_Natural.toBigInt(v.maxStake),
        admin: toSdkAdmin(v.admin),
        unbondedAssetClass: toSdkAssetClass(v.unbondedAssetClass),
        nftCs: toSdkCurrencySymbol(v.nftCs),
        assocListCs: toSdkCurrencySymbol(v.assocListCs)
    };
};
var toBondedPoolArgs = function (v) {
    return {
        iterations: Types_Natural.toBigInt(v.iterations),
        start: v.start,
        end: v.end,
        userLength: v.userLength,
        bondingLength: v.bondingLength,
        interest: toSdkInterest(v.interest),
        minStake: Types_Natural.toBigInt(v.minStake),
        maxStake: Types_Natural.toBigInt(v.maxStake),
        bondedAssetClass: toSdkAssetClass(v.bondedAssetClass),
        admin: toSdkAdmin(v.admin),
        nftCs: toSdkCurrencySymbol(v.nftCs),
        assocListCs: toSdkCurrencySymbol(v.assocListCs)
    };
};
var fromSdkWalletSpec = function (v) {
    if (v === "Nami") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToNami.value);
    };
    if (v === "Gero") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToGero.value);
    };
    if (v === "Flint") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToFlint.value);
    };
    if (v === "Lode") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToLode.value);
    };
    if (v === "Eternl") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToEternl.value);
    };
    return Data_Either.Left.create(Effect_Exception.error("Invalid `WalletSpec`: " + v));
};
var fromSdkPath = function (v) {
    if (v === "") {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(v);
};
var fromSdkServerConfig = function (serviceName) {
    return function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Effect_Exception.error("invalid " + (serviceName + " port number")))(Data_UInt["fromNumber'"](v.port)))(function (port) {
            return Control_Applicative.pure(Data_Either.applicativeEither)({
                port: port,
                host: v.host,
                path: fromSdkPath(v.path),
                secure: v.secure
            });
        });
    };
};
var fromSdkNat = function (context) {
    return function (name) {
        return function (bint) {
            var msg = context + (": Could not convert " + (name + " to `Natural`"));
            return Data_Either.note(Effect_Exception.error(msg))(Types_Natural.fromBigInt(bint));
        };
    };
};
var fromSdkLogLevel = function (v) {
    if (v === "Trace") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Trace.value);
    };
    if (v === "Debug") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Debug.value);
    };
    if (v === "Info") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Info.value);
    };
    if (v === "Warn") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Warn.value);
    };
    if (v === "Error") {
        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level["Error"].value);
    };
    return Data_Either.Left.create(Effect_Exception.error("Invalid `LogLevel`: " + v));
};
var fromSdkInterest = function (context) {
    return function (v) {
        var msg = context + ": invalid `Rational`";
        return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat(context)("interest numerator")(v.numerator))(function (interestNum) {
            return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat(context)("interest denominator")(v.denominator))(function (interestDen) {
                return Data_Either.note(Effect_Exception.error(msg))(Data_Functor.map(Data_Maybe.functorMaybe)(Types_NatRatio.toRational)(Types_NatRatio.fromNaturals(interestNum)(interestDen)));
            });
        });
    };
};
var fromSdkAdmin = function (context) {
    return function (admin) {
        var msg = context + ": invalid admin";
        return Data_Either.note(Effect_Exception.error(msg))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
            var $49 = Data_Newtype.wrap();
            var $50 = Data_Newtype.wrap();
            return function ($51) {
                return $49($50($51));
            };
        })())(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Serialization_Hash.ed25519KeyHashFromBytes)(Types_RawBytes.hexToRawBytes(admin))));
    };
};
var errorWithMsg = function (context) {
    return function (name) {
        return Effect_Exception.error(context + (": invalid " + name));
    };
};
var fromSdkCurrencySymbol = function (context) {
    return function (currencySymbol) {
        return Data_Either.note(errorWithMsg(context)("`CurrencySymbol`"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Plutus_Types_CurrencySymbol.mkCurrencySymbol)(Types_ByteArray.hexToByteArray(currencySymbol)));
    };
};
var fromSdkTokenName = function (context) {
    return function (tokenName) {
        return Data_Either.note(errorWithMsg(context)("`TokenName`"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii(tokenName)));
    };
};
var fromSdkAssetClass = function (context) {
    return function (v) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
            return function (v2) {
                return {
                    currencySymbol: v1,
                    tokenName: v2
                };
            };
        })(fromSdkCurrencySymbol(context)(v.currencySymbol)))(fromSdkTokenName(context)(v.tokenName)));
    };
};
var fromBondedPoolArgs = function (bpa) {
    var fromSdkNat$prime = function (name) {
        return fromSdkNat("fromBondedPoolArgs")(name);
    };
    return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("iterations")(bpa.iterations))(function (iterations) {
        return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromBondedPoolArgs")(bpa.interest))(function (interest) {
            return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(bpa.minStake))(function (minStake) {
                return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(bpa.maxStake))(function (maxStake) {
                    return Control_Bind.bind(Data_Either.bindEither)(fromSdkAdmin("fromBondedPoolArgs")(bpa.admin))(function (admin) {
                        return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromBondedPoolArgs")(bpa.bondedAssetClass))(function (bondedAssetClass) {
                            return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromBondedPoolArgs")(bpa.nftCs))(function (nftCs) {
                                return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromBondedPoolArgs")(bpa.assocListCs))(function (assocListCs) {
                                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                        iterations: iterations,
                                        start: bpa.start,
                                        end: bpa.end,
                                        userLength: bpa.userLength,
                                        bondingLength: bpa.bondingLength,
                                        interest: interest,
                                        minStake: minStake,
                                        maxStake: maxStake,
                                        admin: admin,
                                        bondedAssetClass: bondedAssetClass,
                                        nftCs: nftCs,
                                        assocListCs: assocListCs
                                    }));
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
var fromInitialBondedArgs = function (iba) {
    var fromSdkNat$prime = function (name) {
        return fromSdkNat("fromInitialBondedArgs")(name);
    };
    return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("iteration")(iba.iterations))(function (iterations) {
        return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromInitialBondedArgs")(iba.interest))(function (interest) {
            return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(iba.minStake))(function (minStake) {
                return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(iba.maxStake))(function (maxStake) {
                    return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromInitialBondedArgs")(iba.bondedAssetClass))(function (bondedAssetClass) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                            iterations: iterations,
                            start: iba.start,
                            end: iba.end,
                            userLength: iba.userLength,
                            bondingLength: iba.bondingLength,
                            interest: interest,
                            minStake: minStake,
                            maxStake: maxStake,
                            bondedAssetClass: bondedAssetClass
                        }));
                    });
                });
            });
        });
    });
};
var fromInitialUnbondedArgs = function (iba) {
    var fromSdkNat$prime = function (name) {
        return fromSdkNat("fromInitialUnbondedArgs")(name);
    };
    return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromInitialUnbondedArgs")(iba.interest))(function (interest) {
        return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("increments")(iba.increments))(function (increments) {
            return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(iba.minStake))(function (minStake) {
                return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(iba.maxStake))(function (maxStake) {
                    return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromInitialUnbondedArgs")(iba.unbondedAssetClass))(function (unbondedAssetClass) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                            start: iba.start,
                            userLength: iba.userLength,
                            adminLength: iba.adminLength,
                            bondingLength: iba.bondingLength,
                            interestLength: iba.interestLength,
                            interest: interest,
                            increments: increments,
                            minStake: minStake,
                            maxStake: maxStake,
                            unbondedAssetClass: unbondedAssetClass
                        }));
                    });
                });
            });
        });
    });
};
var fromUnbondedPoolArgs = function (upa) {
    var fromSdkNat$prime = function (name) {
        return fromSdkNat("fromUnbondedPoolArgs")(name);
    };
    return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromUnbondedPoolArgs")(upa.interest))(function (interest) {
        return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(upa.minStake))(function (minStake) {
            return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(upa.maxStake))(function (maxStake) {
                return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("increments")(upa.increments))(function (increments) {
                    return Control_Bind.bind(Data_Either.bindEither)(fromSdkAdmin("fromUnbondedPoolArgs")(upa.admin))(function (admin) {
                        return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromUnbondedPoolArgs")(upa.unbondedAssetClass))(function (unbondedAssetClass) {
                            return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromUnbondedPoolArgs")(upa.nftCs))(function (nftCs) {
                                return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromUnbondedPoolArgs")(upa.assocListCs))(function (assocListCs) {
                                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                        start: upa.start,
                                        userLength: upa.userLength,
                                        adminLength: upa.adminLength,
                                        bondingLength: upa.bondingLength,
                                        interestLength: upa.interestLength,
                                        increments: increments,
                                        interest: interest,
                                        minStake: minStake,
                                        maxStake: maxStake,
                                        admin: admin,
                                        unbondedAssetClass: unbondedAssetClass,
                                        nftCs: nftCs,
                                        assocListCs: assocListCs
                                    }));
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
var callWithArgs = function (f) {
    return function (contract) {
        return function (cfg) {
            return function (args) {
                return Control_Promise.fromAff(Control_Bind.bindFlipped(Effect_Aff.bindAff)((function () {
                    var $52 = Contract_Monad.runContract(cfg);
                    return function ($53) {
                        return $52(contract($53));
                    };
                })())(Helpers.liftEither(Effect_Aff.monadErrorAff)(f(args))));
            };
        };
    };
};
var callWithBondedPoolArgs = function (contract) {
    return function (cfg) {
        return callWithArgs(fromBondedPoolArgs)(contract)(cfg);
    };
};
var callWithUnbondedPoolArgs = function (contract) {
    return function (cfg) {
        return callWithArgs(fromUnbondedPoolArgs)(contract)(cfg);
    };
};
var callUserWithdrawUnbondedPool = callWithUnbondedPoolArgs(UnbondedStaking_UserWithdraw.userWithdrawUnbondedPoolContract);
var callUserWithdrawBondedPool = callWithBondedPoolArgs(UserWithdraw.userWithdrawBondedPoolContract);
var callUserStakeUnbondedPool = function (cfg) {
    return function (upa) {
        return function (bi) {
            return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callUserStakeUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                    return UnbondedStaking_UserStake.userStakeUnbondedPoolContract(upp)(nat);
                });
            })));
        };
    };
};
var callUserStakeBondedPool = function (cfg) {
    return function (bpa) {
        return function (bi) {
            return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (bpp) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callUserStakeBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                    return UserStake.userStakeBondedPoolContract(bpp)(nat);
                });
            })));
        };
    };
};
var callGetUnbondedPools = function (cfg) {
    return function (addrStr) {
        return function (iba) {
            return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialUnbondedArgs(iba)))(function (ibp) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(UnbondedStaking_CreatePool.getUnbondedPoolsContract(addrStr)(ibp)))(function (ubpps) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(toUnbondedPoolArgs)(ubpps));
                });
            }));
        };
    };
};
var callGetNodeTime = function (cfg) {
    return Control_Promise.fromAff(Contract_Monad.runContract({
        ogmiosConfig: cfg.ogmiosConfig,
        datumCacheConfig: cfg.datumCacheConfig,
        ctlServerConfig: cfg.ctlServerConfig,
        networkId: cfg.networkId,
        logLevel: cfg.logLevel,
        walletSpec: Data_Maybe.Nothing.value,
        customLogger: cfg.customLogger,
        suppressLogs: cfg.suppressLogs,
        extraConfig: cfg.extraConfig
    })(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(Utils.currentRoundedTime)));
};
var callGetBondedPools = function (cfg) {
    return function (addrStr) {
        return function (iba) {
            return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialBondedArgs(iba)))(function (ibp) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(CreatePool.getBondedPoolsContract(addrStr)(ibp)))(function (bpps) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(toBondedPoolArgs)(bpps));
                });
            }));
        };
    };
};
var callDepositUnbondedPool = function (cfg) {
    return function (upa) {
        return function (bi) {
            return function (arr) {
                return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callDepositUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                        return UnbondedStaking_DepositPool.depositUnbondedPoolContract(upp)(nat)(arr);
                    });
                })));
            };
        };
    };
};
var callDepositBondedPool = function (cfg) {
    return function (bpa) {
        return function (bi) {
            return function (arr) {
                return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (upp) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callDepositBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                        return DepositPool.depositBondedPoolContract(upp)(nat)(arr);
                    });
                })));
            };
        };
    };
};
var callCreateUnbondedPool = function (cfg) {
    return function (iba) {
        return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialUnbondedArgs(iba)))(function (iup) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(UnbondedStaking_CreatePool.createUnbondedPoolContract(iup)))(function (v) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    args: toUnbondedPoolArgs(v.unbondedPoolParams),
                    address: v.address,
                    txId: v.txId
                });
            });
        }));
    };
};
var callCreateBondedPool = function (cfg) {
    return function (iba) {
        return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialBondedArgs(iba)))(function (ibp) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(CreatePool.createBondedPoolContract(ibp)))(function (v) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    args: toBondedPoolArgs(v.bondedPoolParams),
                    address: v.address,
                    txId: v.txId
                });
            });
        }));
    };
};
var callCloseUnbondedPool = function (cfg) {
    return function (upa) {
        return function (bi) {
            return function (arr) {
                return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callCloseUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                        return UnbondedStaking_ClosePool.closeUnbondedPoolContract(upp)(nat)(arr);
                    });
                })));
            };
        };
    };
};
var callCloseBondedPool = function (cfg) {
    return function (bpa) {
        return function (bi) {
            return function (arr) {
                return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (upp) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callCloseBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                        return ClosePool.closeBondedPoolContract(upp)(nat)(arr);
                    });
                })));
            };
        };
    };
};
var buildContractConfig = function (cfg) {
    var errorWithContext = function (msg) {
        return Effect_Exception.error("buildContractConfig: " + msg);
    };
    return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ctl-server")(cfg.ctlServerConfig))))(function (ctlServerConfig) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ogmios")(cfg.ogmiosConfig)))(function (ogmiosConfig) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ogmios-datum-cache")(cfg.datumCacheConfig)))(function (datumCacheConfig) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(errorWithContext("invalid `NetworkId`"))(Data_Int.fromNumber(cfg.networkId)))(function (networkIdInt) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(errorWithContext("invalid `NetworkId`"))(Serialization_Address.intToNetworkId(networkIdInt)))(function (networkId) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkLogLevel(cfg.logLevel)))(function (logLevel) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkWalletSpec(cfg.walletSpec))))(function (walletSpec) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                    ogmiosConfig: ogmiosConfig,
                                    datumCacheConfig: datumCacheConfig,
                                    ctlServerConfig: ctlServerConfig,
                                    logLevel: logLevel,
                                    networkId: networkId,
                                    walletSpec: walletSpec,
                                    customLogger: Data_Maybe.Nothing.value,
                                    suppressLogs: false,
                                    extraConfig: {}
                                });
                            });
                        });
                    });
                });
            });
        });
    }));
};
module.exports = {
    buildContractConfig: buildContractConfig,
    callGetNodeTime: callGetNodeTime,
    callCloseBondedPool: callCloseBondedPool,
    callCreateBondedPool: callCreateBondedPool,
    callGetBondedPools: callGetBondedPools,
    callDepositBondedPool: callDepositBondedPool,
    callUserStakeBondedPool: callUserStakeBondedPool,
    callUserWithdrawBondedPool: callUserWithdrawBondedPool,
    callCloseUnbondedPool: callCloseUnbondedPool,
    callCreateUnbondedPool: callCreateUnbondedPool,
    callGetUnbondedPools: callGetUnbondedPools,
    callDepositUnbondedPool: callDepositUnbondedPool,
    callUserStakeUnbondedPool: callUserStakeUnbondedPool,
    callUserWithdrawUnbondedPool: callUserWithdrawUnbondedPool
};
