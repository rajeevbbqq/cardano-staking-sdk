// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Affjax = require("../Affjax/index.js");
var Affjax_RequestBody = require("../Affjax.RequestBody/index.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Affjax_ResponseFormat = require("../Affjax.ResponseFormat/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Parallel_Class = require("../Control.Parallel.Class/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_JSDate = require("../Data.JSDate/index.js");
var Data_Log_Level = require("../Data.Log.Level/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType_Common = require("../Data.MediaType.Common/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Helpers = require("../Helpers/index.js");
var JsWebSocket = require("../JsWebSocket/index.js");
var QueryM_DatumCacheWsp = require("../QueryM.DatumCacheWsp/index.js");
var QueryM_JsonWsp = require("../QueryM.JsonWsp/index.js");
var QueryM_Ogmios = require("../QueryM.Ogmios/index.js");
var QueryM_ServerConfig = require("../QueryM.ServerConfig/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_PlutusData = require("../Serialization.PlutusData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Chain = require("../Types.Chain/index.js");
var Types_MultiMap = require("../Types.MultiMap/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_UsedTxOuts = require("../Types.UsedTxOuts/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var Wallet = require("../Wallet/index.js");
var Wallet_KeyFile = require("../Wallet.KeyFile/index.js");
var Wallet_Spec = require("../Wallet.Spec/index.js");
var WebSocket = (function () {
    function WebSocket(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WebSocket.create = function (value0) {
        return function (value1) {
            return new WebSocket(value0, value1);
        };
    };
    return WebSocket;
})();
var RequestInput = (function () {
    function RequestInput(value0) {
        this.value0 = value0;
    };
    RequestInput.create = function (value0) {
        return new RequestInput(value0);
    };
    return RequestInput;
})();
var RequestInputToStoreInPendingRequests = (function () {
    function RequestInputToStoreInPendingRequests(value0) {
        this.value0 = value0;
    };
    RequestInputToStoreInPendingRequests.create = function (value0) {
        return new RequestInputToStoreInPendingRequests(value0);
    };
    return RequestInputToStoreInPendingRequests;
})();
var JsError = (function () {
    function JsError(value0) {
        this.value0 = value0;
    };
    JsError.create = function (value0) {
        return new JsError(value0);
    };
    return JsError;
})();
var JsonError = (function () {
    function JsonError(value0) {
        this.value0 = value0;
    };
    JsonError.create = function (value0) {
        return new JsonError(value0);
    };
    return JsonError;
})();
var FaultError = (function () {
    function FaultError(value0) {
        this.value0 = value0;
    };
    FaultError.create = function (value0) {
        return new FaultError(value0);
    };
    return FaultError;
})();
var ListenerCancelled = (function () {
    function ListenerCancelled(value0) {
        this.value0 = value0;
    };
    ListenerCancelled.create = function (value0) {
        return new ListenerCancelled(value0);
    };
    return ListenerCancelled;
})();
var QueryMExtended = function (x) {
    return x;
};
var QueryRuntimeModel = (function () {
    function QueryRuntimeModel(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    QueryRuntimeModel.create = function (value0) {
        return function (value1) {
            return new QueryRuntimeModel(value0, value1);
        };
    };
    return QueryRuntimeModel;
})();
var ClientHttpError = (function () {
    function ClientHttpError(value0) {
        this.value0 = value0;
    };
    ClientHttpError.create = function (value0) {
        return new ClientHttpError(value0);
    };
    return ClientHttpError;
})();
var ClientHttpResponseError = (function () {
    function ClientHttpResponseError(value0) {
        this.value0 = value0;
    };
    ClientHttpResponseError.create = function (value0) {
        return new ClientHttpResponseError(value0);
    };
    return ClientHttpResponseError;
})();
var ClientDecodeJsonError = (function () {
    function ClientDecodeJsonError(value0) {
        this.value0 = value0;
    };
    ClientDecodeJsonError.create = function (value0) {
        return new ClientDecodeJsonError(value0);
    };
    return ClientDecodeJsonError;
})();
var ClientEncodingError = (function () {
    function ClientEncodingError(value0) {
        this.value0 = value0;
    };
    ClientEncodingError.create = function (value0) {
        return new ClientEncodingError(value0);
    };
    return ClientEncodingError;
})();
var ClientOtherError = (function () {
    function ClientOtherError(value0) {
        this.value0 = value0;
    };
    ClientOtherError.create = function (value0) {
        return new ClientOtherError(value0);
    };
    return ClientOtherError;
})();
var showDispatchError = {
    show: function (v) {
        if (v instanceof JsError) {
            return "(JsError (message " + (Data_Show.show(Data_Show.showString)(Effect_Exception.message(v.value0)) + "))");
        };
        if (v instanceof JsonError) {
            return "(JsonError " + (Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0) + ")");
        };
        if (v instanceof FaultError) {
            return "(FaultError " + (Data_Show.show(Aeson.showAeson)(v.value0) + ")");
        };
        if (v instanceof ListenerCancelled) {
            return "(ListenerCancelled " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
        };
        throw new Error("Failed pattern match at QueryM (line 1200, column 1 - line 1205, column 52): " + [ v.constructor.name ]);
    }
};
var showClientError = {
    show: function (v) {
        if (v instanceof ClientHttpError) {
            return "(ClientHttpError " + (Affjax.printError(v.value0) + ")");
        };
        if (v instanceof ClientHttpResponseError) {
            return "(ClientHttpResponseError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
        };
        if (v instanceof ClientDecodeJsonError) {
            return "(ClientDecodeJsonError " + (Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0) + ")");
        };
        if (v instanceof ClientEncodingError) {
            return "(ClientEncodingError " + (v.value0 + ")");
        };
        if (v instanceof ClientOtherError) {
            return "(ClientEncodingError " + (v.value0 + ")");
        };
        throw new Error("Failed pattern match at QueryM (line 579, column 1 - line 599, column 13): " + [ v.constructor.name ]);
    }
};
var semigroupQueryMExtended = function (dictSemigroup) {
    return function (dictApply) {
        return Control_Monad_Reader_Trans.semigroupReaderT(dictApply)(dictSemigroup);
    };
};
var plusQueryMExtended = function (dictPlus) {
    return Control_Monad_Reader_Trans.plusReaderT(dictPlus);
};
var newtypeQueryMExtended_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidQueryMExtended = function (dictMonoid) {
    return function (dictApplicative) {
        return Control_Monad_Reader_Trans.monoidReaderT(dictApplicative)(dictMonoid);
    };
};
var monadThrowErrorQueryMExte = Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff);
var monadRecQueryMExtendedAff = Control_Monad_Reader_Trans.monadRecReaderT(Effect_Aff.monadRecAff);
var monadReaderQueryEnvQueryM = Control_Monad_Reader_Trans.monadReaderReaderT(Effect_Aff.monadAff);
var monadQueryMExtendedAff = Control_Monad_Reader_Trans.monadReaderT(Effect_Aff.monadAff);
var monadErrorErrorQueryMExte = Control_Monad_Reader_Trans.monadErrorReaderT(Effect_Aff.monadErrorAff);
var monadEffectQueryMExtended = Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
var monadAskQueryEnvQueryMExt = Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff);
var monadAffQueryMExtendedAff = Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff);
var functorQueryMExtended = function (dictFunctor) {
    return Control_Monad_Reader_Trans.functorReaderT(dictFunctor);
};
var bindQueryMExtended = function (dictBind) {
    return Control_Monad_Reader_Trans.bindReaderT(dictBind);
};
var monadLoggerQueryMExtended = {
    log: function (msg) {
        return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function (v) {
            return v.config;
        }))(function (config) {
            var logFunction = Data_Maybe.fromMaybe(Helpers.logWithLevel(Effect_Aff.monadEffectAff)(config.logLevel))((function (v) {
                return v.customLogger;
            })(config));
            return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(logFunction(msg));
        });
    },
    MonadEffect0: function () {
        return monadEffectQueryMExtended;
    }
};
var applyQueryMExtended = function (dictApply) {
    return Control_Monad_Reader_Trans.applyReaderT(dictApply);
};
var applicativeQueryMExtended = function (dictApplicative) {
    return Control_Monad_Reader_Trans.applicativeReaderT(dictApplicative);
};
var parallelQueryMExtendedPar = {
    parallel: (function () {
        var $237 = Data_Newtype.wrap();
        var $238 = Control_Parallel_Class.parallel(Control_Parallel_Class.monadParReaderT(Effect_Aff.parallelAff));
        var $239 = Data_Newtype.unwrap();
        return function ($240) {
            return $237($238($239($240)));
        };
    })(),
    sequential: (function () {
        var $241 = Data_Newtype.wrap();
        var $242 = Control_Parallel_Class.sequential(Control_Parallel_Class.monadParReaderT(Effect_Aff.parallelAff));
        var $243 = Data_Newtype.unwrap();
        return function ($244) {
            return $241($242($243($244)));
        };
    })(),
    Monad0: function () {
        return monadQueryMExtendedAff;
    },
    Applicative1: function () {
        return applicativeQueryMExtended(Effect_Aff.applicativeParAff);
    }
};
var alternativeQueryMExtended = function (dictAlternative) {
    return Control_Monad_Reader_Trans.alternativeReaderT(dictAlternative);
};
var altQueryMExtended = function (dictAlt) {
    return Control_Monad_Reader_Trans.altReaderT(dictAlt);
};
var withMWallet = function (act) {
    return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($245) {
        return (function (v) {
            return v.wallet;
        })((function (v) {
            return v.runtime;
        })($245));
    }))(Data_Maybe.maybe(Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Maybe.Nothing.value))(act));
};
var withMWalletAff = function (act) {
    return withMWallet((function () {
        var $246 = Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff);
        return function ($247) {
            return $246(act($247));
        };
    })());
};
var underlyingWebSocket = function (v) {
    return v.value0;
};
var stopQueryRuntime = function (runtime) {
    return function __do() {
        JsWebSocket["_wsClose"](underlyingWebSocket(runtime.ogmiosWs))();
        return JsWebSocket["_wsClose"](underlyingWebSocket(runtime.datumCacheWs))();
    };
};
var scriptToAeson = (function () {
    var $248 = Aeson.encodeAeson(Aeson.encodeAesonString);
    var $249 = Data_Newtype.unwrap();
    return function ($250) {
        return $248(Types_ByteArray.byteArrayToHex(Data_Tuple.fst($249($250))));
    };
})();
var runQueryMInRuntime = function (config) {
    return function (runtime) {
        var $251 = Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)({
            config: config,
            runtime: runtime,
            extraConfig: {}
        });
        var $252 = Data_Newtype.unwrap();
        return function ($253) {
            return $251($252($253));
        };
    };
};
var runQueryMWithSettings = function (settings) {
    return function (action) {
        return runQueryMInRuntime(settings.config)(settings.runtime)(action);
    };
};
var queryDispatch = function (dictDecodeAeson) {
    return function (dictShow) {
        return function (ref) {
            return function (str) {
                var withAction = function (reflection) {
                    return function (cb) {
                        return function __do() {
                            var idMap = Effect_Ref.read(ref)();
                            var mbAction = Types_MultiMap.lookup(Data_Ord.ordString)(reflection)(idMap);
                            return cb(mbAction);
                        };
                    };
                };
                var impossibleErrorMsg = "Impossible happened: response does not contain neither " + ("`fault` nor `result`, please report as bug. Response: " + str);
                var eiAeson = Aeson.parseJsonStringToAeson(str);
                var v = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponseId)(eiAeson);
                if (v instanceof Data_Either.Left) {
                    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create(new JsonError(v.value0)));
                };
                if (v instanceof Data_Either.Right) {
                    return withAction(v.value0)(function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Either.Left(new ListenerCancelled(v.value0));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return Data_Either.Right.create(v1.value0((function () {
                                var v2 = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponse(dictDecodeAeson))(eiAeson);
                                if (v2 instanceof Data_Either.Left) {
                                    return Data_Either.Left.create(new JsonError(v2.value0));
                                };
                                if (v2 instanceof Data_Either.Right && v2.value0.result instanceof Data_Maybe.Just) {
                                    return new Data_Either.Right(v2.value0.result.value0);
                                };
                                if (v2 instanceof Data_Either.Right && (v2.value0.result instanceof Data_Maybe.Nothing && v2.value0.fault instanceof Data_Maybe.Just)) {
                                    return Data_Either.Left.create(new FaultError(v2.value0.fault.value0));
                                };
                                if (v2 instanceof Data_Either.Right && (v2.value0.result instanceof Data_Maybe.Nothing && v2.value0.fault instanceof Data_Maybe.Nothing)) {
                                    return Data_Either.Left.create(JsError.create(Effect_Exception.error(impossibleErrorMsg)));
                                };
                                throw new Error("Failed pattern match at QueryM (line 1317, column 13 - line 1325, column 58): " + [ v2.constructor.name ]);
                            })()));
                        };
                        throw new Error("Failed pattern match at QueryM (line 1312, column 29 - line 1325, column 58): " + [ v1.constructor.name ]);
                    });
                };
                throw new Error("Failed pattern match at QueryM (line 1307, column 3 - line 1325, column 58): " + [ v.constructor.name ]);
            };
        };
    };
};
var postAeson = function (url) {
    return function (body) {
        return Affjax.request({
            method: new Data_Either.Left(Data_HTTP_Method.POST.value),
            url: url,
            headers: [ new Affjax_RequestHeader.ContentType(Data_MediaType_Common.applicationJSON) ],
            content: Data_Maybe.Just.create(Affjax_RequestBody["String"].create(Aeson.stringifyAeson(body))),
            username: Affjax.defaultRequest.username,
            password: Affjax.defaultRequest.password,
            withCredentials: Affjax.defaultRequest.withCredentials,
            responseFormat: Affjax_ResponseFormat.string,
            timeout: Affjax.defaultRequest.timeout
        });
    };
};
var ogmiosMessageDispatch = function (v) {
    return [ queryDispatch(QueryM_Ogmios.decodeAesonUtxoQR)(QueryM_Ogmios.showUtxoQR)(v.utxoDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonUtxoQR)(QueryM_Ogmios.showUtxoQR)(v.utxosAtDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonChainTipQR)(QueryM_Ogmios.showChainTipQR)(v.chainTipDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonTxEvaluationR)(QueryM_Ogmios.showTxEvaluationR)(v.evaluateTxDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonProtocolParame)(QueryM_Ogmios.showProtocolParameters)(v.getProtocolParametersDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSubmitTxR)(QueryM_Ogmios.showSubmitTxR)(v.submitDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonEraSummaries)(QueryM_Ogmios.showEraSummaries)(v.eraSummariesDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonCurrentEpoch)(QueryM_Ogmios.showCurrentEpoch)(v.currentEpochDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSystemStart)(QueryM_Ogmios.showSystemStart)(v.systemStartDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonMempoolSnapsho)(QueryM_Ogmios.showMempoolSnapshotAcquir)(v.acquireMempoolDispatchMap), queryDispatch(Aeson.decodeAesonBoolean)(Data_Show.showBoolean)(v.mempoolHasTxDispatchMap) ];
};
var mkWalletBySpec = function (v) {
    if (v instanceof Wallet_Spec.UseKeys) {
        return Control_Bind.bind(Effect_Aff.bindAff)((function () {
            if (v.value0 instanceof Wallet_Spec.PrivatePaymentKeyFile) {
                return Wallet_KeyFile.privatePaymentKeyFromFile(v.value0.value0);
            };
            if (v.value0 instanceof Wallet_Spec.PrivatePaymentKeyValue) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0.value0);
            };
            throw new Error("Failed pattern match at QueryM (line 386, column 26 - line 389, column 45): " + [ v.value0.constructor.name ]);
        })())(function (privatePaymentKey) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(v.value1)(function (v1) {
                if (v1 instanceof Wallet_Spec.PrivateStakeKeyFile) {
                    return Wallet_KeyFile.privateStakeKeyFromFile(v1.value0);
                };
                if (v1 instanceof Wallet_Spec.PrivateStakeKeyValue) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value0);
                };
                throw new Error("Failed pattern match at QueryM (line 390, column 45 - line 392, column 43): " + [ v1.constructor.name ]);
            }))(function (mbPrivateStakeKey) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Wallet.mkKeyWallet(privatePaymentKey)(mbPrivateStakeKey));
            });
        });
    };
    if (v instanceof Wallet_Spec.ConnectToNami) {
        return Wallet.mkNamiWalletAff;
    };
    if (v instanceof Wallet_Spec.ConnectToGero) {
        return Wallet.mkGeroWalletAff;
    };
    if (v instanceof Wallet_Spec.ConnectToFlint) {
        return Wallet.mkFlintWalletAff;
    };
    if (v instanceof Wallet_Spec.ConnectToEternl) {
        return Wallet.mkEternlWalletAff;
    };
    if (v instanceof Wallet_Spec.ConnectToLode) {
        return Wallet.mkLodeWalletAff;
    };
    throw new Error("Failed pattern match at QueryM (line 384, column 18 - line 398, column 35): " + [ v.constructor.name ]);
};
var mkLogger = function (logLevel) {
    return function (mbCustomLogger) {
        return function (level) {
            return function (message) {
                if (mbCustomLogger instanceof Data_Maybe.Nothing) {
                    return Helpers.logString(logLevel)(level)(message);
                };
                if (mbCustomLogger instanceof Data_Maybe.Just) {
                    return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(function __do() {
                        var timestamp = Data_JSDate.now();
                        return Effect_Aff.launchAff_(mbCustomLogger.value0({
                            level: level,
                            message: message,
                            tags: Data_Map_Internal.empty,
                            timestamp: timestamp
                        }))();
                    });
                };
                throw new Error("Failed pattern match at QueryM (line 1124, column 3 - line 1128, column 73): " + [ mbCustomLogger.constructor.name ]);
            };
        };
    };
};
var mkListenerSet = function (dim) {
    return function (pr) {
        return {
            addMessageListener: function (id) {
                return function (func) {
                    return Effect_Ref.modify_(Types_MultiMap.insert(Data_Ord.ordString)(id)(func))(dim);
                };
            },
            removeMessageListener: function (id) {
                return function __do() {
                    Effect_Ref.modify_(Types_MultiMap["delete"](Data_Ord.ordString)(id))(dim)();
                    return Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordString)(id))(pr)();
                };
            },
            addRequest: function (id) {
                return function (req) {
                    return Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordString)(id)(req))(pr);
                };
            }
        };
    };
};
var messageFoldF = function (msg) {
    return function (acc$prime) {
        return function (func) {
            return function __do() {
                var acc = acc$prime();
                var $163 = Data_Either.isRight(acc);
                if ($163) {
                    return acc$prime();
                };
                return func(msg)();
            };
        };
    };
};
var listeners = function (v) {
    return v.value1;
};
var liftQueryM = (function () {
    var toDefaultQueryEnv = function (c) {
        return {
            config: c.config,
            runtime: c.runtime,
            extraConfig: {}
        };
    };
    var $254 = Data_Newtype.wrap();
    var $255 = Control_Monad_Reader_Trans.withReaderT(toDefaultQueryEnv);
    var $256 = Data_Newtype.unwrap();
    return function ($257) {
        return $254($255($256($257)));
    };
})();
var handleAffjaxResponse = function (dictDecodeAeson) {
    return function (v) {
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(new ClientHttpError(v.value0));
        };
        if (v instanceof Data_Either.Right) {
            if (v.value0.status < 200 || v.value0.status > 299) {
                return new Data_Either.Left(new ClientHttpResponseError(v.value0.body));
            };
            if (Data_Boolean.otherwise) {
                return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ClientDecodeJsonError.create)(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Aeson.decodeAeson(dictDecodeAeson))(Aeson.parseJsonStringToAeson)(v.value0.body));
            };
        };
        throw new Error("Failed pattern match at QueryM (line 658, column 1 - line 662, column 31): " + [ v.constructor.name ]);
    };
};
var getRequestInputToStore = function (v) {
    if (v instanceof RequestInput) {
        return Data_Maybe.Nothing.value;
    };
    if (v instanceof RequestInputToStoreInPendingRequests) {
        return new Data_Maybe.Just(v.value0);
    };
    throw new Error("Failed pattern match at QueryM (line 995, column 1 - line 996, column 69): " + [ v.constructor.name ]);
};
var getRequestInput = function (v) {
    if (v instanceof RequestInput) {
        return v.value0;
    };
    if (v instanceof RequestInputToStoreInPendingRequests) {
        return v.value0;
    };
    throw new Error("Failed pattern match at QueryM (line 991, column 1 - line 991, column 77): " + [ v.constructor.name ]);
};
var getLogger = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($258) {
    return (function (v) {
        return v.logLevel;
    })((function (v) {
        return v.config;
    })($258));
}))(function (logLevel) {
    return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($259) {
        return (function (v) {
            return v.customLogger;
        })((function (v) {
            return v.config;
        })($259));
    }))(function (mbCustomLogger) {
        return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(mkLogger(logLevel)(mbCustomLogger));
    });
});
var dispatchErrorToError = function (v) {
    if (v instanceof JsError) {
        return v.value0;
    };
    if (v instanceof JsonError) {
        return Effect_Exception.error(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0));
    };
    if (v instanceof FaultError) {
        return Effect_Exception.error("Server responded with `fault`: " + Aeson.stringifyAeson(v.value0));
    };
    if (v instanceof ListenerCancelled) {
        return Effect_Exception.error("Listener cancelled (" + (v.value0 + ")"));
    };
    throw new Error("Failed pattern match at QueryM (line 1207, column 1 - line 1207, column 47): " + [ v.constructor.name ]);
};
var mkRequestAff$prime = function (listeners$prime) {
    return function (webSocket) {
        return function (logger) {
            return function (jsonWspCall) {
                return function (getLs) {
                    return function (inp) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(QueryM_JsonWsp.buildRequest(jsonWspCall)(getRequestInput(inp))))(function (v) {
                            var sBody = Aeson.stringifyAeson(v.body);
                            var respLs = getLs(listeners$prime);
                            var affFunc = function (cont) {
                                return function __do() {
                                    respLs.addMessageListener(v.id)(function (result) {
                                        return function __do() {
                                            respLs.removeMessageListener(v.id)();
                                            if (result instanceof Data_Either.Left && result.value0 instanceof ListenerCancelled) {
                                                return Data_Unit.unit;
                                            };
                                            return cont(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(dispatchErrorToError)(result))();
                                        };
                                    })();
                                    respLs.addRequest(v.id)(new Data_Tuple.Tuple(sBody, getRequestInputToStore(inp)))();
                                    JsWebSocket["_wsSend"](webSocket)(logger(Data_Log_Level.Debug.value))(sBody)();
                                    return Effect_Aff.Canceler(function (err) {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(respLs.removeMessageListener(v.id)))(function () {
                                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(err));
                                        });
                                    });
                                };
                            };
                            return Effect_Aff.makeAff(affFunc);
                        });
                    };
                };
            };
        };
    };
};
var mkRequestAff = function (listeners$prime) {
    return function (webSocket) {
        return function (logger) {
            return function (jsonWspCall) {
                return function (getLs) {
                    var $260 = mkRequestAff$prime(listeners$prime)(webSocket)(logger)(jsonWspCall)(getLs);
                    return function ($261) {
                        return $260(RequestInput.create($261));
                    };
                };
            };
        };
    };
};
var mkDatumCacheRequestAff = function (datumCacheWs) {
    return mkRequestAff(listeners(datumCacheWs))(underlyingWebSocket(datumCacheWs));
};
var mkOgmiosRequestAff = function (ogmiosWs) {
    return mkRequestAff(listeners(ogmiosWs))(underlyingWebSocket(ogmiosWs));
};
var getProtocolParametersAff = function (ogmiosWs) {
    return function (logger) {
        return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.queryProtocolParametersCall)(function (v) {
            return v.getProtocolParameters;
        })(Data_Unit.unit);
    };
};
var mempoolSnapshotHasTxAff = function (ogmiosWs) {
    return function (logger) {
        return function (ms) {
            return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.mempoolSnapshotHasTxCall(ms))(function (v) {
                return v.mempoolHasTx;
            });
        };
    };
};
var mkRequest = function (listeners$prime) {
    return function (ws) {
        return function (jsonWspCall) {
            return function (getLs) {
                return function (inp) {
                    return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(getLogger)(function (logger) {
                        return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(mkRequestAff(listeners$prime)(ws)(logger)(jsonWspCall)(getLs)(inp));
                    });
                };
            };
        };
    };
};
var mkDatumCacheRequest = function (jsonWspCall) {
    return function (getLs) {
        return function (inp) {
            return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($262) {
                return listeners((function (v) {
                    return v.datumCacheWs;
                })((function (v) {
                    return v.runtime;
                })($262)));
            }))(function (listeners$prime) {
                return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($263) {
                    return underlyingWebSocket((function (v) {
                        return v.datumCacheWs;
                    })((function (v) {
                        return v.runtime;
                    })($263)));
                }))(function (websocket) {
                    return mkRequest(listeners$prime)(websocket)(jsonWspCall)(getLs)(inp);
                });
            });
        };
    };
};
var getDatumByHash = function (hash) {
    return Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(Data_Newtype.unwrap())(mkDatumCacheRequest(QueryM_DatumCacheWsp.getDatumByHashCall)(function (v) {
        return v.getDatumByHash;
    })(hash));
};
var getDatumsByHashes = function (hashes) {
    return Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(Data_Newtype.unwrap())(mkDatumCacheRequest(QueryM_DatumCacheWsp.getDatumsByHashesCall)(function (v) {
        return v.getDatumsByHashes;
    })(hashes));
};
var mkOgmiosRequest = function (jsonWspCall) {
    return function (getLs) {
        return function (inp) {
            return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($264) {
                return listeners((function (v) {
                    return v.ogmiosWs;
                })((function (v) {
                    return v.runtime;
                })($264)));
            }))(function (listeners$prime) {
                return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($265) {
                    return underlyingWebSocket((function (v) {
                        return v.ogmiosWs;
                    })((function (v) {
                        return v.runtime;
                    })($265)));
                }))(function (websocket) {
                    return mkRequest(listeners$prime)(websocket)(jsonWspCall)(getLs)(inp);
                });
            });
        };
    };
};
var evaluateTxOgmios = mkOgmiosRequest(QueryM_Ogmios.evaluateTxCall)(function (v) {
    return v.evaluate;
});
var getChainTip = (function () {
    var ogmiosChainTipToTip = function (v) {
        if (v instanceof QueryM_Ogmios.CtChainOrigin) {
            return Types_Chain.TipAtGenesis.value;
        };
        if (v instanceof QueryM_Ogmios.CtChainPoint) {
            return Types_Chain.Tip.create(Data_Newtype.wrap()({
                slot: v.value0.slot,
                blockHeaderHash: Data_Newtype.wrap()(Data_Newtype.unwrap()(v.value0.hash))
            }));
        };
        throw new Error("Failed pattern match at QueryM (line 441, column 25 - line 444, column 52): " + [ v.constructor.name ]);
    };
    return Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(ogmiosChainTipToTip)(mkOgmiosRequest(QueryM_Ogmios.queryChainTipCall)(function (v) {
        return v.chainTip;
    })(Data_Unit.unit));
})();
var submitTxOgmios = function (txHash) {
    return function (tx) {
        return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($266) {
            return underlyingWebSocket((function (v) {
                return v.ogmiosWs;
            })((function (v) {
                return v.runtime;
            })($266)));
        }))(function (ws) {
            return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($267) {
                return listeners((function (v) {
                    return v.ogmiosWs;
                })((function (v) {
                    return v.runtime;
                })($267)));
            }))(function (listeners$prime) {
                return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function (v) {
                    return v.config;
                }))(function (cfg) {
                    var inp = new RequestInputToStoreInPendingRequests(new Data_Tuple.Tuple(txHash, tx));
                    return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(mkRequestAff$prime(listeners$prime)(ws)(mkLogger(cfg.logLevel)(cfg.customLogger))(QueryM_Ogmios.submitTxCall)(function (v) {
                        return v.submit;
                    })(inp));
                });
            });
        });
    };
};
var defaultErr = new Data_Argonaut_Decode_Error.TypeMismatch("default error");
var defaultMessageListener = function (logger) {
    return function (dispatchArray) {
        return function (msg) {
            return function __do() {
                var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(messageFoldF(msg))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create(new JsonError(defaultErr))))(dispatchArray)();
                return Data_Either.either(function (err) {
                    return Control_Applicative.unless(Effect.applicativeEffect)((function () {
                        if (err instanceof JsonError) {
                            return Data_Eq.eq(Data_Argonaut_Decode_Error.eqJsonDecodeError)(err.value0)(defaultErr);
                        };
                        return false;
                    })())(logger(Data_Log_Level["Error"].value)("unexpected error on input: " + (msg + (" Error:" + Data_Show.show(showDispatchError)(err)))));
                })(Control_Category.identity(Control_Category.categoryFn))(v)();
            };
        };
    };
};
var datumCacheMessageDispatch = function (v) {
    return [ queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumByHash)(QueryM_DatumCacheWsp.showGetDatumByHashR)(v.getDatumByHashDispatchMap), queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumsByHas)(QueryM_DatumCacheWsp.showGetDatumsByHashesR)(v.getDatumsByHashesDispatchMap), queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetTxByHashR)(QueryM_DatumCacheWsp.showGetTxByHashR)(v.getTxByHashDispatchMap) ];
};
var createPendingRequests = Effect_Ref["new"](Data_Map_Internal.empty);
var createMutableDispatch = Effect_Ref["new"](Types_MultiMap.empty);
var mkDatumCacheWebSocket$prime = function (logger) {
    return function (serverCfg) {
        return function ($$continue) {
            return function __do() {
                var getDatumByHashDispatchMap = createMutableDispatch();
                var getDatumsByHashesDispatchMap = createMutableDispatch();
                var getTxByHashDispatchMap = createMutableDispatch();
                var getDatumByHashPendingRequests = createPendingRequests();
                var getDatumsByHashesPendingRequests = createPendingRequests();
                var getTxByHashPendingRequests = createPendingRequests();
                var messageDispatch = datumCacheMessageDispatch({
                    getDatumByHashDispatchMap: getDatumByHashDispatchMap,
                    getDatumsByHashesDispatchMap: getDatumsByHashesDispatchMap,
                    getTxByHashDispatchMap: getTxByHashDispatchMap
                });
                var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkOgmiosDatumCacheWsUrl(serverCfg))();
                var sendRequest = (function () {
                    var $268 = JsWebSocket["_wsSend"](ws)(logger(Data_Log_Level.Debug.value));
                    return function ($269) {
                        return $268(Data_Tuple.fst($269));
                    };
                })();
                var resendPendingRequests = function __do() {
                    Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumByHashPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                    Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumsByHashesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                    return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getTxByHashPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                };
                var onFirstConnectionError = function (errMessage) {
                    return function __do() {
                        JsWebSocket["_wsClose"](ws)();
                        logger(Data_Log_Level["Error"].value)("First connection to Ogmios Datum Cache WebSocket failed. " + ("Terminating. Error: " + errMessage))();
                        return $$continue(Data_Either.Left.create(Effect_Exception.error(errMessage)))();
                    };
                };
                var firstConnectionErrorRef = JsWebSocket["_onWsError"](ws)(onFirstConnectionError)();
                var hasConnectedOnceRef = Effect_Ref["new"](false)();
                JsWebSocket["_onWsConnect"](ws)(function __do() {
                    var v = Effect_Ref.read(hasConnectedOnceRef)();
                    if (v) {
                        logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache WS connection re-established, resending " + "pending requests...")();
                        return resendPendingRequests();
                    };
                    if (!v) {
                        logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache Connection established")();
                        Effect_Ref.write(true)(hasConnectedOnceRef)();
                        JsWebSocket["_removeOnWsError"](ws)(firstConnectionErrorRef)();
                        JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(logger)(messageDispatch))();
                        Data_Functor["void"](Effect.functorEffect)(JsWebSocket["_onWsError"](ws)(function (err) {
                            return function __do() {
                                logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache WebSocket error (" + (err + "). Reconnecting..."))();
                                return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(500.0)))(function () {
                                    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(JsWebSocket["_wsReconnect"](ws));
                                }))();
                            };
                        }))();
                        return $$continue(Data_Either.Right.create(new WebSocket(ws, {
                            getDatumByHash: mkListenerSet(getDatumByHashDispatchMap)(getDatumByHashPendingRequests),
                            getDatumsByHashes: mkListenerSet(getDatumsByHashesDispatchMap)(getDatumsByHashesPendingRequests),
                            getTxByHash: mkListenerSet(getTxByHashDispatchMap)(getTxByHashPendingRequests)
                        })))();
                    };
                    throw new Error("Failed pattern match at QueryM (line 934, column 54 - line 960, column 10): " + [ v.constructor.name ]);
                })();
                return Effect_Aff.Canceler(function (err) {
                    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                        JsWebSocket["_wsClose"](ws)();
                        return $$continue(Data_Either.Left.create(err))();
                    });
                });
            };
        };
    };
};
var mkDatumCacheWebSocketAff = function (logger) {
    var $270 = mkDatumCacheWebSocket$prime(logger);
    return function ($271) {
        return Effect_Aff.makeAff($270($271));
    };
};
var checkTxByHashAff = function (datumCacheWs) {
    return function (logger) {
        var $272 = Data_Functor.map(Effect_Aff.functorAff)((function () {
            var $275 = Data_Newtype.unwrap();
            return function ($276) {
                return Data_Maybe.isJust($275($276));
            };
        })());
        var $273 = mkDatumCacheRequestAff(datumCacheWs)(logger)(QueryM_DatumCacheWsp.getTxByHash)(function (v) {
            return v.getTxByHash;
        });
        return function ($274) {
            return $272($273($274));
        };
    };
};
var callCip30Wallet = function (wallet) {
    return function (act) {
        return act(wallet)(wallet.connection);
    };
};
var getWalletAddresses = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($277) {
    return (function (v) {
        return v.networkId;
    })((function (v) {
        return v.config;
    })($277));
}))(function (networkId) {
    return withMWalletAff(function (v) {
        if (v instanceof Wallet.Eternl) {
            return callCip30Wallet(v.value0)(function (v1) {
                return v1.getWalletAddresses;
            });
        };
        if (v instanceof Wallet.Nami) {
            return callCip30Wallet(v.value0)(function (v1) {
                return v1.getWalletAddresses;
            });
        };
        if (v instanceof Wallet.Gero) {
            return callCip30Wallet(v.value0)(function (v1) {
                return v1.getWalletAddresses;
            });
        };
        if (v instanceof Wallet.Flint) {
            return callCip30Wallet(v.value0)(function (v1) {
                return v1.getWalletAddresses;
            });
        };
        if (v instanceof Wallet.Lode) {
            return callCip30Wallet(v.value0)(function (v1) {
                return v1.getWalletAddresses;
            });
        };
        if (v instanceof Wallet.KeyWallet) {
            return Data_Functor.map(Effect_Aff.functorAff)(function ($278) {
                return Data_Maybe.Just.create(Data_Array.singleton($278));
            })((Data_Newtype.unwrap()(v.value0)).address(networkId));
        };
        throw new Error("Failed pattern match at QueryM (line 527, column 18 - line 533, column 81): " + [ v.constructor.name ]);
    });
});
var ownPubKeyHashes = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(getWalletAddresses)(function (mbAddress) {
    return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap()))(Control_Bind.bind(Data_Maybe.bindMaybe)(mbAddress)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred)(Serialization_Address.stakeCredentialToKeyHash)))));
});
var ownPaymentPubKeyHashes = Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap())))(ownPubKeyHashes);
var ownStakePubKeyHash = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(functorQueryMExtended(Effect_Aff.functorAff))(getWalletAddresses)(function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
}))(function (mbAddress) {
    return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(mbAddress)(Serialization_Address.baseAddressFromAddress))(function (baseAddress) {
        return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
            var $279 = Data_Newtype.wrap();
            var $280 = Data_Newtype.wrap();
            return function ($281) {
                return $279($280($281));
            };
        })())(Serialization_Address.stakeCredentialToKeyHash(Serialization_Address.baseAddressDelegationCred(baseAddress)));
    }));
});
var applyArgs = function (dictNewtype) {
    return function (dictDecodeAeson) {
        return function (script) {
            return function (args) {
                var plutusDataToAeson = (function () {
                    var $282 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                        var $284 = Aeson.encodeAeson(Aeson.encodeAesonString);
                        var $285 = Untagged_Union.asOneOf();
                        return function ($286) {
                            return $284(Types_ByteArray.byteArrayToHex(Serialization.toBytes($285($286))));
                        };
                    })());
                    return function ($283) {
                        return $282(Serialization_PlutusData.convertPlutusData($283));
                    };
                })();
                return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($287) {
                    return (function (v) {
                        return v.ctlServerConfig;
                    })((function (v) {
                        return v.config;
                    })($287));
                }))(function (v) {
                    if (v instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Either.Left.create(new ClientOtherError("The `ctl-server` service is required to call `applyArgs`. Please provide a `Just` value in `ConfigParams.ctlServerConfig` and make sure that the `ctl-server` service is running and available at the provided host and port. The `ctl-server` packages can be obtained from `overlays.ctl-server` defined in CTL's flake. Please see `doc/runtime.md` in the CTL repository for more information")));
                    };
                    if (v instanceof Data_Maybe.Just) {
                        var v1 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(plutusDataToAeson)(args);
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Either.Left.create(new ClientEncodingError("Failed to convert script args")));
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            var url = QueryM_ServerConfig.mkHttpUrl(v.value0) + "/apply-args";
                            var reqBody = Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("script", scriptToAeson(Data_Newtype.unwrap()(script))), new Data_Tuple.Tuple("args", Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonAeson))(v1.value0)) ]));
                            var language = Data_Tuple.snd(Data_Newtype.unwrap()(Data_Newtype.unwrap()(script)));
                            return Data_Functor.mapFlipped(functorQueryMExtended(Effect_Aff.functorAff))(Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(postAeson(url)(reqBody)))((function () {
                                var $288 = Data_Functor.map(Data_Either.functorEither)((function () {
                                    var $291 = Data_Newtype.wrap();
                                    var $292 = Data_Function.flip(Data_Tuple.Tuple.create)(language);
                                    return function ($293) {
                                        return $291(Types_Scripts.PlutusScript($292($293)));
                                    };
                                })());
                                var $289 = handleAffjaxResponse(Types_ByteArray.decodeAesonByteArray);
                                return function ($290) {
                                    return $288($289($290));
                                };
                            })());
                        };
                        throw new Error("Failed pattern match at QueryM (line 622, column 20 - line 641, column 33): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at QueryM (line 611, column 45 - line 641, column 33): " + [ v.constructor.name ]);
                });
            };
        };
    };
};
var allowError = function (func) {
    return function ($294) {
        return func(Data_Either.Right.create($294));
    };
};
var acquireMempoolSnapshotAff = function (ogmiosWs) {
    return function (logger) {
        return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.acquireMempoolSnapshotCall)(function (v) {
            return v.acquireMempool;
        })(Data_Unit.unit);
    };
};
var withMempoolSnapshot = function (ogmiosWs) {
    return function (logger) {
        return function (cont) {
            return Data_Function.flip(Effect_Aff.runAff_)(acquireMempoolSnapshotAff(ogmiosWs)(logger))(function (v) {
                if (v instanceof Data_Either.Left) {
                    return function __do() {
                        logger(Data_Log_Level["Error"].value)("Failed to acquire a mempool snapshot: Error: " + Data_Show.show(Effect_Exception.showError)(v.value0))();
                        return Effect_Aff.launchAff_(cont(Data_Maybe.Nothing.value))();
                    };
                };
                if (v instanceof Data_Either.Right) {
                    return Effect_Aff.launchAff_(cont(new Data_Maybe.Just(v.value0)));
                };
                throw new Error("Failed pattern match at QueryM (line 481, column 62 - line 487, column 47): " + [ v.constructor.name ]);
            });
        };
    };
};
var resendPendingSubmitRequests = function (ogmiosWs) {
    return function (datumCacheWs) {
        return function (logger) {
            return function (sendRequest) {
                return function (dim) {
                    return function (pr) {
                        var log = function (label) {
                            return function (value) {
                                return function (txHash) {
                                    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logger(Data_Log_Level.Debug.value)(label + (": " + (Data_Show.show(Data_Show.showBoolean)(value) + (" TxHash: " + Data_Show.show(Types_ByteArray.showByteArray)(txHash))))));
                                };
                            };
                        };
                        var handlePendingSubmitRequest = function (ms) {
                            return function (listenerId) {
                                return function (requestBody) {
                                    return function (txHash) {
                                        return Control_Bind.bind(Effect_Aff.bindAff)(mempoolSnapshotHasTxAff(ogmiosWs)(logger)(ms)(txHash))(function (txInMempool) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(log("Tx in the mempool")(txInMempool)(txHash))(function () {
                                                return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                                    if (txInMempool) {
                                                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
                                                    };
                                                    return Control_Bind.bind(Effect_Aff.bindAff)(checkTxByHashAff(datumCacheWs)(logger)(txHash))(function (txConfirmed) {
                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(log("Tx confirmed")(txConfirmed)(txHash))(function () {
                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.unless(Effect_Aff.applicativeAff)(txConfirmed)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(sendRequest(new Data_Tuple.Tuple(requestBody, Data_Unit.unit)))))(function () {
                                                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(!txConfirmed);
                                                            });
                                                        });
                                                    });
                                                })())(function (retrySubmitTx) {
                                                    return Control_Applicative.unless(Effect_Aff.applicativeAff)(retrySubmitTx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                        Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordString)(listenerId))(pr)();
                                                        var dispatchMap = Effect_Ref.read(dim)();
                                                        Effect_Ref.modify_(Types_MultiMap["delete"](Data_Ord.ordString)(listenerId))(dim)();
                                                        return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (v) {
                                                            return v(Data_Either.Right.create(new QueryM_Ogmios.SubmitTxSuccess(txHash)));
                                                        })(Types_MultiMap.lookup(Data_Ord.ordString)(listenerId)(dispatchMap))();
                                                    }));
                                                });
                                            });
                                        });
                                    };
                                };
                            };
                        };
                        return function __do() {
                            var submitPendingRequests = Effect_Ref.read(pr)();
                            return Control_Applicative.unless(Effect.applicativeEffect)(Data_Map_Internal.isEmpty(submitPendingRequests))(withMempoolSnapshot(ogmiosWs)(logger)(function (v) {
                                if (v instanceof Data_Maybe.Nothing) {
                                    return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest)(submitPendingRequests));
                                };
                                if (v instanceof Data_Maybe.Just) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(5000.0)))(function () {
                                        var v1 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(submitPendingRequests);
                                        return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v1)(function (v2) {
                                            if (v2.value1.value1 instanceof Data_Maybe.Nothing) {
                                                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(sendRequest(new Data_Tuple.Tuple(v2.value1.value0, Data_Unit.unit)));
                                            };
                                            if (v2.value1.value1 instanceof Data_Maybe.Just) {
                                                return handlePendingSubmitRequest(v.value0)(v2.value0)(v2.value1.value0)(v2.value1.value1.value0.value0);
                                            };
                                            throw new Error("Failed pattern match at QueryM (line 858, column 11 - line 862, column 74): " + [ v2.value1.value1.constructor.name ]);
                                        });
                                    });
                                };
                                throw new Error("Failed pattern match at QueryM (line 849, column 41 - line 862, column 74): " + [ v.constructor.name ]);
                            }))();
                        };
                    };
                };
            };
        };
    };
};
var mkOgmiosWebSocket$prime = function (datumCacheWs) {
    return function (logger) {
        return function (serverCfg) {
            return function ($$continue) {
                return function __do() {
                    var utxoDispatchMap = createMutableDispatch();
                    var utxosAtDispatchMap = createMutableDispatch();
                    var chainTipDispatchMap = createMutableDispatch();
                    var evaluateTxDispatchMap = createMutableDispatch();
                    var getProtocolParametersDispatchMap = createMutableDispatch();
                    var submitDispatchMap = createMutableDispatch();
                    var eraSummariesDispatchMap = createMutableDispatch();
                    var currentEpochDispatchMap = createMutableDispatch();
                    var systemStartDispatchMap = createMutableDispatch();
                    var acquireMempoolDispatchMap = createMutableDispatch();
                    var mempoolHasTxDispatchMap = createMutableDispatch();
                    var utxoPendingRequests = createPendingRequests();
                    var utxosAtPendingRequests = createPendingRequests();
                    var chainTipPendingRequests = createPendingRequests();
                    var evaluateTxPendingRequests = createPendingRequests();
                    var getProtocolParametersPendingRequests = createPendingRequests();
                    var submitPendingRequests = createPendingRequests();
                    var eraSummariesPendingRequests = createPendingRequests();
                    var currentEpochPendingRequests = createPendingRequests();
                    var systemStartPendingRequests = createPendingRequests();
                    var acquireMempoolPendingRequests = createPendingRequests();
                    var mempoolHasTxPendingRequests = createPendingRequests();
                    var messageDispatch = ogmiosMessageDispatch({
                        utxoDispatchMap: utxoDispatchMap,
                        utxosAtDispatchMap: utxosAtDispatchMap,
                        chainTipDispatchMap: chainTipDispatchMap,
                        evaluateTxDispatchMap: evaluateTxDispatchMap,
                        getProtocolParametersDispatchMap: getProtocolParametersDispatchMap,
                        submitDispatchMap: submitDispatchMap,
                        eraSummariesDispatchMap: eraSummariesDispatchMap,
                        currentEpochDispatchMap: currentEpochDispatchMap,
                        systemStartDispatchMap: systemStartDispatchMap,
                        acquireMempoolDispatchMap: acquireMempoolDispatchMap,
                        mempoolHasTxDispatchMap: mempoolHasTxDispatchMap
                    });
                    var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkWsUrl(serverCfg))();
                    var sendRequest = (function () {
                        var $295 = JsWebSocket["_wsSend"](ws)(logger(Data_Log_Level.Debug.value));
                        return function ($296) {
                            return $295(Data_Tuple.fst($296));
                        };
                    })();
                    var onFirstConnectionError = function (errMessage) {
                        return function __do() {
                            JsWebSocket["_wsClose"](ws)();
                            logger(Data_Log_Level["Error"].value)("First connection to Ogmios WebSocket failed. Terminating. Error: " + errMessage)();
                            JsWebSocket["_wsClose"](ws)();
                            return $$continue(Data_Either.Left.create(Effect_Exception.error(errMessage)))();
                        };
                    };
                    var ogmiosWs = new WebSocket(ws, {
                        utxo: mkListenerSet(utxoDispatchMap)(utxoPendingRequests),
                        utxosAt: mkListenerSet(utxosAtDispatchMap)(utxosAtPendingRequests),
                        chainTip: mkListenerSet(chainTipDispatchMap)(chainTipPendingRequests),
                        evaluate: mkListenerSet(evaluateTxDispatchMap)(evaluateTxPendingRequests),
                        getProtocolParameters: mkListenerSet(getProtocolParametersDispatchMap)(getProtocolParametersPendingRequests),
                        submit: mkListenerSet(submitDispatchMap)(submitPendingRequests),
                        eraSummaries: mkListenerSet(eraSummariesDispatchMap)(eraSummariesPendingRequests),
                        currentEpoch: mkListenerSet(currentEpochDispatchMap)(currentEpochPendingRequests),
                        systemStart: mkListenerSet(systemStartDispatchMap)(systemStartPendingRequests),
                        acquireMempool: mkListenerSet(acquireMempoolDispatchMap)(acquireMempoolPendingRequests),
                        mempoolHasTx: mkListenerSet(mempoolHasTxDispatchMap)(mempoolHasTxPendingRequests)
                    });
                    var resendPendingRequests = function __do() {
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(utxoPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(utxosAtPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(chainTipPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(evaluateTxPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getProtocolParametersPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(eraSummariesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(currentEpochPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(systemStartPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                        logger(Data_Log_Level.Debug.value)("Resent all pending requests")();
                        Effect_Ref.write(Types_MultiMap.empty)(acquireMempoolDispatchMap)();
                        Effect_Ref.write(Data_Map_Internal.empty)(acquireMempoolPendingRequests)();
                        Effect_Ref.write(Types_MultiMap.empty)(mempoolHasTxDispatchMap)();
                        Effect_Ref.write(Data_Map_Internal.empty)(mempoolHasTxPendingRequests)();
                        return resendPendingSubmitRequests(ogmiosWs)(datumCacheWs)(logger)(sendRequest)(submitDispatchMap)(submitPendingRequests)();
                    };
                    var firstConnectionErrorRef = JsWebSocket["_onWsError"](ws)(onFirstConnectionError)();
                    var hasConnectedOnceRef = Effect_Ref["new"](false)();
                    JsWebSocket["_onWsConnect"](ws)(function __do() {
                        var v = Effect_Ref.read(hasConnectedOnceRef)();
                        if (v) {
                            logger(Data_Log_Level.Debug.value)("Ogmios WS connection re-established, resending pending requests...")();
                            resendPendingRequests();
                            return logger(Data_Log_Level.Debug.value)("Resent all pending requests")();
                        };
                        if (!v) {
                            logger(Data_Log_Level.Debug.value)("Ogmios Connection established")();
                            Effect_Ref.write(true)(hasConnectedOnceRef)();
                            JsWebSocket["_removeOnWsError"](ws)(firstConnectionErrorRef)();
                            JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(logger)(messageDispatch))();
                            Data_Functor["void"](Effect.functorEffect)(JsWebSocket["_onWsError"](ws)(function (err) {
                                return function __do() {
                                    logger(Data_Log_Level.Debug.value)("Ogmios WebSocket error (" + (err + "). Reconnecting..."))();
                                    return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(500.0)))(function () {
                                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(JsWebSocket["_wsReconnect"](ws));
                                    }))();
                                };
                            }))();
                            return $$continue(new Data_Either.Right(ogmiosWs))();
                        };
                        throw new Error("Failed pattern match at QueryM (line 811, column 54 - line 829, column 32): " + [ v.constructor.name ]);
                    })();
                    return Effect_Aff.Canceler(function (err) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                            JsWebSocket["_wsClose"](ws)();
                            return $$continue(Data_Either.Left.create(err))();
                        });
                    });
                };
            };
        };
    };
};
var mkOgmiosWebSocketAff = function (datumCacheWs) {
    return function (logger) {
        var $297 = mkOgmiosWebSocket$prime(datumCacheWs)(logger);
        return function ($298) {
            return Effect_Aff.makeAff($297($298));
        };
    };
};
var mkQueryRuntime = function (config) {
    var logger = mkLogger(config.logLevel)(config.customLogger);
    return Control_Bind.bind(Effect_Aff.bindAff)(Types_UsedTxOuts.newUsedTxOuts(Effect_Aff.monadEffectAff))(function (usedTxOuts) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Data_Functor.map(Effect_Aff.functorParAff)(QueryRuntimeModel.create)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(mkDatumCacheWebSocketAff(logger)(config.datumCacheConfig))(function (datumCacheWs) {
            return Control_Bind.bind(Effect_Aff.bindAff)(mkOgmiosWebSocketAff(datumCacheWs)(logger)(config.ogmiosConfig))(function (ogmiosWs) {
                return Control_Bind.bind(Effect_Aff.bindAff)(getProtocolParametersAff(ogmiosWs)(logger))(function (pparams) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(ogmiosWs, new Data_Tuple.Tuple(datumCacheWs, pparams)));
                });
            });
        }))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(config.walletSpec)(mkWalletBySpec)))))(function (v) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                ogmiosWs: v.value0.value0,
                datumCacheWs: v.value0.value1.value0,
                wallet: v.value1,
                usedTxOuts: usedTxOuts,
                pparams: v.value0.value1.value1
            });
        });
    });
};
var withQueryRuntime = function (config) {
    return function (action) {
        return Control_Bind.bind(Effect_Aff.bindAff)(mkQueryRuntime(config))(function (runtime) {
            return Data_Function.flip(Effect_Aff["finally"])(Effect_Aff.supervise(action(runtime)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(stopQueryRuntime(runtime)));
        });
    };
};
var runQueryM = function (config) {
    return function (action) {
        return withQueryRuntime(config)(function (runtime) {
            return runQueryMInRuntime(config)(runtime)(action);
        });
    };
};
module.exports = {
    ClientHttpError: ClientHttpError,
    ClientHttpResponseError: ClientHttpResponseError,
    ClientDecodeJsonError: ClientDecodeJsonError,
    ClientEncodingError: ClientEncodingError,
    ClientOtherError: ClientOtherError,
    JsError: JsError,
    JsonError: JsonError,
    FaultError: FaultError,
    ListenerCancelled: ListenerCancelled,
    QueryMExtended: QueryMExtended,
    WebSocket: WebSocket,
    allowError: allowError,
    applyArgs: applyArgs,
    evaluateTxOgmios: evaluateTxOgmios,
    getChainTip: getChainTip,
    getDatumByHash: getDatumByHash,
    getDatumsByHashes: getDatumsByHashes,
    getLogger: getLogger,
    getProtocolParametersAff: getProtocolParametersAff,
    getWalletAddresses: getWalletAddresses,
    liftQueryM: liftQueryM,
    listeners: listeners,
    postAeson: postAeson,
    mkDatumCacheWebSocketAff: mkDatumCacheWebSocketAff,
    mkDatumCacheRequest: mkDatumCacheRequest,
    mkLogger: mkLogger,
    queryDispatch: queryDispatch,
    defaultMessageListener: defaultMessageListener,
    mkListenerSet: mkListenerSet,
    mkOgmiosRequest: mkOgmiosRequest,
    mkOgmiosRequestAff: mkOgmiosRequestAff,
    mkOgmiosWebSocketAff: mkOgmiosWebSocketAff,
    mkQueryRuntime: mkQueryRuntime,
    mkRequest: mkRequest,
    mkRequestAff: mkRequestAff,
    ownPaymentPubKeyHashes: ownPaymentPubKeyHashes,
    ownPubKeyHashes: ownPubKeyHashes,
    ownStakePubKeyHash: ownStakePubKeyHash,
    runQueryM: runQueryM,
    runQueryMWithSettings: runQueryMWithSettings,
    runQueryMInRuntime: runQueryMInRuntime,
    scriptToAeson: scriptToAeson,
    stopQueryRuntime: stopQueryRuntime,
    submitTxOgmios: submitTxOgmios,
    underlyingWebSocket: underlyingWebSocket,
    withMWalletAff: withMWalletAff,
    withMWallet: withMWallet,
    withQueryRuntime: withQueryRuntime,
    callCip30Wallet: callCip30Wallet,
    newtypeQueryMExtended_: newtypeQueryMExtended_,
    functorQueryMExtended: functorQueryMExtended,
    applyQueryMExtended: applyQueryMExtended,
    applicativeQueryMExtended: applicativeQueryMExtended,
    bindQueryMExtended: bindQueryMExtended,
    altQueryMExtended: altQueryMExtended,
    plusQueryMExtended: plusQueryMExtended,
    alternativeQueryMExtended: alternativeQueryMExtended,
    monadQueryMExtendedAff: monadQueryMExtendedAff,
    monadEffectQueryMExtended: monadEffectQueryMExtended,
    monadAffQueryMExtendedAff: monadAffQueryMExtendedAff,
    semigroupQueryMExtended: semigroupQueryMExtended,
    monoidQueryMExtended: monoidQueryMExtended,
    monadThrowErrorQueryMExte: monadThrowErrorQueryMExte,
    monadErrorErrorQueryMExte: monadErrorErrorQueryMExte,
    monadRecQueryMExtendedAff: monadRecQueryMExtendedAff,
    monadAskQueryEnvQueryMExt: monadAskQueryEnvQueryMExt,
    monadReaderQueryEnvQueryM: monadReaderQueryEnvQueryM,
    monadLoggerQueryMExtended: monadLoggerQueryMExtended,
    parallelQueryMExtendedPar: parallelQueryMExtendedPar,
    showClientError: showClientError,
    showDispatchError: showDispatchError,
    defaultDatumCacheWsConfig: QueryM_ServerConfig.defaultDatumCacheWsConfig,
    defaultOgmiosWsConfig: QueryM_ServerConfig.defaultOgmiosWsConfig,
    defaultServerConfig: QueryM_ServerConfig.defaultServerConfig,
    mkHttpUrl: QueryM_ServerConfig.mkHttpUrl,
    mkOgmiosDatumCacheWsUrl: QueryM_ServerConfig.mkOgmiosDatumCacheWsUrl,
    mkServerUrl: QueryM_ServerConfig.mkServerUrl,
    mkWsUrl: QueryM_ServerConfig.mkWsUrl
};
