// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Medea_Parser_Primitive = require("../Data.Medea.Parser.Primitive/index.js");
var Data_Medea_Parser_Spec_Property = require("../Data.Medea.Parser.Spec.Property/index.js");
var Data_Medea_Parser_Types = require("../Data.Medea.Parser.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Specification = (function () {
    function Specification(value0) {
        this.value0 = value0;
    };
    Specification.create = function (value0) {
        return new Specification(value0);
    };
    return Specification;
})();
var properties = function (v) {
    return v.value0.properties;
};
var mkSpec = function (p) {
    return function (aa) {
        return function (as) {
            return new Specification({
                properties: p,
                additionalAllowed: aa,
                additionalSchema: as
            });
        };
    };
};
var parseSpecification = (function () {
    var parseProperties = Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Spec_Property.parseSpecification));
    var parseAdditionalSchema = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Primitive.parseLine(8)(Data_Medea_Parser_Primitive.parseKeyVal(Data_Medea_Parser_Primitive.RAdditionalPropertySchema.value)(Data_Medea_Parser_Primitive.parseIdentifier)))));
    var parseAdditionalAllowed = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Primitive.parseLine(8)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Medea_Parser_Primitive.parseReserved(Data_Medea_Parser_Primitive.RAdditionalPropertiesAllowed.value))(true))));
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Medea_Parser_Primitive.parseLine(4)(Data_Medea_Parser_Primitive.parseReserved(Data_Medea_Parser_Primitive.RProperties.value)))(function () {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseProperties)(function (props) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAdditionalAllowed)(function (additionalAllowed$prime) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAdditionalSchema)(function (additionalSchema$prime) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(!additionalAllowed$prime && Data_Maybe.isJust(additionalSchema$prime))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(Data_Show.show(Data_Medea_Parser_Types.showMedeaParseErr)(Data_Medea_Parser_Types.ConflictingSpecRequirements.value))))(function () {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(mkSpec(props)(additionalAllowed$prime)(additionalSchema$prime));
                    });
                });
            });
        });
    });
})();
var eqSpecification = {
    eq: function (x) {
        return function (y) {
            return x.value0.additionalAllowed === y.value0.additionalAllowed && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Medea_Parser_Primitive.eqIdentifier))(x.value0.additionalSchema)(y.value0.additionalSchema) && Data_Eq.eq(Data_Eq.eqArray(Data_Medea_Parser_Spec_Property.eqSpecification))(x.value0.properties)(y.value0.properties);
        };
    }
};
var additionalSchema = function (v) {
    return v.value0.additionalSchema;
};
var additionalAllowed = function (v) {
    return v.value0.additionalAllowed;
};
module.exports = {
    Specification: Specification,
    parseSpecification: parseSpecification,
    mkSpec: mkSpec,
    properties: properties,
    additionalAllowed: additionalAllowed,
    additionalSchema: additionalSchema,
    eqSpecification: eqSpecification
};
