// Generated by purs version 0.14.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Laws = require("../Test.QuickCheck.Laws/index.js");
var checkFunctorWithIndex = function (dictFunctorWithIndex) {
    return function (dictArbitrary) {
        return function (dictCoarbitrary) {
            return function (dictEq) {
                return function (v) {
                    var identity = function (x) {
                        return Data_Eq.eq(dictEq)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function (v1) {
                            return function (a) {
                                return a;
                            };
                        })(x))(Control_Category.identity(Control_Category.categoryFn)(x));
                    };
                    var composition = function (f) {
                        return function (g) {
                            return function (x) {
                                return Data_Eq.eq(dictEq)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(f)(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(g)(x)))(Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function (i) {
                                    var $6 = f(i);
                                    var $7 = g(i);
                                    return function ($8) {
                                        return $6($7($8));
                                    };
                                })(x));
                            };
                        };
                    };
                    return function __do() {
                        Effect_Console.log("Checking 'Identity' law for FunctorWithIndex")();
                        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identity)();
                        Effect_Console.log("Checking 'Composition' law for FunctorWithIndex")();
                        return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(dictCoarbitrary)(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB)(Test_QuickCheck_Laws.arbitraryA)))(Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(dictCoarbitrary)(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB)))(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(composition)();
                    };
                };
            };
        };
    };
};
module.exports = {
    checkFunctorWithIndex: checkFunctorWithIndex
};
