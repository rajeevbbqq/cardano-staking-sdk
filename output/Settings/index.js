// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var Plutus_Types_CurrencySymbol = require("../Plutus.Types.CurrencySymbol/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_NatRatio = require("../Types.NatRatio/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Utils = require("../Utils/index.js");
var unbondedStakingTokenName = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("UnbondedStakingToken"));
var unbondedInterest = Data_Functor.map(Data_Maybe.functorMaybe)(Types_NatRatio.toRational)(Types_NatRatio.fromNaturals(Utils.nat(1))(Utils.nat(100)));
var submissionAttempts = 5;
var ntxTn = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("NTX"));
var ntxCs = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Plutus_Types_CurrencySymbol.mkCurrencySymbol)(Types_ByteArray.hexToByteArray("b5094f93ff9fcba9e8b257197d589cbcde3d92a108804e3a378bd2ce"));
var confirmationTimeout = Data_Time_Duration.Seconds(Data_Int.toNumber(120));
var bondedStakingTokenName = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("BondedStakingToken"));
var bondedInterest = Data_Functor.map(Data_Maybe.functorMaybe)(Types_NatRatio.toRational)(Types_NatRatio.fromNaturals(Utils.nat(10))(Utils.nat(100)));
var agixTn = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("AGIX"));
var agixCs = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Plutus_Types_CurrencySymbol.mkCurrencySymbol)(Types_ByteArray.hexToByteArray("6f1a1f0c7ccf632cc9ff4b79687ed13ffe5b624cce288b364ebdce50"));
var testInitBondedParams = Control_Bind.bind(Data_Maybe.bindMaybe)(bondedInterest)(function (interest) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(agixCs)(function (currencySymbol) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(agixTn)(function (tokenName) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                iterations: Utils.nat(1),
                start: Utils.big(1000),
                end: Utils.big(2000),
                userLength: Utils.big(180000),
                bondingLength: Utils.big(180000),
                interest: interest,
                minStake: Utils.nat(1),
                maxStake: Utils.nat(50000),
                bondedAssetClass: {
                    currencySymbol: currencySymbol,
                    tokenName: tokenName
                }
            });
        });
    });
});
var testInitUnbondedParams = Control_Bind.bind(Data_Maybe.bindMaybe)(unbondedInterest)(function (interest) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(agixCs)(function (currencySymbol) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(agixTn)(function (tokenName) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                start: Utils.big(1000),
                userLength: Utils.big(180000),
                adminLength: Utils.big(180000),
                bondingLength: Utils.big(180000),
                interestLength: Utils.big(100),
                increments: Utils.nat(1800),
                interest: interest,
                minStake: Utils.nat(1),
                maxStake: Utils.nat(100000000),
                unbondedAssetClass: {
                    currencySymbol: currencySymbol,
                    tokenName: tokenName
                }
            });
        });
    });
});
module.exports = {
    agixCs: agixCs,
    agixTn: agixTn,
    bondedStakingTokenName: bondedStakingTokenName,
    ntxCs: ntxCs,
    ntxTn: ntxTn,
    testInitBondedParams: testInitBondedParams,
    testInitUnbondedParams: testInitUnbondedParams,
    unbondedStakingTokenName: unbondedStakingTokenName,
    confirmationTimeout: confirmationTimeout,
    submissionAttempts: submissionAttempts
};
