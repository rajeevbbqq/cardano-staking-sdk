// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_TextDecoder = require("../Data.TextDecoder/index.js");
var Data_TextEncoder = require("../Data.TextEncoder/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var FromData = require("../FromData/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_ToMetadata = require("../Metadata.ToMetadata/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Cip25String = function (x) {
    return x;
};
var toMetadataCip25String = Metadata_ToMetadata.toMetadataString;
var toDataCip25String = ToData.toDataString;
var showCip25String = {
    show: function (v) {
        return "(unsafePartial (fromJust (mkCip25String " + (Data_Show.show(Data_Show.showString)(v) + ")))");
    }
};
var ordCip25String = Data_Ord.ordString;
var fromMetadataCip25String = Metadata_FromMetadata.fromMetadataString;
var fromDataCip25String = FromData.fromDataString;
var eqCip25String = Data_Eq.eqString;
var encodeAesonCip25String = Aeson.encodeAesonString;
var unCip25String = function (v) {
    return v;
};
var mkCip25String = function (str) {
    if (Types_ByteArray.byteLength(Data_Newtype.wrap()(Data_TextEncoder.encodeUtf8(str))) <= 64) {
        return Data_Maybe.Just.create(str);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Metadata.Cip25.Cip25String (line 67, column 1 - line 67, column 45): " + [ str.constructor.name ]);
};
var decodeAesonCip25String = {
    decodeAeson: Control_Bind.composeKleisli(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonString))((function () {
        var $47 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Cip25String"));
        return function ($48) {
            return $47(mkCip25String($48));
        };
    })())
};
var fromCip25Strings = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(unCip25String);
var fromDataString = function (datum) {
    return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(fromCip25Strings)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.singleton)(FromData.fromData(fromDataCip25String)(datum))))(Control_Bind.bind(Data_Maybe.bindMaybe)(FromData.fromData(FromData.fromDataArray(FromData.fromDataByteArray))(datum))(function (v) {
        return Data_Either.hush(Data_TextDecoder.decodeUtf8(Data_Newtype.unwrap()(Data_Foldable.fold(Data_Foldable.foldableArray)(Types_ByteArray.monoidByteArray)(v))));
    }));
};
var fromMetadataString = function (datum) {
    return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(fromCip25Strings)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.singleton)(Metadata_FromMetadata.fromMetadata(fromMetadataCip25String)(datum))))(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_FromMetadata.fromMetadata(Metadata_FromMetadata.fromMetadataArray(Metadata_FromMetadata.fromMetadataByteArray))(datum))(function (v) {
        return Data_Either.hush(Data_TextDecoder.decodeUtf8(Data_Newtype.unwrap()(Data_Foldable.fold(Data_Foldable.foldableArray)(Types_ByteArray.monoidByteArray)(v))));
    }));
};
var forwardSearch = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (Data_Maybe.isJust(v.takeN(v.minBound + v.step | 0))) {
            var $24 = (v.minBound + v.step | 0) <= v.maxBound;
            if ($24) {
                $copy_v = {
                    minBound: v.minBound + v.step | 0,
                    maxBound: v.maxBound,
                    takeN: v.takeN,
                    step: v.step
                };
                return;
            };
            $tco_done = true;
            return new Data_Tuple.Tuple(v.takeN(v.maxBound), v.maxBound);
        };
        if (Data_Boolean.otherwise) {
            var $25 = v.step === 1;
            if ($25) {
                $tco_done = true;
                return new Data_Tuple.Tuple(v.takeN(v.minBound), v.minBound);
            };
            $copy_v = {
                minBound: v.minBound,
                maxBound: v.maxBound,
                takeN: v.takeN,
                step: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v.step)(2)
            };
            return;
        };
        throw new Error("Failed pattern match at Metadata.Cip25.Cip25String (line 99, column 1 - line 102, column 20): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var takeCip25String = function (str) {
    var v = forwardSearch({
        minBound: 16,
        maxBound: 64,
        step: 24,
        takeN: function (ix) {
            return mkCip25String(Data_String_CodePoints.take(ix)(str));
        }
    });
    if (v.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
    };
    if (v.value0 instanceof Data_Maybe.Just) {
        return new Data_Maybe.Just({
            init: v.value0.value0,
            rest: (function () {
                var rest = Data_String_CodePoints.drop(v.value1)(str);
                var $33 = rest === "";
                if ($33) {
                    return Data_Maybe.Nothing.value;
                };
                return new Data_Maybe.Just(rest);
            })()
        });
    };
    throw new Error("Failed pattern match at Metadata.Cip25.Cip25String (line 81, column 3 - line 97, column 8): " + [ v.constructor.name ]);
};
var toCip25Strings = function (str) {
    var v = takeCip25String(str);
    if (v instanceof Data_Maybe.Nothing) {
        return [  ];
    };
    if (v instanceof Data_Maybe.Just) {
        if (v.value0.rest instanceof Data_Maybe.Just) {
            return Data_Array.cons(v.value0.init)(toCip25Strings(v.value0.rest.value0));
        };
        if (v.value0.rest instanceof Data_Maybe.Nothing) {
            return [ v.value0.init ];
        };
        throw new Error("Failed pattern match at Metadata.Cip25.Cip25String (line 119, column 5 - line 121, column 33): " + [ v.value0.rest.constructor.name ]);
    };
    throw new Error("Failed pattern match at Metadata.Cip25.Cip25String (line 116, column 22 - line 121, column 33): " + [ v.constructor.name ]);
};
var toDataString = function (str) {
    var v = toCip25Strings(str);
    if (v.length === 1) {
        return ToData.toData(toDataCip25String)(v[0]);
    };
    return ToData.toData(ToData.toDataArray(ToData.toDataPlutusData))(Data_Functor.map(Data_Functor.functorArray)(ToData.toData(toDataCip25String))(v));
};
var toMetadataString = function (str) {
    var v = toCip25Strings(str);
    if (v.length === 1) {
        return Metadata_ToMetadata.toMetadata(toMetadataCip25String)(v[0]);
    };
    return Metadata_ToMetadata.toMetadata(Metadata_ToMetadata.toMetadataArray(Metadata_ToMetadata.toMetadataTransactionMeta))(Data_Functor.map(Data_Functor.functorArray)(Metadata_ToMetadata.toMetadata(toMetadataCip25String))(v));
};
module.exports = {
    mkCip25String: mkCip25String,
    unCip25String: unCip25String,
    fromMetadataString: fromMetadataString,
    toMetadataString: toMetadataString,
    toCip25Strings: toCip25Strings,
    fromCip25Strings: fromCip25Strings,
    fromDataString: fromDataString,
    toDataString: toDataString,
    eqCip25String: eqCip25String,
    ordCip25String: ordCip25String,
    toMetadataCip25String: toMetadataCip25String,
    fromMetadataCip25String: fromMetadataCip25String,
    toDataCip25String: toDataCip25String,
    fromDataCip25String: fromDataCip25String,
    encodeAesonCip25String: encodeAesonCip25String,
    showCip25String: showCip25String,
    decodeAesonCip25String: decodeAesonCip25String
};
