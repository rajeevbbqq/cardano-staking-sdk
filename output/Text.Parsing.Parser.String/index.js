// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_CodePoint_Unicode = require("../Data.CodePoint.Unicode/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var unCodePoint = Unsafe_Coerce.unsafeCoerce;
var updatePosSingle = function (v) {
    return function (cp) {
        var v1 = unCodePoint(cp);
        if (v1 === 10) {
            return {
                line: v.line + 1 | 0,
                column: 1
            };
        };
        if (v1 === 13) {
            return {
                line: v.line + 1 | 0,
                column: 1
            };
        };
        if (v1 === 9) {
            return {
                line: v.line,
                column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
            };
        };
        return {
            line: v.line,
            column: v.column + 1 | 0
        };
    };
};
var updatePosString = function ($copy_pos) {
    return function ($copy_str) {
        var $tco_var_pos = $copy_pos;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(pos, str) {
            var v = Data_String_CodePoints.uncons(str);
            if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return pos;
            };
            if (v instanceof Data_Maybe.Just) {
                $tco_var_pos = updatePosSingle(pos)(v.value0.head);
                $copy_str = v.value0.tail;
                return;
            };
            throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 129, column 27 - line 131, column 70): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_pos, $copy_str);
        };
        return $tco_result;
    };
};
var string = function (dictMonad) {
    return function (str) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
            var v1 = Data_String_CodeUnits.stripPrefix(str)(v.value0);
            if (v1 instanceof Data_Maybe.Just) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.put(Text_Parsing_Parser.monadStateParserT(dictMonad))(new Text_Parsing_Parser.ParseState(v1.value0, updatePosString(v.value1)(str), true)))(function () {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                });
            };
            return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
        });
    };
};
var match = function (dictMonad) {
    return function (p) {
        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v1) {
                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Tuple.Tuple(Data_String_CodeUnits.take(Data_String_CodeUnits.length(v.value0) - Data_String_CodeUnits.length(v1.value0) | 0)(v.value0), x));
                });
            });
        });
    };
};
var eof = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
        return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_Common["null"](v.value0))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
    });
};
var anyCodePoint = function (dictMonad) {
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
        var v1 = Data_String_CodePoints.uncons(v.value0);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.put(Text_Parsing_Parser.monadStateParserT(dictMonad))(new Text_Parsing_Parser.ParseState(v1.value0.tail, updatePosSingle(v.value1)(v1.value0.head), true)))(function () {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
            });
        };
        throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 84, column 3 - line 88, column 16): " + [ v1.constructor.name ]);
    });
};
var satisfyCodePoint = function (dictMonad) {
    return function (f) {
        return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyCodePoint(dictMonad))(function (c) {
            var $60 = f(c);
            if ($60) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
            };
            return Text_Parsing_Parser.fail(dictMonad)("Predicate unsatisfied");
        }));
    };
};
var skipSpaces = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(satisfyCodePoint(dictMonad)(Data_CodePoint_Unicode.isSpace));
};
var whiteSpace = function (dictMonad) {
    return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Tuple.fst)(match(dictMonad)(skipSpaces(dictMonad)));
};
var anyChar = function (dictMonad) {
    return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(unCodePoint)(anyCodePoint(dictMonad)))(function (v) {
        var $62 = v > 65535;
        if ($62) {
            return Text_Parsing_Parser.fail(dictMonad)("Not a Char");
        };
        var v1 = Data_Char.fromCharCode(v);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Text_Parsing_Parser.fail(dictMonad)("Not a Char");
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
        };
        throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 75, column 8 - line 77, column 21): " + [ v1.constructor.name ]);
    }));
};
var satisfy = function (dictMonad) {
    return function (f) {
        return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictMonad))(function (c) {
            var $65 = f(c);
            if ($65) {
                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
            };
            return Text_Parsing_Parser.fail(dictMonad)("Predicate unsatisfied");
        }));
    };
};
var $$char = function (dictMonad) {
    return function (c) {
        return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictMonad)(function (v) {
            return v === c;
        }))(Data_Show.show(Data_Show.showChar)(c));
    };
};
var noneOf = function (dictMonad) {
    return function (ss) {
        return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictMonad)(Data_Function.flip(Data_Array.notElem(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
    };
};
var oneOf = function (dictMonad) {
    return function (ss) {
        return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
    };
};
module.exports = {
    string: string,
    eof: eof,
    anyChar: anyChar,
    anyCodePoint: anyCodePoint,
    satisfy: satisfy,
    satisfyCodePoint: satisfyCodePoint,
    "char": $$char,
    whiteSpace: whiteSpace,
    skipSpaces: skipSpaces,
    oneOf: oneOf,
    noneOf: noneOf,
    match: match
};
