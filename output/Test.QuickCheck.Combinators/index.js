// Generated by purs version 0.14.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Typelevel_Num_Sets = require("../Data.Typelevel.Num.Sets/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Gen = require("../Test.QuickCheck.Gen/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Between = function (x) {
    return x;
};
var AtMost = function (x) {
    return x;
};
var AtLeast = function (x) {
    return x;
};
var xor$prime = function (m) {
    return function (s) {
        return function (x) {
            return function (y) {
                var v = new Data_Tuple.Tuple(x, y);
                if (v.value0 instanceof Test_QuickCheck.Failed && v.value1 instanceof Test_QuickCheck.Failed) {
                    return new Test_QuickCheck.Failed(v.value0.value0 + (m + v.value1.value0));
                };
                if (v.value0 instanceof Test_QuickCheck.Success && v.value1 instanceof Test_QuickCheck.Success) {
                    return new Test_QuickCheck.Failed(s);
                };
                if (v.value0 instanceof Test_QuickCheck.Success) {
                    return v.value1;
                };
                if (v.value1 instanceof Test_QuickCheck.Success) {
                    return v.value0;
                };
                throw new Error("Failed pattern match at Test.QuickCheck.Combinators (line 52, column 16 - line 56, column 25): " + [ v.constructor.name ]);
            };
        };
    };
};
var xor = xor$prime(", xor ")("XOR");
var not$prime = function (m) {
    return function (x) {
        if (x instanceof Test_QuickCheck.Success) {
            return new Test_QuickCheck.Failed(m);
        };
        return Test_QuickCheck.Success.value;
    };
};
var implies = function (x) {
    return function (y) {
        if (y instanceof Test_QuickCheck.Failed) {
            if (x instanceof Test_QuickCheck.Success) {
                return new Test_QuickCheck.Failed("Implied failure: " + y.value0);
            };
            return Test_QuickCheck.Success.value;
        };
        return Test_QuickCheck.Success.value;
    };
};
var getBetween = function (v) {
    return v;
};
var getAtMost = function (v) {
    return v;
};
var getAtLeast = function (v) {
    return v;
};
var genericBetween = function (dictGeneric) {
    return {
        to: function (x) {
            return x;
        },
        from: function (x) {
            return x;
        }
    };
};
var genericAtMost = function (dictGeneric) {
    return {
        to: function (x) {
            return x;
        },
        from: function (x) {
            return x;
        }
    };
};
var genericAtLeast = function (dictGeneric) {
    return {
        to: function (x) {
            return x;
        },
        from: function (x) {
            return x;
        }
    };
};
var disj$prime = function (m) {
    return function (x) {
        return function (y) {
            var v = new Data_Tuple.Tuple(x, y);
            if (v.value0 instanceof Test_QuickCheck.Failed && v.value1 instanceof Test_QuickCheck.Failed) {
                return new Test_QuickCheck.Failed(v.value0.value0 + (m + v.value1.value0));
            };
            return Test_QuickCheck.Success.value;
        };
    };
};
var disj = disj$prime(", or ");
var conj$prime = function (m) {
    return function (x) {
        return function (y) {
            var v = new Data_Tuple.Tuple(x, y);
            if (v.value0 instanceof Test_QuickCheck.Success && v.value1 instanceof Test_QuickCheck.Success) {
                return Test_QuickCheck.Success.value;
            };
            if (v.value0 instanceof Test_QuickCheck.Failed && v.value1 instanceof Test_QuickCheck.Failed) {
                return new Test_QuickCheck.Failed(v.value0.value0 + (m + v.value1.value0));
            };
            if (v.value0 instanceof Test_QuickCheck.Success) {
                return v.value1;
            };
            if (v.value1 instanceof Test_QuickCheck.Success) {
                return v.value0;
            };
            throw new Error("Failed pattern match at Test.QuickCheck.Combinators (line 21, column 15 - line 25, column 25): " + [ v.constructor.name ]);
        };
    };
};
var conj = conj$prime(", and ");
var arbitraryBetween = function (dictArbitrary) {
    return function (dictNat) {
        return function (dictNat1) {
            return function (dictUnfoldable) {
                return function (dictTraversable) {
                    return {
                        arbitrary: (function () {
                            var n = Data_Typelevel_Num_Sets["toInt'"](dictNat)(Type_Proxy["Proxy"].value);
                            var m = Data_Typelevel_Num_Sets["toInt'"](dictNat1)(Type_Proxy["Proxy"].value);
                            return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.chooseInt(n)(m))(function (l) {
                                return Data_Functor.map(Test_QuickCheck_Gen.functorGen)(Between)(Data_Unfoldable.replicateA(Test_QuickCheck_Gen.applicativeGen)(dictUnfoldable)(dictTraversable)(l)(Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary)));
                            });
                        })()
                    };
                };
            };
        };
    };
};
var arbitraryAtMost = function (dictArbitrary) {
    return function (dictNat) {
        return function (dictUnfoldable) {
            return function (dictTraversable) {
                return {
                    arbitrary: (function () {
                        var n = Data_Typelevel_Num_Sets["toInt'"](dictNat)(Type_Proxy["Proxy"].value);
                        return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.chooseInt(0)(n))(function (l) {
                            return Data_Functor.map(Test_QuickCheck_Gen.functorGen)(AtMost)(Data_Unfoldable.replicateA(Test_QuickCheck_Gen.applicativeGen)(dictUnfoldable)(dictTraversable)(l)(Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary)));
                        });
                    })()
                };
            };
        };
    };
};
var arbitraryAtLeast = function (dictArbitrary) {
    return function (dictNat) {
        return function (dictUnfoldable) {
            return function (dictTraversable) {
                return {
                    arbitrary: Test_QuickCheck_Gen.sized(function (s) {
                        var n = Data_Typelevel_Num_Sets["toInt'"](dictNat)(Type_Proxy["Proxy"].value);
                        return Control_Bind.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.chooseInt(n)((function () {
                            var $68 = s < n;
                            if ($68) {
                                return n;
                            };
                            return s;
                        })()))(function (l) {
                            return Data_Functor.map(Test_QuickCheck_Gen.functorGen)(AtLeast)(Data_Unfoldable.replicateA(Test_QuickCheck_Gen.applicativeGen)(dictUnfoldable)(dictTraversable)(l)(Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary)));
                        });
                    })
                };
            };
        };
    };
};
module.exports = {
    conj: conj,
    "conj'": conj$prime,
    disj: disj,
    "disj'": disj$prime,
    xor: xor,
    "xor'": xor$prime,
    implies: implies,
    "not'": not$prime,
    AtLeast: AtLeast,
    getAtLeast: getAtLeast,
    AtMost: AtMost,
    getAtMost: getAtMost,
    Between: Between,
    getBetween: getBetween,
    genericAtLeast: genericAtLeast,
    arbitraryAtLeast: arbitraryAtLeast,
    genericAtMost: genericAtMost,
    arbitraryAtMost: arbitraryAtMost,
    genericBetween: genericBetween,
    arbitraryBetween: arbitraryBetween
};
