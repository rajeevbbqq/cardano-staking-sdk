// Generated by purs version 0.14.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var SFail = (function () {
    function SFail() {

    };
    SFail.value = new SFail();
    return SFail;
})();
var SEmpty = (function () {
    function SEmpty() {

    };
    SEmpty.value = new SEmpty();
    return SEmpty;
})();
var SChar = (function () {
    function SChar(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SChar.create = function (value0) {
        return function (value1) {
            return new SChar(value0, value1);
        };
    };
    return SChar;
})();
var SText = (function () {
    function SText(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    SText.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new SText(value0, value1, value2);
            };
        };
    };
    return SText;
})();
var SLine = (function () {
    function SLine(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SLine.create = function (value0) {
        return function (value1) {
            return new SLine(value0, value1);
        };
    };
    return SLine;
})();
var SFail$prime = (function () {
    function SFail$prime() {

    };
    SFail$prime.value = new SFail$prime();
    return SFail$prime;
})();
var SEmpty$prime = (function () {
    function SEmpty$prime() {

    };
    SEmpty$prime.value = new SEmpty$prime();
    return SEmpty$prime;
})();
var SChar$prime = (function () {
    function SChar$prime(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SChar$prime.create = function (value0) {
        return function (value1) {
            return new SChar$prime(value0, value1);
        };
    };
    return SChar$prime;
})();
var SText$prime = (function () {
    function SText$prime(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    SText$prime.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new SText$prime(value0, value1, value2);
            };
        };
    };
    return SText$prime;
})();
var SLine$prime = (function () {
    function SLine$prime(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SLine$prime.create = function (value0) {
        return function (value1) {
            return new SLine$prime(value0, value1);
        };
    };
    return SLine$prime;
})();
var Fail = (function () {
    function Fail() {

    };
    Fail.value = new Fail();
    return Fail;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var Char = (function () {
    function Char(value0) {
        this.value0 = value0;
    };
    Char.create = function (value0) {
        return new Char(value0);
    };
    return Char;
})();
var Text = (function () {
    function Text(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Text.create = function (value0) {
        return function (value1) {
            return new Text(value0, value1);
        };
    };
    return Text;
})();
var Line = (function () {
    function Line() {

    };
    Line.value = new Line();
    return Line;
})();
var FlatAlt = (function () {
    function FlatAlt(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FlatAlt.create = function (value0) {
        return function (value1) {
            return new FlatAlt(value0, value1);
        };
    };
    return FlatAlt;
})();
var Cat = (function () {
    function Cat(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cat.create = function (value0) {
        return function (value1) {
            return new Cat(value0, value1);
        };
    };
    return Cat;
})();
var Nest = (function () {
    function Nest(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Nest.create = function (value0) {
        return function (value1) {
            return new Nest(value0, value1);
        };
    };
    return Nest;
})();
var Union = (function () {
    function Union(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Union.create = function (value0) {
        return function (value1) {
            return new Union(value0, value1);
        };
    };
    return Union;
})();
var Column = (function () {
    function Column(value0) {
        this.value0 = value0;
    };
    Column.create = function (value0) {
        return new Column(value0);
    };
    return Column;
})();
var Columns = (function () {
    function Columns(value0) {
        this.value0 = value0;
    };
    Columns.create = function (value0) {
        return new Columns(value0);
    };
    return Columns;
})();
var Nesting = (function () {
    function Nesting(value0) {
        this.value0 = value0;
    };
    Nesting.create = function (value0) {
        return new Nesting(value0);
    };
    return Nesting;
})();
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Cons(value0, value1, value2);
            };
        };
    };
    return Cons;
})();
var text = function (v) {
    if (v === "") {
        return Empty.value;
    };
    return new Text(Data_String_CodePoints.length(v), v);
};
var squote = new Char("'");
var spaces = function (n) {
    if (n <= 0) {
        return "";
    };
    if (Data_Boolean.otherwise) {
        return Data_String_CodeUnits.fromCharArray(Data_Array.replicate(n)(" "));
    };
    throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 908, column 1 - line 908, column 24): " + [ n.constructor.name ]);
};
var space = new Char(" ");
var simpleDocEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof SFail && y instanceof SFail) {
                return true;
            };
            if (x instanceof SEmpty && y instanceof SEmpty) {
                return true;
            };
            if (x instanceof SChar && y instanceof SChar) {
                return x.value0 === y.value0 && Data_Eq.eq(simpleDocEq)(x.value1)(y.value1);
            };
            if (x instanceof SText && y instanceof SText) {
                return x.value0 === y.value0 && x.value1 === y.value1 && Data_Eq.eq(simpleDocEq)(x.value2)(y.value2);
            };
            if (x instanceof SLine && y instanceof SLine) {
                return x.value0 === y.value0 && Data_Eq.eq(simpleDocEq)(x.value1)(y.value1);
            };
            return false;
        };
    }
};
var simpleDocOrd = {
    compare: function (x) {
        return function (y) {
            if (x instanceof SFail && y instanceof SFail) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof SFail) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof SFail) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof SEmpty && y instanceof SEmpty) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof SEmpty) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof SEmpty) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof SChar && y instanceof SChar) {
                var v = Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(simpleDocOrd)(x.value1)(y.value1);
            };
            if (x instanceof SChar) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof SChar) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof SText && y instanceof SText) {
                var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(simpleDocOrd)(x.value2)(y.value2);
            };
            if (x instanceof SText) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof SText) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof SLine && y instanceof SLine) {
                var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(simpleDocOrd)(x.value1)(y.value1);
            };
            throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 608, column 1 - line 608, column 46): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return simpleDocEq;
    }
};
var semi = new Char(";");
var rparen = new Char(")");
var renderCompact = (function () {
    var scan = function (k) {
        return function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return SEmpty.value;
            };
            if (v instanceof Data_List_Types.Cons) {
                if (v.value0 instanceof Fail) {
                    return SFail.value;
                };
                if (v.value0 instanceof Empty) {
                    return scan(k)(v.value1);
                };
                if (v.value0 instanceof Char) {
                    var k$prime = k + 1 | 0;
                    return new SChar(v.value0.value0, scan(k$prime)(v.value1));
                };
                if (v.value0 instanceof Text) {
                    var k$prime = k + v.value0.value0 | 0;
                    return new SText(v.value0.value0, v.value0.value1, scan(k$prime)(v.value1));
                };
                if (v.value0 instanceof FlatAlt) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value0, v.value1));
                };
                if (v.value0 instanceof Line) {
                    return new SLine(0, scan(0)(v.value1));
                };
                if (v.value0 instanceof Cat) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value1, v.value1)));
                };
                if (v.value0 instanceof Nest) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value1, v.value1));
                };
                if (v.value0 instanceof Union) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value1, v.value1));
                };
                if (v.value0 instanceof Column) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value0(k), v.value1));
                };
                if (v.value0 instanceof Columns) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value0(Data_Maybe.Nothing.value), v.value1));
                };
                if (v.value0 instanceof Nesting) {
                    return scan(k)(new Data_List_Types.Cons(v.value0.value0(0), v.value1));
                };
                throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 863, column 30 - line 875, column 73): " + [ v.value0.constructor.name ]);
            };
            throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 862, column 7 - line 862, column 35): " + [ k.constructor.name, v.constructor.name ]);
        };
    };
    var $244 = scan(0);
    return function ($245) {
        return $244(Data_List.singleton($245));
    };
})();
var rbracket = new Char("]");
var rbrace = new Char("}");
var rangle = new Char(">");
var number = function (f) {
    return text(Data_Show.show(Data_Show.showNumber)(f));
};
var nesting = function (f) {
    return new Nesting(f);
};
var nest = function (i) {
    return function (x) {
        return new Nest(i, x);
    };
};
var lparen = new Char("(");
var line = new FlatAlt(Line.value, space);
var lbracket = new Char("[");
var lbrace = new Char("{");
var langle = new Char("<");
var $$int = function (i) {
    return text(Data_Show.show(Data_Show.showInt)(i));
};
var indentation = function (n) {
    return spaces(n);
};
var hardline = Line.value;
var genericSimpleDoc = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return SFail.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return SEmpty.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new SChar(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new SText(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value1.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
            return new SLine(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        };
        throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 609, column 1 - line 609, column 56): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof SFail) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof SEmpty) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof SChar) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
        };
        if (x instanceof SText) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2))))));
        };
        if (x instanceof SLine) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)))));
        };
        throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 609, column 1 - line 609, column 56): " + [ x.constructor.name ]);
    }
};
var showSimpleDoc = {
    show: function (a) {
        return Data_Show_Generic.genericShow(genericSimpleDoc)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "SFail";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "SEmpty";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showChar))(Data_Show_Generic.genericShowArgsArgument(showSimpleDoc)))({
            reflectSymbol: function () {
                return "SChar";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showInt))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))(Data_Show_Generic.genericShowArgsArgument(showSimpleDoc))))({
            reflectSymbol: function () {
                return "SText";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showInt))(Data_Show_Generic.genericShowArgsArgument(showSimpleDoc)))({
            reflectSymbol: function () {
                return "SLine";
            }
        }))))))(a);
    }
};
var forceSimpleDoc = function (v) {
    if (v instanceof SFail$prime) {
        return SFail.value;
    };
    if (v instanceof SEmpty$prime) {
        return SEmpty.value;
    };
    if (v instanceof SChar$prime) {
        return new SChar(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
    };
    if (v instanceof SText$prime) {
        return new SText(v.value0, v.value1, forceSimpleDoc(Data_Lazy.force(v.value2)));
    };
    if (v instanceof SLine$prime) {
        return new SLine(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
    };
    throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 600, column 18 - line 605, column 51): " + [ v.constructor.name ]);
};
var renderFits = function (fits) {
    return function (rfrac) {
        return function (w) {
            return function (headNode) {
                var r = Data_Ord.max(Data_Ord.ordInt)(0)(Data_Ord.min(Data_Ord.ordInt)(w)(Data_Int.round(Data_Int.toNumber(w) * rfrac)));
                var nicest$prime = function (n) {
                    return function (k) {
                        return function (i) {
                            return function (ds) {
                                return function (x) {
                                    return function (y) {
                                        var x$prime = best(n)(k)(new Cons(i, x, ds));
                                        var width$prime = Data_Ord.min(Data_Ord.ordInt)(w - k | 0)((r - k | 0) + n | 0);
                                        var $170 = fits(w)(Data_Ord.min(Data_Ord.ordInt)(n)(k))(width$prime)(x$prime);
                                        if ($170) {
                                            return x$prime;
                                        };
                                        var y$prime = best(n)(k)(new Cons(i, y, ds));
                                        return y$prime;
                                    };
                                };
                            };
                        };
                    };
                };
                var best = function (n) {
                    return function (k) {
                        return function (v) {
                            if (v instanceof Nil) {
                                return SEmpty$prime.value;
                            };
                            if (v instanceof Cons) {
                                if (v.value1 instanceof Fail) {
                                    return SFail$prime.value;
                                };
                                if (v.value1 instanceof Empty) {
                                    return best(n)(k)(v.value2);
                                };
                                if (v.value1 instanceof Char) {
                                    var k$prime = k + 1 | 0;
                                    return new SChar$prime(v.value1.value0, Data_Lazy.defer(function (v1) {
                                        return best(n)(k$prime)(v.value2);
                                    }));
                                };
                                if (v.value1 instanceof Text) {
                                    var k$prime = k + v.value1.value0 | 0;
                                    return new SText$prime(v.value1.value0, v.value1.value1, Data_Lazy.defer(function (v1) {
                                        return best(n)(k$prime)(v.value2);
                                    }));
                                };
                                if (v.value1 instanceof Line) {
                                    return new SLine$prime(v.value0, Data_Lazy.defer(function (v1) {
                                        return best(v.value0)(v.value0)(v.value2);
                                    }));
                                };
                                if (v.value1 instanceof FlatAlt) {
                                    return best(n)(k)(new Cons(v.value0, v.value1.value0, v.value2));
                                };
                                if (v.value1 instanceof Cat) {
                                    return best(n)(k)(new Cons(v.value0, v.value1.value0, new Cons(v.value0, v.value1.value1, v.value2)));
                                };
                                if (v.value1 instanceof Nest) {
                                    var i$prime = v.value0 + v.value1.value0 | 0;
                                    return best(n)(k)(new Cons(i$prime, v.value1.value1, v.value2));
                                };
                                if (v.value1 instanceof Union) {
                                    return nicest$prime(n)(k)(v.value0)(v.value2)(v.value1.value0)(v.value1.value1);
                                };
                                if (v.value1 instanceof Column) {
                                    return best(n)(k)(new Cons(v.value0, v.value1.value0(k), v.value2));
                                };
                                if (v.value1 instanceof Columns) {
                                    return best(n)(k)(new Cons(v.value0, v.value1.value0(new Data_Maybe.Just(w)), v.value2));
                                };
                                if (v.value1 instanceof Nesting) {
                                    return best(n)(k)(new Cons(v.value0, v.value1.value0(v.value0), v.value2));
                                };
                                throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 788, column 11 - line 802, column 56): " + [ v.value1.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 785, column 7 - line 785, column 50): " + [ n.constructor.name, k.constructor.name, v.constructor.name ]);
                        };
                    };
                };
                return forceSimpleDoc(best(0)(0)(new Cons(0, headNode, Nil.value)));
            };
        };
    };
};
var foldr1 = function (dictMonoid) {
    return function (f) {
        return function ($246) {
            return (function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(v.value0.last)(v.value0.init);
                };
                throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 122, column 29 - line 124, column 43): " + [ v.constructor.name ]);
            })(Data_Array.unsnoc($246));
        };
    };
};
var flatten = function (v) {
    if (v instanceof FlatAlt) {
        return v.value1;
    };
    if (v instanceof Cat) {
        return new Cat(flatten(v.value0), flatten(v.value1));
    };
    if (v instanceof Nest) {
        return new Nest(v.value0, flatten(v.value1));
    };
    if (v instanceof Line) {
        return Fail.value;
    };
    if (v instanceof Union) {
        return flatten(v.value0);
    };
    if (v instanceof Column) {
        return new Column(function ($247) {
            return flatten(v.value0($247));
        });
    };
    if (v instanceof Columns) {
        return new Columns(function ($248) {
            return flatten(v.value0($248));
        });
    };
    if (v instanceof Nesting) {
        return new Nesting(function ($249) {
            return flatten(v.value0($249));
        });
    };
    return v;
};
var group = function (x) {
    return new Union(flatten(x), x);
};
var softline = group(line);
var flatAlt = FlatAlt.create;
var fitsR = function ($copy_p) {
    return function ($copy_m) {
        return function ($copy_w) {
            return function ($copy_v) {
                var $tco_var_p = $copy_p;
                var $tco_var_m = $copy_m;
                var $tco_var_w = $copy_w;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(p, m, w, v) {
                    if (w < 0) {
                        $tco_done = true;
                        return false;
                    };
                    if (v instanceof SFail$prime) {
                        $tco_done = true;
                        return false;
                    };
                    if (v instanceof SEmpty$prime) {
                        $tco_done = true;
                        return true;
                    };
                    if (v instanceof SChar$prime) {
                        $tco_var_p = p;
                        $tco_var_m = m;
                        $tco_var_w = w - 1 | 0;
                        $copy_v = Data_Lazy.force(v.value1);
                        return;
                    };
                    if (v instanceof SText$prime) {
                        $tco_var_p = p;
                        $tco_var_m = m;
                        $tco_var_w = w - v.value0 | 0;
                        $copy_v = Data_Lazy.force(v.value2);
                        return;
                    };
                    if (v instanceof SLine$prime) {
                        if (m < v.value0) {
                            $tco_var_p = p;
                            $tco_var_m = m;
                            $tco_var_w = p - v.value0 | 0;
                            $copy_v = Data_Lazy.force(v.value1);
                            return;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_done = true;
                            return true;
                        };
                    };
                    throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 837, column 1 - line 837, column 55): " + [ p.constructor.name, m.constructor.name, w.constructor.name, v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_p, $tco_var_m, $tco_var_w, $copy_v);
                };
                return $tco_result;
            };
        };
    };
};
var renderSmart = renderFits(fitsR);
var fits1 = function ($copy_v) {
    return function ($copy_v1) {
        return function ($copy_w) {
            return function ($copy_v2) {
                var $tco_var_v = $copy_v;
                var $tco_var_v1 = $copy_v1;
                var $tco_var_w = $copy_w;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1, w, v2) {
                    if (w < 0) {
                        $tco_done = true;
                        return false;
                    };
                    if (v2 instanceof SFail$prime) {
                        $tco_done = true;
                        return false;
                    };
                    if (v2 instanceof SEmpty$prime) {
                        $tco_done = true;
                        return true;
                    };
                    if (v2 instanceof SChar$prime) {
                        $tco_var_v = v;
                        $tco_var_v1 = v1;
                        $tco_var_w = w - 1 | 0;
                        $copy_v2 = Data_Lazy.force(v2.value1);
                        return;
                    };
                    if (v2 instanceof SText$prime) {
                        $tco_var_v = v;
                        $tco_var_v1 = v1;
                        $tco_var_w = w - v2.value0 | 0;
                        $copy_v2 = Data_Lazy.force(v2.value2);
                        return;
                    };
                    if (v2 instanceof SLine$prime) {
                        $tco_done = true;
                        return true;
                    };
                    throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 819, column 1 - line 819, column 55): " + [ v.constructor.name, v1.constructor.name, w.constructor.name, v2.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_w, $copy_v2);
                };
                return $tco_result;
            };
        };
    };
};
var renderPretty = renderFits(fits1);
var equals = new Char("=");
var empty = Empty.value;
var linebreak = new FlatAlt(Line.value, empty);
var softbreak = group(linebreak);
var dquote = new Char("\"");
var dot = new Char(".");
var displayS = function (v) {
    if (v instanceof SFail) {
        return Partial_Unsafe.unsafeCrashWith("@SFail@ can not appear uncaught in a rendered @SimpleDoc@");
    };
    if (v instanceof SEmpty) {
        return "";
    };
    if (v instanceof SChar) {
        return Data_String_CodeUnits.fromCharArray([ v.value0 ]) + displayS(v.value1);
    };
    if (v instanceof SText) {
        return v.value1 + displayS(v.value2);
    };
    if (v instanceof SLine) {
        return "\x0a" + (indentation(v.value0) + displayS(v.value1));
    };
    throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 893, column 1 - line 893, column 32): " + [ v.constructor.name ]);
};
var docShow = {
    show: (function () {
        var $250 = renderPretty(0.4)(80);
        return function ($251) {
            return displayS($250($251));
        };
    })()
};
var comma = new Char(",");
var columns = function (f) {
    return new Columns(f);
};
var column = function (f) {
    return new Column(f);
};
var colon = new Char(":");
var $$char = function (v) {
    if (v === "\x0a") {
        return line;
    };
    return new Char(v);
};
var bool = function (b) {
    return text(Data_Show.show(Data_Show.showBoolean)(b));
};
var beside = function (x) {
    return function (y) {
        return new Cat(x, y);
    };
};
var docSemigroup = {
    append: beside
};
var docMonoid = {
    mempty: empty,
    Semigroup0: function () {
        return docSemigroup;
    }
};
var string = (function () {
    var $252 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(docMonoid)(line);
    var $253 = Data_Functor.map(Data_Functor.functorArray)(text);
    var $254 = Data_String_Common.split("\x0a");
    return function ($255) {
        return $252($253($254($255)));
    };
})();
var enclose = function (l) {
    return function (r) {
        return function (x) {
            return Data_Semigroup.append(docSemigroup)(l)(Data_Semigroup.append(docSemigroup)(x)(r));
        };
    };
};
var braces = enclose(lbrace)(rbrace);
var brackets = enclose(lbracket)(rbracket);
var dquotes = enclose(dquote)(dquote);
var parens = enclose(lparen)(rparen);
var squotes = enclose(squote)(squote);
var hcat = foldr1(docMonoid)(Data_Semigroup.append(docSemigroup));
var punctuate = function (p) {
    return function (arr) {
        var lastIdx = Data_Array.length(arr) - 1 | 0;
        return Data_Array.mapWithIndex(function (idx) {
            return function (d) {
                var $239 = lastIdx === idx;
                if ($239) {
                    return d;
                };
                return Data_Semigroup.append(docSemigroup)(d)(p);
            };
        })(arr);
    };
};
var width = function (d) {
    return function (f) {
        return column(function (k1) {
            return Data_Semigroup.append(docSemigroup)(d)(column(function (k2) {
                return f(k2 - k1 | 0);
            }));
        });
    };
};
var fill = function (f) {
    return function (d) {
        return width(d)(function (w) {
            var $240 = w >= f;
            if ($240) {
                return empty;
            };
            return text(spaces(f - w | 0));
        });
    };
};
var fillBreak = function (f) {
    return function (x) {
        return width(x)(function (w) {
            var $241 = w > f;
            if ($241) {
                return nest(f)(linebreak);
            };
            return text(spaces(f - w | 0));
        });
    };
};
var backslash = new Char("\\");
var appendWithSpace = function (x) {
    return function (y) {
        return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(space)(y));
    };
};
var hsep = foldr1(docMonoid)(appendWithSpace);
var appendWithSoftline = function (x) {
    return function (y) {
        return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softline)(y));
    };
};
var fillSep = foldr1(docMonoid)(appendWithSoftline);
var appendWithSoftbreak = function (x) {
    return function (y) {
        return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softbreak)(y));
    };
};
var fillCat = foldr1(docMonoid)(appendWithSoftbreak);
var appendWithLinebreak = function (x) {
    return function (y) {
        return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(linebreak)(y));
    };
};
var vcat = foldr1(docMonoid)(appendWithLinebreak);
var cat = function ($256) {
    return group(vcat($256));
};
var appendWithLine = function (x) {
    return function (y) {
        return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(line)(y));
    };
};
var vsep = foldr1(docMonoid)(appendWithLine);
var sep = function ($257) {
    return group(vsep($257));
};
var angles = enclose(langle)(rangle);
var align = function (d) {
    return column(function (k) {
        return nesting(function (i) {
            return nest(k - i | 0)(d);
        });
    });
};
var encloseSep = function (left) {
    return function (right) {
        return function (sep$prime) {
            return function (ds) {
                if (ds.length === 0) {
                    return Data_Semigroup.append(docSemigroup)(left)(right);
                };
                if (ds.length === 1) {
                    return Data_Semigroup.append(docSemigroup)(left)(Data_Semigroup.append(docSemigroup)(ds[0])(right));
                };
                return align(Data_Semigroup.append(docSemigroup)(cat(Data_List_Lazy.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_List_Lazy.zipWith(Data_Semigroup.append(docSemigroup))(Data_List_Lazy_Types.cons(left)(Data_List_Lazy.repeat(sep$prime)))(Data_List_Lazy.fromFoldable(Data_Foldable.foldableArray)(ds)))))(right));
            };
        };
    };
};
var list = encloseSep(lbracket)(rbracket)(comma);
var semiBraces = encloseSep(lbrace)(rbrace)(semi);
var tupled = encloseSep(lparen)(rparen)(comma);
var hang = function (i) {
    return function (d) {
        return align(nest(i)(d));
    };
};
var indent = function (i) {
    return function (d) {
        return hang(i)(Data_Semigroup.append(docSemigroup)(text(spaces(i)))(d));
    };
};
module.exports = {
    list: list,
    tupled: tupled,
    semiBraces: semiBraces,
    encloseSep: encloseSep,
    punctuate: punctuate,
    sep: sep,
    foldr1: foldr1,
    fillSep: fillSep,
    hsep: hsep,
    vsep: vsep,
    cat: cat,
    fillCat: fillCat,
    hcat: hcat,
    vcat: vcat,
    appendWithSpace: appendWithSpace,
    appendWithSoftline: appendWithSoftline,
    appendWithSoftbreak: appendWithSoftbreak,
    appendWithLine: appendWithLine,
    appendWithLinebreak: appendWithLinebreak,
    softline: softline,
    softbreak: softbreak,
    squotes: squotes,
    dquotes: dquotes,
    braces: braces,
    parens: parens,
    angles: angles,
    brackets: brackets,
    enclose: enclose,
    lparen: lparen,
    rparen: rparen,
    langle: langle,
    rangle: rangle,
    lbrace: lbrace,
    rbrace: rbrace,
    lbracket: lbracket,
    rbracket: rbracket,
    squote: squote,
    dquote: dquote,
    semi: semi,
    colon: colon,
    comma: comma,
    space: space,
    dot: dot,
    backslash: backslash,
    equals: equals,
    string: string,
    bool: bool,
    "int": $$int,
    number: number,
    fillBreak: fillBreak,
    fill: fill,
    width: width,
    indent: indent,
    hang: hang,
    align: align,
    Fail: Fail,
    Empty: Empty,
    Char: Char,
    Text: Text,
    Line: Line,
    FlatAlt: FlatAlt,
    Cat: Cat,
    Nest: Nest,
    Union: Union,
    Column: Column,
    Columns: Columns,
    Nesting: Nesting,
    SFail: SFail,
    SEmpty: SEmpty,
    SChar: SChar,
    SText: SText,
    SLine: SLine,
    "SFail'": SFail$prime,
    "SEmpty'": SEmpty$prime,
    "SChar'": SChar$prime,
    "SText'": SText$prime,
    "SLine'": SLine$prime,
    forceSimpleDoc: forceSimpleDoc,
    empty: empty,
    "char": $$char,
    text: text,
    line: line,
    linebreak: linebreak,
    hardline: hardline,
    beside: beside,
    nest: nest,
    column: column,
    nesting: nesting,
    columns: columns,
    group: group,
    flatAlt: flatAlt,
    flatten: flatten,
    Nil: Nil,
    Cons: Cons,
    renderPretty: renderPretty,
    renderSmart: renderSmart,
    renderFits: renderFits,
    fits1: fits1,
    fitsR: fitsR,
    renderCompact: renderCompact,
    displayS: displayS,
    spaces: spaces,
    indentation: indentation,
    simpleDocEq: simpleDocEq,
    simpleDocOrd: simpleDocOrd,
    genericSimpleDoc: genericSimpleDoc,
    showSimpleDoc: showSimpleDoc,
    docSemigroup: docSemigroup,
    docMonoid: docMonoid,
    docShow: docShow
};
