// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Credential = require("../Plutus.Types.Credential/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var toPlutusAddressWithNetworkTag = function (addressCsl) {
    var toPlutusBaseAddress = function (addr) {
        var worker = function (addressCredential) {
            return function (delegationCred) {
                return Data_Maybe.Just.create(Data_Newtype.wrap()({
                    addressCredential: addressCredential,
                    addressStakingCredential: Data_Function.flip(Serialization_Address.withStakeCredential)(delegationCred)({
                        onKeyHash: function (skh) {
                            return new Data_Maybe.Just(new Plutus_Types_Credential.StakingHash(new Plutus_Types_Credential.PubKeyCredential(Data_Newtype.wrap()(skh))));
                        },
                        onScriptHash: function (sh) {
                            return new Data_Maybe.Just(new Plutus_Types_Credential.StakingHash(new Plutus_Types_Credential.ScriptCredential(Data_Newtype.wrap()(sh))));
                        }
                    })
                }));
            };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.baseAddressFromAddress(addr))(function (baseAddress) {
            var paymentCred = Serialization_Address.baseAddressPaymentCred(baseAddress);
            var delegationCred = Serialization_Address.baseAddressDelegationCred(baseAddress);
            return Data_Function.flip(Serialization_Address.withStakeCredential)(paymentCred)({
                onKeyHash: function (pkh) {
                    return worker(new Plutus_Types_Credential.PubKeyCredential(Data_Newtype.wrap()(pkh)))(delegationCred);
                },
                onScriptHash: function (sh) {
                    return worker(new Plutus_Types_Credential.ScriptCredential(Data_Newtype.wrap()(sh)))(delegationCred);
                }
            });
        });
    };
    var mkAddressCredential = Serialization_Address.withStakeCredential({
        onKeyHash: (function () {
            var $35 = Data_Newtype.wrap();
            return function ($36) {
                return Plutus_Types_Credential.PubKeyCredential.create($35($36));
            };
        })(),
        onScriptHash: (function () {
            var $37 = Data_Newtype.wrap();
            return function ($38) {
                return Plutus_Types_Credential.ScriptCredential.create($37($38));
            };
        })()
    });
    var toPlutusEnterpriseAddress = function (addr) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.enterpriseAddressFromAddress(addr))(function (enterpriseAddress) {
            var paymentCred = Serialization_Address.enterpriseAddressPaymentCred(enterpriseAddress);
            return Data_Maybe.Just.create(Data_Newtype.wrap()({
                addressCredential: mkAddressCredential(paymentCred),
                addressStakingCredential: Data_Maybe.Nothing.value
            }));
        });
    };
    var toPlutusPointerAddress = function (addr) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.pointerAddressFromAddress(addr))(function (pointerAddress) {
            var stakePointer = Serialization_Address.pointerAddressStakePointer(pointerAddress);
            var paymentCred = Serialization_Address.pointerAddressPaymentCred(pointerAddress);
            return Data_Maybe.Just.create(Data_Newtype.wrap()({
                addressCredential: mkAddressCredential(paymentCred),
                addressStakingCredential: new Data_Maybe.Just(new Plutus_Types_Credential.StakingPtr(stakePointer))
            }));
        });
    };
    var networkId = Serialization_Address.addressNetworkId(addressCsl);
    return Data_Functor.map(Data_Maybe.functorMaybe)(function ($39) {
        return Plutus_Types_Address.AddressWithNetworkTag((function (v) {
            return {
                address: v,
                networkId: networkId
            };
        })($39));
    })(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(toPlutusBaseAddress(addressCsl))(toPlutusPointerAddress(addressCsl)))(toPlutusEnterpriseAddress(addressCsl)));
};
var toPlutusAddress = (function () {
    var $40 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
        var $42 = Data_Newtype.unwrap();
        return function ($43) {
            return (function (v) {
                return v.address;
            })($42($43));
        };
    })());
    return function ($41) {
        return $40(toPlutusAddressWithNetworkTag($41));
    };
})();
var fromPlutusAddress = function (networkId) {
    return function (v) {
        if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
            return Serialization_Address.baseAddressToAddress(Serialization_Address.paymentKeyHashStakeKeyHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
            return Serialization_Address.baseAddressToAddress(Serialization_Address.scriptHashStakeKeyHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
            return Serialization_Address.baseAddressToAddress(Serialization_Address.paymentKeyHashScriptHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
            return Serialization_Address.baseAddressToAddress(Serialization_Address.scriptHashScriptHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
            return Serialization_Address.pointerAddressToAddress(Serialization_Address.paymentKeyHashPointerAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
            return Serialization_Address.pointerAddressToAddress(Serialization_Address.scriptHashPointerAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && v.addressStakingCredential instanceof Data_Maybe.Nothing) {
            return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.paymentKeyHashEnterpriseAddress(networkId)(v.addressCredential.value0));
        };
        if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && v.addressStakingCredential instanceof Data_Maybe.Nothing) {
            return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.scriptHashEnterpriseAddress(networkId)(v.addressCredential.value0));
        };
        throw new Error("Failed pattern match at Plutus.Conversion.Address (line 67, column 3 - line 110, column 53): " + [ v.addressCredential.constructor.name, v.addressStakingCredential.constructor.name ]);
    };
};
var fromPlutusAddressWithNetworkTag = function (v) {
    return fromPlutusAddress(v.networkId)(v.address);
};
module.exports = {
    fromPlutusAddress: fromPlutusAddress,
    fromPlutusAddressWithNetworkTag: fromPlutusAddressWithNetworkTag,
    toPlutusAddress: toPlutusAddress,
    toPlutusAddressWithNetworkTag: toPlutusAddressWithNetworkTag
};
