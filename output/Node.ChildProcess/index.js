// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Posix_Signal = require("../Data.Posix.Signal/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect_Exception_Unsafe = require("../Effect.Exception.Unsafe/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Pipe = (function () {
    function Pipe() {

    };
    Pipe.value = new Pipe();
    return Pipe;
})();
var Ignore = (function () {
    function Ignore() {

    };
    Ignore.value = new Ignore();
    return Ignore;
})();
var ShareStream = (function () {
    function ShareStream(value0) {
        this.value0 = value0;
    };
    ShareStream.create = function (value0) {
        return new ShareStream(value0);
    };
    return ShareStream;
})();
var ShareFD = (function () {
    function ShareFD(value0) {
        this.value0 = value0;
    };
    ShareFD.create = function (value0) {
        return new ShareFD(value0);
    };
    return ShareFD;
})();
var Normally = (function () {
    function Normally(value0) {
        this.value0 = value0;
    };
    Normally.create = function (value0) {
        return new Normally(value0);
    };
    return Normally;
})();
var BySignal = (function () {
    function BySignal(value0) {
        this.value0 = value0;
    };
    BySignal.create = function (value0) {
        return new BySignal(value0);
    };
    return BySignal;
})();
var ChildProcess = function (x) {
    return x;
};
var toStandardError = Unsafe_Coerce.unsafeCoerce;
var toActualStdIOBehaviour = function (b) {
    if (b instanceof Pipe) {
        return "pipe";
    };
    if (b instanceof Ignore) {
        return "ignore";
    };
    if (b instanceof ShareFD) {
        return b.value0;
    };
    if (b instanceof ShareStream) {
        return b.value0;
    };
    throw new Error("Failed pattern match at Node.ChildProcess (line 517, column 28 - line 521, column 33): " + [ b.constructor.name ]);
};
var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)((function () {
    var $29 = Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour);
    return function ($30) {
        return Data_Nullable.toNullable($29($30));
    };
})());
var spawn = function (cmd) {
    return function (args) {
        var convertOpts = function (opts) {
            return {
                cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                stdio: toActualStdIOOptions(opts.stdio),
                env: Data_Nullable.toNullable(opts.env),
                detached: opts.detached,
                uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
            };
        };
        var $31 = $foreign.spawnImpl(cmd)(args);
        return function ($32) {
            return $31(convertOpts($32));
        };
    };
};
var showExit = {
    show: function (v) {
        if (v instanceof Normally) {
            return "Normally " + Data_Show.show(Data_Show.showInt)(v.value0);
        };
        if (v instanceof BySignal) {
            return "BySignal " + Data_Show.show(Data_Posix_Signal.showSignal)(v.value0);
        };
        throw new Error("Failed pattern match at Node.ChildProcess (line 164, column 1 - line 166, column 48): " + [ v.constructor.name ]);
    }
};
var runChildProcess = function (v) {
    return v;
};
var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
var pid = function ($33) {
    return (function (v) {
        return v.pid;
    })(runChildProcess($33));
};
var onMessage = $foreign.mkOnMessage(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var mkExit = function (code) {
    return function (signal) {
        var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)((function () {
            var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create);
            return function ($35) {
                return $34(Data_Posix_Signal.fromString($35));
            };
        })());
        var fromCode = (function () {
            var $36 = Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create);
            return function ($37) {
                return $36(Data_Nullable.toMaybe($37));
            };
        })();
        var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
        if (v instanceof Data_Maybe.Just) {
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
        };
        throw new Error("Failed pattern match at Node.ChildProcess (line 170, column 3 - line 172, column 73): " + [ v.constructor.name ]);
    };
};
var onClose = $foreign.mkOnClose(mkExit);
var onExit = $foreign.mkOnExit(mkExit);
var mkEffect = Unsafe_Coerce.unsafeCoerce;
var send = function (msg) {
    return function (handle) {
        return function (v) {
            return mkEffect(function (v1) {
                return v.send(msg, handle);
            });
        };
    };
};
var missingStream = function (str) {
    return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
};
var stderr = (function () {
    var $38 = $foreign.unsafeFromNullable(missingStream("stderr"));
    return function ($39) {
        return $38((function (v) {
            return v.stderr;
        })(runChildProcess($39)));
    };
})();
var stdin = (function () {
    var $40 = $foreign.unsafeFromNullable(missingStream("stdin"));
    return function ($41) {
        return $40((function (v) {
            return v.stdin;
        })(runChildProcess($41)));
    };
})();
var stdout = (function () {
    var $42 = $foreign.unsafeFromNullable(missingStream("stdout"));
    return function ($43) {
        return $42((function (v) {
            return v.stdout;
        })(runChildProcess($43)));
    };
})();
var kill = function (sig) {
    return function (v) {
        return mkEffect(function (v1) {
            return v.kill(Data_Posix_Signal.toString(sig));
        });
    };
};
var inherit = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr) ]);
var ignore = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Ignore.value, Ignore.value, Ignore.value ]);
var disconnect = function ($44) {
    return (function (v) {
        return v.disconnect;
    })(runChildProcess($44));
};
var defaultSpawnOptions = {
    cwd: Data_Maybe.Nothing.value,
    stdio: pipe,
    env: Data_Maybe.Nothing.value,
    detached: false,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};
var defaultExecSyncOptions = {
    cwd: Data_Maybe.Nothing.value,
    input: Data_Maybe.Nothing.value,
    stdio: pipe,
    env: Data_Maybe.Nothing.value,
    timeout: Data_Maybe.Nothing.value,
    maxBuffer: Data_Maybe.Nothing.value,
    killSignal: Data_Maybe.Nothing.value,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};
var defaultExecOptions = {
    cwd: Data_Maybe.Nothing.value,
    env: Data_Maybe.Nothing.value,
    encoding: Data_Maybe.Nothing.value,
    shell: Data_Maybe.Nothing.value,
    timeout: Data_Maybe.Nothing.value,
    maxBuffer: Data_Maybe.Nothing.value,
    killSignal: Data_Maybe.Nothing.value,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};
var convertExecSyncOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        input: Data_Maybe.fromMaybe($foreign["undefined"])(opts.input),
        stdio: toActualStdIOOptions(opts.stdio),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};
var execFileSync = function (cmd) {
    return function (args) {
        return function (opts) {
            return $foreign.execFileSyncImpl(cmd)(args)(convertExecSyncOptions(opts));
        };
    };
};
var execSync = function (cmd) {
    return function (opts) {
        return $foreign.execSyncImpl(cmd)(convertExecSyncOptions(opts));
    };
};
var convertExecOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        encoding: Data_Maybe.maybe($foreign["undefined"])(Node_Encoding.encodingToNode)(opts.encoding),
        shell: Data_Maybe.fromMaybe($foreign["undefined"])(opts.shell),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};
var exec = function (cmd) {
    return function (opts) {
        return function (callback) {
            return $foreign.execImpl(cmd)(convertExecOptions(opts))(function (err) {
                return function (stdout$prime) {
                    return function (stderr$prime) {
                        return callback({
                            error: Data_Nullable.toMaybe(err),
                            stdout: stdout$prime,
                            stderr: stderr$prime
                        });
                    };
                };
            });
        };
    };
};
var execFile = function (cmd) {
    return function (args) {
        return function (opts) {
            return function (callback) {
                return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function (err) {
                    return function (stdout$prime) {
                        return function (stderr$prime) {
                            return callback({
                                error: Data_Nullable.toMaybe(err),
                                stdout: stdout$prime,
                                stderr: stderr$prime
                            });
                        };
                    };
                });
            };
        };
    };
};
var connected = function (v) {
    return mkEffect(function (v1) {
        return v.connected;
    });
};
module.exports = {
    stdin: stdin,
    stdout: stdout,
    stderr: stderr,
    pid: pid,
    connected: connected,
    kill: kill,
    send: send,
    disconnect: disconnect,
    toStandardError: toStandardError,
    Normally: Normally,
    BySignal: BySignal,
    onExit: onExit,
    onClose: onClose,
    onMessage: onMessage,
    spawn: spawn,
    defaultSpawnOptions: defaultSpawnOptions,
    exec: exec,
    execFile: execFile,
    defaultExecOptions: defaultExecOptions,
    execSync: execSync,
    execFileSync: execFileSync,
    defaultExecSyncOptions: defaultExecSyncOptions,
    Pipe: Pipe,
    Ignore: Ignore,
    ShareStream: ShareStream,
    ShareFD: ShareFD,
    pipe: pipe,
    inherit: inherit,
    ignore: ignore,
    showExit: showExit,
    onDisconnect: $foreign.onDisconnect,
    onError: $foreign.onError,
    fork: $foreign.fork
};
