// Generated by purs version 0.14.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Align = require("../Data.Align/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_These = require("../Data.These/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Laws = require("../Test.QuickCheck.Laws/index.js");
var checkAlign = function (dictAlign) {
    return function (dictArbitrary) {
        return function (dictArbitrary1) {
            return function (dictArbitrary2) {
                return function (dictEq) {
                    return function (dictEq1) {
                        return function (dictEq2) {
                            return function (dictEq3) {
                                return function (v) {
                                    var idempotency = function (fa) {
                                        return Data_Eq.eq(dictEq)(Control_Bind.join(Control_Bind.bindFn)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn)))(fa))(Data_Functor.map(dictAlign.Functor0())(Control_Bind.join(Control_Bind.bindFn)(Data_These.Both.create))(fa));
                                    };
                                    var functoriality = function (a) {
                                        return function (b) {
                                            return function (f) {
                                                return function (g) {
                                                    return Data_Eq.eq(dictEq2)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(dictAlign.Functor0())(f)(a))(Data_Functor.map(dictAlign.Functor0())(g)(b)))(Data_Functor.map(dictAlign.Functor0())(Data_Bifunctor.bimap(Data_These.bifunctorThese)(f)(g))(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(a)(b)));
                                                };
                                            };
                                        };
                                    };
                                    var commutativity = function (fa) {
                                        return function (fb) {
                                            return Data_Eq.eq(dictEq1)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(fa)(fb))(Data_Functor.map(dictAlign.Functor0())(Data_These.swap)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(fb)(fa)));
                                        };
                                    };
                                    var associativity = function (fa) {
                                        return function (fb) {
                                            return function (fc) {
                                                return Data_Eq.eq(dictEq3)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(fa)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(fb)(fc)))(Data_Functor.map(dictAlign.Functor0())(Data_These.assoc)(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(Data_Align.align(dictAlign)(Control_Category.identity(Control_Category.categoryFn))(fa)(fb))(fc)));
                                            };
                                        };
                                    };
                                    return function __do() {
                                        Effect_Console.log("Checking 'Idempotency' law for Align")();
                                        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(idempotency)();
                                        Effect_Console.log("Checking 'Commutativity' law for Align")();
                                        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableBoolean)))(1000)(commutativity)();
                                        Effect_Console.log("Checking 'Associativity' law for Align")();
                                        Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableFunction(dictArbitrary2)(Test_QuickCheck.testableBoolean))))(1000)(associativity)();
                                        Effect_Console.log("Checking 'Functoriality' law for Align")();
                                        return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryC))(Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB)(Test_QuickCheck_Laws.arbitraryD))(Test_QuickCheck.testableBoolean)))))(1000)(functoriality)();
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    checkAlign: checkAlign
};
