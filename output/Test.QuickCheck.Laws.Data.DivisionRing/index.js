// Generated by purs version 0.14.5
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_DivisionRing = require("../Data.DivisionRing/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var checkDivisionRing = function (dictDivisionRing) {
    return function (dictArbitrary) {
        return function (dictEq) {
            return function (v) {
                var nonZero = Data_Eq.notEq(dictEq)((function (dictEq1) {
                    return Data_Semiring.one((dictDivisionRing.Ring0()).Semiring0());
                })(dictEq))(Data_Semiring.zero((dictDivisionRing.Ring0()).Semiring0()));
                var inverse = function (dictDivisionRing1) {
                    return function (a) {
                        if (Data_Eq.eq(dictEq)(a)(Data_Semiring.zero((dictDivisionRing.Ring0()).Semiring0()))) {
                            return true;
                        };
                        if (Data_Eq.eq(dictEq)(Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(Data_DivisionRing.recip(dictDivisionRing)(a))(a))(Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(Data_DivisionRing.recip(dictDivisionRing)(a))) && (Data_Eq.eq(dictEq)(Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(Data_DivisionRing.recip(dictDivisionRing)(a))(a))(Data_Semiring.one((dictDivisionRing.Ring0()).Semiring0())) && Data_Eq.eq(dictEq)(Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(Data_DivisionRing.recip(dictDivisionRing)(a)))(Data_Semiring.one((dictDivisionRing.Ring0()).Semiring0())))) {
                            return true;
                        };
                        if (Data_Boolean.otherwise) {
                            return false;
                        };
                        throw new Error("Failed pattern match at Test.QuickCheck.Laws.Data.DivisionRing (line 33, column 3 - line 33, column 42): " + [ a.constructor.name ]);
                    };
                };
                return function __do() {
                    Effect_Console.log("Checking 'Non-zero ring' law for DivisionRing")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableBoolean)(1000)(nonZero)();
                    Effect_Console.log("Checking 'Non-zero multiplicative inverse' law for DivisionRing")();
                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(inverse(dictDivisionRing))();
                };
            };
        };
    };
};
module.exports = {
    checkDivisionRing: checkDivisionRing
};
