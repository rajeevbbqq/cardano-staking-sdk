// Generated by purs version 0.14.5
"use strict";
var Address = require("../Address/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Plutus_Conversion = require("../Plutus.Conversion/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var QueryM = require("../QueryM/index.js");
var QueryM_NetworkId = require("../QueryM.NetworkId/index.js");
var QueryM_Utxos = require("../QueryM.Utxos/index.js");
var Scripts = require("../Scripts/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_Aliases = require("../Types.Aliases/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_UnbalancedTransaction = require("../Types.UnbalancedTransaction/index.js");
var validatorHashEnterpriseAddress = function (networkId) {
    var $3 = Scripts.validatorHashEnterpriseAddress(networkId);
    return function ($4) {
        return Plutus_Conversion_Address.toPlutusAddress($3($4));
    };
};
var validatorHashBaseAddress = function (networkId) {
    var $5 = Scripts.validatorHashBaseAddress(networkId);
    return function ($6) {
        return Plutus_Conversion_Address.toPlutusAddress($5($6));
    };
};
var typedValidatorEnterpriseAddress = function (networkId) {
    var $7 = Scripts.typedValidatorEnterpriseAddress(networkId);
    return function ($8) {
        return Plutus_Conversion_Address.toPlutusAddress($7($8));
    };
};
var typedValidatorBaseAddress = function (networkId) {
    var $9 = Scripts.typedValidatorBaseAddress(networkId);
    return function ($10) {
        return Plutus_Conversion_Address.toPlutusAddress($9($10));
    };
};
var stakePubKeyHashRewardAddress = function (networkId) {
    var $11 = Types_PubKeyHash.stakePubKeyHashRewardAddress(networkId);
    return function ($12) {
        return Plutus_Conversion_Address.toPlutusAddress($11($12));
    };
};
var pubKeyHashRewardAddress = function (networkId) {
    var $13 = Types_PubKeyHash.pubKeyHashRewardAddress(networkId);
    return function ($14) {
        return Plutus_Conversion_Address.toPlutusAddress($13($14));
    };
};
var pubKeyHashEnterpriseAddress = function (networkId) {
    var $15 = Types_PubKeyHash.pubKeyHashEnterpriseAddress(networkId);
    return function ($16) {
        return Plutus_Conversion_Address.toPlutusAddress($15($16));
    };
};
var pubKeyHashBaseAddress = function (networkId) {
    return function (pkh) {
        var $17 = Types_PubKeyHash.pubKeyHashBaseAddress(networkId)(pkh);
        return function ($18) {
            return Plutus_Conversion_Address.toPlutusAddress($17($18));
        };
    };
};
var payPubKeyHashRewardAddress = function (networkId) {
    var $19 = Types_PubKeyHash.payPubKeyHashRewardAddress(networkId);
    return function ($20) {
        return Plutus_Conversion_Address.toPlutusAddress($19($20));
    };
};
var payPubKeyHashEnterpriseAddress = function (networkId) {
    var $21 = Types_PubKeyHash.payPubKeyHashEnterpriseAddress(networkId);
    return function ($22) {
        return Plutus_Conversion_Address.toPlutusAddress($21($22));
    };
};
var payPubKeyHashBaseAddress = function (networkId) {
    return function (pkh) {
        var $23 = Types_PubKeyHash.payPubKeyHashBaseAddress(networkId)(pkh);
        return function ($24) {
            return Plutus_Conversion_Address.toPlutusAddress($23($24));
        };
    };
};
var ownStakePubKeyHash = Contract_Monad.wrapContract(QueryM.ownStakePubKeyHash);
var ownPubKeyHash = Contract_Monad.wrapContract(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.ownPubKeyHashes)(function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
}));
var ownPaymentPubKeyHash = Contract_Monad.wrapContract(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.ownPaymentPubKeyHashes)(function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
}));
var getWalletCollateral = Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM_Utxos.getWalletCollateral))(function (mtxUnspentOutput) {
    return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mtxUnspentOutput)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)((function () {
        var $25 = Contract_Monad.liftedM("getWalletCollateral: failed to deserialize TransactionUnspentOutput");
        var $26 = Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff));
        return function ($27) {
            return $25(Contract_Monad.wrapContract($26(Plutus_Conversion.toPlutusTxUnspentOutput($27))));
        };
    })()));
});
var getWalletAddress = Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getWalletAddresses)(function (v) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
})))(function (mbAddr) {
    return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mbAddr)((function () {
        var $28 = Contract_Monad.liftedM("getWalletAddress: failed to deserialize address");
        var $29 = Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff));
        return function ($30) {
            return $28(Contract_Monad.wrapContract($29(Plutus_Conversion_Address.toPlutusAddress($30))));
        };
    })());
});
var getNetworkId = Contract_Monad.wrapContract(QueryM_NetworkId.getNetworkId);
var enterpriseAddressValidatorHash = (function () {
    var $31 = Plutus_Conversion_Address.fromPlutusAddress(Serialization_Address.MainnetId.value);
    return function ($32) {
        return Address.enterpriseAddressValidatorHash($31($32));
    };
})();
var enterpriseAddressStakeValidatorHash = (function () {
    var $33 = Plutus_Conversion_Address.fromPlutusAddress(Serialization_Address.MainnetId.value);
    return function ($34) {
        return Address.enterpriseAddressStakeValidatorHash($33($34));
    };
})();
var enterpriseAddressScriptHash = (function () {
    var $35 = Plutus_Conversion_Address.fromPlutusAddress(Serialization_Address.MainnetId.value);
    return function ($36) {
        return Address.enterpriseAddressScriptHash($35($36));
    };
})();
var addressWithNetworkTagToBech32 = function ($37) {
    return Serialization_Address.addressBech32(Plutus_Conversion_Address.fromPlutusAddressWithNetworkTag($37));
};
var addressToBech32 = function (address) {
    return Control_Bind.bind(Contract_Monad.bindContract)(getNetworkId)(function (networkId) {
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(addressWithNetworkTagToBech32({
            address: address,
            networkId: networkId
        }));
    });
};
module.exports = {
    enterpriseAddressScriptHash: enterpriseAddressScriptHash,
    enterpriseAddressStakeValidatorHash: enterpriseAddressStakeValidatorHash,
    enterpriseAddressValidatorHash: enterpriseAddressValidatorHash,
    getNetworkId: getNetworkId,
    addressWithNetworkTagToBech32: addressWithNetworkTagToBech32,
    addressToBech32: addressToBech32,
    getWalletAddress: getWalletAddress,
    getWalletCollateral: getWalletCollateral,
    ownPaymentPubKeyHash: ownPaymentPubKeyHash,
    ownPubKeyHash: ownPubKeyHash,
    ownStakePubKeyHash: ownStakePubKeyHash,
    payPubKeyHashBaseAddress: payPubKeyHashBaseAddress,
    payPubKeyHashEnterpriseAddress: payPubKeyHashEnterpriseAddress,
    payPubKeyHashRewardAddress: payPubKeyHashRewardAddress,
    pubKeyHashBaseAddress: pubKeyHashBaseAddress,
    pubKeyHashEnterpriseAddress: pubKeyHashEnterpriseAddress,
    pubKeyHashRewardAddress: pubKeyHashRewardAddress,
    stakePubKeyHashRewardAddress: stakePubKeyHashRewardAddress,
    typedValidatorBaseAddress: typedValidatorBaseAddress,
    typedValidatorEnterpriseAddress: typedValidatorEnterpriseAddress,
    validatorHashBaseAddress: validatorHashBaseAddress,
    validatorHashEnterpriseAddress: validatorHashEnterpriseAddress,
    AddressWithNetworkTag: Plutus_Types_Address.AddressWithNetworkTag,
    pubKeyHashAddress: Plutus_Types_Address.pubKeyHashAddress,
    scriptHashAddress: Plutus_Types_Address.scriptHashAddress,
    toPubKeyHash: Plutus_Types_Address.toPubKeyHash,
    toStakingCredential: Plutus_Types_Address.toStakingCredential,
    toValidatorHash: Plutus_Types_Address.toValidatorHash,
    BlockId: Serialization_Address.BlockId,
    ByronProtocolMagic: Serialization_Address.ByronProtocolMagic,
    CertificateIndex: Serialization_Address.CertificateIndex,
    MainnetId: Serialization_Address.MainnetId,
    TestnetId: Serialization_Address.TestnetId,
    Slot: Serialization_Address.Slot,
    TransactionIndex: Serialization_Address.TransactionIndex,
    PaymentPubKeyHash: Types_PubKeyHash.PaymentPubKeyHash,
    PubKeyHash: Types_PubKeyHash.PubKeyHash,
    StakePubKeyHash: Types_PubKeyHash.StakePubKeyHash,
    PaymentPubKey: Types_UnbalancedTransaction.PaymentPubKey,
    ScriptOutput: Types_UnbalancedTransaction.ScriptOutput
};
