// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_State = require("../Control.Monad.State/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Data_Argonaut = require("../Data.Argonaut/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Number = require("../Data.Number/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Sequence = require("../Data.Sequence/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var AesonPatchedJson = function (x) {
    return x;
};
var AesonEncoderM = function (x) {
    return x;
};
var Aeson = function (x) {
    return x;
};
var AesonEncoder = function (x) {
    return x;
};
var monadAesonEncoderM = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);
var gDecodeAesonRowNil = {
    gDecodeAeson: function (v) {
        return function (v1) {
            return new Data_Either.Right({});
        };
    }
};
var functorAesonEncoderM = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
var decodeAesonAeson = {
    decodeAeson: Control_Applicative.pure(Data_Either.applicativeEither)
};
var bindAesonEncoderM = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);
var applyAesonEncoderM = Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity);
var applicativeAesonEncoderM = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
var verbAesonType = function (def) {
    return function (f) {
        return function (g) {
            return g(def)(f);
        };
    };
};
var useNextIndexIndex = Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
var encodeAesonBigInt = {
    "encodeAeson'": function (i) {
        return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
            return Control_Applicative.pure(applicativeAesonEncoderM)({
                patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                numberIndex: Data_Sequence.singleton(Data_BigInt.toString(i))
            });
        });
    }
};
var encodeAesonInt = {
    "encodeAeson'": function (i) {
        return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
            return Control_Applicative.pure(applicativeAesonEncoderM)({
                patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                numberIndex: Data_Sequence.singleton(Data_Show.show(Data_Show.showInt)(i))
            });
        });
    }
};
var encodeAesonNumber = {
    "encodeAeson'": function (i) {
        return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
            return Control_Applicative.pure(applicativeAesonEncoderM)({
                patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                numberIndex: Data_Sequence.singleton(Data_Show.show(Data_Show.showNumber)(i))
            });
        });
    }
};
var encodeAesonUInt = {
    "encodeAeson'": function (i) {
        return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
            return Control_Applicative.pure(applicativeAesonEncoderM)({
                patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                numberIndex: Data_Sequence.singleton(Data_UInt.toString(i))
            });
        });
    }
};
var unAesonEncoder = function (v) {
    return v;
};
var toAesonType = verbAesonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var stringifyAeson = function (v) {
    return $foreign.stringifyAeson_(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.numberIndex))(v.patchedJson);
};
var eqAeson = {
    eq: function (a) {
        return function (b) {
            return stringifyAeson(a) === stringifyAeson(b);
        };
    }
};
var showAeson = {
    show: stringifyAeson
};
var runEncoder = function (v) {
    return Control_Monad_State.evalState(v)(0);
};
var parseJsonStringToAeson = function (payload) {
    var v = $foreign.parseJsonExtractingIntegers(payload);
    return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Function["const"](Data_Argonaut_Decode_Error.MissingValue.value))(Data_Functor.map(Data_Either.functorEither)(AesonPatchedJson)(Data_Argonaut_Parser.jsonParser(v.patchedPayload))))(function (patchedJson) {
        return Control_Applicative.pure(Data_Either.applicativeEither)({
            numberIndex: Data_Sequence.fromFoldable(Data_Foldable.foldableArray)(v.numberIndex),
            patchedJson: patchedJson
        });
    });
};
var isAesonType = verbAesonType(false)(Data_Function["const"](true));
var getNumberIndex = function (v) {
    return v.numberIndex;
};
var getCurrentNumberIndex = Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity));
var gEncodeAesonNil = {
    gEncodeAeson: function (v) {
        return function (v1) {
            return Foreign_Object.empty;
        };
    }
};
var gEncodeAeson = function (dict) {
    return dict.gEncodeAeson;
};
var encodeAesonRecord = function (dictGEncodeAeson) {
    return function (dictRowToList) {
        return {
            "encodeAeson'": function (rec) {
                var step = function (v) {
                    return function (v1) {
                        return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                    };
                };
                return Control_Bind.bind(bindAesonEncoderM)(Data_Functor.map(functorAesonEncoderM)(Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(applicativeAesonEncoderM)(Data_Traversable.sequence(Data_Traversable.traversableTuple)(applicativeAesonEncoderM))(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Foreign_Object.functorObject)(unAesonEncoder)(gEncodeAeson(dictGEncodeAeson)(rec)(Type_Proxy["Proxy"].value))))))(function (v) {
                    return Control_Applicative.pure(applicativeAesonEncoderM)({
                        patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                        numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                    });
                });
            }
        };
    };
};
var gDecodeAeson = function (dict) {
    return dict.gDecodeAeson;
};
var fromString = function (str) {
    return {
        patchedJson: Data_Argonaut_Core.fromString(str),
        numberIndex: Data_Monoid.mempty(Data_Sequence.monoidSeq)
    };
};
var encodeAesonViaJson = function (dictEncodeJson) {
    return function (v) {
        return AesonEncoder(Control_Applicative.pure(applicativeAesonEncoderM)({
            patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v)),
            numberIndex: Data_Sequence.empty
        }));
    };
};
var encodeAesonBoolean = {
    "encodeAeson'": encodeAesonViaJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)
};
var encodeAesonString = {
    "encodeAeson'": encodeAesonViaJson(Data_Argonaut_Encode_Class.encodeJsonJString)
};
var encodeAeson$prime = function (dict) {
    return dict["encodeAeson'"];
};
var encodeTraversable$prime = function (dictTraversable) {
    return function (dictEncodeAeson) {
        return function (arr) {
            var step = function (v) {
                return function (a) {
                    return Control_Bind.bind(bindAesonEncoderM)(unAesonEncoder(encodeAeson$prime(dictEncodeAeson)(a)))(function (v1) {
                        return Control_Applicative.pure(applicativeAesonEncoderM)(new Data_Tuple.Tuple(Data_Sequence.snoc(v.value0)(v1.patchedJson), Data_Sequence.snoc(v.value1)(v1.numberIndex)));
                    });
                };
            };
            return Control_Bind.bind(bindAesonEncoderM)(Data_Foldable.foldM(dictTraversable.Foldable1())(monadAesonEncoderM)(step)(new Data_Tuple.Tuple(Data_Sequence.empty, Data_Sequence.empty))(arr))(function (v) {
                return Control_Applicative.pure(applicativeAesonEncoderM)({
                    patchedJson: Data_Argonaut_Core.fromArray(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.value0)),
                    numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                });
            });
        };
    };
};
var encodeTraversable = function (dictTraversable) {
    return function (dictEncodeAeson) {
        var $242 = encodeTraversable$prime(dictTraversable)(dictEncodeAeson);
        return function ($243) {
            return runEncoder($242($243));
        };
    };
};
var encodeAesonArray = function (dictEncodeAeson) {
    return {
        "encodeAeson'": (function () {
            var $244 = encodeTraversable$prime(Data_Traversable.traversableArray)(dictEncodeAeson);
            return function ($245) {
                return AesonEncoder($244($245));
            };
        })()
    };
};
var encodeAesonList = function (dictEncodeAeson) {
    return {
        "encodeAeson'": (function () {
            var $246 = encodeTraversable$prime(Data_List_Types.traversableList)(dictEncodeAeson);
            return function ($247) {
                return AesonEncoder($246($247));
            };
        })()
    };
};
var encodeAesonList1 = function (dictEncodeAeson) {
    return {
        "encodeAeson'": (function () {
            var $248 = encodeTraversable$prime(Data_List_Lazy_Types.traversableList)(dictEncodeAeson);
            return function ($249) {
                return AesonEncoder($248($249));
            };
        })()
    };
};
var encodeAesonSeq = function (dictEncodeAeson) {
    return {
        "encodeAeson'": (function () {
            var $250 = encodeTraversable$prime(Data_Sequence.traversableSeq)(dictEncodeAeson);
            return function ($251) {
                return AesonEncoder($250($251));
            };
        })()
    };
};
var gEncodeAesonCons = function (dictEncodeAeson) {
    return function (dictGEncodeAeson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return {
                    gEncodeAeson: function (row) {
                        return function (v) {
                            return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeAeson$prime(dictEncodeAeson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeAeson(dictGEncodeAeson)(row)(Type_Proxy["Proxy"].value));
                        };
                    }
                };
            };
        };
    };
};
var encodeAesonObject = function (dictEncodeAeson) {
    return {
        "encodeAeson'": function (input) {
            var step = function (v) {
                return function (v1) {
                    return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                };
            };
            return Control_Bind.bind(bindAesonEncoderM)(Data_Functor.map(functorAesonEncoderM)(Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(applicativeAesonEncoderM)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(applicativeAesonEncoderM)((function () {
                var $252 = encodeAeson$prime(dictEncodeAeson);
                return function ($253) {
                    return unAesonEncoder($252($253));
                };
            })()))(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(input))))(function (v) {
                return Control_Applicative.pure(applicativeAesonEncoderM)({
                    patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                    numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                });
            });
        }
    };
};
var encodeAeson = function (dictEncodeAeson) {
    var $254 = encodeAeson$prime(dictEncodeAeson);
    return function ($255) {
        return runEncoder(unAesonEncoder($254($255)));
    };
};
var decodeAesonViaJson = function (dictDecodeJson) {
    return function (v) {
        return Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson);
    };
};
var decodeNumber = function (parse) {
    return function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonInt)(v))(function (ix) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.MissingValue.value)(Data_Sequence.index(ix)(v.numberIndex)))(function (numberStr) {
                return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Couldn't parse to integral: " + numberStr))(parse(numberStr));
            });
        });
    };
};
var decodeAesonBigInt = {
    decodeAeson: decodeNumber(Data_BigInt.fromString)
};
var decodeAesonInt = {
    decodeAeson: decodeNumber(Data_Int.fromString)
};
var decodeAesonNumber = {
    decodeAeson: decodeNumber(Data_Number.fromString)
};
var decodeAesonUInt = {
    decodeAeson: decodeNumber(Data_UInt.fromString)
};
var decodeAesonBoolean = {
    decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonBoolean)
};
var decodeAesonString = {
    decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonString)
};
var decodeAesonField = function (dict) {
    return dict.decodeAesonField;
};
var gDecodeAesonCons = function (dictDecodeAesonField) {
    return function (dictGDecodeAeson) {
        return function (dictIsSymbol) {
            return function (dictCons) {
                return function (dictLacks) {
                    return {
                        gDecodeAeson: function (object) {
                            return function (v) {
                                var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                var fieldValue = Foreign_Object.lookup(fieldName)(object);
                                var v1 = decodeAesonField(dictDecodeAesonField)(fieldValue);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                        return Control_Bind.bind(Data_Either.bindEither)(gDecodeAeson(dictGDecodeAeson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                            return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                        });
                                    });
                                };
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                                };
                                throw new Error("Failed pattern match at Aeson (line 606, column 5 - line 613, column 44): " + [ v1.constructor.name ]);
                            };
                        }
                    };
                };
            };
        };
    };
};
var decodeAeson = function (dict) {
    return dict.decodeAeson;
};
var decodeJsonString = function (dictDecodeAeson) {
    return Control_Bind.composeKleisli(Data_Either.bindEither)(parseJsonStringToAeson)(decodeAeson(dictDecodeAeson));
};
var jsonToAeson = (function () {
    var $256 = Data_Either.fromRight(Data_Typelevel_Undefined["undefined"]);
    var $257 = decodeJsonString(decodeAesonAeson);
    return function ($258) {
        return $256($257(Data_Argonaut_Core.stringify($258)));
    };
})();
var decodeTraversable = function (dictTraversable) {
    return function (dictDecodeAeson) {
        return function (dictDecodeJson) {
            return function (v) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson))(function (v1) {
                    return Data_Traversable["for"](Data_Either.applicativeEither)(dictTraversable)(v1)(function (patchedJson) {
                        return decodeAeson(dictDecodeAeson)({
                            patchedJson: patchedJson,
                            numberIndex: v.numberIndex
                        });
                    });
                });
            };
        };
    };
};
var decodeAesonArray = function (dictDecodeAeson) {
    return {
        decodeAeson: decodeTraversable(Data_Traversable.traversableArray)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))
    };
};
var decodeAesonList = function (dictDecodeAeson) {
    return {
        decodeAeson: decodeTraversable(Data_List_Types.traversableList)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeList(Data_Argonaut_Decode_Class.decodeJsonJson))
    };
};
var decodeAesonList1 = function (dictDecodeAeson) {
    return {
        decodeAeson: (function () {
            var $259 = Data_Functor.map(Data_Either.functorEither)(Data_List.toUnfoldable(Data_List_Lazy_Types.unfoldableList));
            var $260 = decodeTraversable(Data_List_Types.traversableList)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeList(Data_Argonaut_Decode_Class.decodeJsonJson));
            return function ($261) {
                return $259($260($261));
            };
        })()
    };
};
var decodeAesonSeq = function (dictDecodeAeson) {
    return {
        decodeAeson: (function () {
            var $262 = Data_Functor.map(Data_Either.functorEither)(Data_List.toUnfoldable(Data_Sequence.unfoldableSeq));
            var $263 = decodeTraversable(Data_List_Types.traversableList)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeList(Data_Argonaut_Decode_Class.decodeJsonJson));
            return function ($264) {
                return $262($263($264));
            };
        })()
    };
};
var getField = function (dictDecodeAeson) {
    return function (aesonObject) {
        return function (field) {
            var getField$prime = function (decoder) {
                return function (obj) {
                    return function (str) {
                        return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                            var $265 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                            return function ($266) {
                                return $265(decoder($266));
                            };
                        })())(Foreign_Object.lookup(str)(obj));
                    };
                };
            };
            return getField$prime(decodeAeson(dictDecodeAeson))(aesonObject)(field);
        };
    };
};
var getFieldOptional = function (dictDecodeAeson) {
    var getFieldOptional_ = function (decoder) {
        return function (obj) {
            return function (str) {
                var decode = (function () {
                    var $267 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                    return function ($268) {
                        return $267(decoder($268));
                    };
                })();
                return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                    var $269 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                    return function ($270) {
                        return $269(decode($270));
                    };
                })())(Foreign_Object.lookup(str)(obj));
            };
        };
    };
    return getFieldOptional_(decodeAeson(dictDecodeAeson));
};
var getFieldOptional$prime = function (dictDecodeAeson) {
    var getFieldOptional$prime_ = function (decoder) {
        return function (obj) {
            return function (str) {
                var decode = function (v) {
                    var $207 = Data_Argonaut_Core.isNull(v.patchedJson);
                    if ($207) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                    };
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(v)));
                };
                return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
            };
        };
    };
    return getFieldOptional$prime_(decodeAeson(dictDecodeAeson));
};
var decodeAesonField1 = function (dictDecodeAeson) {
    return {
        decodeAesonField: function (j) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(decodeAeson(dictDecodeAeson))(j);
        }
    };
};
var decodeAeson$bar$plus$bar = function (dictInOneOf) {
    return function (dictDecodeAeson) {
        return function (dictDecodeAeson1) {
            return {
                decodeAeson: function (j) {
                    return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson)(j)))(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson1)(j)));
                }
            };
        };
    };
};
var constAesonCases = function (v) {
    var c = Data_Function["const"](v);
    return {
        caseObject: c,
        caseNull: c,
        caseBoolean: c,
        caseString: c,
        caseNumber: c,
        caseArray: c
    };
};
var caseAeson = function (v) {
    return function (v1) {
        var unsafeSeqIndex = function (s) {
            return function (ix) {
                return Data_Maybe.fromJust()(Data_Sequence.index(ix)(s));
            };
        };
        var mkAeson = function (json) {
            return {
                patchedJson: json,
                numberIndex: v1.numberIndex
            };
        };
        return Data_Argonaut_Core.caseJson(v.caseNull)(v.caseBoolean)((function () {
            var $271 = unsafeSeqIndex(v1.numberIndex);
            return function ($272) {
                return v.caseNumber($271(Data_Int.round($272)));
            };
        })())(v.caseString)((function () {
            var $273 = Data_Functor.map(Data_Functor.functorArray)(mkAeson);
            return function ($274) {
                return v.caseArray($273($274));
            };
        })())((function () {
            var $275 = Data_Functor.map(Foreign_Object.functorObject)(mkAeson);
            return function ($276) {
                return v.caseObject($275($276));
            };
        })())(v1.patchedJson);
    };
};
var caseAesonArray = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseArray: f,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var isArray = isAesonType(caseAesonArray);
var toArray = toAesonType(caseAesonArray);
var decodeAesonTuple = function (dictDecodeAeson) {
    return function (dictDecodeAeson1) {
        return {
            decodeAeson: caseAesonArray(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array (Tuple)")))(function (arr) {
                var v = Data_Array.index(arr)(2);
                var v1 = Data_Array.index(arr)(1);
                var v2 = Data_Array.index(arr)(0);
                if (v2 instanceof Data_Maybe.Just && (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing)) {
                    return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decodeAeson(dictDecodeAeson)(v2.value0)))(decodeAeson(dictDecodeAeson1)(v1.value0));
                };
                return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array with length 2"));
            })
        };
    };
};
var caseAesonBoolean = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseBoolean: f,
                caseArray: v.caseArray,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var isBoolean = isAesonType(caseAesonBoolean);
var toBoolean = toAesonType(caseAesonBoolean);
var caseAesonNull = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseNull: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var isNull = isAesonType(caseAesonNull);
var toNull = toAesonType(caseAesonNull);
var caseAesonNumber = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseNumber: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseObject: v.caseObject,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var caseAesonBigInt = function (def) {
    return function (f) {
        return caseAesonNumber(def)(function (str) {
            var v = Data_BigInt.fromString(str);
            if (v instanceof Data_Maybe.Nothing) {
                return def;
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Aeson (line 385, column 3 - line 387, column 22): " + [ v.constructor.name ]);
        });
    };
};
var caseAesonUInt = function (def) {
    return function (f) {
        return caseAesonNumber(def)(function (str) {
            var v = Data_UInt.fromString(str);
            if (v instanceof Data_Maybe.Nothing) {
                return def;
            };
            if (v instanceof Data_Maybe.Just) {
                return f(v.value0);
            };
            throw new Error("Failed pattern match at Aeson (line 378, column 3 - line 380, column 22): " + [ v.constructor.name ]);
        });
    };
};
var isNumber = isAesonType(caseAesonNumber);
var toNumber = toAesonType(caseAesonNumber);
var caseAesonObject = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseObject: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseString: v.caseString
            };
        })(constAesonCases(def)));
    };
};
var isObject = isAesonType(caseAesonObject);
var toObject = toAesonType(caseAesonObject);
var decodeAesonRecord = function (dictGDecodeAeson) {
    return function (dictRowToList) {
        return {
            decodeAeson: function (json) {
                var v = toObject(json);
                if (v instanceof Data_Maybe.Just) {
                    return gDecodeAeson(dictGDecodeAeson)(v.value0)(Type_Proxy["Proxy"].value);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
                };
                throw new Error("Failed pattern match at Aeson (line 530, column 5 - line 532, column 46): " + [ v.constructor.name ]);
            }
        };
    };
};
var decodeAesonObject = function (dictDecodeAeson) {
    return {
        decodeAeson: caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")))(Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decodeAeson(dictDecodeAeson)))
    };
};
var caseAesonString = function (def) {
    return function (f) {
        return caseAeson((function (v) {
            return {
                caseString: f,
                caseArray: v.caseArray,
                caseBoolean: v.caseBoolean,
                caseNull: v.caseNull,
                caseNumber: v.caseNumber,
                caseObject: v.caseObject
            };
        })(constAesonCases(def)));
    };
};
var isString = isAesonType(caseAesonString);
var toString = toAesonType(caseAesonString);
var toStringifiedNumbersJson = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
    return caseAeson({
        caseNull: Data_Function["const"](Data_Argonaut_Core.jsonNull),
        caseBoolean: Data_Argonaut_Encode_Encoders.encodeBoolean,
        caseNumber: Data_Argonaut_Encode_Encoders.encodeString,
        caseString: Data_Argonaut_Encode_Encoders.encodeString,
        caseArray: (function () {
            var $277 = Data_Functor.map(Data_Functor.functorArray)(toStringifiedNumbersJson);
            return function ($278) {
                return Data_Argonaut_Core.fromArray($277($278));
            };
        })(),
        caseObject: (function () {
            var $279 = Data_Functor.map(Foreign_Object.functorObject)(toStringifiedNumbersJson);
            return function ($280) {
                return Data_Argonaut_Core.fromObject($279($280));
            };
        })()
    });
});
var getNestedAeson = function (v) {
    return function (keys) {
        var mkAeson = function (json) {
            return {
                numberIndex: v.numberIndex,
                patchedJson: json
            };
        };
        var lookup = function (j) {
            return function (lbl) {
                return Data_Argonaut_Core.caseJsonObject(Data_Maybe.Nothing.value)(Foreign_Object.lookup(lbl))(j);
            };
        };
        return Data_Either.note(Data_Argonaut_Decode_Error.UnexpectedValue.create(toStringifiedNumbersJson(v)))(Data_Functor.map(Data_Maybe.functorMaybe)(mkAeson)(Data_Foldable.foldM(Data_Foldable.foldableArray)(Data_Maybe.monadMaybe)(lookup)(v.patchedJson)(keys)));
    };
};
var decodeAesonMaybe = function (dictDecodeAeson) {
    return {
        decodeAeson: function (aeson) {
            return caseAeson({
                caseNull: function (v) {
                    return new Data_Either.Right(Data_Maybe.Nothing.value);
                },
                caseBoolean: function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                },
                caseNumber: function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                },
                caseString: function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                },
                caseArray: function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                },
                caseObject: function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                }
            })(aeson);
        }
    };
};
var decodeAesonFieldMaybe = function (dictDecodeAeson) {
    return {
        decodeAesonField: (function () {
            var $281 = Data_Maybe.maybe(new Data_Either.Right(Data_Maybe.Nothing.value))(decodeAeson(decodeAesonMaybe(dictDecodeAeson)));
            return function ($282) {
                return Data_Maybe.Just.create($281($282));
            };
        })()
    };
};
var bumpNumberIndexBy = function (i) {
    return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(i));
};
var encodeAesonAeson = {
    "encodeAeson'": function (v) {
        return Control_Bind.bind(bindAesonEncoderM)(getCurrentNumberIndex)(function (ix) {
            var encodeNumber = function (n) {
                return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJNumber)(Data_Int.toNumber(ix) + n);
            };
            var bumpIndices = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v1) {
                return Data_Argonaut_Core.caseJson(Data_Argonaut_Encode_Encoders.encodeUnit)(Data_Argonaut_Encode_Encoders.encodeBoolean)(encodeNumber)(Data_Argonaut_Encode_Encoders.encodeString)((function () {
                    var $283 = Data_Functor.map(Data_Functor.functorArray)(bumpIndices);
                    return function ($284) {
                        return Data_Argonaut_Core.fromArray($283($284));
                    };
                })())((function () {
                    var $285 = Data_Functor.map(Foreign_Object.functorObject)(bumpIndices);
                    return function ($286) {
                        return Data_Argonaut_Core.fromObject($285($286));
                    };
                })());
            });
            return Control_Bind.discard(Control_Bind.discardUnit)(bindAesonEncoderM)(bumpNumberIndexBy(Data_Sequence.length(v.numberIndex)))(function () {
                return Control_Applicative.pure(applicativeAesonEncoderM)({
                    patchedJson: bumpIndices(v.patchedJson),
                    numberIndex: v.numberIndex
                });
            });
        });
    }
};
var encodeAesonTuple = function (dictEncodeAeson) {
    return function (dictEncodeAeson1) {
        return {
            "encodeAeson'": function (v) {
                return AesonEncoder(encodeTraversable$prime(Data_Traversable.traversableArray)(encodeAesonAeson)([ encodeAeson(dictEncodeAeson)(v.value0), encodeAeson(dictEncodeAeson1)(v.value1) ]));
            }
        };
    };
};
var aesonNull = {
    patchedJson: Data_Argonaut_Core.jsonNull,
    numberIndex: Data_Monoid.mempty(Data_Sequence.monoidSeq)
};
var encodeAesonMaybe = function (dictEncodeAeson) {
    return {
        "encodeAeson'": function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return AesonEncoder(Control_Applicative.pure(applicativeAesonEncoderM)(aesonNull));
            };
            if (v instanceof Data_Maybe.Just) {
                return encodeAeson$prime(dictEncodeAeson)(v.value0);
            };
            throw new Error("Failed pattern match at Aeson (line 769, column 1 - line 771, column 41): " + [ v.constructor.name ]);
        }
    };
};
module.exports = {
    caseAeson: caseAeson,
    caseAesonArray: caseAesonArray,
    caseAesonBigInt: caseAesonBigInt,
    caseAesonBoolean: caseAesonBoolean,
    caseAesonNull: caseAesonNull,
    caseAesonNumber: caseAesonNumber,
    caseAesonObject: caseAesonObject,
    caseAesonString: caseAesonString,
    caseAesonUInt: caseAesonUInt,
    constAesonCases: constAesonCases,
    decodeAeson: decodeAeson,
    decodeAesonField: decodeAesonField,
    decodeAesonViaJson: decodeAesonViaJson,
    decodeJsonString: decodeJsonString,
    encodeAeson: encodeAeson,
    "encodeAeson'": encodeAeson$prime,
    encodeAesonViaJson: encodeAesonViaJson,
    gDecodeAeson: gDecodeAeson,
    gEncodeAeson: gEncodeAeson,
    getField: getField,
    getFieldOptional: getFieldOptional,
    "getFieldOptional'": getFieldOptional$prime,
    getNestedAeson: getNestedAeson,
    getNumberIndex: getNumberIndex,
    jsonToAeson: jsonToAeson,
    parseJsonStringToAeson: parseJsonStringToAeson,
    stringifyAeson: stringifyAeson,
    toStringifiedNumbersJson: toStringifiedNumbersJson,
    isNull: isNull,
    isBoolean: isBoolean,
    isNumber: isNumber,
    isString: isString,
    isArray: isArray,
    isObject: isObject,
    toNull: toNull,
    toBoolean: toBoolean,
    toNumber: toNumber,
    toString: toString,
    toArray: toArray,
    toObject: toObject,
    fromString: fromString,
    aesonNull: aesonNull,
    encodeTraversable: encodeTraversable,
    decodeTraversable: decodeTraversable,
    eqAeson: eqAeson,
    showAeson: showAeson,
    decodeAesonUInt: decodeAesonUInt,
    decodeAesonInt: decodeAesonInt,
    decodeAesonBigInt: decodeAesonBigInt,
    decodeAesonBoolean: decodeAesonBoolean,
    decodeAesonString: decodeAesonString,
    decodeAesonNumber: decodeAesonNumber,
    decodeAesonAeson: decodeAesonAeson,
    decodeAesonObject: decodeAesonObject,
    decodeAesonTuple: decodeAesonTuple,
    decodeAesonRecord: decodeAesonRecord,
    "decodeAeson|+|": decodeAeson$bar$plus$bar,
    decodeAesonArray: decodeAesonArray,
    decodeAesonList: decodeAesonList,
    decodeAesonList1: decodeAesonList1,
    decodeAesonSeq: decodeAesonSeq,
    decodeAesonMaybe: decodeAesonMaybe,
    gDecodeAesonRowNil: gDecodeAesonRowNil,
    gDecodeAesonCons: gDecodeAesonCons,
    decodeAesonFieldMaybe: decodeAesonFieldMaybe,
    decodeAesonField1: decodeAesonField1,
    encodeAesonInt: encodeAesonInt,
    encodeAesonBigInt: encodeAesonBigInt,
    encodeAesonUInt: encodeAesonUInt,
    encodeAesonNumber: encodeAesonNumber,
    encodeAesonString: encodeAesonString,
    encodeAesonBoolean: encodeAesonBoolean,
    encodeAesonAeson: encodeAesonAeson,
    encodeAesonObject: encodeAesonObject,
    encodeAesonRecord: encodeAesonRecord,
    encodeAesonTuple: encodeAesonTuple,
    encodeAesonArray: encodeAesonArray,
    encodeAesonList: encodeAesonList,
    encodeAesonList1: encodeAesonList1,
    encodeAesonSeq: encodeAesonSeq,
    encodeAesonMaybe: encodeAesonMaybe,
    gEncodeAesonNil: gEncodeAesonNil,
    gEncodeAesonCons: gEncodeAesonCons,
    AtIndex: Data_Argonaut.AtIndex,
    AtKey: Data_Argonaut.AtKey,
    MissingValue: Data_Argonaut.MissingValue,
    Named: Data_Argonaut.Named,
    TypeMismatch: Data_Argonaut.TypeMismatch,
    UnexpectedValue: Data_Argonaut.UnexpectedValue,
    printJsonDecodeError: Data_Argonaut.printJsonDecodeError
};
