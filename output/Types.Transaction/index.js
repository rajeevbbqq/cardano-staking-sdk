// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var FromData = require("../FromData/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var TransactionHash = function (x) {
    return x;
};
var TransactionInput = function (x) {
    return x;
};
var DataHash = function (x) {
    return x;
};
var toDataTransactionHash = {
    toData: function (v) {
        return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(ToData.toDataByteArray)(v) ]);
    }
};
var toDataTransactionInput = {
    toData: function (v) {
        return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(toDataTransactionHash)(v.transactionId), ToData.toData(ToData.toDataUInt)(v.index) ]);
    }
};
var toDataDataHash = ToData.toDataByteArray;
var ordDataHash = Types_ByteArray.ordByteArray;
var newtypeTransactionInput_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeTransactionHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeDataHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericTransactionInput_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericTransactionHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showTransactionHash = {
    show: Data_Show_Generic.genericShow(genericTransactionHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "TransactionHash";
        }
    }))
};
var showTransactionInput = {
    show: Data_Show_Generic.genericShow(genericTransactionInput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "index";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "transactionId";
        }
    })(Data_Show.showRecordFieldsNil)(showTransactionHash))(Data_UInt.uintShowInstance))))({
        reflectSymbol: function () {
            return "TransactionInput";
        }
    }))
};
var genericDataHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showDataHash = {
    show: Data_Show_Generic.genericShow(genericDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "DataHash";
        }
    }))
};
var fromDataTransactionHash = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Constr && (v.value1.length === 1 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(TransactionHash)(FromData.fromData(FromData.fromDataByteArray)(v["value1"][0]));
        };
        return Data_Maybe.Nothing.value;
    }
};
var fromDataTransactionInput = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Constr && (v.value1.length === 2 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(TransactionInput)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                return function (v2) {
                    return {
                        transactionId: v1,
                        index: v2
                    };
                };
            })(FromData.fromData(fromDataTransactionHash)(v["value1"][0])))(FromData.fromData(FromData.fromDataUInt)(v["value1"][1])));
        };
        return Data_Maybe.Nothing.value;
    }
};
var fromDataDataHash = FromData.fromDataByteArray;
var eqTransactionHash = Types_ByteArray.eqByteArray;
var eqTransactionInput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "transactionId";
    }
})(eqTransactionHash))()({
    reflectSymbol: function () {
        return "index";
    }
})(Data_UInt.uintEqInstance));
var ordTransactionHash = {
    compare: function (v) {
        return function (v1) {
            return Data_Ord.compare(Data_Ord.ordString)(Types_ByteArray.byteArrayToHex(v))(Types_ByteArray.byteArrayToHex(v1));
        };
    },
    Eq0: function () {
        return eqTransactionHash;
    }
};
var ordTransactionInput = {
    compare: function (v) {
        return function (v1) {
            var v2 = Data_Ord.compare(ordTransactionHash)(v.transactionId)(v1.transactionId);
            if (v2 instanceof Data_Ordering.EQ) {
                return Data_Ord.compare(Data_UInt.uintOrd)(v.index)(v1.index);
            };
            return v2;
        };
    },
    Eq0: function () {
        return eqTransactionInput;
    }
};
var eqDataHash = Types_ByteArray.eqByteArray;
var encodeAesonTransactionHas = Types_ByteArray.encodeAesonByteArray;
var encodeAesonTransactionInp = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(encodeAesonTransactionHas)(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "transactionId";
    }
})())({
    reflectSymbol: function () {
        return "index";
    }
})())();
var encodeAesonDataHash = Types_ByteArray.encodeAesonByteArray;
module.exports = {
    DataHash: DataHash,
    TransactionHash: TransactionHash,
    TransactionInput: TransactionInput,
    newtypeTransactionInput_: newtypeTransactionInput_,
    genericTransactionInput_: genericTransactionInput_,
    eqTransactionInput: eqTransactionInput,
    encodeAesonTransactionInp: encodeAesonTransactionInp,
    ordTransactionInput: ordTransactionInput,
    showTransactionInput: showTransactionInput,
    fromDataTransactionInput: fromDataTransactionInput,
    toDataTransactionInput: toDataTransactionInput,
    genericTransactionHash_: genericTransactionHash_,
    newtypeTransactionHash_: newtypeTransactionHash_,
    eqTransactionHash: eqTransactionHash,
    encodeAesonTransactionHas: encodeAesonTransactionHas,
    ordTransactionHash: ordTransactionHash,
    showTransactionHash: showTransactionHash,
    fromDataTransactionHash: fromDataTransactionHash,
    toDataTransactionHash: toDataTransactionHash,
    genericDataHash_: genericDataHash_,
    newtypeDataHash_: newtypeDataHash_,
    eqDataHash: eqDataHash,
    fromDataDataHash: fromDataDataHash,
    ordDataHash: ordDataHash,
    toDataDataHash: toDataDataHash,
    encodeAesonDataHash: encodeAesonDataHash,
    showDataHash: showDataHash
};
