// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Aeson_Decode_Decoders = require("../Aeson.Decode.Decoders/index.js");
var Aeson_Utils = require("../Aeson.Utils/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Argonaut_Encode_Encoders = require("../Data.Argonaut.Encode.Encoders/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unfoldable1 = require("../Data.Unfoldable1/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var value = function (dictDecodeAeson) {
    return Control_Monad_Reader_Trans.ReaderT(Aeson.decodeAeson(dictDecodeAeson));
};
var unit = function (aeson) {
    return Data_Functor.voidRight(Data_Either.functorEither)(Data_Unit.unit)(Aeson_Decode_Decoders.decodeArray(function ($34) {
        return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson($34)));
    })(aeson));
};
var tuple = function (decoder) {
    return Control_Monad_Reader_Trans.ReaderT(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $35 = Data_Functor.map(Data_Either.functorEither)(Data_Tuple.fst);
        var $36 = Data_Function.flip(Control_Monad_RWS_Trans.evalRWST(Data_Either.monadEither)(decoder))(0);
        return function ($37) {
            return $35($36($37));
        };
    })())(Aeson_Decode_Decoders.decodeJArray));
};
var toTupleDecoderTupleDecoder = {
    toTupleDecoder: Control_Category.identity(Control_Category.categoryFn)
};
var toTupleDecoderDecoder = {
    toTupleDecoder: function (decoder) {
        return function (arr) {
            return function (i) {
                return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Control_Monad_RWS_Trans.RWSResult.create(i + 1 | 0))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i))(Control_Bind.bindFlipped(Data_Either.bindEither)(Control_Monad_Reader_Trans.runReaderT(decoder))(Aeson_Utils.maybeToEither(Data_Argonaut_Decode_Error.MissingValue.value)(Data_Array.index(arr)(i))))))(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit));
            };
        };
    }
};
var toTupleDecoder = function (dict) {
    return dict.toTupleDecoder;
};
var tupleApply = function (dictToTupleDecoder) {
    return function (f) {
        return function (a) {
            return Control_Apply.apply(Control_Monad_RWS_Trans.applyRWST(Data_Either.bindEither)(Data_Monoid.monoidUnit))(f)(toTupleDecoder(dictToTupleDecoder)(a));
        };
    };
};
var tupleConjoin = function (dictToTupleDecoder) {
    return function (d1) {
        return function (d2) {
            return Control_Apply.apply(Control_Monad_RWS_Trans.applyRWST(Data_Either.bindEither)(Data_Monoid.monoidUnit))(Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Data_Either.functorEither))(Data_Tuple.Tuple.create)(toTupleDecoder(toTupleDecoderDecoder)(d1)))(toTupleDecoder(dictToTupleDecoder)(d2));
        };
    };
};
var tupleMap = function (dictToTupleDecoder) {
    return function (f) {
        return function (a) {
            return Data_Functor.map(Control_Monad_RWS_Trans.functorRWST(Data_Either.functorEither))(f)(toTupleDecoder(dictToTupleDecoder)(a));
        };
    };
};
var sumType = function (name) {
    return function (decoders) {
        return function (json) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create(name))(Control_Bind.bind(Data_Either.bindEither)(Aeson_Decode_Decoders.decodeJObject(json))(function (obj) {
                return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(obj)(Aeson_Utils.tagProp))(function (tag) {
                    return Data_Maybe.fromMaybe(Data_Either.Left.create(Data_Argonaut_Decode_Error.AtKey.create(Aeson_Utils.tagProp)(Data_Argonaut_Decode_Error.UnexpectedValue.create(Data_Argonaut_Encode_Encoders.encodeString(tag)))))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(obj))(Data_Map_Internal.lookup(Data_Ord.ordString)(tag)(decoders)));
                });
            }));
        };
    };
};
var rowListDecoderNil = {
    rowListDecoder: function (v) {
        return function (v1) {
            return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Data_Either.applicativeEither))({});
        };
    }
};
var rowListDecoder = function (dict) {
    return dict.rowListDecoder;
};
var propDecoder = function (dictIsSymbol) {
    return function (p) {
        return function (decoder) {
            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(p);
            return Control_Monad_Reader_Trans.ReaderT(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
                var $38 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(key));
                var $39 = Control_Monad_Reader_Trans.runReaderT(decoder);
                return function ($40) {
                    return $38($39($40));
                };
            })())((function () {
                var $41 = Aeson_Utils.maybeToEither(Data_Argonaut_Decode_Error.MissingValue.value);
                var $42 = Foreign_Object.lookup(key);
                return function ($43) {
                    return $41($42($43));
                };
            })()));
        };
    };
};
var rowListDecoderDecoderCons = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (dictLacks1) {
                return function (dictCons1) {
                    return function (dictRowListDecoder) {
                        return {
                            rowListDecoder: function (v) {
                                return function (decoders) {
                                    var v1 = Aeson_Utils.unconsRecord(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(decoders);
                                    return Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Data_Either.applyEither))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value))(propDecoder(dictIsSymbol)(Type_Proxy["Proxy"].value)(v1.value0)))(rowListDecoder(dictRowListDecoder)(Type_Proxy["Proxy"].value)(v1.value1));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var object = function (dictRowToList) {
    return function (dictRowListDecoder) {
        return function (name) {
            return function (decoders) {
                return Control_Monad_Reader_Trans.ReaderT((function () {
                    var $44 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create(name));
                    var $45 = Control_Monad_Reader_Trans.runReaderT(rowListDecoder(dictRowListDecoder)(Type_Proxy["Proxy"].value)(decoders));
                    return function ($46) {
                        return $44($45($46));
                    };
                })());
            };
        };
    };
};
var record = function (dictRowToList) {
    return function (dictRowListDecoder) {
        return function (name) {
            return function (decoders) {
                return Control_Monad_Reader_Trans.ReaderT(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Control_Monad_Reader_Trans.runReaderT(object()(dictRowListDecoder)(name)(decoders)))(Aeson_Decode_Decoders.decodeJObject));
            };
        };
    };
};
var $$null = Aeson_Decode_Decoders.decodeNull;
var maybe = function (decoder) {
    return Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Data_Functor.voidRight(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(Data_Maybe.Nothing.value)(Aeson_Decode_Decoders.decodeNull))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(Data_Maybe.Just.create)(decoder));
};
var $$enum = function (dictEnum) {
    return function (dictBounded) {
        return function (dictShow) {
            return function (json) {
                return Control_Bind.bind(Data_Either.bindEither)(Aeson_Decode_Decoders.decodeString(json))(function (v) {
                    return Aeson_Utils.maybeToEither(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(json)))(Data_Array.find((function () {
                        var $47 = Data_Show.show(dictShow);
                        return function ($48) {
                            return (function (v1) {
                                return v === v1;
                            })($47($48));
                        };
                    })())(Data_Enum.upFromIncluding(dictEnum)(Data_Unfoldable1.unfoldable1Array)(Data_Bounded.bottom(dictBounded))));
                });
            };
        };
    };
};
var either = function (decoderA) {
    return function (decoderB) {
        var decodeRight = function (obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonAeson)(obj)(Aeson_Utils.rightProp))(Control_Monad_Reader_Trans.runReaderT(decoderB));
        };
        var decodeLeft = function (obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonAeson)(obj)(Aeson_Utils.leftProp))(Control_Monad_Reader_Trans.runReaderT(decoderA));
        };
        var decodeEitherObj = function (obj) {
            return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Either.Left.create)(decodeLeft(obj)))(Data_Functor.map(Data_Either.functorEither)(Data_Either.Right.create)(decodeRight(obj)));
        };
        return Control_Monad_Reader_Trans.ReaderT(Control_Bind.composeKleisli(Data_Either.bindEither)(Aeson_Decode_Decoders.decodeJObject)(decodeEitherObj));
    };
};
var decode = Control_Monad_Reader_Trans.runReaderT;
var dictionary = function (dictOrd) {
    return function (decoderA) {
        return function (decoderB) {
            var readArray = Aeson_Decode_Decoders.decodeArray(decode(tuple(tupleConjoin(toTupleDecoderDecoder)(decoderA)(decoderB))));
            var decodePair = function (v) {
                return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(v.value0))(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)((function () {
                    var $49 = decode(decoderA);
                    return function ($50) {
                        return $49(Aeson.fromString($50));
                    };
                })())(decode(decoderB))(v));
            };
            var decodePairs = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodePair);
            var readObject = (function () {
                var $51 = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray);
                return function ($52) {
                    return decodePairs($51($52));
                };
            })();
            return function (a) {
                return Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Aeson.caseAesonObject(readArray(a))(readObject)(a));
            };
        };
    };
};
var content = function (decoder) {
    return function (obj) {
        return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonAeson)(obj)(Aeson_Utils.contentsProp))(function (contents) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(Aeson_Utils.contentsProp))(decode(decoder)(contents));
        });
    };
};
module.exports = {
    content: content,
    dictionary: dictionary,
    either: either,
    "enum": $$enum,
    decode: decode,
    maybe: maybe,
    "null": $$null,
    object: object,
    record: record,
    rowListDecoder: rowListDecoder,
    sumType: sumType,
    toTupleDecoder: toTupleDecoder,
    tuple: tuple,
    tupleApply: tupleApply,
    tupleConjoin: tupleConjoin,
    tupleMap: tupleMap,
    unit: unit,
    value: value,
    toTupleDecoderDecoder: toTupleDecoderDecoder,
    toTupleDecoderTupleDecoder: toTupleDecoderTupleDecoder,
    rowListDecoderNil: rowListDecoderNil,
    rowListDecoderDecoderCons: rowListDecoderDecoderCons
};
