// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Logger_Class = require("../Control.Monad.Logger.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var LoggerT = function (x) {
    return x;
};
var withLoggerT = function (f) {
    return function (v) {
        return LoggerT(function ($32) {
            return v(f($32));
        });
    };
};
var runLoggerT = function (v) {
    return v;
};
var newtypeLoggerT = {
    Coercible0: function () {
        return undefined;
    }
};
var monadTransLoggerT = {
    lift: function (dictMonad) {
        return function ($33) {
            return LoggerT(Data_Function["const"]($33));
        };
    }
};
var mapLoggerT = function (f) {
    return function (v) {
        return LoggerT(function ($34) {
            return f(v($34));
        });
    };
};
var functorLoggerT = function (dictFunctor) {
    return {
        map: (function () {
            var $35 = Data_Functor.map(dictFunctor);
            return function ($36) {
                return mapLoggerT($35($36));
            };
        })()
    };
};
var monadLoggerT = function (dictMonad) {
    return {
        Applicative0: function () {
            return applicativeLoggerT(dictMonad);
        },
        Bind1: function () {
            return bindLoggerT(dictMonad);
        }
    };
};
var bindLoggerT = function (dictMonad) {
    return {
        bind: function (v) {
            return function (f) {
                return function (l) {
                    return Control_Bind.bind(dictMonad.Bind1())(v(l))((function () {
                        var $37 = Data_Newtype.unwrap();
                        return function ($38) {
                            return (function (v1) {
                                return v1(l);
                            })($37(f($38)));
                        };
                    })());
                };
            };
        },
        Apply0: function () {
            return applyLoggerT(dictMonad);
        }
    };
};
var applyLoggerT = function (dictMonad) {
    return {
        apply: Control_Monad.ap(monadLoggerT(dictMonad)),
        Functor0: function () {
            return functorLoggerT(((dictMonad.Bind1()).Apply0()).Functor0());
        }
    };
};
var applicativeLoggerT = function (dictMonad) {
    return {
        pure: (function () {
            var $39 = Control_Applicative.pure(dictMonad.Applicative0());
            return function ($40) {
                return LoggerT(Data_Function["const"]($39($40)));
            };
        })(),
        Apply0: function () {
            return applyLoggerT(dictMonad);
        }
    };
};
var monadAskLoggerT = function (dictMonadAsk) {
    return {
        ask: Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function () {
            return monadLoggerT(dictMonadAsk.Monad0());
        }
    };
};
var monadReaderLoggerT = function (dictMonadReader) {
    return {
        local: (function () {
            var $41 = Control_Monad_Reader_Class.local(dictMonadReader);
            return function ($42) {
                return mapLoggerT($41($42));
            };
        })(),
        MonadAsk0: function () {
            return monadAskLoggerT(dictMonadReader.MonadAsk0());
        }
    };
};
var monadEffectLoggerT = function (dictMonadEffect) {
    return {
        liftEffect: (function () {
            var $43 = Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadEffect.Monad0());
            var $44 = Effect_Class.liftEffect(dictMonadEffect);
            return function ($45) {
                return $43($44($45));
            };
        })(),
        Monad0: function () {
            return monadLoggerT(dictMonadEffect.Monad0());
        }
    };
};
var monadAffLoggerT = function (dictMonadAff) {
    return {
        liftAff: (function () {
            var $46 = Control_Monad_Trans_Class.lift(monadTransLoggerT)((dictMonadAff.MonadEffect0()).Monad0());
            var $47 = Effect_Aff_Class.liftAff(dictMonadAff);
            return function ($48) {
                return $46($47($48));
            };
        })(),
        MonadEffect0: function () {
            return monadEffectLoggerT(dictMonadAff.MonadEffect0());
        }
    };
};
var monadLoggerLoggerT = function (dictMonadEffect) {
    return {
        log: function (message) {
            return function (v) {
                return v(message);
            };
        },
        MonadEffect0: function () {
            return monadEffectLoggerT(dictMonadEffect);
        }
    };
};
var monadRecLoggerT = function (dictMonadRec) {
    return {
        tailRecM: function (step) {
            return function (a) {
                return function (l) {
                    return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a$prime) {
                        return Data_Newtype.unwrap()(step(a$prime))(l);
                    })(a);
                };
            };
        },
        Monad0: function () {
            return monadLoggerT(dictMonadRec.Monad0());
        }
    };
};
var monadStateLoggerT = function (dictMonadState) {
    return {
        state: (function () {
            var $49 = Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadState.Monad0());
            var $50 = Control_Monad_State_Class.state(dictMonadState);
            return function ($51) {
                return $49($50($51));
            };
        })(),
        Monad0: function () {
            return monadLoggerT(dictMonadState.Monad0());
        }
    };
};
var monadThrowLoggerT = function (dictMonadThrow) {
    return {
        throwError: (function () {
            var $52 = Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadThrow.Monad0());
            var $53 = Control_Monad_Error_Class.throwError(dictMonadThrow);
            return function ($54) {
                return $52($53($54));
            };
        })(),
        Monad0: function () {
            return monadLoggerT(dictMonadThrow.Monad0());
        }
    };
};
var monadErrorLoggerT = function (dictMonadError) {
    return {
        catchError: function (v) {
            return function (h) {
                return function (l) {
                    return Control_Monad_Error_Class.catchError(dictMonadError)(v(l))((function () {
                        var $55 = Data_Newtype.unwrap();
                        return function ($56) {
                            return (function (v1) {
                                return v1(l);
                            })($55(h($56)));
                        };
                    })());
                };
            };
        },
        MonadThrow0: function () {
            return monadThrowLoggerT(dictMonadError.MonadThrow0());
        }
    };
};
module.exports = {
    LoggerT: LoggerT,
    runLoggerT: runLoggerT,
    mapLoggerT: mapLoggerT,
    newtypeLoggerT: newtypeLoggerT,
    functorLoggerT: functorLoggerT,
    applyLoggerT: applyLoggerT,
    applicativeLoggerT: applicativeLoggerT,
    bindLoggerT: bindLoggerT,
    monadLoggerT: monadLoggerT,
    monadTransLoggerT: monadTransLoggerT,
    monadEffectLoggerT: monadEffectLoggerT,
    monadAffLoggerT: monadAffLoggerT,
    monadAskLoggerT: monadAskLoggerT,
    monadStateLoggerT: monadStateLoggerT,
    monadReaderLoggerT: monadReaderLoggerT,
    monadRecLoggerT: monadRecLoggerT,
    monadLoggerLoggerT: monadLoggerLoggerT,
    monadThrowLoggerT: monadThrowLoggerT,
    monadErrorLoggerT: monadErrorLoggerT,
    debug: Control_Monad_Logger_Class.debug,
    error: Control_Monad_Logger_Class.error,
    info: Control_Monad_Logger_Class.info,
    trace: Control_Monad_Logger_Class.trace,
    warn: Control_Monad_Logger_Class.warn,
    lift: Control_Monad_Trans_Class.lift
};
