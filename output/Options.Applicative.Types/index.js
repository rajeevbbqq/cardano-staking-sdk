// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Free = require("../Control.Monad.Free/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Options_Applicative_Help_Chunk = require("../Options.Applicative.Help.Chunk/index.js");
var Options_Applicative_Help_Types = require("../Options.Applicative.Help.Types/index.js");
var Text_PrettyPrint_Leijen = require("../Text.PrettyPrint.Leijen/index.js");
var ParserFailure = function (x) {
    return x;
};
var Internal = (function () {
    function Internal() {

    };
    Internal.value = new Internal();
    return Internal;
})();
var Hidden = (function () {
    function Hidden() {

    };
    Hidden.value = new Hidden();
    return Hidden;
})();
var Visible = (function () {
    function Visible() {

    };
    Visible.value = new Visible();
    return Visible;
})();
var Leaf = (function () {
    function Leaf(value0) {
        this.value0 = value0;
    };
    Leaf.create = function (value0) {
        return new Leaf(value0);
    };
    return Leaf;
})();
var MultNode = (function () {
    function MultNode(value0) {
        this.value0 = value0;
    };
    MultNode.create = function (value0) {
        return new MultNode(value0);
    };
    return MultNode;
})();
var AltNode = (function () {
    function AltNode(value0) {
        this.value0 = value0;
    };
    AltNode.create = function (value0) {
        return new AltNode(value0);
    };
    return AltNode;
})();
var OptProperties = function (x) {
    return x;
};
var OptShort = (function () {
    function OptShort(value0) {
        this.value0 = value0;
    };
    OptShort.create = function (value0) {
        return new OptShort(value0);
    };
    return OptShort;
})();
var OptLong = (function () {
    function OptLong(value0) {
        this.value0 = value0;
    };
    OptLong.create = function (value0) {
        return new OptLong(value0);
    };
    return OptLong;
})();
var OptHelpInfo = function (x) {
    return x;
};
var CmdStart = (function () {
    function CmdStart() {

    };
    CmdStart.value = new CmdStart();
    return CmdStart;
})();
var CmdCont = (function () {
    function CmdCont() {

    };
    CmdCont.value = new CmdCont();
    return CmdCont;
})();
var CompletionResult = function (x) {
    return x;
};
var Success = (function () {
    function Success(value0) {
        this.value0 = value0;
    };
    Success.create = function (value0) {
        return new Success(value0);
    };
    return Success;
})();
var Failure = (function () {
    function Failure(value0) {
        this.value0 = value0;
    };
    Failure.create = function (value0) {
        return new Failure(value0);
    };
    return Failure;
})();
var CompletionInvoked = (function () {
    function CompletionInvoked(value0) {
        this.value0 = value0;
    };
    CompletionInvoked.create = function (value0) {
        return new CompletionInvoked(value0);
    };
    return CompletionInvoked;
})();
var Completer = function (x) {
    return x;
};
var Backtrack = (function () {
    function Backtrack() {

    };
    Backtrack.value = new Backtrack();
    return Backtrack;
})();
var NoBacktrack = (function () {
    function NoBacktrack() {

    };
    NoBacktrack.value = new NoBacktrack();
    return NoBacktrack;
})();
var SubparserInline = (function () {
    function SubparserInline() {

    };
    SubparserInline.value = new SubparserInline();
    return SubparserInline;
})();
var ParserPrefs = function (x) {
    return x;
};
var Intersperse = (function () {
    function Intersperse() {

    };
    Intersperse.value = new Intersperse();
    return Intersperse;
})();
var NoIntersperse = (function () {
    function NoIntersperse() {

    };
    NoIntersperse.value = new NoIntersperse();
    return NoIntersperse;
})();
var AllPositionals = (function () {
    function AllPositionals() {

    };
    AllPositionals.value = new AllPositionals();
    return AllPositionals;
})();
var ForwardOptions = (function () {
    function ForwardOptions() {

    };
    ForwardOptions.value = new ForwardOptions();
    return ForwardOptions;
})();
var ParserInfo = function (x) {
    return x;
};
var NilP = (function () {
    function NilP(value0) {
        this.value0 = value0;
    };
    NilP.create = function (value0) {
        return new NilP(value0);
    };
    return NilP;
})();
var OptP = (function () {
    function OptP(value0) {
        this.value0 = value0;
    };
    OptP.create = function (value0) {
        return new OptP(value0);
    };
    return OptP;
})();
var MultP = (function () {
    function MultP(value0) {
        this.value0 = value0;
    };
    MultP.create = function (value0) {
        return new MultP(value0);
    };
    return MultP;
})();
var AltP = (function () {
    function AltP(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    AltP.create = function (value0) {
        return function (value1) {
            return new AltP(value0, value1);
        };
    };
    return AltP;
})();
var BindP = (function () {
    function BindP(value0) {
        this.value0 = value0;
    };
    BindP.create = function (value0) {
        return new BindP(value0);
    };
    return BindP;
})();
var Option = function (x) {
    return x;
};
var OptReader = (function () {
    function OptReader(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    OptReader.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new OptReader(value0, value1, value2);
            };
        };
    };
    return OptReader;
})();
var FlagReader = (function () {
    function FlagReader(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FlagReader.create = function (value0) {
        return function (value1) {
            return new FlagReader(value0, value1);
        };
    };
    return FlagReader;
})();
var ArgReader = (function () {
    function ArgReader(value0) {
        this.value0 = value0;
    };
    ArgReader.create = function (value0) {
        return new ArgReader(value0);
    };
    return ArgReader;
})();
var CmdReader = (function () {
    function CmdReader(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    CmdReader.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new CmdReader(value0, value1, value2);
            };
        };
    };
    return CmdReader;
})();
var CReader = function (x) {
    return x;
};
var ReadM = function (x) {
    return x;
};
var ErrorMsg = (function () {
    function ErrorMsg(value0) {
        this.value0 = value0;
    };
    ErrorMsg.create = function (value0) {
        return new ErrorMsg(value0);
    };
    return ErrorMsg;
})();
var InfoMsg = (function () {
    function InfoMsg(value0) {
        this.value0 = value0;
    };
    InfoMsg.create = function (value0) {
        return new InfoMsg(value0);
    };
    return InfoMsg;
})();
var ShowHelpText = (function () {
    function ShowHelpText() {

    };
    ShowHelpText.value = new ShowHelpText();
    return ShowHelpText;
})();
var MissingError = (function () {
    function MissingError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MissingError.create = function (value0) {
        return function (value1) {
            return new MissingError(value0, value1);
        };
    };
    return MissingError;
})();
var ExpectsArgError = (function () {
    function ExpectsArgError(value0) {
        this.value0 = value0;
    };
    ExpectsArgError.create = function (value0) {
        return new ExpectsArgError(value0);
    };
    return ExpectsArgError;
})();
var UnexpectedError = (function () {
    function UnexpectedError(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnexpectedError.create = function (value0) {
        return function (value1) {
            return new UnexpectedError(value0, value1);
        };
    };
    return UnexpectedError;
})();
var SomeParser = (function () {
    function SomeParser(value0) {
        this.value0 = value0;
    };
    SomeParser.create = function (value0) {
        return new SomeParser(value0);
    };
    return SomeParser;
})();
var MultPE = (function () {
    function MultPE(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MultPE.create = function (value0) {
        return function (value1) {
            return new MultPE(value0, value1);
        };
    };
    return MultPE;
})();
var Context = (function () {
    function Context(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Context.create = function (value0) {
        return function (value1) {
            return new Context(value0, value1);
        };
    };
    return Context;
})();
var ParserM = function (x) {
    return x;
};
var readerAsk = Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
var readerAbort = (function () {
    var $247 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity));
    var $248 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
    return function ($249) {
        return ReadM($247($248($249)));
    };
})();
var readerError = function ($250) {
    return readerAbort(ErrorMsg.create($250));
};
var readMNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var readMFunctor = {
    map: function (f) {
        return function (v) {
            return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(f)(v);
        };
    }
};
var readMApply = {
    apply: function (v) {
        return function (v1) {
            return ReadM(Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity)))(v)(v1));
        };
    },
    Functor0: function () {
        return readMFunctor;
    }
};
var readMBind = {
    bind: function (v) {
        return function (f) {
            return ReadM(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity)))(v)((function () {
                var $251 = Data_Newtype.un()(ReadM);
                return function ($252) {
                    return $251(f($252));
                };
            })()));
        };
    },
    Apply0: function () {
        return readMApply;
    }
};
var readMApplicative = {
    pure: (function () {
        var $253 = Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
        return function ($254) {
            return ReadM($253($254));
        };
    })(),
    Apply0: function () {
        return readMApply;
    }
};
var readMMonad = {
    Applicative0: function () {
        return readMApplicative;
    },
    Bind1: function () {
        return readMBind;
    }
};
var readMMonadFail = {
    throwError: readerError,
    Monad0: function () {
        return readMMonad;
    }
};
var parserResultGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new Success(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new Failure(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new CompletionInvoked(x.value0.value0);
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 452, column 1 - line 452, column 66): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Success) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof Failure) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof CompletionInvoked) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 452, column 1 - line 452, column 66): " + [ x.constructor.name ]);
    }
};
var parserResultFunctor = {
    map: function (v) {
        return function (v1) {
            if (v1 instanceof Success) {
                return new Success(v(v1.value0));
            };
            if (v1 instanceof Failure) {
                return new Failure(v1.value0);
            };
            if (v1 instanceof CompletionInvoked) {
                return new CompletionInvoked(v1.value0);
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 455, column 1 - line 458, column 52): " + [ v.constructor.name, v1.constructor.name ]);
        };
    }
};
var parserResultApply = {
    apply: function (v) {
        return function (v1) {
            if (v instanceof Success) {
                return Data_Functor.map(parserResultFunctor)(v.value0)(v1);
            };
            if (v instanceof Failure) {
                return new Failure(v.value0);
            };
            if (v instanceof CompletionInvoked) {
                return new CompletionInvoked(v.value0);
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 465, column 1 - line 468, column 54): " + [ v.constructor.name, v1.constructor.name ]);
        };
    },
    Functor0: function () {
        return parserResultFunctor;
    }
};
var parserResultBind = {
    bind: function (v) {
        return function (v1) {
            if (v instanceof Success) {
                return v1(v.value0);
            };
            if (v instanceof Failure) {
                return new Failure(v.value0);
            };
            if (v instanceof CompletionInvoked) {
                return new CompletionInvoked(v.value0);
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 473, column 1 - line 476, column 53): " + [ v.constructor.name, v1.constructor.name ]);
        };
    },
    Apply0: function () {
        return parserResultApply;
    }
};
var parserResultApplicative = {
    pure: Success.create,
    Apply0: function () {
        return parserResultApply;
    }
};
var parserResultMonad = {
    Applicative0: function () {
        return parserResultApplicative;
    },
    Bind1: function () {
        return parserResultBind;
    }
};
var parserPrefsNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var parserPrefsGeneric = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var parserMMonadRec = Control_Monad_Free.freeMonadRec;
var parserMMonad = Control_Monad_Free.freeMonad;
var parserMFunctor = Control_Monad_Free.freeFunctor;
var parserMBind = Control_Monad_Free.freeBind;
var parserMApply = Control_Monad_Free.freeApply;
var parserMApplicative = Control_Monad_Free.freeApplicative;
var parserInfoNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var parserFailureShow = {
    show: function (v) {
        return "(ParserFailure <function>)";
    }
};
var parserFailureFunctor = {
    map: function (f) {
        return function (v) {
            return ParserFailure(function (progn) {
                var v1 = v(progn);
                return new Data_Tuple.Tuple(f(v1.value0), new Data_Tuple.Tuple(v1.value1.value0, new Data_Tuple.Tuple(v1.value1.value1.value0, v1.value1.value1.value1)));
            });
        };
    }
};
var parseErrorSemigroup = {
    append: function (v) {
        return function (m) {
            return m;
        };
    }
};
var readMAlt = {
    alt: function (v) {
        return function (v1) {
            return ReadM(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Control_Monad_Except_Trans.altExceptT(parseErrorSemigroup)(Data_Identity.monadIdentity)))(v)(v1));
        };
    },
    Functor0: function () {
        return readMFunctor;
    }
};
var overFailure = function (v) {
    return function (v1) {
        if (v1 instanceof Failure) {
            return Failure.create(Data_Functor.map(parserFailureFunctor)(v)(v1.value0));
        };
        return v1;
    };
};
var optional = function (dictAlt) {
    return function (dictApplicative) {
        return function (a) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Data_Maybe.Just.create)(a))(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value));
        };
    };
};
var optionNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var optVisibilityGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Internal.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return Hidden.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return Visible.value;
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 161, column 1 - line 161, column 64): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Internal) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Hidden) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof Visible) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 161, column 1 - line 161, column 64): " + [ x.constructor.name ]);
    }
};
var optVisibilityShow = {
    show: Data_Show_Generic.genericShow(optVisibilityGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Internal";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Hidden";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Visible";
        }
    }))))
};
var optVisibilityEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Internal && y instanceof Internal) {
                return true;
            };
            if (x instanceof Hidden && y instanceof Hidden) {
                return true;
            };
            if (x instanceof Visible && y instanceof Visible) {
                return true;
            };
            return false;
        };
    }
};
var optVisibilityOrd = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Internal && y instanceof Internal) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Internal) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Internal) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Hidden && y instanceof Hidden) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Hidden) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Hidden) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Visible && y instanceof Visible) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 160, column 1 - line 160, column 54): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return optVisibilityEq;
    }
};
var optTreeGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new Leaf(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new MultNode(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new AltNode(x.value0.value0);
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 529, column 1 - line 529, column 56): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Leaf) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof MultNode) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof AltNode) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 529, column 1 - line 529, column 56): " + [ x.constructor.name ]);
    }
};
var optTreeShow = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(optTreeGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))({
            reflectSymbol: function () {
                return "Leaf";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(optTreeShow(dictShow))))({
            reflectSymbol: function () {
                return "MultNode";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(optTreeShow(dictShow))))({
            reflectSymbol: function () {
                return "AltNode";
            }
        }))))
    };
};
var optPropertiesShow = {
    show: function (v) {
        return "(OptProperties " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propDescMod";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propHelp";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propMetaVar";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propShowDefault";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propVisibility";
            }
        })(Data_Show.showRecordFieldsNil)(optVisibilityShow))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Show.showString))(Options_Applicative_Help_Chunk.chunkShow(Text_PrettyPrint_Leijen.docShow)))(Data_Maybe.showMaybe(Data_Show.showString))))({
            propVisibility: v.propVisibility,
            propHelp: v.propHelp,
            propMetaVar: v.propMetaVar,
            propShowDefault: v.propShowDefault,
            propDescMod: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function["const"]("<func>"))(v.propDescMod)
        }) + ")");
    }
};
var optionShow = {
    show: function (v) {
        return "(Option " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "optMain";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "optProps";
            }
        })(Data_Show.showRecordFieldsNil)(optPropertiesShow))(Data_Show.showString)))({
            optProps: v.optProps,
            optMain: "<OptReader>"
        }) + ")");
    }
};
var optPropertiesNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var optShowDefault = (function () {
    var $255 = Data_Newtype.un()(OptProperties);
    var $256 = Data_Newtype.un()(Option);
    return function ($257) {
        return (function (v) {
            return v.propShowDefault;
        })($255((function (v) {
            return v.optProps;
        })($256($257))));
    };
})();
var optVisibility = (function () {
    var $258 = Data_Newtype.un()(OptProperties);
    var $259 = Data_Newtype.un()(Option);
    return function ($260) {
        return (function (v) {
            return v.propVisibility;
        })($258((function (v) {
            return v.optProps;
        })($259($260))));
    };
})();
var optNameGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new OptShort(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new OptLong(x.value0);
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 149, column 1 - line 149, column 52): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof OptShort) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof OptLong) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 149, column 1 - line 149, column 52): " + [ x.constructor.name ]);
    }
};
var optNameShow = {
    show: Data_Show_Generic.genericShow(optNameGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showChar))({
        reflectSymbol: function () {
            return "OptShort";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "OptLong";
        }
    })))
};
var optNameEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof OptShort && y instanceof OptShort) {
                return x.value0 === y.value0;
            };
            if (x instanceof OptLong && y instanceof OptLong) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var optNameOrd = {
    compare: function (x) {
        return function (y) {
            if (x instanceof OptShort && y instanceof OptShort) {
                return Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
            };
            if (x instanceof OptShort) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof OptShort) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof OptLong && y instanceof OptLong) {
                return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 148, column 1 - line 148, column 42): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return optNameEq;
    }
};
var optMetaVar = (function () {
    var $261 = Data_Newtype.un()(OptProperties);
    var $262 = Data_Newtype.un()(Option);
    return function ($263) {
        return (function (v) {
            return v.propMetaVar;
        })($261((function (v) {
            return v.optProps;
        })($262($263))));
    };
})();
var optHelpInfoGeneric = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var optHelpInfoShow = {
    show: Data_Show_Generic.genericShow(optHelpInfoGeneric)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "hinfoDefault";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "hinfoMulti";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "hinfoUnreachableArgs";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showBoolean))))({
        reflectSymbol: function () {
            return "OptHelpInfo";
        }
    }))
};
var optHelpInfoEq = {
    eq: function (x) {
        return function (y) {
            return x.hinfoDefault === y.hinfoDefault && x.hinfoMulti === y.hinfoMulti && x.hinfoUnreachableArgs === y.hinfoUnreachableArgs;
        };
    }
};
var optHelp = (function () {
    var $264 = Data_Newtype.un()(OptProperties);
    var $265 = Data_Newtype.un()(Option);
    return function ($266) {
        return (function (v) {
            return v.propHelp;
        })($264((function (v) {
            return v.optProps;
        })($265($266))));
    };
})();
var optDescMod = (function () {
    var $267 = Data_Newtype.un()(OptProperties);
    var $268 = Data_Newtype.un()(Option);
    return function ($269) {
        return (function (v) {
            return v.propDescMod;
        })($267((function (v) {
            return v.optProps;
        })($268($269))));
    };
})();
var oneM = function ($270) {
    return ParserM(Control_Monad_Free.liftF($270));
};
var newtypeParserFailure = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeOptHelpInfo = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCompletionResult = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCompleter = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCReader = {
    Coercible0: function () {
        return undefined;
    }
};
var mkCompleter = Completer;
var isCmdStartGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return CmdStart.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return CmdCont.value;
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 81, column 1 - line 81, column 58): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof CmdStart) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof CmdCont) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 81, column 1 - line 81, column 58): " + [ x.constructor.name ]);
    }
};
var isCmdStartShow = {
    show: Data_Show_Generic.genericShow(isCmdStartGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CmdStart";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "CmdCont";
        }
    })))
};
var fromM = function (v) {
    return new BindP(v);
};
var completionResultShow = {
    show: function (v) {
        return "(CompletionResult <function>)";
    }
};
var parserResultShow = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(parserResultGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))({
            reflectSymbol: function () {
                return "Success";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(parserFailureShow))({
            reflectSymbol: function () {
                return "Failure";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(completionResultShow))({
            reflectSymbol: function () {
                return "CompletionInvoked";
            }
        }))))
    };
};
var completerSemigroup = {
    append: function (v) {
        return function (v1) {
            return Completer(function (s) {
                return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v(s)))(v1(s));
            });
        };
    }
};
var completerMonoid = {
    mempty: Completer(function (v) {
        return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
    }),
    Semigroup0: function () {
        return completerSemigroup;
    }
};
var cReaderFunctor = {
    map: function (f) {
        return Data_Newtype.over()()(CReader)(function (r) {
            return {
                crReader: Data_Functor.map(readMFunctor)(f)(r.crReader),
                crCompleter: r.crCompleter
            };
        });
    }
};
var parserInfoFunctor = {
    map: function (f) {
        return Data_Newtype.over()()(ParserInfo)(function (i) {
            return {
                infoParser: Data_Functor.map(parserFunctor)(f)(i.infoParser),
                infoFailureCode: i.infoFailureCode,
                infoFooter: i.infoFooter,
                infoFullDesc: i.infoFullDesc,
                infoHeader: i.infoHeader,
                infoPolicy: i.infoPolicy,
                infoProgDesc: i.infoProgDesc
            };
        });
    }
};
var parserFunctor = {
    map: function (f) {
        return function (v) {
            if (v instanceof NilP) {
                return new NilP(f(v.value0));
            };
            if (v instanceof OptP) {
                return new OptP(Data_Functor.map(optionFunctor)(f)(v.value0));
            };
            if (v instanceof MultP) {
                return Data_Exists.runExists(function (v1) {
                    return MultP.create(Data_Exists.mkExists(new MultPE(Data_Functor.map(parserFunctor)(function (v2) {
                        return function ($271) {
                            return f(v2($271));
                        };
                    })(v1.value0), v1.value1)));
                })(v.value0);
            };
            if (v instanceof AltP) {
                return new AltP(Data_Functor.map(parserFunctor)(f)(v.value0), Data_Functor.map(parserFunctor)(f)(v.value1));
            };
            if (v instanceof BindP) {
                return BindP.create(Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v.value0));
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 317, column 1 - line 322, column 36): " + [ f.constructor.name, v.constructor.name ]);
        };
    }
};
var optionFunctor = {
    map: function (f) {
        return Data_Newtype.over()()(Option)(function (o) {
            return {
                optMain: Data_Functor.map(optReaderFunctor)(f)(o.optMain),
                optProps: o.optProps
            };
        });
    }
};
var optReaderFunctor = {
    map: function (f) {
        return function (v) {
            if (v instanceof OptReader) {
                return new OptReader(v.value0, Data_Functor.map(cReaderFunctor)(f)(v.value1), v.value2);
            };
            if (v instanceof FlagReader) {
                return new FlagReader(v.value0, f(v.value1));
            };
            if (v instanceof ArgReader) {
                return new ArgReader(Data_Functor.map(cReaderFunctor)(f)(v.value0));
            };
            if (v instanceof CmdReader) {
                return new CmdReader(v.value0, v.value1, (function () {
                    var $272 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(parserInfoFunctor)(f));
                    return function ($273) {
                        return $272(v.value2($273));
                    };
                })());
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 264, column 1 - line 268, column 68): " + [ f.constructor.name, v.constructor.name ]);
        };
    }
};
var parserAlt = {
    alt: AltP.create,
    Functor0: function () {
        return parserFunctor;
    }
};
var parserApply = {
    apply: function (a) {
        return function (b) {
            return new MultP(Data_Exists.mkExists(new MultPE(a, b)));
        };
    },
    Functor0: function () {
        return parserFunctor;
    }
};
var parserApplicative = {
    pure: NilP.create,
    Apply0: function () {
        return parserApply;
    }
};
var manyM = function (p) {
    var go = function (acc) {
        return Control_Bind.bind(parserMBind)(oneM(Control_Alt.alt(parserAlt)(Data_Functor.map(parserFunctor)(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(parserApplicative)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)))))(function (aa) {
            return Control_Applicative.pure(parserMApplicative)(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                return new Data_List_Types.Cons(v, acc);
            })(function (v) {
                return Data_List.reverse(acc);
            })(aa));
        });
    };
    return Control_Monad_Rec_Class.tailRecM(parserMMonadRec)(go)(Data_List_Types.Nil.value);
};
var many = function ($274) {
    return fromM(manyM($274));
};
var someM = function (p) {
    return Control_Apply.apply(parserMApply)(Data_Functor.map(parserMFunctor)(Data_List_NonEmpty["cons'"])(oneM(p)))(manyM(p));
};
var some = function ($275) {
    return fromM(someM($275));
};
var backtrackingGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Backtrack.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return NoBacktrack.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return SubparserInline.value;
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 119, column 1 - line 119, column 62): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Backtrack) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof NoBacktrack) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof SubparserInline) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 119, column 1 - line 119, column 62): " + [ x.constructor.name ]);
    }
};
var backtrackingShow = {
    show: Data_Show_Generic.genericShow(backtrackingGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Backtrack";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "NoBacktrack";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "SubparserInline";
        }
    }))))
};
var parserPrefsShow = {
    show: Data_Show_Generic.genericShow(parserPrefsGeneric)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefBacktrack";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefColumns";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefDisambiguate";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefMultiSuffix";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefShowHelpOnEmpty";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "prefShowHelpOnError";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showBoolean))(Data_Show.showBoolean))(Data_Show.showString))(Data_Show.showBoolean))(Data_Show.showInt))(backtrackingShow))))({
        reflectSymbol: function () {
            return "ParserPrefs";
        }
    }))
};
var backtrackingEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Backtrack && y instanceof Backtrack) {
                return true;
            };
            if (x instanceof NoBacktrack && y instanceof NoBacktrack) {
                return true;
            };
            if (x instanceof SubparserInline && y instanceof SubparserInline) {
                return true;
            };
            return false;
        };
    }
};
var parserPrefsEq = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(backtrackingEq)(x.prefBacktrack)(y.prefBacktrack) && x.prefColumns === y.prefColumns && x.prefDisambiguate === y.prefDisambiguate && x.prefMultiSuffix === y.prefMultiSuffix && x.prefShowHelpOnEmpty === y.prefShowHelpOnEmpty && x.prefShowHelpOnError === y.prefShowHelpOnError;
        };
    }
};
var argPolicyGeneric = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Intersperse.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return NoIntersperse.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return AllPositionals.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
            return ForwardOptions.value;
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 508, column 1 - line 508, column 56): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Intersperse) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof NoIntersperse) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof AllPositionals) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
        };
        if (x instanceof ForwardOptions) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
        };
        throw new Error("Failed pattern match at Options.Applicative.Types (line 508, column 1 - line 508, column 56): " + [ x.constructor.name ]);
    }
};
var argPolicyShow = {
    show: Data_Show_Generic.genericShow(argPolicyGeneric)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "Intersperse";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "NoIntersperse";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "AllPositionals";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "ForwardOptions";
        }
    })))))
};
var argPolicyEq = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Intersperse && y instanceof Intersperse) {
                return true;
            };
            if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
                return true;
            };
            if (x instanceof AllPositionals && y instanceof AllPositionals) {
                return true;
            };
            if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
                return true;
            };
            return false;
        };
    }
};
var argPolicyOrd = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Intersperse && y instanceof Intersperse) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Intersperse) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Intersperse) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof NoIntersperse) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof NoIntersperse) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof AllPositionals && y instanceof AllPositionals) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof AllPositionals) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof AllPositionals) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Options.Applicative.Types (line 507, column 1 - line 507, column 46): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return argPolicyEq;
    }
};
module.exports = {
    ErrorMsg: ErrorMsg,
    InfoMsg: InfoMsg,
    ShowHelpText: ShowHelpText,
    MissingError: MissingError,
    ExpectsArgError: ExpectsArgError,
    UnexpectedError: UnexpectedError,
    ParserInfo: ParserInfo,
    ParserPrefs: ParserPrefs,
    Option: Option,
    OptShort: OptShort,
    OptLong: OptLong,
    OptReader: OptReader,
    FlagReader: FlagReader,
    ArgReader: ArgReader,
    CmdReader: CmdReader,
    OptProperties: OptProperties,
    Internal: Internal,
    Hidden: Hidden,
    Visible: Visible,
    Backtrack: Backtrack,
    NoBacktrack: NoBacktrack,
    SubparserInline: SubparserInline,
    ReadM: ReadM,
    readerAsk: readerAsk,
    readerAbort: readerAbort,
    readerError: readerError,
    CReader: CReader,
    NilP: NilP,
    OptP: OptP,
    MultP: MultP,
    AltP: AltP,
    BindP: BindP,
    MultPE: MultPE,
    Completer: Completer,
    mkCompleter: mkCompleter,
    CompletionResult: CompletionResult,
    ParserFailure: ParserFailure,
    Success: Success,
    Failure: Failure,
    CompletionInvoked: CompletionInvoked,
    overFailure: overFailure,
    Intersperse: Intersperse,
    NoIntersperse: NoIntersperse,
    AllPositionals: AllPositionals,
    ForwardOptions: ForwardOptions,
    OptHelpInfo: OptHelpInfo,
    Leaf: Leaf,
    MultNode: MultNode,
    AltNode: AltNode,
    SomeParser: SomeParser,
    Context: Context,
    CmdStart: CmdStart,
    CmdCont: CmdCont,
    optVisibility: optVisibility,
    optMetaVar: optMetaVar,
    optHelp: optHelp,
    optShowDefault: optShowDefault,
    optDescMod: optDescMod,
    many: many,
    some: some,
    optional: optional,
    isCmdStartGeneric: isCmdStartGeneric,
    isCmdStartShow: isCmdStartShow,
    parseErrorSemigroup: parseErrorSemigroup,
    parserInfoNewtype: parserInfoNewtype,
    parserInfoFunctor: parserInfoFunctor,
    backtrackingEq: backtrackingEq,
    backtrackingGeneric: backtrackingGeneric,
    backtrackingShow: backtrackingShow,
    parserPrefsNewtype: parserPrefsNewtype,
    parserPrefsEq: parserPrefsEq,
    parserPrefsGeneric: parserPrefsGeneric,
    parserPrefsShow: parserPrefsShow,
    optNameEq: optNameEq,
    optNameOrd: optNameOrd,
    optNameGeneric: optNameGeneric,
    optNameShow: optNameShow,
    optVisibilityEq: optVisibilityEq,
    optVisibilityOrd: optVisibilityOrd,
    optVisibilityGeneric: optVisibilityGeneric,
    optVisibilityShow: optVisibilityShow,
    optPropertiesNewtype: optPropertiesNewtype,
    optPropertiesShow: optPropertiesShow,
    optionNewtype: optionNewtype,
    optionShow: optionShow,
    optionFunctor: optionFunctor,
    readMNewtype: readMNewtype,
    readMFunctor: readMFunctor,
    readMApply: readMApply,
    readMApplicative: readMApplicative,
    readMAlt: readMAlt,
    readMBind: readMBind,
    readMMonad: readMMonad,
    readMMonadFail: readMMonadFail,
    newtypeCReader: newtypeCReader,
    cReaderFunctor: cReaderFunctor,
    optReaderFunctor: optReaderFunctor,
    parserFunctor: parserFunctor,
    parserApply: parserApply,
    parserApplicative: parserApplicative,
    parserAlt: parserAlt,
    newtypeCompleter: newtypeCompleter,
    completerSemigroup: completerSemigroup,
    completerMonoid: completerMonoid,
    newtypeCompletionResult: newtypeCompletionResult,
    completionResultShow: completionResultShow,
    newtypeParserFailure: newtypeParserFailure,
    parserFailureShow: parserFailureShow,
    parserFailureFunctor: parserFailureFunctor,
    parserResultGeneric: parserResultGeneric,
    parserResultShow: parserResultShow,
    parserResultFunctor: parserResultFunctor,
    parserResultApply: parserResultApply,
    parserResultApplicative: parserResultApplicative,
    parserResultBind: parserResultBind,
    parserResultMonad: parserResultMonad,
    argPolicyEq: argPolicyEq,
    argPolicyOrd: argPolicyOrd,
    argPolicyGeneric: argPolicyGeneric,
    argPolicyShow: argPolicyShow,
    newtypeOptHelpInfo: newtypeOptHelpInfo,
    optHelpInfoEq: optHelpInfoEq,
    optHelpInfoGeneric: optHelpInfoGeneric,
    optHelpInfoShow: optHelpInfoShow,
    optTreeGeneric: optTreeGeneric,
    optTreeShow: optTreeShow,
    ParserHelp: Options_Applicative_Help_Types.ParserHelp
};
