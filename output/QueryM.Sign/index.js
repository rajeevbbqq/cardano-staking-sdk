// Generated by purs version 0.14.5
"use strict";
var Cardano_Types_Transaction = require("../Cardano.Types.Transaction/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Helpers = require("../Helpers/index.js");
var QueryM = require("../QueryM/index.js");
var QueryM_Utxos = require("../QueryM.Utxos/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Wallet = require("../Wallet/index.js");
var walletWaitForInputs = function (txInputs) {
    return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not get addresses"))(QueryM.getWalletAddresses))(function (ownAddrs) {
        return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))((function () {
            var $9 = Data_Map_Internal.filter(Types_Transaction.ordTransactionInput)((function () {
                var $12 = Data_Function.flip(Data_Array.elem(Serialization_Address.eqAddress))(ownAddrs);
                var $13 = Data_Newtype.unwrap();
                return function ($14) {
                    return $12((function (v) {
                        return v.address;
                    })($13($14)));
                };
            })());
            var $10 = Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray);
            return function ($11) {
                return $9($10($11));
            };
        })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(function (txInput) {
            return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not get utxo"))(QueryM_Utxos.getUtxo(txInput)))(function (utxo) {
                return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(new Data_Tuple.Tuple(txInput, utxo));
            });
        })(txInputs)))(function (ownInputUtxos) {
            var go = function (attempts) {
                return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM_Utxos.getWalletUtxos)(Data_Maybe.fromMaybe(Data_Map_Internal.empty)))(function (walletUtxos) {
                    return Control_Applicative.unless(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Map_Internal.isSubmap(Types_Transaction.ordTransactionInput)(Cardano_Types_Transaction.eqTransactionOutput)(ownInputUtxos)(walletUtxos))(Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Applicative.when(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(attempts === 0)(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Effect_Exception["throw"]("walletWaitForInputs: timeout while waiting for wallet" + (" UTxO set and CTL query layer UTxO set to synchronize. UTxOs" + (" from Ogmios: " + (Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(ownInputUtxos) + (", UTxOs from wallet: " + (Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(walletUtxos) + (", UTxOs that didn't appear in the wallet: " + Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(Data_Map_Internal.difference(Types_Transaction.ordTransactionInput)(ownInputUtxos)(walletUtxos))))))))))))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Effect_Aff.delay(Data_Newtype.wrap()(1000.0))))(function () {
                            return go(attempts - 1 | 0);
                        });
                    }));
                });
            };
            return go(150);
        });
    });
};
var signTransaction = function (tx) {
    return QueryM.withMWallet(function (v) {
        if (v instanceof Wallet.Nami) {
            return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                return Data_Function.flip(nw.signTx)(tx);
            }));
        };
        if (v instanceof Wallet.Gero) {
            return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                return Data_Function.flip(nw.signTx)(tx);
            }));
        };
        if (v instanceof Wallet.Flint) {
            return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                return Data_Function.flip(nw.signTx)(tx);
            }));
        };
        if (v instanceof Wallet.Eternl) {
            var txInputs = Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Lens_Getter.viewOn(tx)((function () {
                var $15 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
                var $16 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
                return function ($17) {
                    return $15($16($17));
                };
            })()));
            return Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(walletWaitForInputs(txInputs))(function () {
                return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                    return Data_Function.flip(nw.signTx)(tx);
                }));
            });
        };
        if (v instanceof Wallet.Lode) {
            return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                return Data_Function.flip(nw.signTx)(tx);
            }));
        };
        if (v instanceof Wallet.KeyWallet) {
            return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Control_Bind.bind(Effect_Aff.bindAff)((Data_Newtype.unwrap()(v.value0)).signTx(tx))(function (witnessSet) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(Data_Lens_Setter.appendOver(Cardano_Types_Transaction.semigroupTransactionWitne)(Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn))(witnessSet)(tx)));
            }));
        };
        throw new Error("Failed pattern match at QueryM.Sign (line 29, column 34 - line 42, column 50): " + [ v.constructor.name ]);
    });
};
module.exports = {
    signTransaction: signTransaction
};
