// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var FromData = require("../FromData/index.js");
var Metadata_Cip25_Cip25String = require("../Metadata.Cip25.Cip25String/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_Helpers = require("../Metadata.Helpers/index.js");
var Metadata_ToMetadata = require("../Metadata.ToMetadata/index.js");
var Plutus_Types_AssocMap = require("../Plutus.Types.AssocMap/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Cip25TokenName = function (x) {
    return x;
};
var Cip25MetadataFile = function (x) {
    return x;
};
var toMetadataCip25TokenName = Types_TokenName.toMetadataTokenName;
var toMetadataCip25MetadataFi = {
    toMetadata: function (v) {
        return Metadata_ToMetadata.toMetadata(Metadata_ToMetadata.toMetadataArrayTuple(Data_Ord.ordString)(Metadata_ToMetadata.toMetadataString)(Metadata_ToMetadata.toMetadataTransactionMeta))([ new Data_Tuple.Tuple("name", Metadata_ToMetadata.toMetadata(Metadata_Cip25_Cip25String.toMetadataCip25String)(v.name)), new Data_Tuple.Tuple("mediaType", Metadata_ToMetadata.toMetadata(Metadata_Cip25_Cip25String.toMetadataCip25String)(v.mediaType)), new Data_Tuple.Tuple("src", Metadata_Cip25_Cip25String.toMetadataString(v.src)) ]);
    }
};
var toDataCip25TokenName = Types_TokenName.toDataTokenName;
var toDataCip25MetadataFile = {
    toData: function (v) {
        return ToData.toData(Plutus_Types_AssocMap.toDataMap(ToData.toDataString)(ToData.toDataPlutusData))(Plutus_Types_AssocMap["Map"]([ new Data_Tuple.Tuple("name", ToData.toData(Metadata_Cip25_Cip25String.toDataCip25String)(v.name)), new Data_Tuple.Tuple("mediaType", ToData.toData(Metadata_Cip25_Cip25String.toDataCip25String)(v.mediaType)), new Data_Tuple.Tuple("src", Metadata_Cip25_Cip25String.toDataString(v.src)) ]));
    }
};
var showCip25TokenName = {
    show: function (v) {
        return "(Cip25TokenName " + (Data_Show.show(Types_TokenName.showTokenName)(v) + ")");
    }
};
var ordCip25TokenName = Types_TokenName.ordTokenName;
var newtypeCip25TokenName_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCip25MetadataFile_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericCip25MetadataFile_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showCip25MetadataFile = {
    show: Data_Show_Generic.genericShow(genericCip25MetadataFile_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mediaType";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "name";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "src";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Metadata_Cip25_Cip25String.showCip25String))(Metadata_Cip25_Cip25String.showCip25String))))({
        reflectSymbol: function () {
            return "Cip25MetadataFile";
        }
    }))
};
var fromMetadataCip25TokenNam = Types_TokenName.fromMetadataTokenName;
var fromMetadataCip25Metadata = {
    fromMetadata: function (contents) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupMetadata("name")(contents))(Metadata_FromMetadata.fromMetadata(Metadata_Cip25_Cip25String.fromMetadataCip25String)))(function (name) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupMetadata("mediaType")(contents))(Metadata_FromMetadata.fromMetadata(Metadata_Cip25_Cip25String.fromMetadataCip25String)))(function (mediaType) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupMetadata("src")(contents))(Metadata_Cip25_Cip25String.fromMetadataString))(function (src) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                        name: name,
                        mediaType: mediaType,
                        src: src
                    }));
                });
            });
        });
    }
};
var fromDataCip25TokenName = Types_TokenName.fromDataTokenName;
var fromDataCip25MetadataFile = {
    fromData: function (contents) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("name")(contents))(FromData.fromData(Metadata_Cip25_Cip25String.fromDataCip25String)))(function (name) {
            return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("mediaType")(contents))(FromData.fromData(Metadata_Cip25_Cip25String.fromDataCip25String)))(function (mediaType) {
                return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Metadata_Helpers.lookupKey("src")(contents))(Metadata_Cip25_Cip25String.fromDataString))(function (src) {
                    return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                        name: name,
                        mediaType: mediaType,
                        src: src
                    }));
                });
            });
        });
    }
};
var eqCip25TokenName = Types_TokenName.eqTokenName;
var eqCip25MetadataFile = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Metadata_Cip25_Cip25String.eqCip25String)(x.mediaType)(y.mediaType) && Data_Eq.eq(Metadata_Cip25_Cip25String.eqCip25String)(x.name)(y.name) && x.src === y.src;
        };
    }
};
var encodeAesonCip25TokenName = {
    "encodeAeson'": (function () {
        var $41 = Aeson["encodeAeson'"](Types_ByteArray.encodeAesonByteArray);
        var $42 = Data_Newtype.unwrap();
        return function ($43) {
            return $41(Types_TokenName.getTokenName($42($43)));
        };
    })()
};
var encodeAesonCip25MetadataF = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Metadata_Cip25_Cip25String.encodeAesonCip25String)(Aeson.gEncodeAesonCons(Metadata_Cip25_Cip25String.encodeAesonCip25String)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "src";
            }
        })())({
            reflectSymbol: function () {
                return "name";
            }
        })())({
            reflectSymbol: function () {
                return "mediaType";
            }
        })())())({
            name: v.name,
            mediaType: v.mediaType,
            src: v.src
        });
    }
};
var decodeAesonCip25TokenName = {
    decodeAeson: Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $44 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("TokenName"));
        var $45 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
        return function ($46) {
            return $44($45(Types_TokenName.mkTokenName($46)));
        };
    })())(Aeson.decodeAeson(Types_ByteArray.decodeAesonByteArray))
};
var decodeAesonCip25MetadataF = {
    decodeAeson: Aeson.caseAesonObject(Metadata_Helpers.errExpectedObject)(function (obj) {
        return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Metadata_Cip25_Cip25String.decodeAesonCip25String)(obj)("name"))(function (name) {
            return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Metadata_Cip25_Cip25String.decodeAesonCip25String)(obj)("mediaType"))(function (mediaType) {
                return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(obj)("src"))(function (src) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                        name: name,
                        mediaType: mediaType,
                        src: src
                    }));
                });
            });
        });
    })
};
var nftMetadataLabel = Data_BigInt.fromInt(721);
module.exports = {
    nftMetadataLabel: nftMetadataLabel,
    Cip25TokenName: Cip25TokenName,
    Cip25MetadataFile: Cip25MetadataFile,
    eqCip25TokenName: eqCip25TokenName,
    ordCip25TokenName: ordCip25TokenName,
    toDataCip25TokenName: toDataCip25TokenName,
    fromDataCip25TokenName: fromDataCip25TokenName,
    toMetadataCip25TokenName: toMetadataCip25TokenName,
    fromMetadataCip25TokenNam: fromMetadataCip25TokenNam,
    newtypeCip25TokenName_: newtypeCip25TokenName_,
    showCip25TokenName: showCip25TokenName,
    decodeAesonCip25TokenName: decodeAesonCip25TokenName,
    encodeAesonCip25TokenName: encodeAesonCip25TokenName,
    genericCip25MetadataFile_: genericCip25MetadataFile_,
    newtypeCip25MetadataFile_: newtypeCip25MetadataFile_,
    eqCip25MetadataFile: eqCip25MetadataFile,
    showCip25MetadataFile: showCip25MetadataFile,
    toMetadataCip25MetadataFi: toMetadataCip25MetadataFi,
    fromMetadataCip25Metadata: fromMetadataCip25Metadata,
    toDataCip25MetadataFile: toDataCip25MetadataFile,
    fromDataCip25MetadataFile: fromDataCip25MetadataFile,
    decodeAesonCip25MetadataF: decodeAesonCip25MetadataF,
    encodeAesonCip25MetadataF: encodeAesonCip25MetadataF
};
