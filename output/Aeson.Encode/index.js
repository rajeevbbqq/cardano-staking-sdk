// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Aeson_Utils = require("../Aeson.Utils/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Divide = require("../Data.Divide/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Op = require("../Data.Op/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var value = function (dictEncodeAeson) {
    return Data_Op.Op(Aeson.encodeAeson(dictEncodeAeson));
};
var unit = Data_Op.Op(Data_Function["const"](Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonInt))([  ])));
var tuple = Data_Newtype.over()()(Data_Op.Op)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonAeson))));
var toTupleEncoderTupleEncoder = {
    toTupleEncoder: Control_Category.identity(Control_Category.categoryFn)
};
var toTupleEncoder = function (dict) {
    return dict.toTupleEncoder;
};
var rowListEncoderNil = {
    rowListEncoder: function (v) {
        return function (v1) {
            return Data_Op.Op(Data_Function["const"](Foreign_Object.empty));
        };
    }
};
var rowListEncoder = function (dict) {
    return dict.rowListEncoder;
};
var $$null = Data_Op.Op(Data_Function["const"](Aeson.aesonNull));
var mapEncoder = (function () {
    var $33 = Data_Newtype.over()()(Data_Op.Op);
    var $34 = Data_Functor.map(Data_Functor.functorFn);
    return function ($35) {
        return $33($34($35));
    };
})();
var record = function (dictRowToList) {
    return function (dictRowListEncoder) {
        return function (encoders) {
            return mapEncoder((function () {
                var $36 = Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson));
                var $37 = Data_Functor.map(Foreign_Object.functorObject)(Data_Newtype.unwrap());
                return function ($38) {
                    return $36($37($38));
                };
            })())(rowListEncoder(dictRowListEncoder)(Type_Proxy["Proxy"].value)(encoders));
        };
    };
};
var toTupleEncoderEncoder = {
    toTupleEncoder: mapEncoder(Data_Array.singleton)
};
var tupleDivided = function (dictToTupleEncoder) {
    return function (encoder) {
        var $39 = Data_Divide.divided(Data_Divide.divideOp(Data_Semigroup.semigroupArray))(toTupleEncoder(toTupleEncoderEncoder)(encoder));
        var $40 = toTupleEncoder(dictToTupleEncoder);
        return function ($41) {
            return $39($40($41));
        };
    };
};
var $$enum = function (dictShow) {
    return Data_Op.Op((function () {
        var $42 = Data_Show.show(dictShow);
        return function ($43) {
            return Aeson.fromString($42($43));
        };
    })());
};
var encode = Data_Newtype.unwrap();
var encodeTagged = function (tag) {
    return function (a) {
        return function (encoder) {
            return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Aeson_Utils.tagProp, Aeson.encodeAeson(Aeson.encodeAesonString)(tag)), new Data_Tuple.Tuple(Aeson_Utils.contentsProp, encode(encoder)(a)) ]));
        };
    };
};
var maybe = function (encoder) {
    return function (v) {
        if (v instanceof Data_Maybe.Just) {
            return encode(encoder)(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Aeson.aesonNull;
        };
        throw new Error("Failed pattern match at Aeson.Encode (line 103, column 20 - line 105, column 23): " + [ v.constructor.name ]);
    };
};
var propEncoder = function (dictIsSymbol) {
    return function (p) {
        return function (encoder) {
            return Data_Op.Op((function () {
                var $44 = Foreign_Object.singleton(Data_Symbol.reflectSymbol(dictIsSymbol)(p));
                var $45 = encode(encoder);
                return function ($46) {
                    return $44(Data_Semigroup_Last.Last($45($46)));
                };
            })());
        };
    };
};
var rowListEncoderEncoderCons = function (dictIsSymbol) {
    return function (dictLacks) {
        return function (dictCons) {
            return function (dictLacks1) {
                return function (dictCons1) {
                    return function (dictRowListEncoder) {
                        return {
                            rowListEncoder: function (v) {
                                return function (encoders) {
                                    var v1 = Aeson_Utils.unconsRecord(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(encoders);
                                    return Data_Functor_Contravariant.cmap(Data_Op.contravariantOp)(Aeson_Utils.unconsRecord(dictIsSymbol)()()(Type_Proxy["Proxy"].value))(Data_Divide.divided(Data_Divide.divideOp(Foreign_Object.semigroupObject(Data_Semigroup_Last.semigroupLast)))(propEncoder(dictIsSymbol)(Type_Proxy["Proxy"].value)(v1.value0))(rowListEncoder(dictRowListEncoder)(Type_Proxy["Proxy"].value)(v1.value1)));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var either = function (encoderA) {
    return function (encoderB) {
        return function (v) {
            if (v instanceof Data_Either.Left) {
                return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Aeson_Utils.leftProp, encode(encoderA)(v.value0)) ]));
            };
            if (v instanceof Data_Either.Right) {
                return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Aeson_Utils.rightProp, encode(encoderB)(v.value0)) ]));
            };
            throw new Error("Failed pattern match at Aeson.Encode (line 108, column 31 - line 110, column 79): " + [ v.constructor.name ]);
        };
    };
};
var dictionary = function (encoderA) {
    return function (encoderB) {
        var tryString = Aeson.caseAeson((function () {
            var v = Aeson.constAesonCases(Data_Maybe.Nothing.value);
            return {
                caseNull: v.caseNull,
                caseBoolean: v.caseBoolean,
                caseNumber: v.caseNumber,
                caseString: Data_Maybe.Just.create,
                caseArray: v.caseArray,
                caseObject: v.caseObject
            };
        })());
        var toPairs = (function () {
            var $47 = Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(encode(encoderA))(encode(encoderB)));
            var $48 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
            return function ($49) {
                return $47($48($49));
            };
        })();
        var encodePairs = function (pairs) {
            var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(tryString))(pairs);
            if (v instanceof Data_Maybe.Nothing) {
                return Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonTuple(Aeson.encodeAesonAeson)(Aeson.encodeAesonAeson)))(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorTuple)(Aeson.encodeAeson(Aeson.encodeAesonAeson)))(pairs));
            };
            if (v instanceof Data_Maybe.Just) {
                return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(v.value0));
            };
            throw new Error("Failed pattern match at Aeson.Encode (line 118, column 23 - line 120, column 57): " + [ v.constructor.name ]);
        };
        return Data_Op.Op(function ($50) {
            return encodePairs(toPairs($50));
        });
    };
};
module.exports = {
    dictionary: dictionary,
    either: either,
    encode: encode,
    "enum": $$enum,
    maybe: maybe,
    "null": $$null,
    record: record,
    rowListEncoder: rowListEncoder,
    encodeTagged: encodeTagged,
    tuple: tuple,
    toTupleEncoder: toTupleEncoder,
    tupleDivided: tupleDivided,
    unit: unit,
    value: value,
    toTupleEncoderEncoder: toTupleEncoderEncoder,
    toTupleEncoderTupleEncoder: toTupleEncoderTupleEncoder,
    rowListEncoderNil: rowListEncoderNil,
    rowListEncoderEncoderCons: rowListEncoderEncoderCons
};
