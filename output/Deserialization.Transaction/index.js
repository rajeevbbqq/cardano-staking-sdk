// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Cardano_Types_Transaction = require("../Cardano.Types.Transaction/index.js");
var Cardano_Types_Value = require("../Cardano.Types.Value/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Bitraversable = require("../Data.Bitraversable/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ratio = require("../Data.Ratio/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Deserialization_Error = require("../Deserialization.Error/index.js");
var Deserialization_FromBytes = require("../Deserialization.FromBytes/index.js");
var Deserialization_Language = require("../Deserialization.Language/index.js");
var Deserialization_UnspentOutput = require("../Deserialization.UnspentOutput/index.js");
var Deserialization_WitnessSet = require("../Deserialization.WitnessSet/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Types_BigNum = require("../Types.BigNum/index.js");
var Types_Int = require("../Types.Int/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TransactionMetadata = require("../Types.TransactionMetadata/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var cslRatioToRational = function (err) {
    return function (v) {
        return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt))(Types_BigNum["toBigInt'"](err + " cslRatioToRational")(v.numerator)))(Types_BigNum["toBigInt'"](err + " cslRatioToRational")(v.denominator));
    };
};
var cslNumberToUInt = function (nm) {
    return function (nb) {
        return Deserialization_Error.cslErr(nm + (": Number (" + (Data_Show.show(Data_Show.showNumber)(nb) + ") -> UInt")))(Data_UInt["fromNumber'"](nb));
    };
};
var cslIntToUInt = function (nm) {
    return function (nb) {
        return Deserialization_Error.cslErr(nm + (": Int (" + (Data_Show.show(Data_Show.showInt)(nb) + ") -> UInt")))(Data_UInt["fromInt'"](nb));
    };
};
var convertScriptDataHash = (function () {
    var $29 = Untagged_Union.asOneOf();
    return function ($30) {
        return Cardano_Types_Transaction.ScriptDataHash(Serialization.toBytes($29($30)));
    };
})();
var convertProtocolVersion = function (nm) {
    return function (cslPV) {
        return (function (v) {
            return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
                return function (v2) {
                    return {
                        major: v1,
                        minor: v2
                    };
                };
            })(cslNumberToUInt(nm + " major")(v.major)))(cslNumberToUInt(nm + " minor")(v.minor));
        })($foreign["_unpackProtocolVersion"](cslPV));
    };
};
var convertPoolRetirement = function (poolKeyhash) {
    return function (epochInt) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(cslIntToUInt("PoolRetirement.epoch")(epochInt)))(function (epoch) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.PoolRetirement({
                poolKeyhash: poolKeyhash,
                epoch: epoch
            }));
        });
    };
};
var convertNonce = $foreign["_convertNonce"]({
    hashNonce: Cardano_Types_Transaction.HashNonce.create,
    identityNonce: Cardano_Types_Transaction.IdentityNonce.value
});
var convertMint = function (mint) {
    var convAssetName = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Types_TokenName.tokenNameFromAssetName)(Types_Int.toBigInt);
    return Cardano_Types_Transaction.Mint(Cardano_Types_Value.mkNonAdaAsset(Data_Map_Internal.fromFoldable(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorTuple)(Cardano_Types_Value.scriptHashAsCurrencySymbol))(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)((function () {
        var $31 = Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray);
        var $32 = Data_Functor.map(Data_Functor.functorArray)(convAssetName);
        var $33 = $foreign["_unpackMintAssets"](FfiHelpers.containerHelper);
        return function ($34) {
            return $31($32($33($34)));
        };
    })()))($foreign["_unpackMint"](FfiHelpers.containerHelper)(mint))))));
};
var convertMetadataMap = function (convert) {
    var $35 = Data_Functor.map(Data_Either.functorEither)((function () {
        var $39 = Data_Map_Internal.fromFoldable(Types_TransactionMetadata.ordTransactionMetadatum)(Data_Foldable.foldableArray);
        return function ($40) {
            return Types_TransactionMetadata.MetadataMap.create($39($40));
        };
    })());
    var $36 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)(convert("convertMetadataMap key"))(convert("convertMetadataMap value")));
    var $37 = $foreign["_unpackMetadataMap"](FfiHelpers.containerHelper);
    return function ($38) {
        return $35($36($37($38)));
    };
};
var convertMetadataList = function (convert) {
    var $41 = Data_Functor.map(Data_Either.functorEither)(Types_TransactionMetadata.MetadataList.create);
    var $42 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convert("convertMetadataList"));
    var $43 = $foreign["_unpackMetadataList"](FfiHelpers.containerHelper);
    return function ($44) {
        return $41($42($43($44)));
    };
};
var convertMetadatum = function (err) {
    return Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
        var $45 = Deserialization_Error.addErrTrace(err);
        var $46 = $foreign["_convertMetadatum"]({
            error: Deserialization_Error.fromCslRepError,
            from_bytes: (function () {
                var $48 = Control_Applicative.pure(Data_Either.applicativeEither);
                return function ($49) {
                    return $48(Types_TransactionMetadata.Bytes.create($49));
                };
            })(),
            from_int: (function () {
                var $50 = Control_Applicative.pure(Data_Either.applicativeEither);
                return function ($51) {
                    return $50(Types_TransactionMetadata.Int.create($51));
                };
            })(),
            from_text: (function () {
                var $52 = Control_Applicative.pure(Data_Either.applicativeEither);
                return function ($53) {
                    return $52(Types_TransactionMetadata.Text.create($53));
                };
            })(),
            from_map: convertMetadataMap(convertMetadatum),
            from_list: convertMetadataList(convertMetadatum)
        });
        return function ($47) {
            return $45($46($47));
        };
    });
};
var convertMIRToStakeCredentials = (function () {
    var $54 = Data_Map_Internal.fromFoldable(Serialization_Address.ordStakeCredential)(Data_Foldable.foldableArray);
    var $55 = $foreign.unpackMIRToStakeCredentials_(FfiHelpers.containerHelper);
    return function ($56) {
        return Cardano_Types_Transaction.MIRToStakeCredentials($54($55($56)));
    };
})();
var convertIpv6 = (function () {
    var $57 = Control_Applicative.pure(Data_Either.applicativeEither);
    return function ($58) {
        return $57(Cardano_Types_Transaction.Ipv6($foreign.convertIpv6_($58)));
    };
})();
var convertIpv4 = (function () {
    var $59 = Control_Applicative.pure(Data_Either.applicativeEither);
    return function ($60) {
        return $59(Cardano_Types_Transaction.Ipv4($foreign.convertIpv4_($60)));
    };
})();
var convertRelay = function (relay) {
    return Deserialization_Error.addErrTrace("Relay")($foreign.convertRelay_({
        asSingleHostAddr: $foreign.convertSingleHostAddr_(FfiHelpers.maybeFfiHelper)(function (mbPort) {
            return function (mbIpv4) {
                return function (mbIpv6) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableMaybe)(mbIpv4)(convertIpv4))(function (ipv4) {
                        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableMaybe)(mbIpv6)(convertIpv6))(function (ipv6) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.SingleHostAddr({
                                port: mbPort,
                                ipv4: ipv4,
                                ipv6: ipv6
                            }));
                        });
                    });
                };
            };
        }),
        asSingleHostName: $foreign.convertSingleHostName_(FfiHelpers.maybeFfiHelper)(function (port) {
            return function (mbHost) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.SingleHostName({
                    port: port,
                    dnsName: mbHost
                }));
            };
        }),
        asMultiHostName: (function () {
            var $61 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($62) {
                return $61(Cardano_Types_Transaction.MultiHostName.create((function (v) {
                    return {
                        dnsName: v
                    };
                })($foreign.convertMultiHostName_($62))));
            };
        })()
    })(relay));
};
var convertPoolRegistration = function (params) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convertRelay)($foreign.poolParamsRelays(FfiHelpers.containerHelper)(params)))(function (relays) {
        return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.PoolRegistration({
            operator: $foreign.poolParamsOperator(params),
            vrfKeyhash: $foreign.poolParamsVrfKeyhash(params),
            pledge: $foreign.poolParamsPledge(params),
            cost: $foreign.poolParamsCost(params),
            margin: $foreign["_unpackUnitInterval"]($foreign.poolParamsMargin(params)),
            rewardAccount: $foreign.poolParamsRewardAccount(params),
            poolOwners: $foreign.poolParamsPoolOwners(FfiHelpers.containerHelper)(params),
            relays: relays,
            poolMetadata: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.poolParamsPoolMetadata(FfiHelpers.maybeFfiHelper)(params))($foreign.convertPoolMetadata_(function (url) {
                return function (hash) {
                    return {
                        url: url,
                        hash: hash
                    };
                };
            }))
        }));
    });
};
var convertGeneralTransactionMetadata = (function () {
    var $63 = Data_Functor.map(Data_Either.functorEither)((function () {
        var $67 = Data_Newtype.wrap();
        var $68 = Data_Map_Internal.fromFoldable(Types_TransactionMetadata.ordTransactionMetadatumLa)(Data_Foldable.foldableArray);
        return function ($69) {
            return $67($68($69));
        };
    })());
    var $64 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)((function () {
        var $70 = Data_Functor.map(Data_Either.functorEither)(Types_TransactionMetadata.TransactionMetadatumLabel);
        var $71 = Types_BigNum["toBigInt'"]("MetadatumLabel: ");
        return function ($72) {
            return $70($71($72));
        };
    })())(convertMetadatum("GeneralTransactionMetadata: ")));
    var $65 = $foreign["_unpackMetadatums"](FfiHelpers.containerHelper);
    return function ($66) {
        return $63($64($65($66)));
    };
})();
var convertExUnits = function (nm) {
    return function (cslExunits) {
        var v = $foreign["_unpackExUnits"](cslExunits);
        return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
            return function (v2) {
                return {
                    mem: v1,
                    steps: v2
                };
            };
        })(Types_BigNum["toBigInt'"](nm + " mem")(v.mem)))(Types_BigNum["toBigInt'"](nm + " steps")(v.steps));
    };
};
var convertExUnitPrices = function (cslEUP) {
    var v = $foreign["_unpackExUnitsPrices"](cslEUP);
    return {
        memPrice: $foreign["_unpackUnitInterval"](v.memPrice),
        stepPrice: $foreign["_unpackUnitInterval"](v.stepPrice)
    };
};
var convertCostModel = (function () {
    var stringToInt = function (s) {
        return Deserialization_Error.cslErr(": string (" + (s + ") -> int"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_Int.fromBigInt)(Data_BigInt.fromString(s)));
    };
    var $73 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.CostModel);
    var $74 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(stringToInt);
    return function ($75) {
        return $73($74($foreign["_unpackCostModel"]($75)));
    };
})();
var convertCostModels = function (cslCostMdls) {
    var mdls = $foreign["_unpackCostModels"](FfiHelpers.containerHelper)(cslCostMdls);
    return Data_Functor.map(Data_Either.functorEither)((function () {
        var $76 = Data_Map_Internal.fromFoldable(Types_Scripts.ordLanguage)(Data_Foldable.foldableArray);
        return function ($77) {
            return Cardano_Types_Transaction.Costmdls($76($77));
        };
    })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)(Deserialization_Language.convertLanguage)(convertCostModel))(mdls));
};
var convertProtocolParamUpdate = function (cslPpu) {
    var ppu = $foreign["_unpackProtocolParamUpdate"](FfiHelpers.maybeFfiHelper)(cslPpu);
    var lbl = Data_Semigroup.append(Data_Semigroup.semigroupString)("ProtocolParamUpdate.");
    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
        var $78 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
        var $79 = Types_BigNum["toBigInt'"](lbl("minfeeA"));
        return function ($80) {
            return $78($79($80));
        };
    })())(ppu.minfeeA))(function (minfeeA) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
            var $81 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
            var $82 = Types_BigNum["toBigInt'"](lbl("minfeeB"));
            return function ($83) {
                return $81($82($83));
            };
        })())(ppu.minfeeB))(function (minfeeB) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxBlockBodySize")))(ppu.maxBlockBodySize))(function (maxBlockBodySize) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxTxSize")))(ppu.maxTxSize))(function (maxTxSize) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxBlockHeaderSize")))(ppu.maxBlockHeaderSize))(function (maxBlockHeaderSize) {
                        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                            var $84 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                            var $85 = Types_BigNum["toBigInt'"](lbl("keyDeposit"));
                            return function ($86) {
                                return $84($85($86));
                            };
                        })())(ppu.keyDeposit))(function (keyDeposit) {
                            return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                var $87 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                                var $88 = Types_BigNum["toBigInt'"](lbl("poolDeposit"));
                                return function ($89) {
                                    return $87($88($89));
                                };
                            })())(ppu.poolDeposit))(function (poolDeposit) {
                                return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                    var $90 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.Epoch);
                                    var $91 = cslNumberToUInt(lbl("maxEpoch"));
                                    return function ($92) {
                                        return $90($91($92));
                                    };
                                })())(ppu.maxEpoch))(function (maxEpoch) {
                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("nOpt")))(ppu.nOpt))(function (nOpt) {
                                        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertProtocolVersion(lbl("protocolVersion")))(ppu.protocolVersion))(function (protocolVersion) {
                                            return Control_Bind.bind(Data_Either.bindEither)(Deserialization_Error.addErrTrace(lbl("costModels"))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertCostModels)(ppu.costModels)))(function (costModels) {
                                                return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertExUnits(lbl("maxTxExUnits")))(ppu.maxTxExUnits))(function (maxTxExUnits) {
                                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertExUnits(lbl("maxBlockExUnits")))(ppu.maxBlockExUnits))(function (maxBlockExUnits) {
                                                        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxValueSize")))(ppu.maxValueSize))(function (maxValueSize) {
                                                            return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                                minfeeA: minfeeA,
                                                                minfeeB: minfeeB,
                                                                maxBlockBodySize: maxBlockBodySize,
                                                                maxTxSize: maxTxSize,
                                                                maxBlockHeaderSize: maxBlockHeaderSize,
                                                                keyDeposit: keyDeposit,
                                                                poolDeposit: poolDeposit,
                                                                maxEpoch: maxEpoch,
                                                                nOpt: nOpt,
                                                                poolPledgeInfluence: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.poolPledgeInfluence),
                                                                expansionRate: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.expansionRate),
                                                                treasuryGrowthRate: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.treasuryGrowthRate),
                                                                protocolVersion: protocolVersion,
                                                                minPoolCost: ppu.minPoolCost,
                                                                adaPerUtxoByte: ppu.adaPerUtxoByte,
                                                                costModels: costModels,
                                                                executionCosts: Data_Functor.map(Data_Maybe.functorMaybe)(convertExUnitPrices)(ppu.executionCosts),
                                                                maxTxExUnits: maxTxExUnits,
                                                                maxBlockExUnits: maxBlockExUnits,
                                                                maxValueSize: maxValueSize
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
var convertUpdate = function (u) {
    var v = $foreign["_unpackUpdate"](FfiHelpers.containerHelper)(u);
    return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.Epoch)(cslNumberToUInt("convertUpdate: epoch")(v.epoch)))(function (epoch) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)((function () {
            var $93 = Control_Applicative.pure(Data_Either.applicativeEither);
            var $94 = Untagged_Union.asOneOf();
            return function ($95) {
                return $93(Cardano_Types_Transaction.GenesisHash(Serialization.toBytes($94($95))));
            };
        })())(convertProtocolParamUpdate))(v.paramUpdates))(function (ppus) {
            return Control_Applicative.pure(Data_Either.applicativeEither)({
                epoch: epoch,
                proposedProtocolParameterUpdates: Cardano_Types_Transaction.ProposedProtocolParameterUpdates(Data_Map_Internal.fromFoldable(Cardano_Types_Transaction.ordGenesisHash)(Data_Foldable.foldableArray)(ppus))
            });
        });
    });
};
var convertCertificate = (function () {
    var certConvHelper = {
        stakeDeregistration: (function () {
            var $96 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($97) {
                return $96(Cardano_Types_Transaction.StakeDeregistration.create($97));
            };
        })(),
        stakeRegistration: (function () {
            var $98 = Control_Applicative.pure(Data_Either.applicativeEither);
            return function ($99) {
                return $98(Cardano_Types_Transaction.StakeRegistration.create($99));
            };
        })(),
        stakeDelegation: function (sc) {
            var $100 = Control_Applicative.pure(Data_Either.applicativeEither);
            var $101 = Cardano_Types_Transaction.StakeDelegation.create(sc);
            return function ($102) {
                return $100($101($102));
            };
        },
        poolRegistration: convertPoolRegistration,
        poolRetirement: convertPoolRetirement,
        genesisKeyDelegation: function (genesisHash) {
            return function (genesisDelegateHash) {
                return function (vrfKeyhash) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.GenesisKeyDelegation({
                        genesisHash: Cardano_Types_Transaction.GenesisHash(Serialization.toBytes(Untagged_Union.asOneOf()(genesisHash))),
                        genesisDelegateHash: Serialization.toBytes(Untagged_Union.asOneOf()(genesisDelegateHash)),
                        vrfKeyhash: vrfKeyhash
                    }));
                };
            };
        },
        moveInstantaneousRewardsToOtherPotCert: function (pot) {
            return function (amount) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(Cardano_Types_Transaction.MoveInstantaneousRewardsCert.create(new Cardano_Types_Transaction.ToOtherPot({
                    pot: pot,
                    amount: amount
                })));
            };
        },
        moveInstantaneousRewardsToStakeCreds: function (pot) {
            return function (amounts) {
                return Control_Applicative.pure(Data_Either.applicativeEither)(Cardano_Types_Transaction.MoveInstantaneousRewardsCert.create(new Cardano_Types_Transaction.ToStakeCreds({
                    pot: pot,
                    amounts: convertMIRToStakeCredentials(amounts)
                })));
            };
        }
    };
    return $foreign["_convertCert"](certConvHelper);
})();
var convertTxBody = function (txBody) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.mapFlipped(Data_Either.functorEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
        var $103 = Deserialization_Error.cslErr("TransactionInput");
        return function ($104) {
            return $103(Deserialization_UnspentOutput.convertInput($104));
        };
    })())($foreign["_txBodyInputs"](FfiHelpers.containerHelper)(txBody)))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Types_Transaction.ordTransactionInput)))(function (inputs) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
            var $105 = Deserialization_Error.cslErr("TransactionOutput");
            return function ($106) {
                return $105(Deserialization_UnspentOutput.convertOutput($106));
            };
        })())($foreign["_txBodyOutputs"](FfiHelpers.containerHelper)(txBody)))(function (outputs) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin)(Types_BigNum["toBigInt'"]("Tx fee")($foreign["_txBodyFee"](txBody))))(function (fee) {
                var ws = Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackWithdrawals"](FfiHelpers.containerHelper))($foreign["_txBodyWithdrawals"](FfiHelpers.maybeFfiHelper)(txBody));
                var networkId = $foreign["_txBodyNetworkId"](Serialization_Address.TestnetId.value)(Serialization_Address.MainnetId.value)(FfiHelpers.maybeFfiHelper)(txBody);
                return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Serialization_Address.ordRewardAddress)(Data_Foldable.foldableArray)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(Data_Either.applicativeEither)((function () {
                    var $107 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                    var $108 = Types_BigNum["toBigInt'"]("txbody withdrawals");
                    return function ($109) {
                        return $107($108($109));
                    };
                })())))(ws)))(function (v) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertUpdate)($foreign["_txBodyUpdate"](FfiHelpers.maybeFfiHelper)(txBody)))(function (update) {
                        var cslReferenceInputs = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))($foreign["_txBodyReferenceInputs"](FfiHelpers.maybeFfiHelper)(FfiHelpers.containerHelper)(txBody));
                        return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.mapFlipped(Data_Either.functorEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
                            var $110 = Deserialization_Error.cslErr("TransactionInput");
                            return function ($111) {
                                return $110(Deserialization_UnspentOutput.convertInput($111));
                            };
                        })())(cslReferenceInputs))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Types_Transaction.ordTransactionInput)))(function (referenceInputs) {
                            return Control_Bind.bind(Data_Either.bindEither)(Deserialization_Error.addErrTrace("Tx body certificates")(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convertCertificate))($foreign["_txBodyCerts"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody))))(function (certs) {
                                return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                    var $112 = Deserialization_Error.cslErr("TransactionOutput");
                                    return function ($113) {
                                        return $112(Deserialization_UnspentOutput.convertOutput($113));
                                    };
                                })())($foreign["_txBodyCollateralReturn"](FfiHelpers.maybeFfiHelper)(txBody)))(function (collateralReturn) {
                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                        var $114 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                                        var $115 = Types_BigNum["toBigInt'"]("txbody withdrawals");
                                        return function ($116) {
                                            return $114($115($116));
                                        };
                                    })())($foreign["_txBodyTotalCollateral"](FfiHelpers.maybeFfiHelper)(txBody)))(function (totalCollateral) {
                                        return Control_Applicative.pure(Data_Either.applicativeEither)({
                                            inputs: inputs,
                                            outputs: outputs,
                                            fee: fee,
                                            ttl: Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)($foreign["_txBodyTtl"](FfiHelpers.maybeFfiHelper)(txBody)),
                                            certs: certs,
                                            withdrawals: v,
                                            update: update,
                                            auxiliaryDataHash: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                                                var $117 = Untagged_Union.asOneOf();
                                                return function ($118) {
                                                    return Cardano_Types_Transaction.AuxiliaryDataHash(Serialization.toBytes($117($118)));
                                                };
                                            })())($foreign["_txBodyAuxiliaryDataHash"](FfiHelpers.maybeFfiHelper)(txBody)),
                                            validityStartInterval: Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)($foreign["_txBodyValidityStartInterval"](FfiHelpers.maybeFfiHelper)(txBody)),
                                            mint: Data_Functor.map(Data_Maybe.functorMaybe)(convertMint)($foreign["_txBodyMultiAssets"](FfiHelpers.maybeFfiHelper)(txBody)),
                                            referenceInputs: referenceInputs,
                                            scriptDataHash: Data_Functor.map(Data_Maybe.functorMaybe)(convertScriptDataHash)($foreign["_txBodyScriptDataHash"](FfiHelpers.maybeFfiHelper)(txBody)),
                                            collateral: Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_txBodyCollateral"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Deserialization_UnspentOutput.convertInput)),
                                            requiredSigners: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Cardano_Types_Transaction.RequiredSigner))($foreign["_txBodyRequiredSigners"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody)),
                                            networkId: networkId,
                                            collateralReturn: collateralReturn,
                                            totalCollateral: totalCollateral
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
var convertAuxiliaryData = function (ad) {
    return Deserialization_Error.addErrTrace("convertAuxiliaryData")(Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertGeneralTransactionMetadata)($foreign["_adGeneralMetadata"](FfiHelpers.maybeFfiHelper)(ad)))(function (metadata) {
        return Control_Applicative.pure(Data_Either.applicativeEither)({
            metadata: metadata,
            nativeScripts: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Deserialization_WitnessSet.convertNativeScripts)($foreign["_adNativeScripts"](FfiHelpers.maybeFfiHelper)(ad)),
            plutusScripts: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Deserialization_WitnessSet.convertPlutusScripts)($foreign["_adPlutusScripts"](FfiHelpers.maybeFfiHelper)(ad))
        });
    }));
};
var convertTransaction = function (tx) {
    return Deserialization_Error.addErrTrace("convertTransaction")(Control_Bind.bind(Data_Either.bindEither)(Deserialization_Error.cslErr("convertWitnessSet")(Deserialization_WitnessSet.convertWitnessSet($foreign["_txWitnessSet"](tx))))(function (witnessSet) {
        return Control_Bind.bind(Data_Either.bindEither)(convertTxBody($foreign["_txBody"](tx)))(function (body) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertAuxiliaryData)($foreign["_txAuxiliaryData"](FfiHelpers.maybeFfiHelper)(tx)))(function (auxiliaryData) {
                return Control_Applicative.pure(Data_Either.applicativeEither)({
                    body: body,
                    witnessSet: witnessSet,
                    isValid: $foreign["_txIsValid"](tx),
                    auxiliaryData: auxiliaryData
                });
            });
        });
    }));
};
var deserializeTransaction = function (txCbor) {
    return Control_Bind.bind(Data_Either.bindEither)(Deserialization_FromBytes["fromBytes'"](Deserialization_FromBytes.fromBytesTransaction)(Data_Newtype.unwrap()(txCbor)))(convertTransaction);
};
module.exports = {
    convertAuxiliaryData: convertAuxiliaryData,
    convertCertificate: convertCertificate,
    convertCostModel: convertCostModel,
    convertCostModels: convertCostModels,
    convertExUnitPrices: convertExUnitPrices,
    convertExUnits: convertExUnits,
    convertGeneralTransactionMetadata: convertGeneralTransactionMetadata,
    convertMetadataList: convertMetadataList,
    convertMetadataMap: convertMetadataMap,
    convertMetadatum: convertMetadatum,
    convertMint: convertMint,
    convertNonce: convertNonce,
    convertProtocolParamUpdate: convertProtocolParamUpdate,
    convertProtocolVersion: convertProtocolVersion,
    convertTransaction: convertTransaction,
    convertTxBody: convertTxBody,
    convertUpdate: convertUpdate,
    cslNumberToUInt: cslNumberToUInt,
    cslIntToUInt: cslIntToUInt,
    cslRatioToRational: cslRatioToRational,
    deserializeTransaction: deserializeTransaction,
    "_adGeneralMetadata": $foreign["_adGeneralMetadata"],
    "_adNativeScripts": $foreign["_adNativeScripts"],
    "_adPlutusScripts": $foreign["_adPlutusScripts"],
    "_convertCert": $foreign["_convertCert"],
    "_convertMetadatum": $foreign["_convertMetadatum"],
    "_convertNonce": $foreign["_convertNonce"],
    "_txAuxiliaryData": $foreign["_txAuxiliaryData"],
    "_txBody": $foreign["_txBody"],
    "_txBodyAuxiliaryDataHash": $foreign["_txBodyAuxiliaryDataHash"],
    "_txBodyCerts": $foreign["_txBodyCerts"],
    "_txBodyCollateral": $foreign["_txBodyCollateral"],
    "_txBodyFee": $foreign["_txBodyFee"],
    "_txBodyInputs": $foreign["_txBodyInputs"],
    "_txBodyMultiAssets": $foreign["_txBodyMultiAssets"],
    "_txBodyNetworkId": $foreign["_txBodyNetworkId"],
    "_txBodyOutputs": $foreign["_txBodyOutputs"],
    "_txBodyRequiredSigners": $foreign["_txBodyRequiredSigners"],
    "_txBodyScriptDataHash": $foreign["_txBodyScriptDataHash"],
    "_txBodyTtl": $foreign["_txBodyTtl"],
    "_txBodyUpdate": $foreign["_txBodyUpdate"],
    "_txBodyValidityStartInterval": $foreign["_txBodyValidityStartInterval"],
    "_txBodyWithdrawals": $foreign["_txBodyWithdrawals"],
    "_txIsValid": $foreign["_txIsValid"],
    "_txWitnessSet": $foreign["_txWitnessSet"],
    "_unpackCostModel": $foreign["_unpackCostModel"],
    "_unpackCostModels": $foreign["_unpackCostModels"],
    "_unpackExUnits": $foreign["_unpackExUnits"],
    "_unpackExUnitsPrices": $foreign["_unpackExUnitsPrices"],
    "_unpackMetadataList": $foreign["_unpackMetadataList"],
    "_unpackMetadataMap": $foreign["_unpackMetadataMap"],
    "_unpackMetadatums": $foreign["_unpackMetadatums"],
    "_unpackMint": $foreign["_unpackMint"],
    "_unpackMintAssets": $foreign["_unpackMintAssets"],
    "_unpackProtocolParamUpdate": $foreign["_unpackProtocolParamUpdate"],
    "_unpackProtocolVersion": $foreign["_unpackProtocolVersion"],
    "_unpackUnitInterval": $foreign["_unpackUnitInterval"],
    "_unpackUpdate": $foreign["_unpackUpdate"],
    "_unpackWithdrawals": $foreign["_unpackWithdrawals"]
};
