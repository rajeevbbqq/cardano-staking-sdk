// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var checkAlternative = function (dictAlternative) {
    return function (dictArbitrary) {
        return function (dictArbitrary1) {
            return function (dictEq) {
                return function (dictEq1) {
                    return function (v) {
                        var distributivity = function (f) {
                            return function (g) {
                                return function (x) {
                                    return Data_Eq.eq(dictEq1)(Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(f)(g))(x))(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(f)(x))(Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(g)(x)));
                                };
                            };
                        };
                        var annihilation = function (x) {
                            return Data_Eq.eq(dictEq)(Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Control_Plus.empty(dictAlternative.Plus1()))(x))(Control_Plus.empty(dictAlternative.Plus1()));
                        };
                        return function __do() {
                            Effect_Console.log("Checking 'Left identity' law for Alternative")();
                            Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableBoolean))))(1000)(distributivity)();
                            Effect_Console.log("Checking 'Annihilation' law for Alternative")();
                            return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableBoolean))(1000)(annihilation)();
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    checkAlternative: checkAlternative
};
