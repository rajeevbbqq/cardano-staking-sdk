// Generated by purs version 0.14.5
"use strict";
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var JSONNull = (function () {
    function JSONNull() {

    };
    JSONNull.value = new JSONNull();
    return JSONNull;
})();
var JSONBoolean = (function () {
    function JSONBoolean() {

    };
    JSONBoolean.value = new JSONBoolean();
    return JSONBoolean;
})();
var JSONNumber = (function () {
    function JSONNumber() {

    };
    JSONNumber.value = new JSONNumber();
    return JSONNumber;
})();
var JSONString = (function () {
    function JSONString() {

    };
    JSONString.value = new JSONString();
    return JSONString;
})();
var JSONArray = (function () {
    function JSONArray() {

    };
    JSONArray.value = new JSONArray();
    return JSONArray;
})();
var JSONObject = (function () {
    function JSONObject() {

    };
    JSONObject.value = new JSONObject();
    return JSONObject;
})();
var typeOf = function (j) {
    return Data_Argonaut_Core.caseJson(function (u) {
        return JSONNull.value;
    })(function (b) {
        return JSONBoolean.value;
    })(function (n) {
        return JSONNumber.value;
    })(function (s) {
        return JSONString.value;
    })(function (a) {
        return JSONArray.value;
    })(function (o) {
        return JSONObject.value;
    })(j);
};
var genericJSONType = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return JSONNull.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return JSONBoolean.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return JSONNumber.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return JSONString.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return JSONArray.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
            return JSONObject.value;
        };
        throw new Error("Failed pattern match at Data.Medea.JSONType (line 18, column 1 - line 18, column 54): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof JSONNull) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof JSONBoolean) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof JSONNumber) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
        };
        if (x instanceof JSONString) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
        };
        if (x instanceof JSONArray) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
        };
        if (x instanceof JSONObject) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
        };
        throw new Error("Failed pattern match at Data.Medea.JSONType (line 18, column 1 - line 18, column 54): " + [ x.constructor.name ]);
    }
};
var showJSONType = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericJSONType)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONNull";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONBoolean";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONNumber";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONString";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONArray";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "JSONObject";
            }
        })))))))(x);
    }
};
var eqJSONType = {
    eq: function (x) {
        return function (y) {
            if (x instanceof JSONNull && y instanceof JSONNull) {
                return true;
            };
            if (x instanceof JSONBoolean && y instanceof JSONBoolean) {
                return true;
            };
            if (x instanceof JSONNumber && y instanceof JSONNumber) {
                return true;
            };
            if (x instanceof JSONString && y instanceof JSONString) {
                return true;
            };
            if (x instanceof JSONArray && y instanceof JSONArray) {
                return true;
            };
            if (x instanceof JSONObject && y instanceof JSONObject) {
                return true;
            };
            return false;
        };
    }
};
var ordJSONType = {
    compare: function (x) {
        return function (y) {
            if (x instanceof JSONNull && y instanceof JSONNull) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof JSONNull) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof JSONNull) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof JSONBoolean && y instanceof JSONBoolean) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof JSONBoolean) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof JSONBoolean) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof JSONNumber && y instanceof JSONNumber) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof JSONNumber) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof JSONNumber) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof JSONString && y instanceof JSONString) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof JSONString) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof JSONString) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof JSONArray && y instanceof JSONArray) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof JSONArray) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof JSONArray) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof JSONObject && y instanceof JSONObject) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Data.Medea.JSONType (line 16, column 1 - line 16, column 44): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqJSONType;
    }
};
module.exports = {
    JSONNull: JSONNull,
    JSONBoolean: JSONBoolean,
    JSONNumber: JSONNumber,
    JSONString: JSONString,
    JSONArray: JSONArray,
    JSONObject: JSONObject,
    typeOf: typeOf,
    eqJSONType: eqJSONType,
    ordJSONType: ordJSONType,
    genericJSONType: genericJSONType,
    showJSONType: showJSONType
};
