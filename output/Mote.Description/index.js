// Generated by purs version 0.14.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Mote_Entry = require("../Mote.Entry/index.js");
var Normal = (function () {
    function Normal() {

    };
    Normal.value = new Normal();
    return Normal;
})();
var Only = (function () {
    function Only() {

    };
    Only.value = new Only();
    return Only;
})();
var Skip = (function () {
    function Skip() {

    };
    Skip.value = new Skip();
    return Skip;
})();
var Test = (function () {
    function Test(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Test.create = function (value0) {
        return function (value1) {
            return new Test(value0, value1);
        };
    };
    return Test;
})();
var Group = (function () {
    function Group(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Group.create = function (value0) {
        return function (value1) {
            return new Group(value0, value1);
        };
    };
    return Group;
})();
var test = function (label) {
    var $31 = Test.create(Normal.value);
    var $32 = Mote_Entry.entry(label);
    return function ($33) {
        return $31($32($33));
    };
};
var setRunMode = function (mode) {
    return function (v) {
        if (v instanceof Test) {
            return new Test(mode, v.value1);
        };
        if (v instanceof Group) {
            return new Group(mode, v.value1);
        };
        throw new Error("Failed pattern match at Mote.Description (line 38, column 19 - line 42, column 21): " + [ v.constructor.name ]);
    };
};
var setBracket = function (v) {
    return function (v1) {
        if (v1 instanceof Test) {
            return new Test(v1.value0, {
                label: v1.value1.label,
                bracket: new Data_Maybe.Just(Mote_Entry.bracket(v.before)(v.after)),
                value: v1.value1.value
            });
        };
        if (v1 instanceof Group) {
            return new Group(v1.value0, {
                label: v1.value1.label,
                bracket: new Data_Maybe.Just(Mote_Entry.bracket(v.before)(v.after)),
                value: v1.value1.value
            });
        };
        throw new Error("Failed pattern match at Mote.Description (line 50, column 32 - line 54, column 71): " + [ v1.constructor.name ]);
    };
};
var group = function (label) {
    var $34 = Group.create(Normal.value);
    var $35 = Mote_Entry.entry(label);
    return function ($36) {
        return $34($35($36));
    };
};
var functorDescription = {
    map: function (f) {
        return function (m) {
            if (m instanceof Test) {
                return new Test(m.value0, (function (o) {
                    return {
                        value: f(o.value),
                        bracket: o.bracket,
                        label: o.label
                    };
                })(m.value1));
            };
            if (m instanceof Group) {
                return new Group(m.value0, (function (o) {
                    return {
                        value: Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(functorDescription)(f))(o.value),
                        bracket: o.bracket,
                        label: o.label
                    };
                })(m.value1));
            };
            throw new Error("Failed pattern match at Mote.Description (line 14, column 1 - line 14, column 62): " + [ m.constructor.name ]);
        };
    }
};
module.exports = {
    Test: Test,
    Group: Group,
    test: test,
    group: group,
    Normal: Normal,
    Only: Only,
    Skip: Skip,
    setRunMode: setRunMode,
    setBracket: setBracket,
    functorDescription: functorDescription
};
