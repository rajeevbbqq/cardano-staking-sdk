// Generated by purs version 0.14.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Record = require("../Record/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var ConstFolding = function (x) {
    return x;
};
var hfoldlWithIndexRowListNil = {
    hfoldlWithIndex: function (v) {
        return function (x) {
            return function (v1) {
                return x;
            };
        };
    }
};
var hfoldlWithIndex = function (dict) {
    return dict.hfoldlWithIndex;
};
var hfoldlRowList = function (dictHFoldlWithIndex) {
    return {
        hfoldl: function (f) {
            return hfoldlWithIndex(dictHFoldlWithIndex)(f);
        }
    };
};
var hfoldl = function (dict) {
    return dict.hfoldl;
};
var functionFoldingWithIndex = {
    foldingWithIndex: function (f) {
        return f;
    }
};
var functionFolding = {
    folding: function (f) {
        return f;
    }
};
var foldlVariantRowList = function (dict) {
    return dict.foldlVariantRowList;
};
var hfoldlVariant = function (dictRowToList) {
    return function (dictFoldlVariant) {
        return {
            hfoldl: (function () {
                var $80 = foldlVariantRowList(dictFoldlVariant)(Type_Proxy["Proxy"].value);
                return function ($81) {
                    return $80(ConstFolding($81));
                };
            })()
        };
    };
};
var hfoldlVariantWithIndex = function (dictRowToList) {
    return function (dictFoldlVariant) {
        return {
            hfoldlWithIndex: foldlVariantRowList(dictFoldlVariant)(Type_Proxy["Proxy"].value)
        };
    };
};
var foldlVariantNil = {
    foldlVariantRowList: function (v) {
        return function (v1) {
            return function (v2) {
                return Data_Variant.case_;
            };
        };
    }
};
var foldlVariantFRowList = function (dict) {
    return dict.foldlVariantFRowList;
};
var hfoldlVariantF = function (dictRowToList) {
    return function (dictFoldlVariantF) {
        return {
            hfoldl: (function () {
                var $82 = foldlVariantFRowList(dictFoldlVariantF)(Type_Proxy["Proxy"].value);
                return function ($83) {
                    return $82(ConstFolding($83));
                };
            })()
        };
    };
};
var hfoldlVariantFWithIndex = function (dictRowToList) {
    return function (dictFoldlVariantF) {
        return {
            hfoldlWithIndex: foldlVariantFRowList(dictFoldlVariantF)(Type_Proxy["Proxy"].value)
        };
    };
};
var foldlVariantFNil = {
    foldlVariantFRowList: function (v) {
        return function (v1) {
            return function (v2) {
                return Data_Functor_Variant.case_;
            };
        };
    }
};
var foldlRecordRowList = function (dict) {
    return dict.foldlRecordRowList;
};
var hfoldlRecord = function (dictRowToList) {
    return function (dictFoldlRecord) {
        return {
            hfoldl: function (f) {
                return function (x) {
                    return foldlRecordRowList(dictFoldlRecord)(f)(x)(Type_Proxy["Proxy"].value);
                };
            }
        };
    };
};
var hfoldlRecordWithIndex = function (dictRowToList) {
    return function (dictFoldlRecord) {
        return {
            hfoldlWithIndex: function (f) {
                return function (x) {
                    return foldlRecordRowList(dictFoldlRecord)(f)(x)(Type_Proxy["Proxy"].value);
                };
            }
        };
    };
};
var foldlRecordNil = {
    foldlRecordRowList: function (v) {
        return function (x) {
            return function (v1) {
                return function (v2) {
                    return x;
                };
            };
        };
    }
};
var foldingWithIndex = function (dict) {
    return dict.foldingWithIndex;
};
var foldlRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlRecord) {
                return {
                    foldlRecordRowList: function (f) {
                        return function (x) {
                            return function (v) {
                                return function (r) {
                                    return foldlRecordRowList(dictFoldlRecord)(f)(foldingWithIndex(dictFoldingWithIndex)(f)(Type_Proxy["Proxy"].value)(x)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r)))(Type_Proxy["Proxy"].value)(r);
                                };
                            };
                        };
                    }
                };
            };
        };
    };
};
var foldlVariantCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlVariant) {
                return {
                    foldlVariantRowList: function (v) {
                        return function (f) {
                            return function (x) {
                                return Data_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(foldingWithIndex(dictFoldingWithIndex)(f)(Type_Proxy["Proxy"].value)(x))(foldlVariantRowList(dictFoldlVariant)(Type_Proxy["Proxy"].value)(f)(x));
                            };
                        };
                    }
                };
            };
        };
    };
};
var foldlVariantFCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFoldingWithIndex) {
            return function (dictFoldlVariantF) {
                return {
                    foldlVariantFRowList: function (v) {
                        return function (f) {
                            return function (x) {
                                return Data_Functor_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(foldingWithIndex(dictFoldingWithIndex)(f)(Type_Proxy["Proxy"].value)(x))(foldlVariantFRowList(dictFoldlVariantF)(Type_Proxy["Proxy"].value)(f)(x));
                            };
                        };
                    }
                };
            };
        };
    };
};
var hfoldlWithIndexApp = function (dictFoldableWithIndex) {
    return function (dictFoldingWithIndex) {
        return {
            hfoldlWithIndex: function (f) {
                return function (x) {
                    return function (v) {
                        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(foldingWithIndex(dictFoldingWithIndex)(f))(x)(v);
                    };
                };
            }
        };
    };
};
var hfoldlWithIndexRowListCons = function (dictFoldingWithIndex) {
    return function (dictHFoldlWithIndex) {
        return {
            hfoldlWithIndex: function (f) {
                return function (x) {
                    return function (v) {
                        return hfoldlWithIndex(dictHFoldlWithIndex)(f)(foldingWithIndex(dictFoldingWithIndex)(f)(Type_Proxy["Proxy"].value)(x)(Type_Proxy["Proxy"].value))(Type_Proxy["Proxy"].value);
                    };
                };
            }
        };
    };
};
var folding = function (dict) {
    return dict.folding;
};
var hfoldlApp = function (dictFoldable) {
    return function (dictFolding) {
        return {
            hfoldl: function (f) {
                return function (x) {
                    return function (v) {
                        return Data_Foldable.foldl(dictFoldable)(folding(dictFolding)(f))(x)(v);
                    };
                };
            }
        };
    };
};
var hfoldlEither = function (dictFolding) {
    return function (dictFolding1) {
        return {
            hfoldl: function (f) {
                return function (x) {
                    return function (v) {
                        if (v instanceof Data_Either.Left) {
                            return folding(dictFolding)(f)(x)(v.value0);
                        };
                        if (v instanceof Data_Either.Right) {
                            return folding(dictFolding1)(f)(x)(v.value0);
                        };
                        throw new Error("Failed pattern match at Heterogeneous.Folding (line 146, column 16 - line 148, column 29): " + [ v.constructor.name ]);
                    };
                };
            }
        };
    };
};
var hfoldlTuple = function (dictFolding) {
    return function (dictFolding1) {
        return {
            hfoldl: function (f) {
                return function (x) {
                    return function (v) {
                        return folding(dictFolding1)(f)(folding(dictFolding)(f)(x)(v.value0))(v.value1);
                    };
                };
            }
        };
    };
};
var constFolding = function (dictFolding) {
    return {
        foldingWithIndex: function (v) {
            return function (v1) {
                return folding(dictFolding)(v);
            };
        }
    };
};
module.exports = {
    folding: folding,
    foldingWithIndex: foldingWithIndex,
    foldlRecordRowList: foldlRecordRowList,
    foldlVariantFRowList: foldlVariantFRowList,
    foldlVariantRowList: foldlVariantRowList,
    hfoldl: hfoldl,
    hfoldlWithIndex: hfoldlWithIndex,
    ConstFolding: ConstFolding,
    functionFolding: functionFolding,
    functionFoldingWithIndex: functionFoldingWithIndex,
    constFolding: constFolding,
    hfoldlApp: hfoldlApp,
    hfoldlWithIndexApp: hfoldlWithIndexApp,
    hfoldlRowList: hfoldlRowList,
    hfoldlWithIndexRowListCons: hfoldlWithIndexRowListCons,
    hfoldlWithIndexRowListNil: hfoldlWithIndexRowListNil,
    hfoldlRecord: hfoldlRecord,
    hfoldlRecordWithIndex: hfoldlRecordWithIndex,
    foldlRecordCons: foldlRecordCons,
    foldlRecordNil: foldlRecordNil,
    hfoldlTuple: hfoldlTuple,
    hfoldlEither: hfoldlEither,
    hfoldlVariant: hfoldlVariant,
    hfoldlVariantWithIndex: hfoldlVariantWithIndex,
    foldlVariantCons: foldlVariantCons,
    foldlVariantNil: foldlVariantNil,
    hfoldlVariantF: hfoldlVariantF,
    hfoldlVariantFWithIndex: hfoldlVariantFWithIndex,
    foldlVariantFCons: foldlVariantFCons,
    foldlVariantFNil: foldlVariantFNil
};
