// Generated by purs version 0.14.5
"use strict";
var BondedStaking_TimeUtils = require("../BondedStaking.TimeUtils/index.js");
var ClosePool = require("../ClosePool/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var CreatePool = require("../CreatePool/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Log_Level = require("../Data.Log.Level/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Time_Duration = require("../Data.Time.Duration/index.js");
var DepositPool = require("../DepositPool/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Helpers = require("../Helpers/index.js");
var QueryM_ServerConfig = require("../QueryM.ServerConfig/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Settings = require("../Settings/index.js");
var Types = require("../Types/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var UserStake = require("../UserStake/index.js");
var UserWithdraw = require("../UserWithdraw/index.js");
var Utils = require("../Utils/index.js");
var Wallet_Spec = require("../Wallet.Spec/index.js");
var waitN = function (n) {
    var delay$prime = function ($11) {
        return Effect_Aff.delay(Data_Time_Duration.Milliseconds(Data_Int.toNumber((function (v) {
            return v * 1000 | 0;
        })($11))));
    };
    var $4 = n < 5;
    if ($4) {
        return Control_Apply.applySecond(Effect_Aff.applyAff)(delay$prime(n))(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("GO"));
    };
    return Control_Apply.applySecond(Effect_Aff.applyAff)(Control_Apply.applySecond(Effect_Aff.applyAff)(delay$prime(5))(Effect_Class_Console.log(Effect_Aff.monadEffectAff)(Data_Show.show(Data_Show.showInt)(n - 5 | 0))))(waitN(n - 5 | 0));
};
var runContract_ = function (contract) {
    return Contract_Monad.runContract({
        ogmiosConfig: QueryM_ServerConfig.defaultOgmiosWsConfig,
        datumCacheConfig: QueryM_ServerConfig.defaultDatumCacheWsConfig,
        ctlServerConfig: new Data_Maybe.Just(QueryM_ServerConfig.defaultServerConfig),
        networkId: Serialization_Address.TestnetId.value,
        logLevel: Data_Log_Level.Info.value,
        walletSpec: new Data_Maybe.Just(Wallet_Spec.ConnectToNami.value),
        customLogger: Data_Maybe.Nothing.value,
        suppressLogs: false,
        extraConfig: {}
    })(contract);
};
var countdownTo$prime = function ($12) {
    return runContract_(Utils.countdownTo($12));
};
var testBonded = Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("STARTING AS ADMIN"))(function () {
    var waitForWalletChange = function (role) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("SWITCH WALLETS NOW - CHANGE TO BACK TO " + role))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)(Data_Show.show(Data_Show.showInt)(20)))(function () {
                return waitN(20);
            });
        });
    };
    return Control_Bind.bind(Effect_Aff.bindAff)(runContract_(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("main: Cannot initiate bonded parameters")(Settings.testInitBondedParams))(function (initParams) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("main: Cannot create startDelay from Int")(Types_Natural.fromBigInt(Data_BigInt.fromInt(80000))))(function (startDelay) {
            return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.startPoolFromNow(startDelay)(initParams))(function (v) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showPOSIXTime)("Pool creation time")(v.value1))(function () {
                    return Control_Bind.bind(Contract_Monad.bindContract)(CreatePool.createBondedPoolContract(v.value0))(function (v1) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types.showBondedPoolParams)("Pool parameters")(v1.bondedPoolParams))(function () {
                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(v1.bondedPoolParams);
                        });
                    });
                });
            });
        });
    })))(function (v) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(waitForWalletChange("USER 1"))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Waiting for pool start..."))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(countdownTo$prime(v.start))(function () {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(Effect_Exception.error("main: Cannot create userStake from String"))(Types_Natural.fromString("40000")))(function (userStake) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(runContract_(UserStake.userStakeBondedPoolContract(v)(userStake)))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(waitForWalletChange("ADMIN"))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Waiting for bonding period..."))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(countdownTo$prime(Types_Interval.POSIXTime(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength))))(function () {
                                        return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(Effect_Exception.error("main: Cannot create Natural"))(Types_Natural.fromString("1")))(function (depositBatchSize) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(runContract_(Data_Functor["void"](Contract_Monad.functorContract)(DepositPool.depositBondedPoolContract(v)(depositBatchSize)([  ]))))(function () {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(waitForWalletChange("USER 1"))(function () {
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Waiting for withdrawing period..."))(function () {
                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(countdownTo$prime(Types_Interval.POSIXTime(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength))(v.bondingLength))))(function () {
                                                            return Control_Bind.bind(Effect_Aff.bindAff)(runContract_(UserWithdraw.userWithdrawBondedPoolContract(v)))(function () {
                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(waitForWalletChange("ADMIN"))(function () {
                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Waiting for closing period..."))(function () {
                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(countdownTo$prime(v.end))(function () {
                                                                            return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(Effect_Exception.error("Cannot create Natural"))(Types_Natural.fromString("10")))(function (closeBatchSize) {
                                                                                return runContract_(Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Data_Functor["void"](Contract_Monad.functorContract)(ClosePool.closeBondedPoolContract(v)(closeBatchSize)([  ])))(function () {
                                                                                    return Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("main: Pool closed");
                                                                                }));
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}));
var main = testBonded;
module.exports = {
    main: main
};
