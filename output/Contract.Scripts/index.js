// Generated by purs version 0.14.5
"use strict";
var Cardano_Types_NativeScript = require("../Cardano.Types.NativeScript/index.js");
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TypedValidator = require("../Types.TypedValidator/index.js");
var applyArgs = function (dictNewtype) {
    return function (dictDecodeAeson) {
        return function (a) {
            var $4 = QueryM.applyArgs()(dictDecodeAeson)(a);
            return function ($5) {
                return Contract_Monad.wrapContract($4($5));
            };
        };
    };
};
var applyArgsM = function (dictNewtype) {
    return function (dictDecodeAeson) {
        return function (a) {
            var $6 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
            var $7 = applyArgs()(dictDecodeAeson)(a);
            return function ($8) {
                return $6($7($8));
            };
        };
    };
};
module.exports = {
    applyArgs: applyArgs,
    applyArgsM: applyArgsM,
    ScriptAll: Cardano_Types_NativeScript.ScriptAll,
    ScriptAny: Cardano_Types_NativeScript.ScriptAny,
    ScriptNOfK: Cardano_Types_NativeScript.ScriptNOfK,
    ScriptPubkey: Cardano_Types_NativeScript.ScriptPubkey,
    TimelockExpiry: Cardano_Types_NativeScript.TimelockExpiry,
    TimelockStart: Cardano_Types_NativeScript.TimelockStart,
    enterpriseAddressScriptHash: Contract_Address.enterpriseAddressScriptHash,
    enterpriseAddressStakeValidatorHash: Contract_Address.enterpriseAddressStakeValidatorHash,
    enterpriseAddressValidatorHash: Contract_Address.enterpriseAddressValidatorHash,
    scriptHashAddress: Contract_Address.scriptHashAddress,
    toValidatorHash: Contract_Address.toValidatorHash,
    typedValidatorBaseAddress: Contract_Address.typedValidatorBaseAddress,
    typedValidatorEnterpriseAddress: Contract_Address.typedValidatorEnterpriseAddress,
    validatorHashBaseAddress: Contract_Address.validatorHashBaseAddress,
    validatorHashEnterpriseAddress: Contract_Address.validatorHashEnterpriseAddress,
    ClientDecodeJsonError: QueryM.ClientDecodeJsonError,
    ClientEncodingError: QueryM.ClientEncodingError,
    ClientHttpError: QueryM.ClientHttpError,
    mintingPolicyHash: Scripts.mintingPolicyHash,
    scriptHash: Scripts.scriptHash,
    stakeValidatorHash: Scripts.stakeValidatorHash,
    validatorHash: Scripts.validatorHash,
    MintingPolicy: Types_Scripts.MintingPolicy,
    MintingPolicyHash: Types_Scripts.MintingPolicyHash,
    PlutusScript: Types_Scripts.PlutusScript,
    StakeValidator: Types_Scripts.StakeValidator,
    StakeValidatorHash: Types_Scripts.StakeValidatorHash,
    Validator: Types_Scripts.Validator,
    ValidatorHash: Types_Scripts.ValidatorHash,
    TypedValidator: Types_TypedValidator.TypedValidator,
    forwardingMintingPolicy: Types_TypedValidator.forwardingMintingPolicy,
    generalise: Types_TypedValidator.generalise,
    typedValidatorHash: Types_TypedValidator.typedValidatorHash,
    typedValidatorScript: Types_TypedValidator.typedValidatorScript
};
