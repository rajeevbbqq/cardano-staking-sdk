// Generated by purs version 0.14.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Types_Int = require("../Types.Int/index.js");
var Types_TransactionMetadata = require("../Types.TransactionMetadata/index.js");
var AnyToMetadata = function (x) {
    return x;
};
var toMetadataTransactionMeta = {
    toMetadata: Control_Category.identity(Control_Category.categoryFn)
};
var toMetadataString = {
    toMetadata: Types_TransactionMetadata.Text.create
};
var toMetadataInt = {
    toMetadata: Types_TransactionMetadata.Int.create
};
var toMetadataByteArray = {
    toMetadata: Types_TransactionMetadata.Bytes.create
};
var toMetadataBigInt = {
    toMetadata: function (bi) {
        return Types_TransactionMetadata.Int.create(Data_Maybe.fromJust()(Types_Int.fromBigInt(bi)));
    }
};
var anyToMetadataClassMaybe = function (dictToMetadata) {
    return {
        anyToMetadata: function (a) {
            return function (f) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(f(dictToMetadata))(a);
            };
        }
    };
};
var anyToMetadataClass = function (dictToMetadata) {
    return {
        anyToMetadata: function (a) {
            return function (f) {
                return new Data_Maybe.Just(f(dictToMetadata)(a));
            };
        }
    };
};
var toMetadata = function (dict) {
    return dict.toMetadata;
};
var toMetadataArray = function (dictToMetadata) {
    return {
        toMetadata: (function () {
            var $33 = Data_Functor.map(Data_Functor.functorArray)(toMetadata(dictToMetadata));
            return function ($34) {
                return Types_TransactionMetadata.MetadataList.create($33($34));
            };
        })()
    };
};
var toMetadataMap = function (dictToMetadata) {
    return function (dictToMetadata1) {
        return {
            toMetadata: function (mp) {
                var entries = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(mp);
                return Types_TransactionMetadata.MetadataMap.create(Data_Map_Internal.fromFoldable(Types_TransactionMetadata.ordTransactionMetadatum)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.splitStrong(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(toMetadata(dictToMetadata))(toMetadata(dictToMetadata1)))(entries)));
            }
        };
    };
};
var toMetadataArrayTuple = function (dictOrd) {
    return function (dictToMetadata) {
        return function (dictToMetadata1) {
            return {
                toMetadata: (function () {
                    var $35 = toMetadata(toMetadataMap(dictToMetadata)(dictToMetadata1));
                    var $36 = Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray);
                    return function ($37) {
                        return $35($36($37));
                    };
                })()
            };
        };
    };
};
var toMetadataMapAnyToMetadat = function (dictOrd) {
    return function (dictToMetadata) {
        return {
            toMetadata: (function () {
                var $38 = toMetadata(toMetadataMap(dictToMetadata)(toMetadataTransactionMeta));
                var $39 = Data_Map_Internal.catMaybes(dictOrd);
                var $40 = Data_Functor.map(Data_Map_Internal.functorMap)(function (v) {
                    return v(function (dictToMetadata1) {
                        return toMetadata(dictToMetadata1);
                    });
                });
                return function ($41) {
                    return $38($39($40($41)));
                };
            })()
        };
    };
};
var toMetadataArrayTupleAnyTo = function (dictOrd) {
    return function (dictToMetadata) {
        return {
            toMetadata: (function () {
                var $42 = toMetadata(toMetadataMapAnyToMetadat(dictOrd)(dictToMetadata));
                var $43 = Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray);
                return function ($44) {
                    return $42($43($44));
                };
            })()
        };
    };
};
var toMetadataNonEmpty = function (dictFoldable) {
    return function (dictToMetadata) {
        return {
            toMetadata: (function () {
                var $45 = toMetadata(toMetadataArray(dictToMetadata));
                var $46 = Data_Array.fromFoldable(Data_NonEmpty.foldableNonEmpty(dictFoldable));
                return function ($47) {
                    return $45($46($47));
                };
            })()
        };
    };
};
var anyToMetadata = function (dict) {
    return dict.anyToMetadata;
};
module.exports = {
    toMetadata: toMetadata,
    anyToMetadata: anyToMetadata,
    toMetadataTransactionMeta: toMetadataTransactionMeta,
    toMetadataMapAnyToMetadat: toMetadataMapAnyToMetadat,
    toMetadataMap: toMetadataMap,
    toMetadataArrayTupleAnyTo: toMetadataArrayTupleAnyTo,
    toMetadataArrayTuple: toMetadataArrayTuple,
    toMetadataArray: toMetadataArray,
    toMetadataNonEmpty: toMetadataNonEmpty,
    toMetadataInt: toMetadataInt,
    toMetadataBigInt: toMetadataBigInt,
    toMetadataByteArray: toMetadataByteArray,
    toMetadataString: toMetadataString,
    anyToMetadataClassMaybe: anyToMetadataClassMaybe,
    anyToMetadataClass: anyToMetadataClass
};
