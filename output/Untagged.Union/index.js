// Generated by purs version 0.14.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Foreign = require("../Foreign/index.js");
var Literals_Undefined = require("../Literals.Undefined/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Untagged_Castable = require("../Untagged.Castable/index.js");
var Untagged_TypeCheck = require("../Untagged.TypeCheck/index.js");
var withOneOf = function (dictHasRuntimeType) {
    return function (f) {
        return function (g) {
            return function (o) {
                var isTypeA = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                var $27 = isTypeA(Foreign.unsafeToForeign(o));
                if ($27) {
                    return f(o);
                };
                return g(o);
            };
        };
    };
};
var toEither1 = function (dictHasRuntimeType) {
    return withOneOf(dictHasRuntimeType)(Data_Either.Left.create)(Data_Either.Right.create);
};
var reduceA = {
    reduce: Data_Function.apply
};
var reduce = function (dict) {
    return dict.reduce;
};
var reduceOneOf = function (dictReducible) {
    return function (dictHasRuntimeType) {
        return {
            reduce: function (v) {
                return function (o) {
                    var v1 = toEither1(dictHasRuntimeType)(o);
                    if (v1 instanceof Data_Either.Left) {
                        return v.value0(v1.value0);
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return reduce(dictReducible)(v.value1)(v1.value0);
                    };
                    throw new Error("Failed pattern match at Untagged.Union (line 142, column 5 - line 144, column 29): " + [ v1.constructor.name ]);
                };
            }
        };
    };
};
var oneOfEq = function (dictEq) {
    return function (dictEq1) {
        return function (dictHasRuntimeType) {
            return {
                eq: function (o) {
                    return function (o$prime) {
                        var v = toEither1(dictHasRuntimeType)(o$prime);
                        var v1 = toEither1(dictHasRuntimeType)(o);
                        if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                            return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                        };
                        if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                            return Data_Eq.eq(dictEq1)(v1.value0)(v.value0);
                        };
                        return false;
                    };
                }
            };
        };
    };
};
var inOneOfTail = function (dictInOneOf) {
    return {};
};
var inOneOfLast = {};
var inOneOfHead = {};
var hasRuntimeTypeOneOf = function (dictHasRuntimeType) {
    return function (dictHasRuntimeType1) {
        return {
            hasRuntimeType: function (v) {
                return function (x) {
                    return Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value)(x) || Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType1)(Type_Proxy["Proxy"].value)(x);
                };
            }
        };
    };
};
var getRight$prime = function (dictHasRuntimeType) {
    return function (o) {
        var isTypeA = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        var $42 = isTypeA(Foreign.unsafeToForeign(o));
        if ($42) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(o);
    };
};
var uorToMaybe = getRight$prime(Untagged_TypeCheck.hasRuntimeTypeUndefined);
var getRight = function (dictHasRuntimeType) {
    return function (o) {
        var isTypeB = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        var $43 = isTypeB(Foreign.unsafeToForeign(o));
        if ($43) {
            return new Data_Maybe.Just(o);
        };
        return Data_Maybe.Nothing.value;
    };
};
var getLeft$prime = function (dictHasRuntimeType) {
    return function (o) {
        var isTypeB = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        var $44 = isTypeB(Foreign.unsafeToForeign(o));
        if ($44) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(o);
    };
};
var getLeft = function (dictHasRuntimeType) {
    return function (o) {
        var isTypeA = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        var $45 = isTypeA(Foreign.unsafeToForeign(o));
        if ($45) {
            return new Data_Maybe.Just(o);
        };
        return Data_Maybe.Nothing.value;
    };
};
var fromUndefinedOr = function (a) {
    var $49 = Data_Maybe.fromMaybe(a);
    return function ($50) {
        return $49(uorToMaybe($50));
    };
};
var fromOneOf = function (dictInOneOf) {
    return function (dictHasRuntimeType) {
        return function (f) {
            var $46 = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(f));
            if ($46) {
                return Data_Maybe.Just.create(f);
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var defined = Unsafe_Coerce.unsafeCoerce;
var coercibleOneOf = function (dictInOneOf) {
    return {};
};
var maybeToUor = function (v) {
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return Untagged_Castable.cast()(Literals_Undefined["undefined"]);
    };
    throw new Error("Failed pattern match at Untagged.Union (line 121, column 1 - line 121, column 49): " + [ v.constructor.name ]);
};
var withUor$prime = function (f) {
    return function (o) {
        return withOneOf(Untagged_TypeCheck.hasRuntimeTypeUndefined)(Data_Function["const"](Untagged_Castable.cast()(Literals_Undefined["undefined"])))(f)(o);
    };
};
var withUor = function (f) {
    return withUor$prime(function ($51) {
        return f($51);
    });
};
var asOneOf = function (dictCastable) {
    return Untagged_Castable.cast();
};
module.exports = {
    asOneOf: asOneOf,
    fromOneOf: fromOneOf,
    toEither1: toEither1,
    getLeft: getLeft,
    "getLeft'": getLeft$prime,
    getRight: getRight,
    "getRight'": getRight$prime,
    defined: defined,
    uorToMaybe: uorToMaybe,
    maybeToUor: maybeToUor,
    withUor: withUor,
    fromUndefinedOr: fromUndefinedOr,
    reduce: reduce,
    oneOfEq: oneOfEq,
    hasRuntimeTypeOneOf: hasRuntimeTypeOneOf,
    inOneOfHead: inOneOfHead,
    inOneOfLast: inOneOfLast,
    inOneOfTail: inOneOfTail,
    coercibleOneOf: coercibleOneOf,
    reduceOneOf: reduceOneOf,
    reduceA: reduceA
};
