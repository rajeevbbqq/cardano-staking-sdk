// Generated by purs version 0.14.5
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Deserialization_FromBytes = require("../Deserialization.FromBytes/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var $$Error = require("../Error/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var toError = (function () {
    var $5 = Data_Variant.match()()()({
        fromCslRepError: function (err) {
            return "FromCslRepError: " + err;
        },
        fromBytesError: function (err) {
            return "FromBytesError: " + err;
        },
        notImplementedError: function (err) {
            return "NotImplementedError: " + err;
        }
    });
    return function ($6) {
        return Effect_Exception.error($5($6));
    };
})();
var _fromCslRepError = Type_Proxy["Proxy"].value;
var addErrTrace = function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(Data_Variant.onMatch()()()({
                fromCslRepError: function (orig) {
                    return Data_Variant.inj()({
                        reflectSymbol: function () {
                            return "fromCslRepError";
                        }
                    })(_fromCslRepError)(v + (": " + orig));
                },
                notImplementedError: function (orig) {
                    return Data_Variant.inj()({
                        reflectSymbol: function () {
                            return "notImplementedError";
                        }
                    })($$Error["_notImplementedError"])(v + (": " + orig));
                },
                fromBytesError: function (orig) {
                    return Data_Variant.inj()({
                        reflectSymbol: function () {
                            return "fromBytesError";
                        }
                    })(Deserialization_FromBytes["_fromBytesError"])(v + (": " + orig));
                }
            })(Data_Variant["default"](v1.value0))(v1.value0));
        };
        return v1;
    };
};
var fromCslRepError = (function () {
    var $7 = Data_Variant.inj()({
        reflectSymbol: function () {
            return "fromCslRepError";
        }
    })(_fromCslRepError);
    return function ($8) {
        return Data_Either.Left.create($7($8));
    };
})();
var cslErr = function ($9) {
    return $$Error.noteE(fromCslRepError($9));
};
module.exports = {
    "_fromCslRepError": _fromCslRepError,
    addErrTrace: addErrTrace,
    cslErr: cslErr,
    fromCslRepError: fromCslRepError,
    toError: toError
};
