// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var checkBoundedEnum = function (dictArbitrary) {
    return function (dictBoundedEnum) {
        return function (dictOrd) {
            return function (v) {
                var tofromenumLaw = function (a) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(((dictBoundedEnum.Enum1()).Ord0()).Eq0()))(Data_Enum.toEnum(dictBoundedEnum)(Data_Enum.fromEnum(dictBoundedEnum)(a)))(new Data_Maybe.Just(a));
                };
                var succpredLaw = function (a) {
                    return Data_Eq.eq(((dictBoundedEnum.Enum1()).Ord0()).Eq0())(a)(Data_Bounded.top(dictBoundedEnum.Bounded0())) || Data_Eq.eq(Data_Maybe.eqMaybe(((dictBoundedEnum.Enum1()).Ord0()).Eq0()))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.succ(dictBoundedEnum.Enum1())(a))(Data_Enum.pred(dictBoundedEnum.Enum1())))(new Data_Maybe.Just(a));
                };
                var predsuccLaw = function (a) {
                    return Data_Eq.eq(((dictBoundedEnum.Enum1()).Ord0()).Eq0())(a)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())) || Data_Eq.eq(Data_Maybe.eqMaybe(((dictBoundedEnum.Enum1()).Ord0()).Eq0()))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Enum.pred(dictBoundedEnum.Enum1())(a))(Data_Enum.succ(dictBoundedEnum.Enum1())))(new Data_Maybe.Just(a));
                };
                var enumsuccLaw = function (a) {
                    return Data_Eq.eq(((dictBoundedEnum.Enum1()).Ord0()).Eq0())(a)(Data_Bounded.top(dictBoundedEnum.Bounded0())) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Enum.fromEnum(dictBoundedEnum))(Data_Enum.succ(dictBoundedEnum.Enum1())(a)))(new Data_Maybe.Just(Data_Enum.fromEnum(dictBoundedEnum)(a) + 1 | 0));
                };
                var enumpredLaw = function (a) {
                    return Data_Eq.eq(((dictBoundedEnum.Enum1()).Ord0()).Eq0())(a)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Enum.fromEnum(dictBoundedEnum))(Data_Enum.pred(dictBoundedEnum.Enum1())(a)))(new Data_Maybe.Just(Data_Enum.fromEnum(dictBoundedEnum)(a) - 1 | 0));
                };
                var compareLaw = function (a) {
                    return function (b) {
                        return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare((dictBoundedEnum.Enum1()).Ord0())(a)(b))(Data_Ord.compare(Data_Ord.ordInt)(Data_Enum.fromEnum(dictBoundedEnum)(a))(Data_Enum.fromEnum(dictBoundedEnum)(b)));
                    };
                };
                var c = Data_Newtype.unwrap()(Data_Enum.cardinality(dictBoundedEnum));
                var predLaw = Data_Eq.eq(Data_Maybe.eqMaybe(((dictBoundedEnum.Enum1()).Ord0()).Eq0()))(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(Data_Array.foldl(Control_Bind.bind(Data_Maybe.bindMaybe))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(Data_Array.replicate(c - 1 | 0)(Data_Enum.pred(dictBoundedEnum.Enum1()))));
                var succLaw = Data_Eq.eq(Data_Maybe.eqMaybe(((dictBoundedEnum.Enum1()).Ord0()).Eq0()))(new Data_Maybe.Just(Data_Bounded.top(dictBoundedEnum.Bounded0())))(Data_Array.foldl(Control_Bind.bind(Data_Maybe.bindMaybe))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(Data_Array.replicate(c - 1 | 0)(Data_Enum.succ(dictBoundedEnum.Enum1()))));
                return function __do() {
                    Effect_Console.log("Checking 'succ' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableBoolean)(1)(succLaw)();
                    Effect_Console.log("Checking 'pred' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableBoolean)(1)(predLaw)();
                    Effect_Console.log("Checking 'predsucc' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(predsuccLaw)();
                    Effect_Console.log("Checking 'succpred' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(succpredLaw)();
                    Effect_Console.log("Checking 'enumpred' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(enumpredLaw)();
                    Effect_Console.log("Checking 'enumsucc' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(enumsuccLaw)();
                    Effect_Console.log("Checking 'compare' law for BoundedEnum")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(compareLaw)();
                    Effect_Console.log("Checking 'tofromenum' law for BoundedEnum")();
                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(tofromenumLaw)();
                };
            };
        };
    };
};
module.exports = {
    checkBoundedEnum: checkBoundedEnum
};
