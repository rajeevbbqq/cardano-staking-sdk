// Generated by purs version 0.14.5
"use strict";
var Cardano_Types_ScriptRef = require("../Cardano.Types.ScriptRef/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semigroup_Last = require("../Data.Semigroup.Last/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_MetadataType = require("../Metadata.MetadataType/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_OutputDatum = require("../Types.OutputDatum/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_TransactionMetadata = require("../Types.TransactionMetadata/index.js");
var Labeled = (function () {
    function Labeled(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Labeled.create = function (value0) {
        return function (value1) {
            return new Labeled(value0, value1);
        };
    };
    return Labeled;
})();
var ExpectedActual = (function () {
    function ExpectedActual(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ExpectedActual.create = function (value0) {
        return function (value1) {
            return new ExpectedActual(value0, value1);
        };
    };
    return ExpectedActual;
})();
var CouldNotGetTxByHash = (function () {
    function CouldNotGetTxByHash(value0) {
        this.value0 = value0;
    };
    CouldNotGetTxByHash.create = function (value0) {
        return new CouldNotGetTxByHash(value0);
    };
    return CouldNotGetTxByHash;
})();
var CouldNotGetUtxosAtAddress = (function () {
    function CouldNotGetUtxosAtAddress(value0) {
        this.value0 = value0;
    };
    CouldNotGetUtxosAtAddress.create = function (value0) {
        return new CouldNotGetUtxosAtAddress(value0);
    };
    return CouldNotGetUtxosAtAddress;
})();
var CouldNotParseMetadata = (function () {
    function CouldNotParseMetadata(value0) {
        this.value0 = value0;
    };
    CouldNotParseMetadata.create = function (value0) {
        return new CouldNotParseMetadata(value0);
    };
    return CouldNotParseMetadata;
})();
var TransactionHasNoMetadata = (function () {
    function TransactionHasNoMetadata(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TransactionHasNoMetadata.create = function (value0) {
        return function (value1) {
            return new TransactionHasNoMetadata(value0, value1);
        };
    };
    return TransactionHasNoMetadata;
})();
var UnexpectedDatumInOutput = (function () {
    function UnexpectedDatumInOutput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnexpectedDatumInOutput.create = function (value0) {
        return function (value1) {
            return new UnexpectedDatumInOutput(value0, value1);
        };
    };
    return UnexpectedDatumInOutput;
})();
var UnexpectedLovelaceDelta = (function () {
    function UnexpectedLovelaceDelta(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnexpectedLovelaceDelta.create = function (value0) {
        return function (value1) {
            return new UnexpectedLovelaceDelta(value0, value1);
        };
    };
    return UnexpectedLovelaceDelta;
})();
var UnexpectedMetadataValue = (function () {
    function UnexpectedMetadataValue(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnexpectedMetadataValue.create = function (value0) {
        return function (value1) {
            return new UnexpectedMetadataValue(value0, value1);
        };
    };
    return UnexpectedMetadataValue;
})();
var UnexpectedRefScriptInOutput = (function () {
    function UnexpectedRefScriptInOutput(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    UnexpectedRefScriptInOutput.create = function (value0) {
        return function (value1) {
            return new UnexpectedRefScriptInOutput(value0, value1);
        };
    };
    return UnexpectedRefScriptInOutput;
})();
var UnexpectedTokenDelta = (function () {
    function UnexpectedTokenDelta(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    UnexpectedTokenDelta.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new UnexpectedTokenDelta(value0, value1, value2);
            };
        };
    };
    return UnexpectedTokenDelta;
})();
var CustomFailure = (function () {
    function CustomFailure(value0) {
        this.value0 = value0;
    };
    CustomFailure.create = function (value0) {
        return new CustomFailure(value0);
    };
    return CustomFailure;
})();
var ContractAssertionFailures = function (x) {
    return x;
};
var showLabeled = function (dictShow) {
    return {
        show: function (v) {
            if (v.value1 instanceof Data_Maybe.Just) {
                return v.value1.value0;
            };
            if (v.value1 instanceof Data_Maybe.Nothing) {
                return Data_Show.show(dictShow)(v.value0);
            };
            throw new Error("Failed pattern match at Contract.Test.Utils (line 218, column 1 - line 220, column 36): " + [ v.constructor.name ]);
        }
    };
};
var showExpectedActual = function (dictShow) {
    return {
        show: function (v) {
            return " (Expected: " + (Data_Show.show(dictShow)(v.value0) + (", Actual: " + (Data_Show.show(dictShow)(v.value1) + ")")));
        }
    };
};
var newtypeContractAssertionF = {
    Coercible0: function () {
        return undefined;
    }
};
var functorExpectedActual = {
    map: function (f) {
        return function (m) {
            return new ExpectedActual(f(m.value0), f(m.value1));
        };
    }
};
var contractAssertionsContrac = {
    wrapAndAssert: function (contract) {
        return function (assertion) {
            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.bindContract))(contract)(function (r) {
                return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.applyContract))(assertion(r))(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract))(r));
            });
        };
    }
};
var contractAssertionsContrac1 = {
    wrapAndAssert: function (contract) {
        return function (assertion) {
            return assertion(contract);
        };
    }
};
var contractAssertionsArrayCo = {
    wrapAndAssert: function (contract) {
        return function (assertions) {
            return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.bindContract))(contract)(function (r) {
                return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.applyContract))(Data_Foldable.traverse_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract))(Data_Foldable.foldableArray)(function (v) {
                    return v(r);
                })(assertions))(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract))(r));
            });
        };
    }
};
var contractAssertionsArrayCo1 = {
    wrapAndAssert: function (contract) {
        return function (assertions) {
            return Data_Newtype.ala()()()(Data_Monoid_Endo.Endo)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(assertions)(contract);
        };
    }
};
var wrapAndAssert = function (dict) {
    return dict.wrapAndAssert;
};
var contractAssertions$div$bslash = function (dictContractAssertions) {
    return function (dictContractAssertions1) {
        return {
            wrapAndAssert: function (contract) {
                return function (v) {
                    return wrapAndAssert(dictContractAssertions1)(wrapAndAssert(dictContractAssertions)(contract)(v.value0))(v.value1);
                };
            }
        };
    };
};
var unlabel = function (v) {
    return v.value0;
};
var showTxHash = (function () {
    var $119 = Data_Newtype.unwrap();
    return function ($120) {
        return Types_ByteArray.byteArrayToHex($119($120));
    };
})();
var showContractAssertionFail = {
    show: function (v) {
        if (v instanceof CouldNotGetTxByHash) {
            return "Could not get tx by hash " + showTxHash(v.value0);
        };
        if (v instanceof CouldNotGetUtxosAtAddress) {
            return "Could not get utxos at " + Data_Show.show(showLabeled(Plutus_Types_Address.showAddress))(v.value0);
        };
        if (v instanceof CouldNotParseMetadata) {
            return "Could not parse " + (Data_Show.show(Data_Show.showString)(v.value0) + " metadata");
        };
        if (v instanceof TransactionHasNoMetadata) {
            return "Tx with id " + (showTxHash(v.value0) + (" does not hold " + (Data_Maybe.maybe(Data_Monoid.mempty(Data_Monoid.monoidString))(Data_Function.flip(Data_Semigroup.append(Data_Semigroup.semigroupString))(" "))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Data_Show.showString))(v.value1)) + "metadata")));
        };
        if (v instanceof UnexpectedDatumInOutput) {
            return "Unexpected datum in output " + (Data_Show.show(showLabeled(Plutus_Types_Transaction.showTransactionOutputWith))(v.value0) + Data_Show.show(showExpectedActual(Types_OutputDatum.showOutputDatum))(v.value1));
        };
        if (v instanceof UnexpectedLovelaceDelta) {
            return "Unexpected lovelace delta at address " + (Data_Show.show(showLabeled(Plutus_Types_Address.showAddress))(v.value0) + Data_Show.show(showExpectedActual(Data_BigInt.showBigInt))(v.value1));
        };
        if (v instanceof UnexpectedMetadataValue) {
            return "Unexpected " + (Data_Show.show(Data_Show.showString)(v.value0) + (" metadata value" + Data_Show.show(showExpectedActual(Data_Show.showString))(v.value1)));
        };
        if (v instanceof UnexpectedRefScriptInOutput) {
            return "Unexpected reference script in output " + (Data_Show.show(showLabeled(Plutus_Types_Transaction.showTransactionOutputWith))(v.value0) + Data_Show.show(showExpectedActual(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(v.value1));
        };
        if (v instanceof UnexpectedTokenDelta) {
            return "Unexpected token delta " + (Data_Show.show(Types_TokenName.showTokenName)(v.value1) + (" at address " + (Data_Show.show(showLabeled(Plutus_Types_Address.showAddress))(v.value0) + Data_Show.show(showExpectedActual(Data_BigInt.showBigInt))(v.value2))));
        };
        if (v instanceof CustomFailure) {
            return Data_Show.show(Data_Show.showString)(v.value0);
        };
        throw new Error("Failed pattern match at Contract.Test.Utils (line 168, column 1 - line 200, column 38): " + [ v.constructor.name ]);
    }
};
var showContractAssertionFail1 = {
    show: (function () {
        var $121 = Data_Semigroup.append(Data_Semigroup.semigroupString)("The following `Contract` assertions failed: \x0a    ");
        var $122 = Data_String_Common.joinWith("\x0a\x0a    ");
        var $123 = Data_Array.mapWithIndex(function (idx) {
            return function (elem) {
                return Data_Show.show(Data_Show.showInt)(idx + 1 | 0) + (". " + Data_Show.show(showContractAssertionFail)(elem));
            };
        });
        var $124 = Data_Newtype.unwrap();
        return function ($125) {
            return $121($122($123($124($125))));
        };
    })()
};
var withAssertions = function (dictContractAssertions) {
    return function (assertions) {
        return function (contract) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Writer_Trans.runWriterT(wrapAndAssert(dictContractAssertions)(Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(Data_Monoid.monoidArray))(Contract_Monad.monadContract)(contract))(assertions)))(function (v) {
                var $85 = Data_Foldable["null"](Data_Foldable.foldableArray)(v.value1);
                if ($85) {
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(v.value0);
                };
                return Contract_Monad.throwContractError(showContractAssertionFail1)(v.value1);
            });
        };
    };
};
var runContractAssertionM = function (contract) {
    return function (wrappedContract) {
        return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.bindContract))(Control_Monad_Writer_Trans.runWriterT(Control_Monad_Except_Trans.runExceptT(wrappedContract)))(function (v) {
            if (v.value0 instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract))(v.value0.value0);
            };
            if (v.value0 instanceof Data_Either.Left) {
                return Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Contract_Monad.applyContract))(Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))([ v.value0.value0 ]))(Data_Maybe.maybe(contract)((function () {
                    var $126 = Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract));
                    var $127 = Data_Newtype.unwrap();
                    return function ($128) {
                        return $126($127($128));
                    };
                })())(v.value1));
            };
            throw new Error("Failed pattern match at Contract.Test.Utils (line 120, column 47 - line 124, column 66): " + [ v.constructor.name ]);
        });
    };
};
var runContractAssertionM$prime = runContractAssertionM(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract))(Data_Unit.unit));
var noLabel = Data_Function.flip(Labeled.create)(Data_Maybe.Nothing.value);
var mkCheckFromAssertion = (function () {
    var $129 = Data_Functor.map(Contract_Monad.functorContract)(function ($132) {
        return Data_Tuple.fst(Data_Tuple.fst($132));
    });
    var $130 = Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Writer_Trans.functorWriterT(Contract_Monad.functorContract)))(Data_Either.isRight);
    return function ($131) {
        return $129(Control_Monad_Writer_Trans.runWriterT(Control_Monad_Writer_Trans.runWriterT($130(Control_Monad_Except_Trans.runExceptT($131)))));
    };
})();
var liftContractTestM = (function () {
    var $133 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract)));
    var $134 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast)))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract));
    return function ($135) {
        return $133($134($135));
    };
})();
var label = function (x) {
    return function (l) {
        return new Labeled(x, new Data_Maybe.Just(l));
    };
};
var assertContractM$prime = function (msg) {
    return Data_Maybe.maybe(Control_Monad_Except_Trans.except(Control_Monad_Writer_Trans.applicativeWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract)))(new Data_Either.Left(msg)))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract)))));
};
var assertContractM = function (msg) {
    return function (cm) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(liftContractTestM(Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(Data_Monoid.monoidArray))(Contract_Monad.monadContract)(cm)))(assertContractM$prime(msg));
    };
};
var valueAtAddress = function (addr) {
    return Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_Writer_Trans.functorWriterT(Contract_Monad.functorContract))))(assertContractM(new CouldNotGetUtxosAtAddress(addr))(Contract_Utxos.utxosAt(unlabel(addr))))(Data_Foldable.foldMap(Data_Map_Internal.foldableMap)(Plutus_Types_Value.monoidValue)((function () {
        var $136 = Data_Newtype.unwrap();
        var $137 = Data_Newtype.unwrap();
        return function ($138) {
            return (function (v) {
                return v.amount;
            })($136((function (v) {
                return v.output;
            })($137($138))));
        };
    })()));
};
var checkBalanceDeltaAtAddress = function (addr) {
    return function (contract) {
        return function (check) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(valueAtAddress(addr))(function (valueBefore) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(liftContractTestM(contract))(function (res) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(Control_Monad_Writer_Class.tell(Control_Monad_Except_Trans.monadTellExceptT(Control_Monad_Writer_Trans.monadTellWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(Data_Maybe.Just.create(res)))(function () {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(valueAtAddress(addr))(function (valueAfter) {
                            return check(res)(valueBefore)(valueAfter);
                        });
                    });
                });
            });
        };
    };
};
var assertContract = function (failure) {
    return function (cond) {
        if (cond) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(Data_Unit.unit);
        };
        if (Data_Boolean.otherwise) {
            return Control_Monad_Except_Trans.except(Control_Monad_Writer_Trans.applicativeWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Contract_Monad.applicativeContract)))(new Data_Either.Left(failure));
        };
        throw new Error("Failed pattern match at Contract.Test.Utils (line 276, column 1 - line 280, column 33): " + [ failure.constructor.name, cond.constructor.name ]);
    };
};
var assertContractExpectedActual = function (dictEq) {
    return function (mkAssertionFailure) {
        return function (expected) {
            return function (actual) {
                return assertContract(mkAssertionFailure(new ExpectedActual(expected, actual)))(Data_Eq.eq(dictEq)(expected)(actual));
            };
        };
    };
};
var assertOutputHasDatumImpl = function (expectedDatum) {
    return function (txOutput) {
        var actualDatum = Data_Lens_Getter.viewOn(unlabel(txOutput))((function () {
            var $139 = Plutus_Types_Transaction["_output"](Data_Lens_Internal_Forget.strongForget);
            var $140 = Plutus_Types_Transaction["_datum"](Data_Lens_Internal_Forget.strongForget);
            return function ($141) {
                return $139($140($141));
            };
        })());
        return assertContractExpectedActual(Types_OutputDatum.eqOutputDatum)(UnexpectedDatumInOutput.create(txOutput))(expectedDatum)(actualDatum);
    };
};
var assertOutputHasDatum = function (expectedDatum) {
    var $142 = assertOutputHasDatumImpl(expectedDatum);
    return function ($143) {
        return runContractAssertionM$prime($142($143));
    };
};
var checkOutputHasDatum = function (expectedDatum) {
    return function (txOutput) {
        return mkCheckFromAssertion(assertOutputHasDatumImpl(expectedDatum)(noLabel(txOutput)));
    };
};
var assertOutputHasRefScriptImpl = function (expectedRefScript) {
    return function (txOutput) {
        var actualRefScript = Data_Lens_Getter.viewOn(unlabel(txOutput))(Plutus_Types_Transaction["_scriptRef"](Data_Lens_Internal_Forget.strongForget));
        return assertContractExpectedActual(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef))(UnexpectedRefScriptInOutput.create(txOutput))(new Data_Maybe.Just(expectedRefScript))(actualRefScript);
    };
};
var assertOutputHasRefScript = function (expectedRefScript) {
    var $144 = assertOutputHasRefScriptImpl(expectedRefScript);
    return function ($145) {
        return runContractAssertionM$prime($144($145));
    };
};
var checkOutputHasRefScript = function (expectedRefScript) {
    return function (txOutput) {
        return mkCheckFromAssertion(assertOutputHasRefScriptImpl(expectedRefScript)(noLabel(txOutput)));
    };
};
var assertLovelaceDeltaAtAddress = function (addr) {
    return function (getExpected) {
        return function (comp) {
            return function (contract) {
                return runContractAssertionM(contract)(checkBalanceDeltaAtAddress(addr)(contract)(function (result) {
                    return function (valueBefore) {
                        return function (valueAfter) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(liftContractTestM(Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(Data_Monoid.monoidArray))(Contract_Monad.monadContract)(getExpected(result))))(function (expected) {
                                var actual = Data_Ring.sub(Data_BigInt.ringBigInt)(Plutus_Types_Value["valueToCoin'"](valueAfter))(Plutus_Types_Value["valueToCoin'"](valueBefore));
                                var unexpectedLovelaceDelta = new UnexpectedLovelaceDelta(addr, new ExpectedActual(expected, actual));
                                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContract(unexpectedLovelaceDelta)(comp(actual)(expected)))(function () {
                                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(result);
                                });
                            });
                        };
                    };
                }));
            };
        };
    };
};
var assertGainAtAddress = function (addr) {
    return function (getMinGain) {
        return assertLovelaceDeltaAtAddress(addr)(getMinGain)(Data_Eq.eq(Data_BigInt.eqBigInt));
    };
};
var assertGainAtAddress$prime = function (addr) {
    return function (minGain) {
        return assertGainAtAddress(addr)(Data_Function["const"](Control_Applicative.pure(Contract_Monad.applicativeContract)(minGain)));
    };
};
var assertLossAtAddress = function (addr) {
    return function (getMinLoss) {
        return assertLovelaceDeltaAtAddress(addr)((function () {
            var $146 = Data_Functor.map(Contract_Monad.functorContract)(Data_Ring.negate(Data_BigInt.ringBigInt));
            return function ($147) {
                return $146(getMinLoss($147));
            };
        })())(Data_Eq.eq(Data_BigInt.eqBigInt));
    };
};
var assertLossAtAddress$prime = function (addr) {
    return function (minLoss) {
        return assertLossAtAddress(addr)(Data_Function["const"](Control_Applicative.pure(Contract_Monad.applicativeContract)(minLoss)));
    };
};
var assertTokenDeltaAtAddress = function (addr) {
    return function (v) {
        return function (getExpected) {
            return function (comp) {
                return function (contract) {
                    return runContractAssertionM(contract)(checkBalanceDeltaAtAddress(addr)(contract)(function (result) {
                        return function (valueBefore) {
                            return function (valueAfter) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(liftContractTestM(Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(Data_Monoid.monoidArray))(Contract_Monad.monadContract)(getExpected(result))))(function (expected) {
                                    var actual = Data_Ring.sub(Data_BigInt.ringBigInt)(Plutus_Types_Value.valueOf(valueAfter)(v.value0)(v.value1))(Plutus_Types_Value.valueOf(valueBefore)(v.value0)(v.value1));
                                    var unexpectedTokenDelta = new UnexpectedTokenDelta(addr, v.value1, new ExpectedActual(expected, actual));
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContract(unexpectedTokenDelta)(comp(actual)(expected)))(function () {
                                        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(result);
                                    });
                                });
                            };
                        };
                    }));
                };
            };
        };
    };
};
var assertTokenGainAtAddress = function (addr) {
    return function (token) {
        return function (getMinGain) {
            return assertTokenDeltaAtAddress(addr)(token)(getMinGain)(Data_Eq.eq(Data_BigInt.eqBigInt));
        };
    };
};
var assertTokenGainAtAddress$prime = function (addr) {
    return function (v) {
        return assertTokenGainAtAddress(addr)(new Data_Tuple.Tuple(v.value0, v.value1.value0))(Data_Function["const"](Control_Applicative.pure(Contract_Monad.applicativeContract)(v.value1.value1)));
    };
};
var assertTokenLossAtAddress = function (addr) {
    return function (token) {
        return function (getMinLoss) {
            return assertTokenDeltaAtAddress(addr)(token)((function () {
                var $148 = Data_Functor.map(Contract_Monad.functorContract)(Data_Ring.negate(Data_BigInt.ringBigInt));
                return function ($149) {
                    return $148(getMinLoss($149));
                };
            })())(Data_Eq.eq(Data_BigInt.eqBigInt));
        };
    };
};
var assertTokenLossAtAddress$prime = function (addr) {
    return function (v) {
        return assertTokenLossAtAddress(addr)(new Data_Tuple.Tuple(v.value0, v.value1.value0))(Data_Function["const"](Control_Applicative.pure(Contract_Monad.applicativeContract)(v.value1.value1)));
    };
};
var assertTxHasMetadataImpl = function (dictMetadataType) {
    return function (dictEq) {
        return function (dictShow) {
            return function (mdLabel) {
                return function (txHash) {
                    return function (expectedMetadata) {
                        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContractM(new CouldNotGetTxByHash(txHash))(Contract_Transaction.getTxByHash(txHash)))(function (v) {
                            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContractM$prime(new TransactionHasNoMetadata(txHash, Data_Maybe.Nothing.value))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)((function () {
                                var $150 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap());
                                var $151 = Data_Newtype.unwrap();
                                return function ($152) {
                                    return $150((function (v1) {
                                        return v1.metadata;
                                    })($151($152)));
                                };
                            })())(v.auxiliaryData)))(function (generalMetadata) {
                                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContractM$prime(new TransactionHasNoMetadata(txHash, new Data_Maybe.Just(mdLabel)))(Data_Map_Internal.lookup(Types_TransactionMetadata.ordTransactionMetadatumLa)(Metadata_MetadataType.metadataLabel(dictMetadataType)(Type_Proxy["Proxy"].value))(generalMetadata)))(function (rawMetadata) {
                                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Writer_Trans.monadWriterT(Data_Maybe.monoidMaybe(Data_Semigroup_Last.semigroupLast))(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidArray)(Contract_Monad.monadContract))))(assertContractM$prime(new CouldNotParseMetadata(mdLabel))(Metadata_FromMetadata.fromMetadata(dictMetadataType.FromMetadata0())(rawMetadata)))(function (v1) {
                                        var expectedActual = Data_Functor.map(functorExpectedActual)(Data_Show.show(dictShow))(new ExpectedActual(expectedMetadata, v1));
                                        return assertContract(new UnexpectedMetadataValue(mdLabel, expectedActual))(Data_Eq.eq(dictEq)(v1)(expectedMetadata));
                                    });
                                });
                            });
                        });
                    };
                };
            };
        };
    };
};
var assertTxHasMetadata = function (dictMetadataType) {
    return function (dictEq) {
        return function (dictShow) {
            return function (mdLabel) {
                return function (txHash) {
                    var $153 = assertTxHasMetadataImpl(dictMetadataType)(dictEq)(dictShow)(mdLabel)(txHash);
                    return function ($154) {
                        return runContractAssertionM$prime($153($154));
                    };
                };
            };
        };
    };
};
var checkTxHasMetadata = function (dictMetadataType) {
    return function (dictEq) {
        return function (dictShow) {
            return function (txHash) {
                var $155 = assertTxHasMetadataImpl(dictMetadataType)(dictEq)(dictShow)(Data_Monoid.mempty(Data_Monoid.monoidString))(txHash);
                return function ($156) {
                    return mkCheckFromAssertion($155($156));
                };
            };
        };
    };
};
module.exports = {
    CouldNotGetTxByHash: CouldNotGetTxByHash,
    CouldNotGetUtxosAtAddress: CouldNotGetUtxosAtAddress,
    CouldNotParseMetadata: CouldNotParseMetadata,
    CustomFailure: CustomFailure,
    TransactionHasNoMetadata: TransactionHasNoMetadata,
    UnexpectedDatumInOutput: UnexpectedDatumInOutput,
    UnexpectedLovelaceDelta: UnexpectedLovelaceDelta,
    UnexpectedMetadataValue: UnexpectedMetadataValue,
    UnexpectedRefScriptInOutput: UnexpectedRefScriptInOutput,
    UnexpectedTokenDelta: UnexpectedTokenDelta,
    ExpectedActual: ExpectedActual,
    Labeled: Labeled,
    assertContract: assertContract,
    assertContractExpectedActual: assertContractExpectedActual,
    assertContractM: assertContractM,
    "assertContractM'": assertContractM$prime,
    assertGainAtAddress: assertGainAtAddress,
    "assertGainAtAddress'": assertGainAtAddress$prime,
    assertLossAtAddress: assertLossAtAddress,
    "assertLossAtAddress'": assertLossAtAddress$prime,
    assertLovelaceDeltaAtAddress: assertLovelaceDeltaAtAddress,
    assertOutputHasDatum: assertOutputHasDatum,
    assertOutputHasRefScript: assertOutputHasRefScript,
    assertTokenDeltaAtAddress: assertTokenDeltaAtAddress,
    assertTokenGainAtAddress: assertTokenGainAtAddress,
    "assertTokenGainAtAddress'": assertTokenGainAtAddress$prime,
    assertTokenLossAtAddress: assertTokenLossAtAddress,
    "assertTokenLossAtAddress'": assertTokenLossAtAddress$prime,
    assertTxHasMetadata: assertTxHasMetadata,
    checkBalanceDeltaAtAddress: checkBalanceDeltaAtAddress,
    checkOutputHasDatum: checkOutputHasDatum,
    checkOutputHasRefScript: checkOutputHasRefScript,
    checkTxHasMetadata: checkTxHasMetadata,
    label: label,
    unlabel: unlabel,
    valueAtAddress: valueAtAddress,
    withAssertions: withAssertions,
    wrapAndAssert: wrapAndAssert,
    showContractAssertionFail: showContractAssertionFail,
    showLabeled: showLabeled,
    functorExpectedActual: functorExpectedActual,
    showExpectedActual: showExpectedActual,
    contractAssertionsContrac1: contractAssertionsContrac1,
    contractAssertionsContrac: contractAssertionsContrac,
    contractAssertionsArrayCo1: contractAssertionsArrayCo1,
    contractAssertionsArrayCo: contractAssertionsArrayCo,
    "contractAssertions/\\": contractAssertions$div$bslash
};
