// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_String_NonEmpty_Internal = require("../Data.String.NonEmpty.Internal/index.js");
var toString = $foreign.toBase(10);
var toInt = function ($4) {
    return Data_Int.fromNumber($foreign.toNumber($4));
};
var toBase$prime = function (i) {
    return function (bi) {
        return Data_Maybe.fromJust()(Data_String_NonEmpty_Internal.fromString($foreign.toBase(i)(bi)));
    };
};
var toNonEmptyString = toBase$prime(10);
var showBigInt = {
    show: function (x) {
        return "fromString \"" + (toString(x) + "\"");
    }
};
var semiringBigInt = {
    add: $foreign.biAdd,
    zero: $foreign.fromInt(0),
    mul: $foreign.biMul,
    one: $foreign.fromInt(1)
};
var ringBigInt = {
    sub: $foreign.biSub,
    Semiring0: function () {
        return semiringBigInt;
    }
};
var rem = $foreign.biMod;
var quot = $foreign.biDiv;
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromBase = $foreign.fromBaseImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
var fromString = fromBase(10);
var eqBigInt = {
    eq: $foreign.biEquals
};
var ordBigInt = {
    compare: function (x) {
        return function (y) {
            var v = $foreign.biCompare(x)(y);
            if (v === 1) {
                return Data_Ordering.GT.value;
            };
            if (v === 0) {
                return Data_Ordering.EQ.value;
            };
            return Data_Ordering.LT.value;
        };
    },
    Eq0: function () {
        return eqBigInt;
    }
};
var commutativeRingBigInt = {
    Ring0: function () {
        return ringBigInt;
    }
};
var euclideanRingBigInt = {
    div: function (x) {
        return function (y) {
            return $foreign.biDiv(Data_Ring.sub(ringBigInt)(x)(Data_EuclideanRing.mod(euclideanRingBigInt)(x)(y)))(y);
        };
    },
    mod: function (x) {
        return function (y) {
            var yy = $foreign.abs(y);
            return $foreign.biMod(Data_Semiring.add(semiringBigInt)($foreign.biMod(x)(yy))(yy))(yy);
        };
    },
    degree: function ($5) {
        return Data_Int.floor($foreign.toNumber($foreign.abs($5)));
    },
    CommutativeRing0: function () {
        return commutativeRingBigInt;
    }
};
module.exports = {
    fromString: fromString,
    fromBase: fromBase,
    fromNumber: fromNumber,
    toString: toString,
    toNonEmptyString: toNonEmptyString,
    "toBase'": toBase$prime,
    quot: quot,
    rem: rem,
    toInt: toInt,
    eqBigInt: eqBigInt,
    ordBigInt: ordBigInt,
    showBigInt: showBigInt,
    semiringBigInt: semiringBigInt,
    ringBigInt: ringBigInt,
    commutativeRingBigInt: commutativeRingBigInt,
    euclideanRingBigInt: euclideanRingBigInt,
    fromInt: $foreign.fromInt,
    toBase: $foreign.toBase,
    digitsInBase: $foreign.digitsInBase,
    abs: $foreign.abs,
    even: $foreign.even,
    odd: $foreign.odd,
    prime: $foreign.prime,
    pow: $foreign.pow,
    not: $foreign.not,
    or: $foreign.or,
    xor: $foreign.xor,
    and: $foreign.and,
    shl: $foreign.shl,
    shr: $foreign.shr,
    toNumber: $foreign.toNumber
};
