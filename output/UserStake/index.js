// Generated by purs version 0.14.5
"use strict";
var BondedStaking_TimeUtils = require("../BondedStaking.TimeUtils/index.js");
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_PlutusData = require("../Contract.PlutusData/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_ScriptLookups = require("../Contract.ScriptLookups/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var FromData = require("../FromData/index.js");
var IsData = require("../IsData/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Scripts_ListNFT = require("../Scripts.ListNFT/index.js");
var Scripts_PoolValidator = require("../Scripts.PoolValidator/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Settings = require("../Settings/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Datum = require("../Types.Datum/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var Types_Redeemer = require("../Types.Redeemer/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var Utils = require("../Utils/index.js");
var userStakeBondedPoolContract = function (v) {
    return function (amt) {
        return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userStakeBondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Address.showAddress)("userStakeBondedPoolContract: User Address")(userAddr))(function () {
                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userStakeBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                    var valHash = Scripts.validatorHash(validator);
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userStakeBondedPoolContract: validatorHash")(valHash))(function () {
                                        var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userStakeBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userStakeBondedPoolContract: Pool UTXOs")(bondedPoolUtxos))(function () {
                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("userStakeBondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                                                                                    var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                    var assetParams = Data_Newtype.unwrap()(v.bondedAssetClass);
                                                                                    var assetDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(Types.AssetDatum.value));
                                                                                    var amtBigInt = Types_Natural.toBigInt(amt);
                                                                                    var stakeValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(amtBigInt);
                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(v.nftCs)))(function (listPolicy) {
                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                            var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Getting staking range..."))(function () {
                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getStakingTime(v))(function (v3) {
                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userStakeBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userStakeBondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Nothing) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Nothing }"))(function () {
                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                            var mh = new Types.MintHead(v1.value0);
                                                                                                                            var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                            var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                stakeAmount: amt,
                                                                                                                                stakeHolder: userPkh,
                                                                                                                                mintingAction: new Data_Maybe.Just(mh)
                                                                                                                            })));
                                                                                                                            var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                entry: {
                                                                                                                                    key: hashedUserPkh,
                                                                                                                                    newDeposit: amtBigInt,
                                                                                                                                    deposited: amtBigInt,
                                                                                                                                    staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                    rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                    next: Data_Maybe.Nothing.value
                                                                                                                                }
                                                                                                                            })));
                                                                                                                            var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                maybeEntryName: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                            })));
                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                    var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                    var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(bondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustValidateIn(v3.range) ]);
                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                });
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                };
                                                                                                                if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Just) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ... }"))(function () {
                                                                                                                        var assocList = Utils.mkOnchainAssocList(v.assocListCs)(bondedPoolUtxos);
                                                                                                                        var v4 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(v2.value0.maybeEntryName.value0);
                                                                                                                        if (v4 instanceof Data_Ordering.LT) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare LT"))(function () {
                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                    var mh = new Types.MintHead(v1.value0);
                                                                                                                                    var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                                    var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                        stakeAmount: amt,
                                                                                                                                        stakeHolder: userPkh,
                                                                                                                                        mintingAction: new Data_Maybe.Just(mh)
                                                                                                                                    })));
                                                                                                                                    var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                        entry: {
                                                                                                                                            key: hashedUserPkh,
                                                                                                                                            newDeposit: amtBigInt,
                                                                                                                                            deposited: amtBigInt,
                                                                                                                                            staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                            rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                            next: new Data_Maybe.Just(v2.value0.maybeEntryName.value0)
                                                                                                                                        }
                                                                                                                                    })));
                                                                                                                                    var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                        maybeEntryName: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                                    })));
                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                            var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                            var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(bondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer) ]);
                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        };
                                                                                                                        if (v4 instanceof Data_Ordering.EQ) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare EQ"))(function () {
                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract head from Assoc. List - this should be impossible")(Data_Array.head(assocList)))(function (assocElem) {
                                                                                                                                    var v5 = Data_Tuple.snd(assocElem);
                                                                                                                                    var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                        stakeAmount: amt,
                                                                                                                                        stakeHolder: userPkh,
                                                                                                                                        mintingAction: Data_Maybe.Nothing.value
                                                                                                                                    })));
                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1)))(function (dHash) {
                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dHash))(function () {
                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(listDatum))))(function (v6) {
                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                        if (v6 instanceof Types.EntryDatum) {
                                                                                                                                                            var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                            var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                    entry: Types.Entry({
                                                                                                                                                                        key: e.key,
                                                                                                                                                                        newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                        deposited: updateDeposited,
                                                                                                                                                                        staked: e.staked,
                                                                                                                                                                        rewards: e.rewards,
                                                                                                                                                                        next: e.next
                                                                                                                                                                    })
                                                                                                                                                                }))));
                                                                                                                                                            });
                                                                                                                                                        };
                                                                                                                                                        return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                    })())(function (entryDatum) {
                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                            var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), entryDatumLookup ]);
                                                                                                                                                            var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v5.value0)(valRedeemer) ]);
                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        };
                                                                                                                        if (v4 instanceof Data_Ordering.GT) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare GT"))(function () {
                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot get position in Assoc. List")(Utils.findInsertUpdateElem(assocList)(hashedUserPkh)))(function (v5) {
                                                                                                                                    var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                        stakeAmount: amt,
                                                                                                                                        stakeHolder: userPkh,
                                                                                                                                        mintingAction: v5.value0
                                                                                                                                    })));
                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.firstOutput)))(function (dHash) {
                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dHash))(function () {
                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's  datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (firstListDatum) {
                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract Assoc. List datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(firstListDatum))))(function (v6) {
                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                        if (v6 instanceof Types.EntryDatum) {
                                                                                                                                                            var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                var $36 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                                if ($36) {
                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                        entry: Types.Entry({
                                                                                                                                                                            key: e.key,
                                                                                                                                                                            newDeposit: e.newDeposit,
                                                                                                                                                                            deposited: e.deposited,
                                                                                                                                                                            staked: e.staked,
                                                                                                                                                                            rewards: e.rewards,
                                                                                                                                                                            next: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                                                                        })
                                                                                                                                                                    }))));
                                                                                                                                                                };
                                                                                                                                                                var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                        entry: Types.Entry({
                                                                                                                                                                            key: e.key,
                                                                                                                                                                            newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                            deposited: updateDeposited,
                                                                                                                                                                            staked: e.staked,
                                                                                                                                                                            rewards: e.rewards,
                                                                                                                                                                            next: e.next
                                                                                                                                                                        })
                                                                                                                                                                    }))));
                                                                                                                                                                });
                                                                                                                                                            })())(function (firstEntryDatum) {
                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(firstEntryDatum)))(function (firstEntryDatumLookup) {
                                                                                                                                                                    var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(firstEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.firstInput)(valRedeemer) ]);
                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, firstEntryDatumLookup));
                                                                                                                                                                });
                                                                                                                                                            });
                                                                                                                                                        };
                                                                                                                                                        return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                    })())(function (v7) {
                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                            var $40 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                            if ($40) {
                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get minting action")(v5.value0))(function (ma) {
                                                                                                                                                                        var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(ma)));
                                                                                                                                                                        var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                            entry: {
                                                                                                                                                                                key: hashedUserPkh,
                                                                                                                                                                                newDeposit: amtBigInt,
                                                                                                                                                                                deposited: amtBigInt,
                                                                                                                                                                                staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                                                                rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                                                                next: v5.value1.value1.value1.secondKey
                                                                                                                                                                            }
                                                                                                                                                                        })));
                                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                                            var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), entryDatumLookup ]);
                                                                                                                                                                            var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue) ]);
                                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                        });
                                                                                                                                                                    });
                                                                                                                                                                });
                                                                                                                                                            };
                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                        })())(function (v8) {
                                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Nothing && v5.value1.value0.secondInput instanceof Data_Maybe.Nothing) {
                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                                };
                                                                                                                                                                if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Just && v5.value1.value0.secondInput instanceof Data_Maybe.Just) {
                                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.secondOutput.value0)))(function (dh) {
                                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dh))(function () {
                                                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dh)))(function (secondListDatum) {
                                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(secondListDatum))))(function (v9) {
                                                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                                        if (v9 instanceof Types.EntryDatum) {
                                                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                                                entry: v9.value0.entry
                                                                                                                                                                                            }))));
                                                                                                                                                                                        };
                                                                                                                                                                                        return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                                                    })())(function (lastEntryDatum) {
                                                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(lastEntryDatum)))(function (lastEntryDatumLookup) {
                                                                                                                                                                                            var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), lastEntryDatumLookup ]);
                                                                                                                                                                                            var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(lastEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.secondInput.value0)(valRedeemer) ]);
                                                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                                        });
                                                                                                                                                                                    });
                                                                                                                                                                                });
                                                                                                                                                                            });
                                                                                                                                                                        });
                                                                                                                                                                    });
                                                                                                                                                                };
                                                                                                                                                                return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum notEntry constructor");
                                                                                                                                                            })())(function (v9) {
                                                                                                                                                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ v7.value0, v8.value0, v9.value0, Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustValidateIn(v3.range) ]), Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), v7.value1, v8.value1, v9.value1 ])));
                                                                                                                                                            });
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        };
                                                                                                                        throw new Error("Failed pattern match at UserStake (line 246, column 7 - line 572, column 18): " + [ v4.constructor.name ]);
                                                                                                                    });
                                                                                                                };
                                                                                                                return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum incorrect type");
                                                                                                            })())(function (v4) {
                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(v4.value1)(v4.value0)))(function (unattachedBalancedTx) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot balance, reindex redeemers, attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                signedTx: signedTx
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }));
    };
};
module.exports = {
    userStakeBondedPoolContract: userStakeBondedPoolContract
};
