// Generated by purs version 0.14.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var checkSemiring = function (dictSemiring) {
    return function (dictArbitrary) {
        return function (dictEq) {
            return function (v) {
                var rightDistribution = function (a) {
                    return function (b) {
                        return function (c) {
                            return Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(Data_Semiring.add(dictSemiring)(a)(b))(c))(Data_Semiring.add(dictSemiring)(Data_Semiring.mul(dictSemiring)(a)(c))(Data_Semiring.mul(dictSemiring)(b)(c)));
                        };
                    };
                };
                var leftDistribution = function (a) {
                    return function (b) {
                        return function (c) {
                            return Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(a)(Data_Semiring.add(dictSemiring)(b)(c)))(Data_Semiring.add(dictSemiring)(Data_Semiring.mul(dictSemiring)(a)(b))(Data_Semiring.mul(dictSemiring)(a)(c)));
                        };
                    };
                };
                var identityMultiplication = function (a) {
                    return Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(Data_Semiring.one(dictSemiring))(a))(a) && Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(a)(Data_Semiring.one(dictSemiring)))(a);
                };
                var identityAddition = function (a) {
                    return Data_Eq.eq(dictEq)(Data_Semiring.add(dictSemiring)(Data_Semiring.zero(dictSemiring))(a))(a) && Data_Eq.eq(dictEq)(Data_Semiring.add(dictSemiring)(a)(Data_Semiring.zero(dictSemiring)))(a);
                };
                var commutativeAddition = function (a) {
                    return function (b) {
                        return Data_Eq.eq(dictEq)(Data_Semiring.add(dictSemiring)(a)(b))(Data_Semiring.add(dictSemiring)(b)(a));
                    };
                };
                var associativeMultiplication = function (a) {
                    return function (b) {
                        return function (c) {
                            return Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(Data_Semiring.mul(dictSemiring)(a)(b))(c))(Data_Semiring.mul(dictSemiring)(a)(Data_Semiring.mul(dictSemiring)(b)(c)));
                        };
                    };
                };
                var associativeAddition = function (a) {
                    return function (b) {
                        return function (c) {
                            return Data_Eq.eq(dictEq)(Data_Semiring.add(dictSemiring)(Data_Semiring.add(dictSemiring)(a)(b))(c))(Data_Semiring.add(dictSemiring)(a)(Data_Semiring.add(dictSemiring)(b)(c)));
                        };
                    };
                };
                var annihiliation = function (a) {
                    return Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(a)(Data_Semiring.zero(dictSemiring)))(Data_Semiring.zero(dictSemiring)) && Data_Eq.eq(dictEq)(Data_Semiring.mul(dictSemiring)(Data_Semiring.zero(dictSemiring))(a))(Data_Semiring.zero(dictSemiring));
                };
                return function __do() {
                    Effect_Console.log("Checking 'Associativity' law for Semiring addition")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(associativeAddition)();
                    Effect_Console.log("Checking 'Identity' law for Semiring addition")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identityAddition)();
                    Effect_Console.log("Checking 'Commutative' law for Semiring addition")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(commutativeAddition)();
                    Effect_Console.log("Checking 'Associativity' law for Semiring multiplication")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(associativeMultiplication)();
                    Effect_Console.log("Checking 'Identity' law for Semiring multiplication")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identityMultiplication)();
                    Effect_Console.log("Checking 'Left distribution' law for Semiring")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(leftDistribution)();
                    Effect_Console.log("Checking 'Right distribution' law for Semiring")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(rightDistribution)();
                    Effect_Console.log("Checking 'Annihilation' law for Semiring")();
                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(annihiliation)();
                };
            };
        };
    };
};
module.exports = {
    checkSemiring: checkSemiring
};
