// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_Scripts = require("../Contract.Scripts/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Utils = require("../Utils/index.js");
var nftPolicy = function (v) {
    if (v instanceof Types.Bonded) {
        return Utils.jsonReader("script")($foreign["_bondedStateNFT"]);
    };
    if (v instanceof Types.Unbonded) {
        return Utils.jsonReader("script")($foreign["_unbondedStateNFT"]);
    };
    throw new Error("Failed pattern match at Scripts.StateNFT (line 23, column 1 - line 23, column 64): " + [ v.constructor.name ]);
};
var mkStateNFTPolicy = function (st) {
    return function (txInput) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Data_Argonaut_Decode_Error.showJsonDecodeError)(Control_Applicative.pure(Contract_Monad.applicativeContract)(nftPolicy(st))))(function (unappliedScript) {
            return Contract_Scripts.applyArgs()(Types_Scripts.decodeAesonMintingPolicy)(unappliedScript)([ ToData.toData(Types_Transaction.toDataTransactionInput)(txInput) ]);
        });
    };
};
module.exports = {
    mkStateNFTPolicy: mkStateNFTPolicy
};
