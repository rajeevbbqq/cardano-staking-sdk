// Generated by purs bundle 0.14.5
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var Data_Boolean = $PS["Data.Boolean"];                
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyN = function (f) {
      var go = function ($copy_n) {
          return function ($copy_acc) {
              var $tco_var_n = $copy_n;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(n, acc) {
                  if (n <= 0) {
                      $tco_done = true;
                      return acc;
                  };
                  if (Data_Boolean.otherwise) {
                      $tco_var_n = n - 1 | 0;
                      $copy_acc = f(acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Function (line 100, column 3 - line 102, column 37): " + [ n.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_n, $copy_acc);
              };
              return $tco_result;
          };
      };
      return go;
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["applyN"] = applyN;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];       
  var showUnit = {
      show: function (v) {
          return "unit";
      }
  };
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };

  exports.unsafeDelete = function (label) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if (key !== label && {}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      return copy;
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
  exports["unsafeDelete"] = $foreign.unsafeDelete;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqUnit = {
      eq: function (v) {
          return function (v1) {
              return true;
          };
      }
  };
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eq1"] = eq1;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupRecordNil = {
      appendRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return {
              append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return {
                      appendRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var showString = {
      show: $foreign.showStringImpl
  };
  var showRecordFieldsNil = {
      showRecordFields: function (v) {
          return function (v1) {
              return [  ];
          };
      }
  };
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return {
              show: function (record) {
                  var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                  if (v.length === 0) {
                      return "{}";
                  };
                  return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
              }
          };
      };
  };
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var showBoolean = {
      show: function (v) {
          if (v) {
              return "true";
          };
          if (!v) {
              return "false";
          };
          throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
      }
  };
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return {
          show: $foreign.showArrayImpl(show(dictShow))
      };
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return {
                  showRecordFields: function (v) {
                      return function (record) {
                          var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var focus = Record_Unsafe.unsafeGet(key)(record);
                          return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                      };
                  }
              };
          };
      };
  };
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return {
          show: function (v) {
              if (v instanceof Just) {
                  return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Nothing) {
                  return "Nothing";
              };
              throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
          }
      };
  };
  var semigroupMaybe = function (dictSemigroup) {
      return {
          append: function (v) {
              return function (v1) {
                  if (v instanceof Nothing) {
                      return v1;
                  };
                  if (v1 instanceof Nothing) {
                      return v;
                  };
                  if (v instanceof Just && v1 instanceof Just) {
                      return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [ v.constructor.name, v1.constructor.name ]);
              };
          }
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return {
          mempty: Nothing.value,
          Semigroup0: function () {
              return semigroupMaybe(dictSemigroup);
          }
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var monadMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Bind1: function () {
          return bindMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const callClassStaticMaybe = (classname, functionname) => maybe => input => {
    let ret = null;
    try {
      ret = lib[classname][functionname](input);
    } catch (_) {
      // ignored
    }
    if (ret == null) {
      return maybe.nothing;
    }
    return maybe.just(ret);
  };

  const callMethodParameterless = methodname => object => {
    return object[methodname]();
  };
  const callToAddress = callMethodParameterless("to_address");
  const callToBytes = callMethodParameterless("to_bytes");
  const callToBech32 = callMethodParameterless("to_bech32");
  const callNetworkId = callMethodParameterless("network_id");
  const callPaymentCred = callMethodParameterless("payment_cred");
  const callStakeCred = callMethodParameterless("stake_cred");

  exports.withStakeCredential = cbObj => stakeCred => {
    const keyhash = stakeCred.to_keyhash();
    return keyhash
      ? cbObj.onKeyHash(keyhash)
      : cbObj.onScriptHash(stakeCred.to_scripthash());
  };

  exports.keyHashCredential = lib.StakeCredential.from_keyhash;
  exports.scriptHashCredential = lib.StakeCredential.from_scripthash;

  exports.addressBytes = callToBytes;     
  exports.stakeCredentialToBytes = callToBytes;

  exports.addressBech32 = callToBech32;
  exports._addressNetworkId = toAdt => addr => {
    return toAdt(callNetworkId(addr));
  };

  exports._addressFromBytes = callClassStaticMaybe("Address", "from_bytes");

  exports._addressFromBech32 = callClassStaticMaybe("Address", "from_bech32");

  exports._baseAddressFromAddress = callClassStaticMaybe(
    "BaseAddress",
    "from_address"
  );
  exports._enterpriseAddressFromAddress = callClassStaticMaybe(
    "EnterpriseAddress",
    "from_address"
  );
  exports._pointerAddressFromAddress = callClassStaticMaybe(
    "PointerAddress",
    "from_address"
  );
  exports._rewardAddressFromAddress = callClassStaticMaybe(
    "RewardAddress",
    "from_address"
  );

  exports.baseAddressToAddress = callToAddress; 
  exports.enterpriseAddressToAddress = callToAddress;
  exports.pointerAddressToAddress = callToAddress;
  exports.rewardAddressToAddress = callToAddress;

  exports.baseAddressPaymentCred = callPaymentCred;
  exports.rewardAddressPaymentCred = callPaymentCred;
  exports.enterpriseAddressPaymentCred = callPaymentCred;
  exports.pointerAddressPaymentCred = callPaymentCred;

  exports.baseAddressDelegationCred = callStakeCred;

  exports.pointerAddressStakePointer = pa => {
    const pointerForeign = pa.stake_pointer();
    return {
      slot: pointerForeign.slot_bignum(),
      txIx: pointerForeign.tx_index_bignum(),
      certIx: pointerForeign.cert_index_bignum(),
    };
  };

  exports._enterpriseAddress = netIdToInt => inpRec => {
    return lib.EnterpriseAddress.new(
      netIdToInt(inpRec.network),
      inpRec.paymentCred
    );
  };

  exports._rewardAddress = netIdToInt => inpRec => {
    return lib.RewardAddress.new(netIdToInt(inpRec.network), inpRec.paymentCred);
  };

  exports._baseAddress = netIdToInt => inpRec => {
    return lib.BaseAddress.new(
      netIdToInt(inpRec.network),
      inpRec.paymentCred,
      inpRec.delegationCred
    );
  };

  exports._pointerAddress = netIdToInt => inpRec => {
    const p = inpRec.stakePointer;
    const pointerForeign = lib.Pointer.new_pointer(p.slot, p.txIx, p.certIx);
    return lib.PointerAddress.new(
      netIdToInt(inpRec.network),
      inpRec.paymentCred,
      pointerForeign
    );
  };
})(PS["Serialization.Address"] = PS["Serialization.Address"] || {});
(function(exports) {
  // parseJsonExtractingIntegers
  //   :: String -> {patchedPayload :: String, numberIndex :: Array String}
  exports.parseJsonExtractingIntegers = str => {
      const [patchedPayload, numberIndex] = parseJsonExtractingIntegers(str);
      return {patchedPayload, numberIndex};
  };

  exports.stringifyAeson_ = numberIndex => originalObject => {
      const fatal = msg => {
          throw new Error("Error in stringifyObject: " + msg);
      };

      let res = '';

      // Recursively iterate over object fields.
      // TODO: use a trampoline?
      const go = object => {
          if (object === null || typeof object == 'string' || typeof object == 'boolean') {
              res += JSON.stringify(object);
          } else if (object instanceof Array) {
              res += '[';
              object.forEach((elem, ix) => {
                  go(elem);
                  if (ix != object.length - 1) {
                      res += ',';
                  }
              });
              res += ']';
          } else if (typeof object == 'object') {
              res += '{';
              let keys = [];
              for (let key in object) {
                  if (object.hasOwnProperty(key)) {
                      keys.push(key);
                  }
              };
              keys.sort(); // for stability of Eq instance
              keys.forEach((key, ix) => {
                  res += JSON.stringify(key);
                  res += ':';
                  go(object[key]);
                  if (ix != keys.length - 1) {
                      res += ',';
                  }
              });
              res += '}';
          } else if (typeof object == 'number') {
              if (object in numberIndex) {
                  res += numberIndex[object];
              } else {
                  fatal("No such index in numberIndex!");
              }
          } else {
              fatal("Wrong type of object: " + typeof object);
          }
      };

      go(originalObject);
      return res;
  };

  // NOTE: For a general overview of this function's purpose,
  //       consult module docstring in Aeson.purs
  const parseJsonExtractingIntegers = str => {
      const s = String(str);

      const index = [];
      let counter = 0;
      let numberAcc = [];

      const arr = [];
      let in_number = false;
      let in_string = false;
      let escaped = -1;

      for (let i = 0, n = s.length; i < n; ++i) {
          const c = s[i];
          // set the escape flag
          if (in_string && escaped!=i){
              if (c == "\\"){
                  escaped = i+1;
              }
          }
          // set in_string flag
          if (c == '"' && escaped!=i) {
              in_string = !in_string;
          }
          // set in_number flag and quote numbers
          if(!in_string){
              if (c >= '0' && c <= '9' || c == '-') {
                  if (!in_number) {
                      // push a number index in place of a number
                      arr.push((counter++).toString());
                  }
                  in_number=true;
              }
              // assuming a number can only end with:
              if (c == ',' || c == '}' || c == ']' || /\s/.test(c)){
                  if (in_number) {
                      // push the accumulated number string into the
                      // number index
                      index.push(numberAcc.join(''));
                      numberAcc = [];
                  }
                  in_number=false;
              }
          }
          // push char if in string or is not a whitespace
          if (in_number) {
              numberAcc.push(c);
          } else if (in_string || !/\s/.test(c)) {
              arr.push(c);
          }
      }

      // single number case
      if (in_number) {
          index.push(numberAcc.join(''));
      }

      return [arr.join(''), index];
  };
})(PS["Aeson"] = PS["Aeson"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var altArray = {
      alt: Data_Semigroup.append(Data_Semigroup.semigroupArray),
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];
  var Data_Unit = $PS["Data.Unit"];
  var lazyFn = {
      defer: function (f) {
          return function (x) {
              return f(Data_Unit.unit)(x);
          };
      }
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["fix"] = fix;
  exports["lazyFn"] = lazyFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return {
              show: function (v) {
                  return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              }
          };
      };
  };
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return {
              append: function (v) {
                  return function (v1) {
                      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                  };
              }
          };
      };
  };
  var functorTuple = {
      map: function (f) {
          return function (m) {
              return new Tuple(m.value0, f(m.value1));
          };
      }
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["whenM"] = whenM;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return {
              show: function (v) {
                  if (v instanceof Left) {
                      return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
                  };
                  if (v instanceof Right) {
                      return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
                  };
                  throw new Error("Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var applyEither = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return new Left(v.value0);
              };
              if (v instanceof Right) {
                  return Data_Functor.map(functorEither)(v.value0)(v1);
              };
              throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  var bindEither = {
      bind: either(function (e) {
          return function (v) {
              return new Left(e);
          };
      })(function (a) {
          return function (f) {
              return f(a);
          };
      }),
      Apply0: function () {
          return applyEither;
      }
  };
  var applicativeEither = {
      pure: Right.create,
      Apply0: function () {
          return applyEither;
      }
  };
  var monadEither = {
      Applicative0: function () {
          return applicativeEither;
      },
      Bind1: function () {
          return bindEither;
      }
  };
  var altEither = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["showEither"] = showEither;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };                                                                               
  var showError = {
      show: $foreign.showErrorImpl
  };
  exports["throw"] = $$throw;
  exports["showError"] = showError;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowEither = {
      throwError: Data_Either.Left.create,
      Monad0: function () {
          return Data_Either.monadEither;
      }
  };
  var monadThrowEffect = {
      throwError: Effect_Exception.throwException,
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var monadErrorEither = {
      catchError: function (v) {
          return function (v1) {
              if (v instanceof Data_Either.Left) {
                  return v1(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return new Data_Either.Right(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      MonadThrow0: function () {
          return monadThrowEither;
      }
  };
  var monadErrorEffect = {
      catchError: Data_Function.flip(Effect_Exception.catchException),
      MonadThrow0: function () {
          return monadThrowEffect;
      }
  };
  var liftMaybe = function (dictMonadThrow) {
      return function (error) {
          return Data_Maybe.maybe(throwError(dictMonadThrow)(error))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0()));
      };
  };
  var liftEither = function (dictMonadThrow) {
      return Data_Either.either(throwError(dictMonadThrow))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0()));
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["try"] = $$try;
  exports["liftMaybe"] = liftMaybe;
  exports["liftEither"] = liftEither;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadThrowEffect"] = monadThrowEffect;
  exports["monadErrorEffect"] = monadErrorEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var monadTransStateT = {
      lift: function (dictMonad) {
          return function (m) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
                  });
              };
          };
      }
  };
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadEffectState = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
              var $111 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($112) {
                  return $110($111($112));
              };
          })(),
          Monad0: function () {
              return monadStateT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              return StateT((function () {
                  var $113 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($114) {
                      return $113(f($114));
                  };
              })());
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return {
          throwError: function (e) {
              return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          },
          Monad0: function () {
              return monadStateT(dictMonadThrow.Monad0());
          }
      };
  };
  var monadErrorStateT = function (dictMonadError) {
      return {
          catchError: function (v) {
              return function (h) {
                  return function (s) {
                      return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                          var v1 = h(e);
                          return v1(s);
                      });
                  };
              };
          },
          MonadThrow0: function () {
              return monadThrowStateT(dictMonadError.MonadThrow0());
          }
      };
  };
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadThrowStateT"] = monadThrowStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare(EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = Object.keys(a);
        var bkeys = Object.keys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [ v.constructor.name ]);
  };
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringRecordNil = {
      addRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      },
      mulRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      },
      oneRecord: function (v) {
          return function (v1) {
              return {};
          };
      },
      zeroRecord: function (v) {
          return function (v1) {
              return {};
          };
      }
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function (dictRowToList) {
      return function (dictSemiringRecord) {
          return {
              add: addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
              mul: mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
              one: oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
              zero: zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return {
                      addRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                              };
                          };
                      },
                      mulRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                              };
                          };
                      },
                      oneRecord: function (v) {
                          return function (v1) {
                              var tail = oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(one(dictSemiring))(tail);
                          };
                      },
                      zeroRecord: function (v) {
                          return function (v1) {
                              var tail = zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(zero(dictSemiring))(tail);
                          };
                      }
                  };
              };
          };
      };
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordRecordNil = {
      compareRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Ordering.EQ.value;
              };
          };
      },
      EqRecord0: function () {
          return Data_Eq.eqRowNil;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function (dictRowToList) {
      return function (dictOrdRecord) {
          return {
              compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
              Eq0: function () {
                  return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
              }
          };
      };
  };
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $52 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($52) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var ordRecordCons = function (dictOrdRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return {
                      compareRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                  var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                                  if ($58) {
                                      return left;
                                  };
                                  return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              };
                          };
                      },
                      EqRecord0: function () {
                          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                      }
                  };
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $62 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($62) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["compare"] = compare;
  exports["compare1"] = compare1;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["between"] = between;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports["while"] = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];      
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a,
                      b: b
                  });
              };
          };
      };
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["tailRecM2"] = tailRecM2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var functorST = {
      map: $foreign.map_
  };
  var monadST = {
      Applicative0: function () {
          return applicativeST;
      },
      Bind1: function () {
          return bindST;
      }
  };
  var bindST = {
      bind: $foreign.bind_,
      Apply0: function () {
          return applyST;
      }
  };
  var applyST = {
      apply: Control_Monad.ap(monadST),
      Functor0: function () {
          return functorST;
      }
  };
  var applicativeST = {
      pure: $foreign.pure_,
      Apply0: function () {
          return applyST;
      }
  };
  var monadRecST = {
      tailRecM: function (f) {
          return function (a) {
              var isLooping = function (v) {
                  if (v instanceof Control_Monad_Rec_Class.Loop) {
                      return true;
                  };
                  return false;
              };
              var fromDone = function (v) {
                  if (v instanceof Control_Monad_Rec_Class.Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 69, column 32 - line 69, column 46): " + [ v.constructor.name ]);
              };
              return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function (r) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return Control_Bind.bind(bindST)(f(v.value0))(function (e) {
                              return Data_Functor["void"](functorST)($foreign.write(e)(r));
                          });
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
                      };
                      throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 61, column 18 - line 65, column 28): " + [ v.constructor.name ]);
                  })))(function () {
                      return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
                  });
              });
          };
      },
      Monad0: function () {
          return monadST;
      }
  };
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadRecST"] = monadRecST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var Control_Alt = $PS["Control.Alt"];                  
  var plusArray = {
      empty: [  ],
      Alt0: function () {
          return Control_Alt.altArray;
      }
  };
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var First = function (x) {
      return x;
  };
  var semigroupFirst = {
      append: function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Just) {
                  return v;
              };
              return v1;
          };
      }
  };
  var monoidFirst = {
      mempty: Data_Maybe.Nothing.value,
      Semigroup0: function () {
          return semigroupFirst;
      }
  };
  exports["First"] = First;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var monoidRecordNil = {
      memptyRecord: function (v) {
          return {};
      },
      SemigroupRecord0: function () {
          return Data_Semigroup.semigroupRecordNil;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return {
              mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
              Semigroup0: function () {
                  return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
              }
          };
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return {
                      memptyRecord: function (v) {
                          var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(mempty(dictMonoid))(tail);
                      },
                      SemigroupRecord0: function () {
                          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                      }
                  };
              };
          };
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["mempty"] = mempty;
  exports["guard"] = guard;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return {
          ff: function (v) {
              return ff(dictHeytingAlgebra);
          },
          tt: function (v) {
              return tt(dictHeytingAlgebra);
          },
          implies: function (f) {
              return function (g) {
                  return function (a) {
                      return implies(dictHeytingAlgebra)(f(a))(g(a));
                  };
              };
          },
          conj: function (f) {
              return function (g) {
                  return function (a) {
                      return conj(dictHeytingAlgebra)(f(a))(g(a));
                  };
              };
          },
          disj: function (f) {
              return function (g) {
                  return function (a) {
                      return disj(dictHeytingAlgebra)(f(a))(g(a));
                  };
              };
          },
          not: function (f) {
              return function (a) {
                  return not(dictHeytingAlgebra)(f(a));
              };
          }
      };
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupConj(dictHeytingAlgebra);
          }
      };
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Dual"] = $PS["Data.Monoid.Dual"] || {};
  var exports = $PS["Data.Monoid.Dual"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (dictSemigroup) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Semigroup.append(dictSemigroup)(v1)(v);
              };
          }
      };
  };
  var monoidDual = function (dictMonoid) {
      return {
          mempty: Data_Monoid.mempty(dictMonoid),
          Semigroup0: function () {
              return semigroupDual(dictMonoid.Semigroup0());
          }
      };
  };
  exports["Dual"] = Dual;
  exports["monoidDual"] = monoidDual;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Endo"] = $PS["Data.Monoid.Endo"] || {};
  var exports = $PS["Data.Monoid.Endo"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return {
          append: function (v) {
              return function (v1) {
                  return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
              };
          }
      };
  };
  var monoidEndo = function (dictCategory) {
      return {
          mempty: Control_Category.identity(dictCategory),
          Semigroup0: function () {
              return semigroupEndo(dictCategory.Semigroupoid0());
          }
      };
  };
  exports["Endo"] = Endo;
  exports["monoidEndo"] = monoidEndo;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var wrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap();
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["alaF"] = alaF;
  exports["over"] = over;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = $PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = $PS["Data.Monoid.Endo"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var oneOfMap = function (dictFoldable) {
      return function (dictPlus) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $314 = Control_Alt.alt(dictPlus.Alt0());
                  return function ($315) {
                      return $314(f($315));
                  };
              })())(Control_Plus.empty(dictPlus));
          };
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $164 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($164) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var foldableTuple = {
      foldr: function (f) {
          return function (z) {
              return function (v) {
                  return f(v.value1)(z);
              };
          };
      },
      foldl: function (f) {
          return function (z) {
              return function (v) {
                  return f(z)(v.value1);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return f(v.value1);
              };
          };
      }
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))((function () {
                      var $320 = Data_Function.flip(c);
                      return function ($321) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($320($321)));
                      };
                  })())(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($322) {
                      return Data_Monoid_Endo.Endo(c($322));
                  })(xs))(u);
              };
          };
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              var $323 = Data_Newtype.unwrap();
              var $324 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                  var $305 = Data_Eq.eq(dictEq)(a)(v.value0);
                  if ($305) {
                      return new Data_Maybe.Just(v.value1);
                  };
                  return Data_Maybe.Nothing.value;
              });
              return function ($325) {
                  return $323($324($325));
              };
          };
      };
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (b0) {
                  return foldl(dictFoldable)(function (b) {
                      return function (a) {
                          return Control_Bind.bind(dictMonad.Bind1())(b)(Data_Function.flip(f)(a));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(b0));
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldlDefault"] = foldlDefault;
  exports["fold"] = fold;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["oneOfMap"] = oneOfMap;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["find"] = find;
  exports["maximumBy"] = maximumBy;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["lookup"] = lookup;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableTuple"] = foldableTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var arr = Data_Array_ST["new"]();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $99 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $100 = $foreign.any(function (v) {
                              return eq(v)(x);
                          });
                          return function ($101) {
                              return $99($100($101));
                          };
                      })())(Data_Array_ST.unsafeFreeze(arr))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(arr)();
          })();
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $74 = p(v.value0);
                      if ($74) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 966, column 5 - line 968, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 953, column 3 - line 959, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $102 = (function (dictPartial) {
                                  var $104 = Data_Maybe.fromJust();
                                  return function ($105) {
                                      return $104(last($105));
                                  };
                              })();
                              return function ($103) {
                                  return Data_Tuple.snd($102($103));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var foldMap = function (dictMonoid) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid);
  };
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                              
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(foldl(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["elemIndex"] = elemIndex;
  exports["find"] = find;
  exports["findIndex"] = findIndex;
  exports["updateAt"] = updateAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldr"] = foldr;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["nub"] = nub;
  exports["union"] = union;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["slice"] = $foreign.slice;
  exports["any"] = $foreign.any;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableTuple = {
      traverse: function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
              };
          };
      },
      sequence: function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
          };
      },
      Functor0: function () {
          return Data_Tuple.functorTuple;
      },
      Foldable1: function () {
          return Data_Foldable.foldableTuple;
      }
  };
  var traversableMaybe = {
      traverse: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      },
      sequence: function (dictApplicative) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name ]);
          };
      },
      Functor0: function () {
          return Data_Maybe.functorMaybe;
      },
      Foldable1: function () {
          return Data_Foldable.foldableMaybe;
      }
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableTuple"] = traversableTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var traverseWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  var $164 = Control_Apply.applySecond(dictApplicative.Apply0());
                  var $165 = f(i);
                  return function ($166) {
                      return $164($165($166));
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var forWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = {
      foldrWithIndex: function (f) {
          return function (z) {
              var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z);
              var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($169) {
                  return $167($168($169));
              };
          };
      },
      foldlWithIndex: function (f) {
          return function (z) {
              var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z);
              var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($172) {
                  return $170($171($172));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
      },
      Foldable0: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["forWithIndex_"] = forWithIndex_;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
      traverseWithIndex: function (dictApplicative) {
          return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
      },
      FunctorWithIndex0: function () {
          return Data_FunctorWithIndex.functorWithIndexArray;
      },
      FoldableWithIndex1: function () {
          return Data_FoldableWithIndex.foldableWithIndexArray;
      },
      Traversable2: function () {
          return Data_Traversable.traversableArray;
      }
  };
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($38) {
          return $36($37($38));
      };
  };                                                                
  var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
  var thawST = $foreign["_copyST"];
  var showObject = function (dictShow) {
      return {
          show: function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
          }
      };
  };
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = {
      map: function (f) {
          return function (m) {
              return $foreign["_fmapObject"](m, f);
          };
      }
  };
  var functorWithIndexObject = {
      mapWithIndex: mapWithKey,
      Functor0: function () {
          return functorObject;
      }
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = {
      foldl: function (f) {
          return fold(function (z) {
              return function (v) {
                  return f(z);
              };
          });
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return foldMap(dictMonoid)(Data_Function["const"](f));
          };
      }
  };
  var foldableWithIndexObject = {
      foldlWithIndex: function (f) {
          return fold(Data_Function.flip(f));
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMap(dictMonoid);
      },
      Foldable0: function () {
          return foldableObject;
      }
  };
  var traversableWithIndexObject = {
      traverseWithIndex: function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return fold(function (acc) {
                      return function (k) {
                          return function (v) {
                              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                          };
                      };
                  })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
              };
          };
      },
      FunctorWithIndex0: function () {
          return functorWithIndexObject;
      },
      FoldableWithIndex1: function () {
          return foldableWithIndexObject;
      },
      Traversable2: function () {
          return traversableObject;
      }
  };
  var traversableObject = {
      traverse: function (dictApplicative) {
          var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
          return function ($44) {
              return $43(Data_Function["const"]($44));
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorObject;
      },
      Foldable1: function () {
          return foldableObject;
      }
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["functorObject"] = functorObject;
  exports["traversableObject"] = traversableObject;
  exports["showObject"] = showObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var ordJson = {
      compare: function (a) {
          return function (b) {
              return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
          };
      },
      Eq0: function () {
          return eqJson;
      }
  };
  var eqJson = {
      eq: function (j1) {
          return function (j2) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
          };
      }
  };
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);
  var caseJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  var caseJson = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (json) {
                              return $foreign["_caseJson"](a, b, c, d, e, f, json);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["caseJson"] = caseJson;
  exports["caseJsonBoolean"] = caseJsonBoolean;
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["toArray"] = toArray;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["eqJson"] = eqJson;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var showJsonDecodeError = {
      show: function (v) {
          if (v instanceof TypeMismatch) {
              return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          };
          if (v instanceof UnexpectedValue) {
              return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
          };
          if (v instanceof AtIndex) {
              return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof AtKey) {
              return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof Named) {
              return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof MissingValue) {
              return "MissingValue";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
      }
  };
  var printJsonDecodeError = function (err) {
      var go = function (v) {
          if (v instanceof TypeMismatch) {
              return "  Expected value of type '" + (v.value0 + "'.");
          };
          if (v instanceof UnexpectedValue) {
              return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
          };
          if (v instanceof AtIndex) {
              return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
          };
          if (v instanceof AtKey) {
              return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof Named) {
              return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof MissingValue) {
              return "  No value was found.";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
      };
      return "An error occurred while decoding a JSON value:\x0a" + go(err);
  };
  var eqJsonDecodeError = {
      eq: function (x) {
          return function (y) {
              if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
                  return x.value0 === y.value0;
              };
              if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
                  return Data_Eq.eq(Data_Argonaut_Core.eqJson)(x.value0)(y.value0);
              };
              if (x instanceof AtIndex && y instanceof AtIndex) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof AtKey && y instanceof AtKey) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof Named && y instanceof Named) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof MissingValue && y instanceof MissingValue) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["UnexpectedValue"] = UnexpectedValue;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["printJsonDecodeError"] = printJsonDecodeError;
  exports["eqJsonDecodeError"] = eqJsonDecodeError;
  exports["showJsonDecodeError"] = showJsonDecodeError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifunctorTuple = {
      bimap: function (f) {
          return function (g) {
              return function (v) {
                  return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
              };
          };
      }
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;                          

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["ceil"] = $foreign.ceil;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["trunc"] = $foreign.trunc;
  exports["remainder"] = $foreign.remainder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var decimal = 10;
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  exports["fromNumber"] = fromNumber;
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["decimal"] = decimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Foreign_Object = $PS["Foreign.Object"];
  var getField = function (decoder) {
      return function (obj) {
          return function (str) {
              return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                  var $18 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($19) {
                      return $18(decoder($19));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function ($55) {
          return $54(Data_Int.fromNumber($55));
      };
  })())(decodeNumber);
  var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeBoolean"] = decodeBoolean;
  exports["decodeInt"] = decodeInt;
  exports["decodeString"] = decodeString;
  exports["decodeArray"] = decodeArray;
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var decodeJsonString = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeString
  };
  var decodeJsonJson = {
      decodeJson: Data_Either.Right.create
  };
  var decodeJsonInt = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeInt
  };
  var decodeJsonBoolean = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeBoolean
  };
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeArray = function (dictDecodeJson) {
      return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson))
      };
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonBoolean"] = decodeJsonBoolean;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];   
  var encodeUnit = Data_Function["const"](Data_Argonaut_Core.jsonNull);
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeNumber = Data_Argonaut_Core.fromNumber;
  var encodeInt = function ($48) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($48));
  };
  var encodeBoolean = Data_Argonaut_Core.fromBoolean;
  exports["encodeUnit"] = encodeUnit;
  exports["encodeBoolean"] = encodeBoolean;
  exports["encodeNumber"] = encodeNumber;
  exports["encodeInt"] = encodeInt;
  exports["encodeString"] = encodeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var encodeJsonJString = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeString
  };
  var encodeJsonJNumber = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeNumber
  };
  var encodeJsonJBoolean = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeBoolean
  };
  var encodeJsonInt = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeInt
  };
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  
  var bigInt =require("big-integer"); 

  exports.fromBaseImpl = function(just) {
    return function(nothing) {
      return function(b) {
        return function(s) {
          try {
            var x = bigInt(s, b);
            return just(x);
          } catch (err) {
            return nothing;
          }
        };
      };
    };
  };

  function truncate(n) {
    if (n > 0) return Math.floor(n);
    return Math.ceil(n);
  }

  exports.fromNumberImpl = function(just) {
    return function(nothing) {
        return function(n) {
          try {
            var x = bigInt(truncate(n));
            return just(x);
          } catch (err) {
            return nothing;
          }
        };
    };
  };

  exports.fromInt = function(n) {
    return bigInt(n);
  };

  exports.toBase = function(base) {
    return function (x) {
      return x.toString(base);
    };
  };

  exports.toNumber = function(x) {
    return x.toJSNumber();
  };

  exports.biAdd = function(x) {
    return function(y) {
      return x.add(y);
    };
  };

  exports.biMul = function(x) {
    return function(y) {
      return x.multiply(y);
    };
  };

  exports.biSub = function(x) {
    return function(y) {
      return x.minus(y);
    };
  };

  exports.biMod = function(x) {
    return function(y) {
      return x.mod(y);
    };
  };

  exports.biDiv = function(x) {
    return function(y) {
      return x.divide(y);
    };
  };

  exports.biEquals = function(x) {
    return function(y) {
      return x.equals(y);
    };
  };

  exports.biCompare = function(x) {
    return function(y) {
      return x.compare(y);
    };
  };

  exports.abs = function(x) {
    return x.abs();
  };
})(PS["Data.BigInt"] = PS["Data.BigInt"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $8 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($8) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.BigInt"] = $PS["Data.BigInt"] || {};
  var exports = $PS["Data.BigInt"];
  var $foreign = $PS["Data.BigInt"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                                                
  var toString = $foreign.toBase(10);
  var toInt = function ($4) {
      return Data_Int.fromNumber($foreign.toNumber($4));
  };                                      
  var showBigInt = {
      show: function (x) {
          return "fromString \"" + (toString(x) + "\"");
      }
  };
  var semiringBigInt = {
      add: $foreign.biAdd,
      zero: $foreign.fromInt(0),
      mul: $foreign.biMul,
      one: $foreign.fromInt(1)
  };
  var ringBigInt = {
      sub: $foreign.biSub,
      Semiring0: function () {
          return semiringBigInt;
      }
  };
  var rem = $foreign.biMod;
  var quot = $foreign.biDiv;
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromBase = $foreign.fromBaseImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromBase(10);
  var eqBigInt = {
      eq: $foreign.biEquals
  };
  var ordBigInt = {
      compare: function (x) {
          return function (y) {
              var v = $foreign.biCompare(x)(y);
              if (v === 1) {
                  return Data_Ordering.GT.value;
              };
              if (v === 0) {
                  return Data_Ordering.EQ.value;
              };
              return Data_Ordering.LT.value;
          };
      },
      Eq0: function () {
          return eqBigInt;
      }
  };
  var commutativeRingBigInt = {
      Ring0: function () {
          return ringBigInt;
      }
  };
  var euclideanRingBigInt = {
      div: function (x) {
          return function (y) {
              return $foreign.biDiv(Data_Ring.sub(ringBigInt)(x)(Data_EuclideanRing.mod(euclideanRingBigInt)(x)(y)))(y);
          };
      },
      mod: function (x) {
          return function (y) {
              var yy = $foreign.abs(y);
              return $foreign.biMod(Data_Semiring.add(semiringBigInt)($foreign.biMod(x)(yy))(yy))(yy);
          };
      },
      degree: function ($5) {
          return Data_Int.floor($foreign.toNumber($foreign.abs($5)));
      },
      CommutativeRing0: function () {
          return commutativeRingBigInt;
      }
  };
  exports["fromString"] = fromString;
  exports["fromNumber"] = fromNumber;
  exports["toString"] = toString;
  exports["quot"] = quot;
  exports["rem"] = rem;
  exports["toInt"] = toInt;
  exports["eqBigInt"] = eqBigInt;
  exports["ordBigInt"] = ordBigInt;
  exports["showBigInt"] = showBigInt;
  exports["semiringBigInt"] = semiringBigInt;
  exports["ringBigInt"] = ringBigInt;
  exports["euclideanRingBigInt"] = euclideanRingBigInt;
  exports["fromInt"] = $foreign.fromInt;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array.Partial"] = $PS["Data.Array.Partial"] || {};
  var exports = $PS["Data.Array.Partial"];
  var Data_Array = $PS["Data.Array"];                
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var functorLazy = {
      map: function (f) {
          return function (l) {
              return $foreign.defer(function (v) {
                  return f($foreign.force(l));
              });
          };
      }
  };
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Sequence.Internal"] = $PS["Data.Sequence.Internal"] || {};
  var exports = $PS["Data.Sequence.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var measuredElem = {
      measure: function (v) {
          return 1;
      }
  };
  var measure = function (dict) {
      return dict.measure;
  };
  var measuredArray = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (xs) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (i) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(i)(measure(dictMeasured)(a));
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              }
          };
      };
  };
  var measuredLazy = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (s) {
                  return measure(dictMeasured)(Data_Lazy.force(s));
              }
          };
      };
  };
  var liftElem = Unsafe_Coerce.unsafeCoerce;
  var lift2Elem = Unsafe_Coerce.unsafeCoerce;
  var getElem = function (v) {
      return v;
  };
  exports["measure"] = measure;
  exports["getElem"] = getElem;
  exports["lift2Elem"] = lift2Elem;
  exports["liftElem"] = liftElem;
  exports["measuredArray"] = measuredArray;
  exports["measuredLazy"] = measuredLazy;
  exports["measuredElem"] = measuredElem;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.FingerTree.Digit"] = $PS["Data.FingerTree.Digit"] || {};
  var exports = $PS["Data.FingerTree.Digit"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_Partial = $PS["Data.Array.Partial"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Digit = function (x) {
      return x;
  };
  var runDigit = function (v) {
      return v;
  };
  var tailDigit = (function () {
      var $14 = Data_Array_Partial.tail();
      return function ($15) {
          return $14(runDigit($15));
      };
  })();
  var overDigit = Unsafe_Coerce.unsafeCoerce;
  var snocDigit = function (dictPartial) {
      return function (dg) {
          return function (x) {
              return overDigit(function (xs) {
                  return Data_Array.snoc(xs)(x);
              })(dg);
          };
      };
  };
  var mkDigitMay = function (xs) {
      var $13 = Data_Ord.between(Data_Ord.ordInt)(1)(4)(Data_Array.length(xs));
      if ($13) {
          return new Data_Maybe.Just(xs);
      };
      return Data_Maybe.Nothing.value;
  };
  var mkDigit3 = function (x) {
      return function (y) {
          return function (z) {
              return [ x, y, z ];
          };
      };
  };
  var mkDigit2 = function (x) {
      return function (y) {
          return [ x, y ];
      };
  };
  var mkDigit1 = function (x) {
      return [ x ];
  };
  var mkDigit = function (dictPartial) {
      return Digit;
  };
  var measuredDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: (function () {
                  var $16 = Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured));
                  return function ($17) {
                      return $16(runDigit($17));
                  };
              })()
          };
      };
  };
  var lastDigit = (function () {
      var $18 = Data_Array_Partial.last();
      return function ($19) {
          return $18(runDigit($19));
      };
  })();
  var initDigit = (function () {
      var $20 = Data_Array_Partial.init();
      return function ($21) {
          return $20(runDigit($21));
      };
  })();
  var headDigit = (function () {
      var $22 = Data_Array_Partial.head();
      return function ($23) {
          return $22(runDigit($23));
      };
  })();                                        
  var foldableDigit = Data_Foldable.foldableArray;
  var digitLength = function ($26) {
      return Data_Array.length(runDigit($26));
  };
  var consDigit = function (dictPartial) {
      return function (x) {
          return function (dg) {
              return overDigit(Data_Array.cons(x))(dg);
          };
      };
  };
  exports["mkDigit"] = mkDigit;
  exports["mkDigitMay"] = mkDigitMay;
  exports["mkDigit1"] = mkDigit1;
  exports["mkDigit2"] = mkDigit2;
  exports["mkDigit3"] = mkDigit3;
  exports["runDigit"] = runDigit;
  exports["headDigit"] = headDigit;
  exports["tailDigit"] = tailDigit;
  exports["initDigit"] = initDigit;
  exports["lastDigit"] = lastDigit;
  exports["snocDigit"] = snocDigit;
  exports["consDigit"] = consDigit;
  exports["digitLength"] = digitLength;
  exports["foldableDigit"] = foldableDigit;
  exports["measuredDigit"] = measuredDigit;
})(PS);
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.FingerTree"] = $PS["Data.FingerTree"] || {};
  var exports = $PS["Data.FingerTree"];
  var Data_Array = $PS["Data.Array"];
  var Data_FingerTree_Digit = $PS["Data.FingerTree.Digit"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var Partial = $PS["Partial"];                
  var NilR = (function () {
      function NilR() {

      };
      NilR.value = new NilR();
      return NilR;
  })();
  var SnocR = (function () {
      function SnocR(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SnocR.create = function (value0) {
          return function (value1) {
              return new SnocR(value0, value1);
          };
      };
      return SnocR;
  })();
  var NilL = (function () {
      function NilL() {

      };
      NilL.value = new NilL();
      return NilL;
  })();
  var ConsL = (function () {
      function ConsL(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ConsL.create = function (value0) {
          return function (value1) {
              return new ConsL(value0, value1);
          };
      };
      return ConsL;
  })();
  var Split = (function () {
      function Split(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split(value0, value1, value2);
              };
          };
      };
      return Split;
  })();
  var Node2 = (function () {
      function Node2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Node2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Node2(value0, value1, value2);
              };
          };
      };
      return Node2;
  })();
  var Node3 = (function () {
      function Node3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Node3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Node3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Node3;
  })();
  var LazySplit = (function () {
      function LazySplit(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LazySplit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LazySplit(value0, value1, value2);
              };
          };
      };
      return LazySplit;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Single = (function () {
      function Single(value0) {
          this.value0 = value0;
      };
      Single.create = function (value0) {
          return new Single(value0);
      };
      return Single;
  })();
  var Deep = (function () {
      function Deep(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Deep(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Deep;
  })();
  var splitDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return function (p) {
              return function (i) {
                  return function (as) {
                      var v = Data_FingerTree_Digit.digitLength(as);
                      if (v === 1) {
                          return new Split([  ], Data_FingerTree_Digit.headDigit(as), [  ]);
                      };
                      var bs$prime = Data_FingerTree_Digit.tailDigit(as);
                      var bs = Data_FingerTree_Digit.mkDigit()(bs$prime);
                      var a = Data_FingerTree_Digit.headDigit(as);
                      var i$prime = Data_Semigroup.append(dictMonoid.Semigroup0())(i)(Data_Sequence_Internal.measure(dictMeasured)(a));
                      var $150 = p(i$prime);
                      if ($150) {
                          return new Split([  ], a, bs$prime);
                      };
                      var v1 = splitDigit(dictMonoid)(dictMeasured)(p)(i$prime)(bs);
                      return new Split(Data_Array.cons(a)(v1.value0), v1.value1, v1.value2);
                  };
              };
          };
      };
  };
  var nodeToDigit = (function () {
      var go = function (v) {
          if (v instanceof Node2) {
              return Data_FingerTree_Digit.mkDigit2(v.value1)(v.value2);
          };
          if (v instanceof Node3) {
              return Data_FingerTree_Digit.mkDigit3(v.value1)(v.value2)(v.value3);
          };
          throw new Error("Failed pattern match at Data.FingerTree (line 88, column 3 - line 88, column 34): " + [ v.constructor.name ]);
      };
      return go;
  })();
  var node3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return new Node3(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(b))(Data_Sequence_Internal.measure(dictMeasured)(c))), a, b, c);
                  };
              };
          };
      };
  };
  var node2 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return new Node2(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Sequence_Internal.measure(dictMeasured)(b)), a, b);
              };
          };
      };
  };
  var nodes = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              if (xs.length === 2) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]) ];
              };
              if (xs.length === 3) {
                  return [ node3(dictMonoid)(dictMeasured)(xs[0])(xs[1])(xs[2]) ];
              };
              if (xs.length === 4) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]), node2(dictMonoid)(dictMeasured)(xs[2])(xs[3]) ];
              };
              var idx = Data_Array.unsafeIndex();
              return Data_Array.cons(node3(dictMonoid)(dictMeasured)(idx(xs)(0))(idx(xs)(1))(idx(xs)(2)))(nodes(dictMonoid)(dictMeasured)(Data_Array.drop(3)(xs)));
          };
      };
  };
  var measuredNode = {
      measure: function (v) {
          if (v instanceof Node2) {
              return v.value0;
          };
          if (v instanceof Node3) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.FingerTree (line 107, column 1 - line 109, column 30): " + [ v.constructor.name ]);
      }
  };
  var measuredFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (v) {
                  if (v instanceof Empty) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Single) {
                      return Data_Sequence_Internal.measure(dictMeasured)(v.value0);
                  };
                  if (v instanceof Deep) {
                      return Data_Lazy.force(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 228, column 1 - line 232, column 37): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var lazyEmpty = Data_Lazy.defer(function (v) {
      return Empty.value;
  });
  var foldableNode = {
      foldr: function (r) {
          return function (z) {
              return function (v) {
                  if (v instanceof Node2) {
                      return r(v.value1)(r(v.value2)(z));
                  };
                  if (v instanceof Node3) {
                      return r(v.value1)(r(v.value2)(r(v.value3)(z)));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ r.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      },
      foldl: function (l) {
          return function (z) {
              return function (v) {
                  if (v instanceof Node2) {
                      return l(l(z)(v.value1))(v.value2);
                  };
                  if (v instanceof Node3) {
                      return l(l(l(z)(v.value1))(v.value2))(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ l.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return Data_Foldable.foldr(foldableNode)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      }
  };
  var foldableFingerTree = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Empty) {
                      return z;
                  };
                  if (v1 instanceof Single) {
                      return v(v1.value0)(z);
                  };
                  if (v1 instanceof Deep) {
                      var flipFoldr$prime = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                      var flipFoldr = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                      var deepFlipFoldr = Data_Function.flip(Data_Foldable.foldr(foldableFingerTree)(Data_Function.flip(Data_Foldable.foldr(foldableNode)(v))));
                      return flipFoldr$prime(v1.value1)(deepFlipFoldr(Data_Lazy.force(v1.value2))(flipFoldr(v1.value3)(z)));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Empty) {
                      return z;
                  };
                  if (v1 instanceof Single) {
                      return v(z)(v1.value0);
                  };
                  if (v1 instanceof Deep) {
                      var leftFold = Data_Foldable.foldl(Data_FingerTree_Digit.foldableDigit)(v);
                      var deepLeftFold = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)(v));
                      return leftFold(deepLeftFold(leftFold(z)(v1.value1))(Data_Lazy.force(v1.value2)))(v1.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      }
  };
  var deep = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf) {
                      return new Deep(Data_Lazy.defer(function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(pr))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(sf)));
                      }), pr, m, sf);
                  };
              };
          };
      };
  };
  var snoc = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (a) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(v.value0))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(a));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value3);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(function (v2) {
                              return snoc(dictMonoid)(measuredNode)(forcedM)(node3(dictMonoid)(dictMeasured)(v1[0])(v1[1])(v1[2]));
                          }))(Data_FingerTree_Digit.mkDigit2(v1[3])(a));
                      };
                      return deep(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.snocDigit()(v.value3)(a));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 262, column 1 - line 263, column 40): " + [ v.constructor.name, a.constructor.name ]);
              };
          };
      };
  };
  var snocAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Foldable.foldl(dictFoldable)(snoc(dictMonoid)(dictMeasured));
          };
      };
  };
  var toFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return function (s) {
                  return snocAll(dictMonoid)(dictMeasured)(dictFoldable)(Empty.value)(s);
              };
          };
      };
  };
  var viewL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilL.value;
              };
              if (v instanceof Single) {
                  return new ConsL(v.value0, lazyEmpty);
              };
              if (v instanceof Deep) {
                  return new ConsL(Data_FingerTree_Digit.headDigit(v.value1), Data_Lazy.defer(function (v1) {
                      return deepL(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.tailDigit(v.value1))(v.value2)(v.value3);
                  }));
              };
              throw new Error("Failed pattern match at Data.FingerTree (line 294, column 1 - line 295, column 50): " + [ v.constructor.name ]);
          };
      };
  };
  var deepL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr$prime) {
              return function (m) {
                  return function (sf) {
                      var v = Data_FingerTree_Digit.mkDigitMay(pr$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(v.value0)(m)(sf);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewL(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilL) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(sf);
                          };
                          if (v1 instanceof ConsL) {
                              return deep(dictMonoid)(dictMeasured)(nodeToDigit(v1.value0))(v1.value1)(sf);
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 321, column 7 - line 323, column 49): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 317, column 3 - line 323, column 49): " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var viewR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilR.value;
              };
              if (v instanceof Single) {
                  return new SnocR(lazyEmpty, v.value0);
              };
              if (v instanceof Deep) {
                  return new SnocR(Data_Lazy.defer(function (v1) {
                      return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.initDigit(v.value3));
                  }), Data_FingerTree_Digit.lastDigit(v.value3));
              };
              throw new Error("Failed pattern match at Data.FingerTree (line 343, column 1 - line 344, column 50): " + [ v.constructor.name ]);
          };
      };
  };
  var deepR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf$prime) {
                      var v = Data_FingerTree_Digit.mkDigitMay(sf$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(pr)(m)(v.value0);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewR(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilR) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(pr);
                          };
                          if (v1 instanceof SnocR) {
                              return deep(dictMonoid)(dictMeasured)(pr)(v1.value0)(nodeToDigit(v1.value1));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 357, column 7 - line 359, column 49): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 353, column 3 - line 359, column 49): " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var splitTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictPartial) {
              return function (v) {
                  return function (v1) {
                      return function (v2) {
                          if (v2 instanceof Single) {
                              return new LazySplit(lazyEmpty, v2.value0, lazyEmpty);
                          };
                          if (v2 instanceof Empty) {
                              return Partial.crashWith()("Data.FingerTree.splitTree: Empty");
                          };
                          if (v2 instanceof Deep) {
                              var vpr = Data_Semigroup.append(dictMonoid.Semigroup0())(v1)(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(v2.value1));
                              var $351 = v(vpr);
                              if ($351) {
                                  var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(v1)(v2.value1);
                                  return new LazySplit(Data_Lazy.defer(function (v4) {
                                      return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value0);
                                  }), v3.value1, Data_Lazy.defer(function (v4) {
                                      return deepL(dictMonoid)(dictMeasured)(v3.value2)(v2.value2)(v2.value3);
                                  }));
                              };
                              var vm = Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v2.value2));
                              var $356 = v(vm);
                              if ($356) {
                                  var v3 = splitTree(dictMonoid)(measuredNode)()(v)(vpr)(Data_Lazy.force(v2.value2));
                                  var v4 = splitDigit(dictMonoid)(dictMeasured)(v)(Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v3.value0)))(nodeToDigit(v3.value1));
                                  return new LazySplit(Data_Lazy.defer(function (v5) {
                                      return deepR(dictMonoid)(dictMeasured)(v2.value1)(v3.value0)(v4.value0);
                                  }), v4.value1, Data_Lazy.defer(function (v5) {
                                      return deepL(dictMonoid)(dictMeasured)(v4.value2)(v3.value2)(v2.value3);
                                  }));
                              };
                              var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(vm)(v2.value3);
                              return new LazySplit(Data_Lazy.defer(function (v4) {
                                  return deepR(dictMonoid)(dictMeasured)(v2.value1)(v2.value2)(v3.value0);
                              }), v3.value1, Data_Lazy.defer(function (v4) {
                                  return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value2);
                              }));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 428, column 1 - line 429, column 70): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var cons = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (v) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(a))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(v.value0));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value1);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit2(a)(v1[0]))(Data_Lazy.defer(function (v2) {
                              return cons(dictMonoid)(measuredNode)(node3(dictMonoid)(dictMeasured)(v1[1])(v1[2])(v1[3]))(forcedM);
                          }))(v.value3);
                      };
                      var pr$prime = Data_FingerTree_Digit.consDigit()(a)(v.value1);
                      return deep(dictMonoid)(dictMeasured)(pr$prime)(v.value2)(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 234, column 1 - line 235, column 40): " + [ a.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var consAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(cons(dictMonoid)(dictMeasured)));
          };
      };
  };
  var app3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (ts) {
                  return function (v1) {
                      if (v instanceof Empty) {
                          return consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1);
                      };
                      if (v1 instanceof Empty) {
                          return snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts);
                      };
                      if (v instanceof Single) {
                          return cons(dictMonoid)(dictMeasured)(v.value0)(consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1));
                      };
                      if (v1 instanceof Single) {
                          return snoc(dictMonoid)(dictMeasured)(snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts))(v1.value0);
                      };
                      if (v instanceof Deep && v1 instanceof Deep) {
                          var computeM$prime = function (v2) {
                              return app3(dictMonoid)(measuredNode)(Data_Lazy.force(v.value2))(nodes(dictMonoid)(dictMeasured)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_FingerTree_Digit.runDigit(v.value3))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ts)(Data_FingerTree_Digit.runDigit(v1.value1)))))(Data_Lazy.force(v1.value2));
                          };
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(computeM$prime))(v1.value3);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 372, column 1 - line 373, column 70): " + [ v.constructor.name, ts.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var append = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              return function (ys) {
                  return app3(dictMonoid)(dictMeasured)(xs)([  ])(ys);
              };
          };
      };
  };
  exports["Empty"] = Empty;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["append"] = append;
  exports["splitTree"] = splitTree;
  exports["foldableFingerTree"] = foldableFingerTree;
  exports["measuredFingerTree"] = measuredFingerTree;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
  var exports = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Additive = function (x) {
      return x;
  };
  var semigroupAdditive = function (dictSemiring) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Semiring.add(dictSemiring)(v)(v1);
              };
          }
      };
  };
  var monoidAdditive = function (dictSemiring) {
      return {
          mempty: Data_Semiring.zero(dictSemiring),
          Semigroup0: function () {
              return semigroupAdditive(dictSemiring);
          }
      };
  };
  exports["Additive"] = Additive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Sequence"] = $PS["Data.Sequence"] || {};
  var exports = $PS["Data.Sequence"];
  var Data_FingerTree = $PS["Data.FingerTree"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var unsafeIndex = function (dictPartial) {
      return function (i) {
          return function (v) {
              var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)()(function (n) {
                  return i < Data_Newtype.unwrap()(n);
              })(0)(v);
              return Data_Sequence_Internal.getElem(v1.value1);
          };
      };
  };
  var snoc = function (v) {
      return function (x) {
          return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(x);
      };
  };
  var length = function (v) {
      return Data_Newtype.un()(Data_Monoid_Additive.Additive)(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem))(v));
  };
  var inBounds = function (i) {
      return function (seq) {
          return 0 <= i && i < length(seq);
      };
  };
  var index = function (i) {
      return function (xs) {
          var $85 = inBounds(i)(xs);
          if ($85) {
              return Data_Maybe.Just.create(unsafeIndex()(i)(xs));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var foldableSeq = {
      foldr: function (f) {
          return function (z) {
              return function (v) {
                  return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
              };
          };
      },
      foldl: function (f) {
          return function (z) {
              return function (v) {
                  return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
              };
          };
      }
  };
  var empty = Data_FingerTree.Empty.value;
  var cons = function (x) {
      return function (v) {
          return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(x)(v);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(empty);
  };
  var singleton = function (x) {
      return cons(x)(empty);
  };
  var append = function (v) {
      return function (v1) {
          return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(v1);
      };
  };
  var semigroupSeq = {
      append: append
  };
  var monoidSeq = {
      mempty: empty,
      Semigroup0: function () {
          return semigroupSeq;
      }
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable"] = fromFoldable;
  exports["length"] = length;
  exports["index"] = index;
  exports["monoidSeq"] = monoidSeq;
  exports["foldableSeq"] = foldableSeq;
})(PS);
(function(exports) {
  "use strict";

  exports.from = function (val) {
      return val >>> 0;
  };

  exports.exact = function (just) {
      return function (nothing) {
          return function (conv) {
              return function (val) {
                  var cval = conv(val);
                  if (cval == val) {
                      return just(cval);
                  }
                  return nothing;
              };
          };
      };
  };

  exports.toInt = function (uval) {
      return uval | 0;
  };

  exports.uintAdd = function (x) {
      return function (y) {
          return (x + y) >>> 0;
      };
  };

  exports.uintMul = function (x) {
      return function (y) {
          return Math.imul(x, y) >>> 0;
      };
  };

  exports.uintEq = function (x) {
      return function (y) {
          return x == y;
      };
  };

  exports.uintCmp = function (lt) {
      return function (eq) {
          return function (gt) {
              return function (x) {
                  return function (y) {
                      if (x < y) return lt;
                      if (x === y) return eq;
                      return gt;
                  };
              };
          };
      };
  };

  exports.fromStringImpl = function (s) {
      var n = Number(s);
      if (n === parseInt(s)) {
          return n;
      }
      return NaN;
  };

  exports.toString = function (x) {
      return x.toString();
  };

  exports.and = function (n1) {
      return function (n2) {
          return (n1 & n2) >>> 0;
      };
  };

  exports.or = function (n1) {
      return function (n2) {
          return (n1 | n2) >>> 0;
      };
  };

  exports.shl = function (n1) {
      return function (n2) {
          return (n1 << n2) >>> 0;
      };
  };

  exports.zshr = function (n1) {
      return function (n2) {
          return (n1 >>> n2) >>> 0;
      };
  };
})(PS["Data.UInt"] = PS["Data.UInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.UInt"] = $PS["Data.UInt"] || {};
  var exports = $PS["Data.UInt"];
  var $foreign = $PS["Data.UInt"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var uintShowInstance = {
      show: function (u) {
          return $foreign.toString(u) + "u";
      }
  };
  var uintEqInstance = {
      eq: $foreign.uintEq
  };
  var uintOrd = {
      compare: $foreign.uintCmp(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return uintEqInstance;
      }
  };                                                                                                 
  var fromNumber = $foreign.from;
  var fromNumber$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromNumber);
  var fromString = function ($2) {
      return fromNumber$prime($foreign.fromStringImpl($2));
  };
  var fromInt = $foreign.from;
  var fromInt$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromInt);
  var uintSemiring = {
      zero: fromInt(0),
      add: $foreign.uintAdd,
      one: fromInt(1),
      mul: $foreign.uintMul
  };
  exports["fromInt"] = fromInt;
  exports["fromInt'"] = fromInt$prime;
  exports["fromNumber'"] = fromNumber$prime;
  exports["fromString"] = fromString;
  exports["uintSemiring"] = uintSemiring;
  exports["uintEqInstance"] = uintEqInstance;
  exports["uintOrd"] = uintOrd;
  exports["uintShowInstance"] = uintShowInstance;
  exports["toInt"] = $foreign.toInt;
  exports["and"] = $foreign.and;
  exports["or"] = $foreign.or;
  exports["shl"] = $foreign.shl;
  exports["zshr"] = $foreign.zshr;
  exports["toString"] = $foreign.toString;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var set = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var merge = function (dictUnion) {
      return function (dictNub) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  var $$delete = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (r) {
                      return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
                  };
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["merge"] = merge;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictMonadAsk) {
      return function (f) {
          return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
      };
  };
  exports["ask"] = ask;
  exports["asks"] = asks;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return {
          ask: Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
          Monad0: function () {
              return monadExceptT(dictMonadAsk.Monad0());
          }
      };
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
              var $96 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($97) {
                  return $95($96($97));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadStateExceptT = function (dictMonadState) {
      return {
          state: function (f) {
              return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          },
          Monad0: function () {
              return monadExceptT(dictMonadState.Monad0());
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var monadErrorExceptT = function (dictMonad) {
      return {
          catchError: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                      var v1 = k(a);
                      return v1;
                  })((function () {
                      var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($106) {
                          return $105(Data_Either.Right.create($106));
                      };
                  })()));
              };
          },
          MonadThrow0: function () {
              return monadThrowExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return {
          map: function (f) {
              return function (m) {
                  return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
              };
          }
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return {
          foldMap: function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
                  };
              };
          },
          foldl: function (f) {
              return function (b) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
                  };
              };
          },
          foldr: function (f) {
              return function (b) {
                  return function (v) {
                      return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
                  };
              };
          }
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var monoidList = {
      mempty: Nil.value,
      Semigroup0: function () {
          return semigroupList;
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var traversableList = {
      traverse: function (dictApplicative) {
          return function (f) {
              var $222 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
              var $223 = Data_Foldable.foldl(foldableList)(function (acc) {
                  var $225 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                  return function ($226) {
                      return $225(f($226));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value));
              return function ($224) {
                  return $222($223($224));
              };
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorList;
      },
      Foldable1: function () {
          return foldableList;
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var eq1List = {
      eq1: function (dictEq) {
          return function (xs) {
              return function (ys) {
                  var go = function ($copy_v) {
                      return function ($copy_v1) {
                          return function ($copy_v2) {
                              var $tco_var_v = $copy_v;
                              var $tco_var_v1 = $copy_v1;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(v, v1, v2) {
                                  if (!v2) {
                                      $tco_done = true;
                                      return false;
                                  };
                                  if (v instanceof Nil && v1 instanceof Nil) {
                                      $tco_done = true;
                                      return v2;
                                  };
                                  if (v instanceof Cons && v1 instanceof Cons) {
                                      $tco_var_v = v.value1;
                                      $tco_var_v1 = v1.value1;
                                      $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                      return;
                                  };
                                  $tco_done = true;
                                  return false;
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                              };
                              return $tco_result;
                          };
                      };
                  };
                  return go(xs)(ys)(true);
              };
          };
      }
  };                                                       
  var eqList = function (dictEq) {
      return {
          eq: Data_Eq.eq1(eq1List)(dictEq)
      };
  };
  var ord1List = {
      compare1: function (dictOrd) {
          return function (xs) {
              return function (ys) {
                  var go = function ($copy_v) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1) {
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return Data_Ordering.EQ.value;
                              };
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return Data_Ordering.LT.value;
                              };
                              if (v1 instanceof Nil) {
                                  $tco_done = true;
                                  return Data_Ordering.GT.value;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                                  if (v2 instanceof Data_Ordering.EQ) {
                                      $tco_var_v = v.value1;
                                      $copy_v1 = v1.value1;
                                      return;
                                  };
                                  $tco_done = true;
                                  return v2;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
                  return go(xs)(ys);
              };
          };
      },
      Eq10: function () {
          return eq1List;
      }
  };                                                          
  var ordList = function (dictOrd) {
      return {
          compare: Data_Ord.compare1(ord1List)(dictOrd),
          Eq0: function () {
              return eqList(dictOrd.Eq0());
          }
      };
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applyNonEmptyList = {
      apply: function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
          };
      },
      Functor0: function () {
          return functorNonEmptyList;
      }
  };
  var bindList = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  var alternativeList = {
      Applicative0: function () {
          return applicativeList;
      },
      Plus1: function () {
          return plusList;
      }
  };
  var applicativeNonEmptyList = {
      pure: (function () {
          var $236 = Data_NonEmpty.singleton(plusList);
          return function ($237) {
              return NonEmptyList($236($237));
          };
      })(),
      Apply0: function () {
          return applyNonEmptyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["ordList"] = ordList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  var head = function (v) {
      return v.value0;
  };
  exports["singleton"] = singleton;
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["ForeignError"] = ForeignError;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  exports.undefined = undefined;
})(PS["Literals.Undefined"] = PS["Literals.Undefined"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Literals.Undefined"] = $PS["Literals.Undefined"] || {};
  var exports = $PS["Literals.Undefined"];
  var $foreign = $PS["Literals.Undefined"];
  exports["undefined"] = $foreign["undefined"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Untagged.Castable"] = $PS["Untagged.Castable"] || {};
  var exports = $PS["Untagged.Castable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var cast = function (dictCastable) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["cast"] = cast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Untagged.TypeCheck"] = $PS["Untagged.TypeCheck"] || {};
  var exports = $PS["Untagged.TypeCheck"];
  var Foreign = $PS["Foreign"];
  var hasRuntimeType = function (dict) {
      return dict.hasRuntimeType;
  };
  var hasJsType = function (name) {
      return function (x) {
          return Foreign.typeOf(x) === name;
      };
  };
  var hasRuntimeTypeString = {
      hasRuntimeType: function (v) {
          return hasJsType("string");
      }
  };
  exports["hasRuntimeType"] = hasRuntimeType;
  exports["hasRuntimeTypeString"] = hasRuntimeTypeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Untagged.Union"] = $PS["Untagged.Union"] || {};
  var exports = $PS["Untagged.Union"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Literals_Undefined = $PS["Literals.Undefined"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Castable = $PS["Untagged.Castable"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];                
  var withOneOf = function (dictHasRuntimeType) {
      return function (f) {
          return function (g) {
              return function (o) {
                  var isTypeA = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                  var $27 = isTypeA(Foreign.unsafeToForeign(o));
                  if ($27) {
                      return f(o);
                  };
                  return g(o);
              };
          };
      };
  };
  var toEither1 = function (dictHasRuntimeType) {
      return withOneOf(dictHasRuntimeType)(Data_Either.Left.create)(Data_Either.Right.create);
  };
  var maybeToUor = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Untagged_Castable.cast()(Literals_Undefined["undefined"]);
      };
      throw new Error("Failed pattern match at Untagged.Union (line 121, column 1 - line 121, column 49): " + [ v.constructor.name ]);
  };
  var asOneOf = function (dictCastable) {
      return Untagged_Castable.cast();
  };
  exports["asOneOf"] = asOneOf;
  exports["toEither1"] = toEither1;
  exports["maybeToUor"] = maybeToUor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Aeson"] = $PS["Aeson"] || {};
  var exports = $PS["Aeson"];
  var $foreign = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Sequence = $PS["Data.Sequence"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var AesonPatchedJson = function (x) {
      return x;
  };
  var AesonEncoder = function (x) {
      return x;
  };
  var monadAesonEncoderM = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);
  var gDecodeAesonRowNil = {
      gDecodeAeson: function (v) {
          return function (v1) {
              return new Data_Either.Right({});
          };
      }
  };
  var functorAesonEncoderM = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
  var decodeAesonAeson = {
      decodeAeson: Control_Applicative.pure(Data_Either.applicativeEither)
  };
  var bindAesonEncoderM = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);  
  var applicativeAesonEncoderM = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
  var verbAesonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var useNextIndexIndex = Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
  var encodeAesonBigInt = {
      "encodeAeson'": function (i) {
          return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
              return Control_Applicative.pure(applicativeAesonEncoderM)({
                  patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                  numberIndex: Data_Sequence.singleton(Data_BigInt.toString(i))
              });
          });
      }
  };
  var encodeAesonInt = {
      "encodeAeson'": function (i) {
          return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
              return Control_Applicative.pure(applicativeAesonEncoderM)({
                  patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                  numberIndex: Data_Sequence.singleton(Data_Show.show(Data_Show.showInt)(i))
              });
          });
      }
  };
  var encodeAesonNumber = {
      "encodeAeson'": function (i) {
          return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
              return Control_Applicative.pure(applicativeAesonEncoderM)({
                  patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                  numberIndex: Data_Sequence.singleton(Data_Show.show(Data_Show.showNumber)(i))
              });
          });
      }
  };
  var encodeAesonUInt = {
      "encodeAeson'": function (i) {
          return Control_Bind.bind(bindAesonEncoderM)(useNextIndexIndex)(function (ix) {
              return Control_Applicative.pure(applicativeAesonEncoderM)({
                  patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix)),
                  numberIndex: Data_Sequence.singleton(Data_UInt.toString(i))
              });
          });
      }
  };
  var unAesonEncoder = function (v) {
      return v;
  };
  var toAesonType = verbAesonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var stringifyAeson = function (v) {
      return $foreign.stringifyAeson_(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.numberIndex))(v.patchedJson);
  };
  var showAeson = {
      show: stringifyAeson
  };
  var runEncoder = function (v) {
      return Control_Monad_State.evalState(v)(0);
  };
  var parseJsonStringToAeson = function (payload) {
      var v = $foreign.parseJsonExtractingIntegers(payload);
      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Function["const"](Data_Argonaut_Decode_Error.MissingValue.value))(Data_Functor.map(Data_Either.functorEither)(AesonPatchedJson)(Data_Argonaut_Parser.jsonParser(v.patchedPayload))))(function (patchedJson) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              numberIndex: Data_Sequence.fromFoldable(Data_Foldable.foldableArray)(v.numberIndex),
              patchedJson: patchedJson
          });
      });
  };
  var isAesonType = verbAesonType(false)(Data_Function["const"](true));
  var getCurrentNumberIndex = Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity));
  var gEncodeAesonNil = {
      gEncodeAeson: function (v) {
          return function (v1) {
              return Foreign_Object.empty;
          };
      }
  };
  var gEncodeAeson = function (dict) {
      return dict.gEncodeAeson;
  };
  var encodeAesonRecord = function (dictGEncodeAeson) {
      return function (dictRowToList) {
          return {
              "encodeAeson'": function (rec) {
                  var step = function (v) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                      };
                  };
                  return Control_Bind.bind(bindAesonEncoderM)(Data_Functor.map(functorAesonEncoderM)(Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(applicativeAesonEncoderM)(Data_Traversable.sequence(Data_Traversable.traversableTuple)(applicativeAesonEncoderM))(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Foreign_Object.functorObject)(unAesonEncoder)(gEncodeAeson(dictGEncodeAeson)(rec)(Type_Proxy["Proxy"].value))))))(function (v) {
                      return Control_Applicative.pure(applicativeAesonEncoderM)({
                          patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                          numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                      });
                  });
              }
          };
      };
  };
  var gDecodeAeson = function (dict) {
      return dict.gDecodeAeson;
  };
  var fromString = function (str) {
      return {
          patchedJson: Data_Argonaut_Core.fromString(str),
          numberIndex: Data_Monoid.mempty(Data_Sequence.monoidSeq)
      };
  };
  var encodeAesonViaJson = function (dictEncodeJson) {
      return function (v) {
          return AesonEncoder(Control_Applicative.pure(applicativeAesonEncoderM)({
              patchedJson: AesonPatchedJson(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v)),
              numberIndex: Data_Sequence.empty
          }));
      };
  };
  var encodeAesonBoolean = {
      "encodeAeson'": encodeAesonViaJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)
  };
  var encodeAesonString = {
      "encodeAeson'": encodeAesonViaJson(Data_Argonaut_Encode_Class.encodeJsonJString)
  };
  var encodeAeson$prime = function (dict) {
      return dict["encodeAeson'"];
  };
  var encodeTraversable$prime = function (dictTraversable) {
      return function (dictEncodeAeson) {
          return function (arr) {
              var step = function (v) {
                  return function (a) {
                      return Control_Bind.bind(bindAesonEncoderM)(unAesonEncoder(encodeAeson$prime(dictEncodeAeson)(a)))(function (v1) {
                          return Control_Applicative.pure(applicativeAesonEncoderM)(new Data_Tuple.Tuple(Data_Sequence.snoc(v.value0)(v1.patchedJson), Data_Sequence.snoc(v.value1)(v1.numberIndex)));
                      });
                  };
              };
              return Control_Bind.bind(bindAesonEncoderM)(Data_Foldable.foldM(dictTraversable.Foldable1())(monadAesonEncoderM)(step)(new Data_Tuple.Tuple(Data_Sequence.empty, Data_Sequence.empty))(arr))(function (v) {
                  return Control_Applicative.pure(applicativeAesonEncoderM)({
                      patchedJson: Data_Argonaut_Core.fromArray(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.value0)),
                      numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                  });
              });
          };
      };
  };
  var encodeAesonArray = function (dictEncodeAeson) {
      return {
          "encodeAeson'": (function () {
              var $244 = encodeTraversable$prime(Data_Traversable.traversableArray)(dictEncodeAeson);
              return function ($245) {
                  return AesonEncoder($244($245));
              };
          })()
      };
  };
  var gEncodeAesonCons = function (dictEncodeAeson) {
      return function (dictGEncodeAeson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return {
                      gEncodeAeson: function (row) {
                          return function (v) {
                              return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeAeson$prime(dictEncodeAeson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeAeson(dictGEncodeAeson)(row)(Type_Proxy["Proxy"].value));
                          };
                      }
                  };
              };
          };
      };
  };
  var encodeAesonObject = function (dictEncodeAeson) {
      return {
          "encodeAeson'": function (input) {
              var step = function (v) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                  };
              };
              return Control_Bind.bind(bindAesonEncoderM)(Data_Functor.map(functorAesonEncoderM)(Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(applicativeAesonEncoderM)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(applicativeAesonEncoderM)((function () {
                  var $252 = encodeAeson$prime(dictEncodeAeson);
                  return function ($253) {
                      return unAesonEncoder($252($253));
                  };
              })()))(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(input))))(function (v) {
                  return Control_Applicative.pure(applicativeAesonEncoderM)({
                      patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                      numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                  });
              });
          }
      };
  };
  var encodeAeson = function (dictEncodeAeson) {
      var $254 = encodeAeson$prime(dictEncodeAeson);
      return function ($255) {
          return runEncoder(unAesonEncoder($254($255)));
      };
  };
  var decodeAesonViaJson = function (dictDecodeJson) {
      return function (v) {
          return Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson);
      };
  };
  var decodeNumber = function (parse) {
      return function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonInt)(v))(function (ix) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.MissingValue.value)(Data_Sequence.index(ix)(v.numberIndex)))(function (numberStr) {
                  return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Couldn't parse to integral: " + numberStr))(parse(numberStr));
              });
          });
      };
  };
  var decodeAesonBigInt = {
      decodeAeson: decodeNumber(Data_BigInt.fromString)
  };
  var decodeAesonInt = {
      decodeAeson: decodeNumber(Data_Int.fromString)
  };
  var decodeAesonNumber = {
      decodeAeson: decodeNumber(Data_Number.fromString)
  };
  var decodeAesonUInt = {
      decodeAeson: decodeNumber(Data_UInt.fromString)
  };
  var decodeAesonBoolean = {
      decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonBoolean)
  };
  var decodeAesonString = {
      decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonString)
  };
  var decodeAesonField = function (dict) {
      return dict.decodeAesonField;
  };
  var gDecodeAesonCons = function (dictDecodeAesonField) {
      return function (dictGDecodeAeson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return {
                          gDecodeAeson: function (object) {
                              return function (v) {
                                  var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var fieldValue = Foreign_Object.lookup(fieldName)(object);
                                  var v1 = decodeAesonField(dictDecodeAesonField)(fieldValue);
                                  if (v1 instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                          return Control_Bind.bind(Data_Either.bindEither)(gDecodeAeson(dictGDecodeAeson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                              return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                          });
                                      });
                                  };
                                  if (v1 instanceof Data_Maybe.Nothing) {
                                      return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                                  };
                                  throw new Error("Failed pattern match at Aeson (line 606, column 5 - line 613, column 44): " + [ v1.constructor.name ]);
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  var decodeAeson = function (dict) {
      return dict.decodeAeson;
  };
  var decodeJsonString = function (dictDecodeAeson) {
      return Control_Bind.composeKleisli(Data_Either.bindEither)(parseJsonStringToAeson)(decodeAeson(dictDecodeAeson));
  };   
  var decodeTraversable = function (dictTraversable) {
      return function (dictDecodeAeson) {
          return function (dictDecodeJson) {
              return function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson))(function (v1) {
                      return Data_Traversable["for"](Data_Either.applicativeEither)(dictTraversable)(v1)(function (patchedJson) {
                          return decodeAeson(dictDecodeAeson)({
                              patchedJson: patchedJson,
                              numberIndex: v.numberIndex
                          });
                      });
                  });
              };
          };
      };
  };
  var decodeAesonArray = function (dictDecodeAeson) {
      return {
          decodeAeson: decodeTraversable(Data_Traversable.traversableArray)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))
      };
  };
  var getField = function (dictDecodeAeson) {
      return function (aesonObject) {
          return function (field) {
              var getField$prime = function (decoder) {
                  return function (obj) {
                      return function (str) {
                          return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                              var $265 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                              return function ($266) {
                                  return $265(decoder($266));
                              };
                          })())(Foreign_Object.lookup(str)(obj));
                      };
                  };
              };
              return getField$prime(decodeAeson(dictDecodeAeson))(aesonObject)(field);
          };
      };
  };
  var getFieldOptional = function (dictDecodeAeson) {
      var getFieldOptional_ = function (decoder) {
          return function (obj) {
              return function (str) {
                  var decode = (function () {
                      var $267 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                      return function ($268) {
                          return $267(decoder($268));
                      };
                  })();
                  return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                      var $269 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                      return function ($270) {
                          return $269(decode($270));
                      };
                  })())(Foreign_Object.lookup(str)(obj));
              };
          };
      };
      return getFieldOptional_(decodeAeson(dictDecodeAeson));
  };
  var getFieldOptional$prime = function (dictDecodeAeson) {
      var getFieldOptional$prime_ = function (decoder) {
          return function (obj) {
              return function (str) {
                  var decode = function (v) {
                      var $207 = Data_Argonaut_Core.isNull(v.patchedJson);
                      if ($207) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                      };
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(v)));
                  };
                  return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
              };
          };
      };
      return getFieldOptional$prime_(decodeAeson(dictDecodeAeson));
  };
  var decodeAesonField1 = function (dictDecodeAeson) {
      return {
          decodeAesonField: function (j) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(decodeAeson(dictDecodeAeson))(j);
          }
      };
  };
  var decodeAeson$bar$plus$bar = function (dictInOneOf) {
      return function (dictDecodeAeson) {
          return function (dictDecodeAeson1) {
              return {
                  decodeAeson: function (j) {
                      return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson)(j)))(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson1)(j)));
                  }
              };
          };
      };
  };
  var constAesonCases = function (v) {
      var c = Data_Function["const"](v);
      return {
          caseObject: c,
          caseNull: c,
          caseBoolean: c,
          caseString: c,
          caseNumber: c,
          caseArray: c
      };
  };
  var caseAeson = function (v) {
      return function (v1) {
          var unsafeSeqIndex = function (s) {
              return function (ix) {
                  return Data_Maybe.fromJust()(Data_Sequence.index(ix)(s));
              };
          };
          var mkAeson = function (json) {
              return {
                  patchedJson: json,
                  numberIndex: v1.numberIndex
              };
          };
          return Data_Argonaut_Core.caseJson(v.caseNull)(v.caseBoolean)((function () {
              var $271 = unsafeSeqIndex(v1.numberIndex);
              return function ($272) {
                  return v.caseNumber($271(Data_Int.round($272)));
              };
          })())(v.caseString)((function () {
              var $273 = Data_Functor.map(Data_Functor.functorArray)(mkAeson);
              return function ($274) {
                  return v.caseArray($273($274));
              };
          })())((function () {
              var $275 = Data_Functor.map(Foreign_Object.functorObject)(mkAeson);
              return function ($276) {
                  return v.caseObject($275($276));
              };
          })())(v1.patchedJson);
      };
  };
  var caseAesonArray = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseArray: f,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };                                        
  var decodeAesonTuple = function (dictDecodeAeson) {
      return function (dictDecodeAeson1) {
          return {
              decodeAeson: caseAesonArray(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array (Tuple)")))(function (arr) {
                  var v = Data_Array.index(arr)(2);
                  var v1 = Data_Array.index(arr)(1);
                  var v2 = Data_Array.index(arr)(0);
                  if (v2 instanceof Data_Maybe.Just && (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing)) {
                      return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decodeAeson(dictDecodeAeson)(v2.value0)))(decodeAeson(dictDecodeAeson1)(v1.value0));
                  };
                  return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array with length 2"));
              })
          };
      };
  };                                            
  var caseAesonNull = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseNull: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };
  var isNull = isAesonType(caseAesonNull);
  var caseAesonNumber = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseNumber: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };
  var caseAesonBigInt = function (def) {
      return function (f) {
          return caseAesonNumber(def)(function (str) {
              var v = Data_BigInt.fromString(str);
              if (v instanceof Data_Maybe.Nothing) {
                  return def;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Aeson (line 385, column 3 - line 387, column 22): " + [ v.constructor.name ]);
          });
      };
  };                                          
  var toNumber = toAesonType(caseAesonNumber);
  var caseAesonObject = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseObject: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };                                          
  var toObject = toAesonType(caseAesonObject);
  var decodeAesonRecord = function (dictGDecodeAeson) {
      return function (dictRowToList) {
          return {
              decodeAeson: function (json) {
                  var v = toObject(json);
                  if (v instanceof Data_Maybe.Just) {
                      return gDecodeAeson(dictGDecodeAeson)(v.value0)(Type_Proxy["Proxy"].value);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
                  };
                  throw new Error("Failed pattern match at Aeson (line 530, column 5 - line 532, column 46): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var decodeAesonObject = function (dictDecodeAeson) {
      return {
          decodeAeson: caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")))(Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decodeAeson(dictDecodeAeson)))
      };
  };
  var caseAesonString = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseString: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject
              };
          })(constAesonCases(def)));
      };
  };
  var isString = isAesonType(caseAesonString);
  var toString = toAesonType(caseAesonString);
  var toStringifiedNumbersJson = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
      return caseAeson({
          caseNull: Data_Function["const"](Data_Argonaut_Core.jsonNull),
          caseBoolean: Data_Argonaut_Encode_Encoders.encodeBoolean,
          caseNumber: Data_Argonaut_Encode_Encoders.encodeString,
          caseString: Data_Argonaut_Encode_Encoders.encodeString,
          caseArray: (function () {
              var $277 = Data_Functor.map(Data_Functor.functorArray)(toStringifiedNumbersJson);
              return function ($278) {
                  return Data_Argonaut_Core.fromArray($277($278));
              };
          })(),
          caseObject: (function () {
              var $279 = Data_Functor.map(Foreign_Object.functorObject)(toStringifiedNumbersJson);
              return function ($280) {
                  return Data_Argonaut_Core.fromObject($279($280));
              };
          })()
      });
  });
  var getNestedAeson = function (v) {
      return function (keys) {
          var mkAeson = function (json) {
              return {
                  numberIndex: v.numberIndex,
                  patchedJson: json
              };
          };
          var lookup = function (j) {
              return function (lbl) {
                  return Data_Argonaut_Core.caseJsonObject(Data_Maybe.Nothing.value)(Foreign_Object.lookup(lbl))(j);
              };
          };
          return Data_Either.note(Data_Argonaut_Decode_Error.UnexpectedValue.create(toStringifiedNumbersJson(v)))(Data_Functor.map(Data_Maybe.functorMaybe)(mkAeson)(Data_Foldable.foldM(Data_Foldable.foldableArray)(Data_Maybe.monadMaybe)(lookup)(v.patchedJson)(keys)));
      };
  };
  var decodeAesonMaybe = function (dictDecodeAeson) {
      return {
          decodeAeson: function (aeson) {
              return caseAeson({
                  caseNull: function (v) {
                      return new Data_Either.Right(Data_Maybe.Nothing.value);
                  },
                  caseBoolean: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseNumber: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseString: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseArray: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseObject: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  }
              })(aeson);
          }
      };
  };
  var decodeAesonFieldMaybe = function (dictDecodeAeson) {
      return {
          decodeAesonField: (function () {
              var $281 = Data_Maybe.maybe(new Data_Either.Right(Data_Maybe.Nothing.value))(decodeAeson(decodeAesonMaybe(dictDecodeAeson)));
              return function ($282) {
                  return Data_Maybe.Just.create($281($282));
              };
          })()
      };
  };
  var bumpNumberIndexBy = function (i) {
      return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(i));
  };
  var encodeAesonAeson = {
      "encodeAeson'": function (v) {
          return Control_Bind.bind(bindAesonEncoderM)(getCurrentNumberIndex)(function (ix) {
              var encodeNumber = function (n) {
                  return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJNumber)(Data_Int.toNumber(ix) + n);
              };
              var bumpIndices = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v1) {
                  return Data_Argonaut_Core.caseJson(Data_Argonaut_Encode_Encoders.encodeUnit)(Data_Argonaut_Encode_Encoders.encodeBoolean)(encodeNumber)(Data_Argonaut_Encode_Encoders.encodeString)((function () {
                      var $283 = Data_Functor.map(Data_Functor.functorArray)(bumpIndices);
                      return function ($284) {
                          return Data_Argonaut_Core.fromArray($283($284));
                      };
                  })())((function () {
                      var $285 = Data_Functor.map(Foreign_Object.functorObject)(bumpIndices);
                      return function ($286) {
                          return Data_Argonaut_Core.fromObject($285($286));
                      };
                  })());
              });
              return Control_Bind.discard(Control_Bind.discardUnit)(bindAesonEncoderM)(bumpNumberIndexBy(Data_Sequence.length(v.numberIndex)))(function () {
                  return Control_Applicative.pure(applicativeAesonEncoderM)({
                      patchedJson: bumpIndices(v.patchedJson),
                      numberIndex: v.numberIndex
                  });
              });
          });
      }
  };
  var encodeAesonTuple = function (dictEncodeAeson) {
      return function (dictEncodeAeson1) {
          return {
              "encodeAeson'": function (v) {
                  return AesonEncoder(encodeTraversable$prime(Data_Traversable.traversableArray)(encodeAesonAeson)([ encodeAeson(dictEncodeAeson)(v.value0), encodeAeson(dictEncodeAeson1)(v.value1) ]));
              }
          };
      };
  };
  var aesonNull = {
      patchedJson: Data_Argonaut_Core.jsonNull,
      numberIndex: Data_Monoid.mempty(Data_Sequence.monoidSeq)
  };
  var encodeAesonMaybe = function (dictEncodeAeson) {
      return {
          "encodeAeson'": function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return AesonEncoder(Control_Applicative.pure(applicativeAesonEncoderM)(aesonNull));
              };
              if (v instanceof Data_Maybe.Just) {
                  return encodeAeson$prime(dictEncodeAeson)(v.value0);
              };
              throw new Error("Failed pattern match at Aeson (line 769, column 1 - line 771, column 41): " + [ v.constructor.name ]);
          }
      };
  };
  exports["caseAeson"] = caseAeson;
  exports["caseAesonArray"] = caseAesonArray;
  exports["caseAesonBigInt"] = caseAesonBigInt;
  exports["caseAesonObject"] = caseAesonObject;
  exports["caseAesonString"] = caseAesonString;
  exports["constAesonCases"] = constAesonCases;
  exports["decodeAeson"] = decodeAeson;
  exports["encodeAeson"] = encodeAeson;
  exports["encodeAeson'"] = encodeAeson$prime;
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getFieldOptional'"] = getFieldOptional$prime;
  exports["getNestedAeson"] = getNestedAeson;
  exports["parseJsonStringToAeson"] = parseJsonStringToAeson;
  exports["stringifyAeson"] = stringifyAeson;
  exports["toStringifiedNumbersJson"] = toStringifiedNumbersJson;
  exports["isNull"] = isNull;
  exports["isString"] = isString;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
  exports["showAeson"] = showAeson;
  exports["decodeAesonUInt"] = decodeAesonUInt;
  exports["decodeAesonInt"] = decodeAesonInt;
  exports["decodeAesonBigInt"] = decodeAesonBigInt;
  exports["decodeAesonBoolean"] = decodeAesonBoolean;
  exports["decodeAesonString"] = decodeAesonString;
  exports["decodeAesonNumber"] = decodeAesonNumber;
  exports["decodeAesonAeson"] = decodeAesonAeson;
  exports["decodeAesonObject"] = decodeAesonObject;
  exports["decodeAesonTuple"] = decodeAesonTuple;
  exports["decodeAesonRecord"] = decodeAesonRecord;
  exports["decodeAeson|+|"] = decodeAeson$bar$plus$bar;
  exports["decodeAesonArray"] = decodeAesonArray;
  exports["decodeAesonMaybe"] = decodeAesonMaybe;
  exports["gDecodeAesonRowNil"] = gDecodeAesonRowNil;
  exports["gDecodeAesonCons"] = gDecodeAesonCons;
  exports["decodeAesonFieldMaybe"] = decodeAesonFieldMaybe;
  exports["decodeAesonField1"] = decodeAesonField1;
  exports["encodeAesonInt"] = encodeAesonInt;
  exports["encodeAesonBigInt"] = encodeAesonBigInt;
  exports["encodeAesonUInt"] = encodeAesonUInt;
  exports["encodeAesonNumber"] = encodeAesonNumber;
  exports["encodeAesonString"] = encodeAesonString;
  exports["encodeAesonBoolean"] = encodeAesonBoolean;
  exports["encodeAesonAeson"] = encodeAesonAeson;
  exports["encodeAesonObject"] = encodeAesonObject;
  exports["encodeAesonRecord"] = encodeAesonRecord;
  exports["encodeAesonTuple"] = encodeAesonTuple;
  exports["encodeAesonArray"] = encodeAesonArray;
  exports["encodeAesonMaybe"] = encodeAesonMaybe;
  exports["gEncodeAesonNil"] = gEncodeAesonNil;
  exports["gEncodeAesonCons"] = gEncodeAesonCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Aeson.Utils"] = $PS["Aeson.Utils"] || {};
  var exports = $PS["Aeson.Utils"];
  var tagProp = "tag";  
  var contentsProp = "contents";
  exports["tagProp"] = tagProp;
  exports["contentsProp"] = contentsProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bifoldable"] = $PS["Data.Bifoldable"] || {};
  var exports = $PS["Data.Bifoldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var bifoldableTuple = {
      bifoldMap: function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
                  };
              };
          };
      },
      bifoldr: function (f) {
          return function (g) {
              return function (z) {
                  return function (v) {
                      return f(v.value0)(g(v.value1)(z));
                  };
              };
          };
      },
      bifoldl: function (f) {
          return function (g) {
              return function (z) {
                  return function (v) {
                      return g(f(z)(v.value0))(v.value1);
                  };
              };
          };
      }
  };
  exports["bifoldableTuple"] = bifoldableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bitraversable"] = $PS["Data.Bitraversable"] || {};
  var exports = $PS["Data.Bitraversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bifoldable = $PS["Data.Bifoldable"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var bitraversableTuple = {
      bitraverse: function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (v) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(f(v.value0)))(g(v.value1));
                  };
              };
          };
      },
      bisequence: function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(v.value0))(v.value1);
          };
      },
      Bifunctor0: function () {
          return Data_Bifunctor.bifunctorTuple;
      },
      Bifoldable1: function () {
          return Data_Bifoldable.bifoldableTuple;
      }
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  exports["bitraverse"] = bitraverse;
  exports["bisequence"] = bisequence;
  exports["ltraverse"] = ltraverse;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var step = (function () {
      var $225 = Data_Newtype.unwrap();
      return function ($226) {
          return Data_Lazy.force($225($226));
      };
  })();
  var lazyList = {
      defer: function (f) {
          return List(Data_Lazy.defer(function ($227) {
              return step(f($227));
          }));
      }
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = {
      foldr: function (op) {
          return function (z) {
              return function (xs) {
                  var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
              };
          };
      },
      foldl: function (op) {
          var go = function ($copy_b) {
              return function ($copy_xs) {
                  var $tco_var_b = $copy_b;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(b, xs) {
                      var v = step(xs);
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = op(b)(v.value0);
                          $copy_xs = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 128, column 7 - line 130, column 40): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_b, $copy_xs);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (b) {
                  return function (a) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: (function () {
          var go = function (f) {
              return function (b) {
                  return Control_Lazy.defer(lazyList)(function (v) {
                      var v1 = f(b);
                      if (v1.value1 instanceof Data_Maybe.Just) {
                          return cons(v1.value0)(go(f)(v1.value1.value0));
                      };
                      if (v1.value1 instanceof Data_Maybe.Nothing) {
                          return cons(v1.value0)(nil);
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 33): " + [ v1.constructor.name ]);
                  });
              };
          };
          return go;
      })()
  };
  var unfoldableList = {
      unfoldr: (function () {
          var go = function (f) {
              return function (b) {
                  return Control_Lazy.defer(lazyList)(function (v) {
                      var v1 = f(b);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return nil;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy.Types (line 158, column 28 - line 160, column 39): " + [ v1.constructor.name ]);
                  });
              };
          };
          return go;
      })(),
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];                                      
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy (line 288, column 13 - line 290, column 44): " + [ v.constructor.name ]);
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (list) {
              var v = uncons(list);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (b) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (xs$prime) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (b) {
                                  return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
                              };
                              return xs$prime;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 431, column 5 - line 436, column 48): " + [ v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $268 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $269 = Data_Newtype.unwrap();
      return function ($270) {
          return Data_List_Lazy_Types.List($268($269($270)));
      };
  };
  exports["filter"] = filter;
  exports["filterM"] = filterM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 676, column 1 - line 676, column 35): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return {
              show: function (m) {
                  return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
              }
          };
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var isSubmap = function (dictOrd) {
      return function (dictEq) {
          return function (m1) {
              return function (m2) {
                  var f = function (v) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
                  };
                  return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Leaf) {
                  return Leaf.value;
              };
              if (v1 instanceof Two) {
                  return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
              };
              if (v1 instanceof Three) {
                  return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = {
      foldl: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
              };
          };
      }
  };
  var traversableMap = {
      traverse: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Leaf) {
                      return Control_Applicative.pure(dictApplicative)(Leaf.value);
                  };
                  if (v1 instanceof Two) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3));
                  };
                  if (v1 instanceof Three) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3)))(Control_Applicative.pure(dictApplicative)(v1.value4)))(v(v1.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 127, column 1 - line 142, column 31): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorMap;
      },
      Foldable1: function () {
          return foldableMap;
      }
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (m1) {
                  return function (m2) {
                      return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
                  };
              }
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          var $764 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
          var $765 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
          var $766 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
          return function ($767) {
              return $764($765($766($767)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var filterKeys = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(function ($768) {
              return Data_Function["const"](predicate($768));
          });
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (m1) {
          return function (m2) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = {
      foldlWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                      var $769 = Data_Function.flip(f);
                      return function ($770) {
                          return Data_Tuple.uncurry($769($770));
                      };
                  })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      Foldable0: function () {
          return foldableMap;
      }
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var insertWith = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (v) {
                  return alter(dictOrd)((function () {
                      var $775 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                      return function ($776) {
                          return Data_Maybe.Just.create($775($776));
                      };
                  })())(k);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($778) {
                                  return Data_Maybe.Just.create($777($778));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["insertWith"] = insertWith;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["difference"] = difference;
  exports["isSubmap"] = isSubmap;
  exports["size"] = size;
  exports["filterWithKey"] = filterWithKey;
  exports["filterKeys"] = filterKeys;
  exports["filter"] = filter;
  exports["eqMap"] = eqMap;
  exports["showMap"] = showMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
  exports["traversableMap"] = traversableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Op"] = $PS["Data.Op"] || {};
  var exports = $PS["Data.Op"];                              
  var Op = function (x) {
      return x;
  };
  var contravariantOp = {
      cmap: function (f) {
          return function (v) {
              return function ($10) {
                  return v(f($10));
              };
          };
      }
  };
  exports["Op"] = Op;
  exports["contravariantOp"] = contravariantOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Aeson.Encode"] = $PS["Aeson.Encode"] || {};
  var exports = $PS["Aeson.Encode"];
  var Aeson = $PS["Aeson"];
  var Aeson_Utils = $PS["Aeson.Utils"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Op = $PS["Data.Op"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];        
  var value = function (dictEncodeAeson) {
      return Data_Op.Op(Aeson.encodeAeson(dictEncodeAeson));
  };
  var encode = Data_Newtype.unwrap();
  var encodeTagged = function (tag) {
      return function (a) {
          return function (encoder) {
              return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Aeson_Utils.tagProp, Aeson.encodeAeson(Aeson.encodeAesonString)(tag)), new Data_Tuple.Tuple(Aeson_Utils.contentsProp, encode(encoder)(a)) ]));
          };
      };
  };
  var dictionary = function (encoderA) {
      return function (encoderB) {
          var tryString = Aeson.caseAeson((function () {
              var v = Aeson.constAesonCases(Data_Maybe.Nothing.value);
              return {
                  caseNull: v.caseNull,
                  caseBoolean: v.caseBoolean,
                  caseNumber: v.caseNumber,
                  caseString: Data_Maybe.Just.create,
                  caseArray: v.caseArray,
                  caseObject: v.caseObject
              };
          })());
          var toPairs = (function () {
              var $47 = Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(encode(encoderA))(encode(encoderB)));
              var $48 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
              return function ($49) {
                  return $47($48($49));
              };
          })();
          var encodePairs = function (pairs) {
              var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(tryString))(pairs);
              if (v instanceof Data_Maybe.Nothing) {
                  return Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonTuple(Aeson.encodeAesonAeson)(Aeson.encodeAesonAeson)))(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorTuple)(Aeson.encodeAeson(Aeson.encodeAesonAeson)))(pairs));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(v.value0));
              };
              throw new Error("Failed pattern match at Aeson.Encode (line 118, column 23 - line 120, column 57): " + [ v.constructor.name ]);
          };
          return Data_Op.Op(function ($50) {
              return encodePairs(toPairs($50));
          });
      };
  };
  exports["dictionary"] = dictionary;
  exports["encode"] = encode;
  exports["encodeTagged"] = encodeTagged;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var to = function (dict) {
      return dict.to;
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgsArgument = function (dictShow) {
      return {
          genericShowArgs: function (v) {
              return [ Data_Show.show(dictShow)(v) ];
          }
      };
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowArgsProduct = function (dictGenericShowArgs) {
      return function (dictGenericShowArgs1) {
          return {
              genericShowArgs: function (v) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
              }
          };
      };
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowArgsProduct"] = genericShowArgsProduct;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  // Abstracts away unpacking elements from a monomorphic container.
  const unpack = obj => {
    const res = [];

    for (let i = 0; i < obj.len(); i++) {
      res.push(obj.get(i));
    }

    return res;
  };

  const unpackFromProperty = prop => obj => unpack(obj[prop]());

  exports._containerHelper = r => ({
    unpack,
    unpackFromProperty,
    // unpacks an associative container where keys are stored in .keys()
    // and values for that keys might be missing.
    unpackKeyIndexed: obj => {
      const res = [];
      for (let i = 0; i < obj.len(); i++) {
        let k = obj.keys().get(i);
        let v = obj.get(k);
        if (v == null) continue;
        res.push(r.tuple(k)(v));
      }
      return res;
    },
    // Abstracts away packing array of something into a monomorphic container.
    pack: (container, elements) => {
      const res = container.new();
      elements.forEach(elem => res.add(elem));
      return res;
    },
    // Abstracts away packing a list of KV-pairs into a map-like structure.
    packMap: (container, entries) => {
      const res = container.new();
      entries.forEach(entry => {
        const [key, value] = r.untuple(entry);
        res.insert(key, value);
      });
      return res;
    },
  });
})(PS["FfiHelpers"] = PS["FfiHelpers"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["FfiHelpers"] = $PS["FfiHelpers"] || {};
  var exports = $PS["FfiHelpers"];
  var $foreign = $PS["FfiHelpers"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var untuple = function (v) {
      return [ v.value0, v.value1 ];
  };
  var maybeFfiHelper = {
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      from: Data_Maybe.fromMaybe
  };
  var errorHelper = function (v) {
      return {
          error: function ($4) {
              return Data_Either.Left.create(v($4));
          },
          valid: Data_Either.Right.create,
          from: function (e) {
              var $5 = Data_Maybe.fromMaybe(e);
              return function ($6) {
                  return $5(Data_Either.hush($6));
              };
          }
      };
  };
  var containerHelper = $foreign["_containerHelper"]({
      untuple: untuple,
      tuple: Data_Tuple.Tuple.create
  });
  exports["maybeFfiHelper"] = maybeFfiHelper;
  exports["containerHelper"] = containerHelper;
  exports["errorHelper"] = errorHelper;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const hashFromImpl = hashClassFrom => maybe => input => {
    let ret = null;
    try {
      ret = hashClassFrom(input);
    } catch (e) {
      console.log(e);
    }
    if (ret == null) {
      return maybe.nothing;
    }
    return maybe.just(ret);
  };

  const hashToBytes = hash => {
    return hash.to_bytes();
  };

  const hashToBech32Unsafe = prefix => hash => {
    return hash.to_bech32(prefix);
  };

  const hashToBech32Impl = maybe => prefix => hash => {
    let ret = null;
    try {
      ret = hash.to_bech32(prefix);
    } catch (e) {
      console.log(e);
    }
    if (ret == null) {
      return maybe.nothing;
    }
    return maybe.just(ret);
  };

  exports._ed25519KeyHashFromBytesImpl = maybe => bytes => {
    return hashFromImpl(lib.Ed25519KeyHash.from_bytes)(maybe)(bytes);
  };

  exports._scriptHashFromBytesImpl = maybe => bytes => {
    return hashFromImpl(lib.ScriptHash.from_bytes)(maybe)(bytes);
  };

  exports.ed25519KeyHashToBytes = hashToBytes;           

  exports.scriptHashToBytes = hashToBytes;           

  exports.nativeScriptHash = script => script.hash();
})(PS["Serialization.Hash"] = PS["Serialization.Hash"] || {});
(function(exports) {
  // global exports
  "use strict";

  exports.now = function() {
    return new Date();
  };

  exports.dateMethod = function(method, date) {
    return date[method]();
  };

  exports.dateMethodEff = function(method, date) {
    return function() {
      return date[method]();
    };
  };

  exports.parse = function(dateString) {
    return function() {
      return new Date(dateString);
    };
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.JSDate"] = $PS["Data.JSDate"] || {};
  var exports = $PS["Data.JSDate"];
  var $foreign = $PS["Data.JSDate"];                                           
  var toISOString = function (dt) {
      return $foreign.dateMethodEff("toISOString", dt);
  };
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  exports["getTime"] = getTime;
  exports["toISOString"] = toISOString;
  exports["now"] = $foreign.now;
  exports["parse"] = $foreign.parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 95, column 3 - line 98, column 25): " + [ ep.constructor.name ]);
  };
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 173, column 3 - line 189, column 22): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 138, column 3 - line 144, column 23): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 116, column 3 - line 120, column 45): " + [ gp.constructor.name ]);
  };
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 53, column 5 - line 71, column 37): " + [ c.constructor.name ]);
      };
      return function ($624) {
          return (function (v) {
              return prefix + v;
          })(go($624));
      };
  })();
  exports["Graphics"] = Graphics;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["Reset"] = Reset;
  exports["PMode"] = PMode;
  exports["PForeground"] = PForeground;
  exports["Bold"] = Bold;
  exports["Red"] = Red;
  exports["Yellow"] = Yellow;
  exports["Blue"] = Blue;
  exports["Cyan"] = Cyan;
  exports["White"] = White;
  exports["BrightBlack"] = BrightBlack;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };                                                                                                                      
  var bold = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PMode(Ansi_Codes.Bold.value));
  exports["withGraphics"] = withGraphics;
  exports["bold"] = bold;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Log.Level"] = $PS["Data.Log.Level"] || {};
  var exports = $PS["Data.Log.Level"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Trace = (function () {
      function Trace() {

      };
      Trace.value = new Trace();
      return Trace;
  })();
  var Debug = (function () {
      function Debug() {

      };
      Debug.value = new Debug();
      return Debug;
  })();
  var Info = (function () {
      function Info() {

      };
      Info.value = new Info();
      return Info;
  })();
  var Warn = (function () {
      function Warn() {

      };
      Warn.value = new Warn();
      return Warn;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var eqLogLevel = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Trace && y instanceof Trace) {
                  return true;
              };
              if (x instanceof Debug && y instanceof Debug) {
                  return true;
              };
              if (x instanceof Info && y instanceof Info) {
                  return true;
              };
              if (x instanceof Warn && y instanceof Warn) {
                  return true;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordLogLevel = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Trace && y instanceof Trace) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Trace) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Trace) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Debug && y instanceof Debug) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Debug) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Debug) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Info && y instanceof Info) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Info) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Info) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Warn && y instanceof Warn) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Warn) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Warn) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Data.Log.Level (line 9, column 1 - line 9, column 44): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqLogLevel;
      }
  };
  exports["Trace"] = Trace;
  exports["Debug"] = Debug;
  exports["Info"] = Info;
  exports["Warn"] = Warn;
  exports["Error"] = $$Error;
  exports["ordLogLevel"] = ordLogLevel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Log.Tag"] = $PS["Data.Log.Tag"] || {};
  var exports = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var StringTag = (function () {
      function StringTag(value0) {
          this.value0 = value0;
      };
      StringTag.create = function (value0) {
          return new StringTag(value0);
      };
      return StringTag;
  })();
  var NumberTag = (function () {
      function NumberTag(value0) {
          this.value0 = value0;
      };
      NumberTag.create = function (value0) {
          return new NumberTag(value0);
      };
      return NumberTag;
  })();
  var IntTag = (function () {
      function IntTag(value0) {
          this.value0 = value0;
      };
      IntTag.create = function (value0) {
          return new IntTag(value0);
      };
      return IntTag;
  })();
  var BooleanTag = (function () {
      function BooleanTag(value0) {
          this.value0 = value0;
      };
      BooleanTag.create = function (value0) {
          return new BooleanTag(value0);
      };
      return BooleanTag;
  })();
  var JSDateTag = (function () {
      function JSDateTag(value0) {
          this.value0 = value0;
      };
      JSDateTag.create = function (value0) {
          return new JSDateTag(value0);
      };
      return JSDateTag;
  })();
  var TagSetTag = (function () {
      function TagSetTag(value0) {
          this.value0 = value0;
      };
      TagSetTag.create = function (value0) {
          return new TagSetTag(value0);
      };
      return TagSetTag;
  })();
  var mkTagType = function (tagger) {
      return function (name) {
          var $0 = Data_Map_Internal.singleton(name);
          return function ($1) {
              return $0(tagger($1));
          };
      };
  };                                          
  var tag = mkTagType(StringTag.create);
  exports["StringTag"] = StringTag;
  exports["NumberTag"] = NumberTag;
  exports["IntTag"] = IntTag;
  exports["BooleanTag"] = BooleanTag;
  exports["JSDateTag"] = JSDateTag;
  exports["TagSetTag"] = TagSetTag;
  exports["tag"] = tag;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Log.Formatter.Pretty"] = $PS["Data.Log.Formatter.Pretty"] || {};
  var exports = $PS["Data.Log.Formatter.Pretty"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Log_Tag = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];                
  var showBasic = function (dictApplicative) {
      return function (value) {
          return function (label) {
              return Control_Applicative.pure(dictApplicative)(Data_Array.singleton(label + value));
          };
      };
  };
  var indentEachLine = function (dictFunctor) {
      return Data_Functor.map(dictFunctor)(Data_Semigroup.append(Data_Semigroup.semigroupString)("   "));
  };
  var color = function ($35) {
      return Ansi_Output.withGraphics(Ansi_Output.foreground($35));
  };
  var showLevel = function (v) {
      if (v instanceof Data_Log_Level.Trace) {
          return color(Ansi_Codes.Cyan.value)("[TRACE]");
      };
      if (v instanceof Data_Log_Level.Debug) {
          return color(Ansi_Codes.Blue.value)("[DEBUG]");
      };
      if (v instanceof Data_Log_Level.Info) {
          return color(Ansi_Codes.White.value)("[INFO]");
      };
      if (v instanceof Data_Log_Level.Warn) {
          return color(Ansi_Codes.Yellow.value)("[WARN]");
      };
      if (v instanceof Data_Log_Level["Error"]) {
          return color(Ansi_Codes.Red.value)("[ERROR]");
      };
      throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 38, column 1 - line 38, column 32): " + [ v.constructor.name ]);
  };
  var showMainLine = function (dictMonadEffect) {
      return function (v) {
          return Effect_Class.liftEffect(dictMonadEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Data_JSDate.toISOString(v.timestamp))(function (ts) {
              return Data_String_Common.joinWith(" ")([ showLevel(v.level), color(Ansi_Codes.BrightBlack.value)(ts), color(Ansi_Codes.Cyan.value)(v.message) ]);
          }));
      };
  };
  var showSpecial = function (dictApplicative) {
      var $36 = showBasic(dictApplicative);
      var $37 = color(Ansi_Codes.Yellow.value);
      return function ($38) {
          return $36($37($38));
      };
  };
  var showJsDate = function (dictMonadEffect) {
      return function (value) {
          return function (label) {
              return Effect_Class.liftEffect(dictMonadEffect)(Control_Bind.bind(Effect.bindEffect)(Data_JSDate.toISOString(value))(Data_Function.flip(showSpecial(Effect.applicativeEffect))(label)));
          };
      };
  };
  var bold$prime = Ansi_Output.withGraphics(Ansi_Output.bold);
  var tagLines = function (dictMonadEffect) {
      return function (tags) {
          if (Data_Map_Internal.isEmpty(tags)) {
              return Control_Plus.empty(Data_Maybe.plusMaybe);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(indentEachLine(Data_Functor.functorArray))(Data_Array.concat))(lineify(dictMonadEffect)(tags)));
          };
          throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 50, column 1 - line 50, column 74): " + [ tags.constructor.name ]);
      };
  };
  var showTag = function (dictMonadEffect) {
      return function (v) {
          if (v instanceof Data_Log_Tag.StringTag) {
              return showBasic((dictMonadEffect.Monad0()).Applicative0())(v.value0);
          };
          if (v instanceof Data_Log_Tag.IntTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showInt)(v.value0));
          };
          if (v instanceof Data_Log_Tag.NumberTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showNumber)(v.value0));
          };
          if (v instanceof Data_Log_Tag.BooleanTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showBoolean)(v.value0));
          };
          if (v instanceof Data_Log_Tag.TagSetTag) {
              return showSubTags(dictMonadEffect)(v.value0);
          };
          if (v instanceof Data_Log_Tag.JSDateTag) {
              return showJsDate(dictMonadEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 61, column 1 - line 61, column 72): " + [ v.constructor.name ]);
      };
  };
  var showSubTags = function (dictMonadEffect) {
      return function (value) {
          return function (label) {
              return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Array.cons(label))(Data_Maybe.fromMaybe(Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())([  ]))(tagLines(dictMonadEffect)(value)));
          };
      };
  };
  var showField = function (dictMonadEffect) {
      return function (v) {
          return showTag(dictMonadEffect)(v.value1)(bold$prime(v.value0) + bold$prime(": "));
      };
  };
  var lineify = function (dictMonadEffect) {
      return function (tags) {
          return Data_Traversable.sequence(Data_Traversable.traversableArray)((dictMonadEffect.Monad0()).Applicative0())(Data_Functor.map(Data_Functor.functorArray)(showField(dictMonadEffect))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(tags)));
      };
  };
  var showTags = function (dictMonadEffect) {
      var $39 = tagLines(dictMonadEffect);
      return function ($40) {
          return (function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())("");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.mapFlipped((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(v.value0)((function () {
                      var $41 = Data_Semigroup.append(Data_Semigroup.semigroupString)("\x0a");
                      var $42 = Data_String_Common.joinWith("\x0a");
                      return function ($43) {
                          return $41($42($43));
                      };
                  })());
              };
              throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 46, column 25 - line 48, column 56): " + [ v.constructor.name ]);
          })($39($40));
      };
  };
  var prettyFormatter = function (dictMonadEffect) {
      return function (message) {
          return Control_Apply.apply(((dictMonadEffect.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Semigroup.append(Data_Semigroup.semigroupString))(showMainLine(dictMonadEffect)(message)))(showTags(dictMonadEffect)(message.tags));
      };
  };
  exports["prettyFormatter"] = prettyFormatter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe.Last"] = $PS["Data.Maybe.Last"] || {};
  var exports = $PS["Data.Maybe.Last"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Last = function (x) {
      return x;
  };
  var semigroupLast = {
      append: function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Just) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  exports["Last"] = Last;
  exports["semigroupLast"] = semigroupLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List (line 477, column 3 - line 477, column 38): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done1 = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done2 = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done2 = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done2) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($345) {
          return mergeAll(sequences($345));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var take = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v, v1) {
                      if (v < 1) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $tco_var_v = v - 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 524, column 3 - line 524, column 35): " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                          
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 423, column 5 - line 425, column 32): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List (line 421, column 3 - line 421, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["head"] = head;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["take"] = take;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $71 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($72) {
          return $71(toList($72));
      };
  };
  var size = function (v) {
      return Data_Map_Internal.size(v);
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var showSet = function (dictShow) {
      return {
          show: function (s) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(dictShow))(toUnfoldable(Data_Unfoldable.unfoldableArray)(s)) + ")");
          }
      };
  };
  var semigroupSet = function (dictOrd) {
      return {
          append: union(dictOrd)
      };
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $73 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($74) {
                  return $73(toList($74));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $75 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($76) {
                  return $75(toList($76));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $77 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($78) {
                  return $77(toList($78));
              };
          };
      }
  };
  var filter = function (dictOrd) {
      return function (f) {
          return function (v) {
              return Data_Map_Internal.filterWithKey(dictOrd)(function (k) {
                  return function (v1) {
                      return f(k);
                  };
              })(v);
          };
      };
  };
  var eqSet = function (dictEq) {
      return {
          eq: function (v) {
              return function (v1) {
                  return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
              };
          }
      };
  };
  var ordSet = function (dictOrd) {
      return {
          compare: function (s1) {
              return function (s2) {
                  return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
              };
          },
          Eq0: function () {
              return eqSet(dictOrd.Eq0());
          }
      };
  };
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var intersection = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              var toArray = (function () {
                  var $79 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                  return function ($80) {
                      return $79(toList($80));
                  };
              })();
              var rs = toArray(s2);
              var rl = Data_Array.length(rs);
              var ls = toArray(s1);
              var ll = Data_Array.length(ls);
              var intersect = function (acc) {
                  var go = function (l) {
                      return function (r) {
                          var $66 = l < ll && r < rl;
                          if ($66) {
                              var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                              if (v instanceof Data_Ordering.EQ) {
                                  return function __do() {
                                      Data_Array_ST.push(ls[l])(acc)();
                                      return new Control_Monad_Rec_Class.Loop({
                                          a: l + 1 | 0,
                                          b: r + 1 | 0
                                      });
                                  };
                              };
                              if (v instanceof Data_Ordering.LT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l + 1 | 0,
                                      b: r
                                  }));
                              };
                              if (v instanceof Data_Ordering.GT) {
                                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                                      a: l,
                                      b: r + 1 | 0
                                  }));
                              };
                              throw new Error("Failed pattern match at Data.Set (line 184, column 12 - line 189, column 43): " + [ v.constructor.name ]);
                          };
                          return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
              };
              return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST["new"])(intersect))(Data_Array_ST.unsafeFreeze)());
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldl(foldableSet)(function (m) {
              return function (a) {
                  return insert(dictOrd)(f(a))(m);
              };
          })(empty);
      };
  };
  var monoidSet = function (dictOrd) {
      return {
          mempty: empty,
          Semigroup0: function () {
              return semigroupSet(dictOrd);
          }
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["map"] = map;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["size"] = size;
  exports["union"] = union;
  exports["intersection"] = intersection;
  exports["filter"] = filter;
  exports["eqSet"] = eqSet;
  exports["showSet"] = showSet;
  exports["ordSet"] = ordSet;
  exports["monoidSet"] = monoidSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Helpers"] = $PS["Helpers"] || {};
  var exports = $PS["Helpers"];
  var Aeson = $PS["Aeson"];
  var Aeson_Encode = $PS["Aeson.Encode"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Log_Formatter_Pretty = $PS["Data.Log.Formatter.Pretty"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var uIntToBigInt = (function () {
      var $34 = Data_Maybe.fromJust();
      return function ($35) {
          return $34(Data_BigInt.fromString(Data_UInt.toString($35)));
      };
  })();
  var showWithParens = function (dictShow) {
      return function (ctorName) {
          return function (x) {
              return "(" + (ctorName + (" (" + (Data_Show.show(dictShow)(x) + "))")));
          };
      };
  };
  var maybeArrayMerge = function (dictEq) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v;
              };
              if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                  return Data_Maybe.Just.create(Data_Array.union(dictEq)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Helpers (line 124, column 1 - line 129, column 21): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var logWithLevel = function (dictMonadEffect) {
      return function (lvl) {
          return function (msg) {
              return Control_Applicative.when((dictMonadEffect.Monad0()).Applicative0())(Data_Ord.greaterThanOrEq(Data_Log_Level.ordLogLevel)(msg.level)(lvl))(Control_Bind.bindFlipped((dictMonadEffect.Monad0()).Bind1())(Effect_Class_Console.log(dictMonadEffect))(Data_Log_Formatter_Pretty.prettyFormatter(dictMonadEffect)(msg)));
          };
      };
  };
  var logString = function (cfgLevel) {
      return function (level) {
          return function (message) {
              return function __do() {
                  var timestamp = Data_JSDate.now();
                  return logWithLevel(Effect_Class.monadEffectEffect)(cfgLevel)({
                      timestamp: timestamp,
                      message: message,
                      level: level,
                      tags: Data_Map_Internal.empty
                  })();
              };
          };
      };
  };
  var liftEither = function (dictMonadError) {
      return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()));
  };
  var liftM = function (dictMonadError) {
      return function (err) {
          var $36 = liftEither(dictMonadError);
          var $37 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(Data_Either.Right.create);
          return function ($38) {
              return $36($37($38));
          };
      };
  };
  var liftedM = function (dictMonadError) {
      return function (err) {
          return function (mma) {
              return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(mma)((function () {
                  var $43 = liftEither(dictMonadError);
                  var $44 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(Data_Either.Right.create);
                  return function ($45) {
                      return $43($44($45));
                  };
              })());
          };
      };
  };
  var fromJustEff = function (e) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"](e);
          };
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Helpers (line 67, column 17 - line 69, column 19): " + [ v.constructor.name ]);
      };
  };
  var filterMapWithKeyM = function (dictOrd) {
      return function (dictMonad) {
          return function (p) {
              var $48 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList));
              var $49 = Data_List_Lazy.filterM(dictMonad)(Data_Tuple.uncurry(p));
              var $50 = Data_Map_Internal.toUnfoldable(Data_List_Lazy_Types.unfoldableList);
              return function ($51) {
                  return $48($49($50($51)));
              };
          };
      };
  };
  var encodeTagged$prime = function (dictEncodeAeson) {
      return function (str) {
          return function (x) {
              return Aeson_Encode.encodeTagged(str)(x)(Aeson.encodeAeson(dictEncodeAeson));
          };
      };
  };
  var encodeSet = function (dictEncodeAeson) {
      return function (set) {
          return Aeson.encodeAeson(Aeson.encodeAesonArray(dictEncodeAeson))(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(set));
      };
  };
  var encodeMap = function (dictEncodeAeson) {
      return function (dictEncodeAeson1) {
          return Data_Newtype.unwrap()(Aeson_Encode.dictionary(Aeson.encodeAeson(dictEncodeAeson))(Aeson.encodeAeson(dictEncodeAeson1)));
      };
  };
  var appendRightMap = function (dictOrd) {
      return Data_Map_Internal.unionWith(dictOrd)(Data_Function.flip(Data_Function["const"]));
  };
  var appendMap = function (dictOrd) {
      return function (dictSemigroup) {
          return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup));
      };
  };
  var appendLastMaybe = function (m) {
      return function (m$prime) {
          return (function (v) {
              return v;
          })(Data_Function.on(Data_Semigroup.append(Data_Maybe_Last.semigroupLast))(Data_Maybe_Last.Last)(m)(m$prime));
      };
  };
  var appendFirstMaybe = function (m) {
      return function (m$prime) {
          return (function (v) {
              return v;
          })(Data_Function.on(Data_Semigroup.append(Data_Maybe_First.semigroupFirst))(Data_Maybe_First.First)(m)(m$prime));
      };
  };
  exports["appendFirstMaybe"] = appendFirstMaybe;
  exports["appendLastMaybe"] = appendLastMaybe;
  exports["appendMap"] = appendMap;
  exports["appendRightMap"] = appendRightMap;
  exports["filterMapWithKeyM"] = filterMapWithKeyM;
  exports["fromJustEff"] = fromJustEff;
  exports["liftEither"] = liftEither;
  exports["liftM"] = liftM;
  exports["liftedM"] = liftedM;
  exports["logString"] = logString;
  exports["logWithLevel"] = logWithLevel;
  exports["maybeArrayMerge"] = maybeArrayMerge;
  exports["showWithParens"] = showWithParens;
  exports["uIntToBigInt"] = uIntToBigInt;
  exports["encodeMap"] = encodeMap;
  exports["encodeSet"] = encodeSet;
  exports["encodeTagged'"] = encodeTagged$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["TypeLevel.Nat"] = $PS["TypeLevel.Nat"] || {};
  var exports = $PS["TypeLevel.Nat"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var knownNatZ = {
      natVal: function (v) {
          return 0;
      }
  };
  var natVal = function (dict) {
      return dict.natVal;
  };
  var knownNatS = function (dictKnownNat) {
      return {
          natVal: function (v) {
              return 1 + natVal(dictKnownNat)(Type_Proxy["Proxy"].value) | 0;
          }
      };
  };
  exports["natVal"] = natVal;
  exports["knownNatZ"] = knownNatZ;
  exports["knownNatS"] = knownNatS;
})(PS);
(function(exports) {
  // From instance for Array in prelude
  exports.ord_ = f => xs => ys => {
    let i = 0;
    const xlen = xs.length;
    const ylen = ys.length;
    while (i < xlen && i < ylen) {
      let o = f(xs[i])(ys[i]);
      if (o !== 0) {
        return o;
      }
      i++;
    }
    if (xlen === ylen) {
      return 0;
    } else if (xlen > ylen) {
      return -1;
    } else {
      return 1;
    }
  };

  exports.concat_ = xs => ys => {
    const res = new Uint8Array(xs.length + ys.length);
    for (let i = 0; i < xs.length; i++) {
      res[i] = xs[i];
    }
    for (let i = 0; i < ys.length; i++) {
      res[i + xs.length] = ys[i];
    }
    return res;
  };

  exports.byteArrayToHex = arr => Buffer.from(arr).toString("hex");

  /* adapted from https://github.com/WebReflection/uint8-to-utf16/blob/master/esm/index.js
 * (someone who knows javascript should like import that or something)
 */  
  const { ceil } = Math;
  const { fromCharCode } = String;

  exports.hexToByteArray_ = nothing => just => hex => {
    let bytes = [];
    for (let c = 0; c < hex.length; c += 2) {
      const chunk = hex.substr(c, 2);
      if (/[0-9a-f]{2}/i.test(chunk)) {
        bytes.push(parseInt(chunk, 16));
      } else {
        return nothing;
      }
    }
    return just(new Uint8Array(bytes));
  };

  exports.byteArrayFromIntArrayUnsafe = ints => new Uint8Array(ints);

  exports.byteArrayToIntArray = bytes => Array.from(bytes);

  exports.byteLength = bytes => bytes.byteLength;

  exports.subarray = start => end => bytes => bytes.subarray(start, end);
})(PS["Types.ByteArray"] = PS["Types.ByteArray"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($55) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                  
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.ByteArray"] = $PS["Types.ByteArray"] || {};
  var exports = $PS["Types.ByteArray"];
  var $foreign = $PS["Types.ByteArray"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Traversable = $PS["Data.Traversable"];
  var showByteArray = {
      show: function (arr) {
          return "(hexToByteArrayUnsafe " + (Data_Show.show(Data_Show.showString)($foreign.byteArrayToHex(arr)) + ")");
      }
  };
  var semigroupByteArray = {
      append: $foreign.concat_
  };
  var monoidByteArray = {
      mempty: $foreign.byteArrayFromIntArrayUnsafe([  ]),
      Semigroup0: function () {
          return semigroupByteArray;
      }
  };
  var ordByteArray = {
      compare: (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = Data_Ord.compare(Data_Ord.ordInt)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Types.ByteArray (line 54, column 7 - line 57, column 17): " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.ord_(toDelta)(xs)(ys));
              };
          };
      })(),
      Eq0: function () {
          return eqByteArray;
      }
  };
  var eqByteArray = {
      eq: function (a) {
          return function (b) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordByteArray)(a)(b))(Data_Ordering.EQ.value);
          };
      }
  };
  var encodeAesonByteArray = {
      "encodeAeson'": function (ba) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonString)($foreign.byteArrayToHex(ba));
      }
  };
  var hexToByteArray = $foreign.hexToByteArray_(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var decodeAesonByteArray = {
      decodeAeson: function (j) {
          var unexpectedValueError = Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(j));
          var typeMismatchError = new Data_Argonaut_Decode_Error.TypeMismatch("expected a hex-encoded string");
          return Aeson.caseAesonString(new Data_Either.Left(typeMismatchError))((function () {
              var $13 = Data_Either.note(unexpectedValueError);
              return function ($14) {
                  return $13(hexToByteArray($14));
              };
          })())(j);
      }
  };                                                                                                            
  var byteArrayFromAscii = function (str) {
      return Data_Functor.map(Data_Maybe.functorMaybe)($foreign.byteArrayFromIntArrayUnsafe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(Data_String_CodeUnits.toCharArray(str))(function (cp) {
          var charCode = Data_Char.toCharCode(cp);
          var $12 = charCode <= 255 && charCode >= 0;
          if ($12) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(charCode);
          };
          return Data_Maybe.Nothing.value;
      }));
  };
  exports["byteArrayFromAscii"] = byteArrayFromAscii;
  exports["hexToByteArray"] = hexToByteArray;
  exports["showByteArray"] = showByteArray;
  exports["eqByteArray"] = eqByteArray;
  exports["ordByteArray"] = ordByteArray;
  exports["monoidByteArray"] = monoidByteArray;
  exports["decodeAesonByteArray"] = decodeAesonByteArray;
  exports["encodeAesonByteArray"] = encodeAesonByteArray;
  exports["byteArrayToHex"] = $foreign.byteArrayToHex;
  exports["byteArrayToIntArray"] = $foreign.byteArrayToIntArray;
  exports["byteLength"] = $foreign.byteLength;
  exports["subarray"] = $foreign.subarray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.PlutusData"] = $PS["Types.PlutusData"] || {};
  var exports = $PS["Types.PlutusData"];
  var Aeson = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var Constr = (function () {
      function Constr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Constr.create = function (value0) {
          return function (value1) {
              return new Constr(value0, value1);
          };
      };
      return Constr;
  })();
  var $$Map = (function () {
      function $$Map(value0) {
          this.value0 = value0;
      };
      $$Map.create = function (value0) {
          return new $$Map(value0);
      };
      return $$Map;
  })();
  var List = (function () {
      function List(value0) {
          this.value0 = value0;
      };
      List.create = function (value0) {
          return new List(value0);
      };
      return List;
  })();
  var Integer = (function () {
      function Integer(value0) {
          this.value0 = value0;
      };
      Integer.create = function (value0) {
          return new Integer(value0);
      };
      return Integer;
  })();
  var Bytes = (function () {
      function Bytes(value0) {
          this.value0 = value0;
      };
      Bytes.create = function (value0) {
          return new Bytes(value0);
      };
      return Bytes;
  })();
  var genericPlutusData_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new Constr(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new $$Map(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new List(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new Integer(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
              return new Bytes(x.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at Types.PlutusData (line 44, column 1 - line 44, column 37): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Constr) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof $$Map) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof List) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof Integer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof Bytes) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
          };
          throw new Error("Failed pattern match at Types.PlutusData (line 44, column 1 - line 44, column 37): " + [ x.constructor.name ]);
      }
  };
  var showPlutusData = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericPlutusData_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showPlutusData))))({
              reflectSymbol: function () {
                  return "Constr";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Tuple.showTuple(showPlutusData)(showPlutusData))))({
              reflectSymbol: function () {
                  return "Map";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showPlutusData)))({
              reflectSymbol: function () {
                  return "List";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))({
              reflectSymbol: function () {
                  return "Integer";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
              reflectSymbol: function () {
                  return "Bytes";
              }
          }))))))(x);
      }
  };
  var eqPlutusData = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Constr && y instanceof Constr) {
                  return Data_Eq.eq(Data_BigInt.eqBigInt)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqPlutusData))(x.value1)(y.value1);
              };
              if (x instanceof $$Map && y instanceof $$Map) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(eqPlutusData)(eqPlutusData)))(x.value0)(y.value0);
              };
              if (x instanceof List && y instanceof List) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqPlutusData))(x.value0)(y.value0);
              };
              if (x instanceof Integer && y instanceof Integer) {
                  return Data_Eq.eq(Data_BigInt.eqBigInt)(x.value0)(y.value0);
              };
              if (x instanceof Bytes && y instanceof Bytes) {
                  return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var encodeAesonPlutusData = {
      "encodeAeson'": function (v) {
          if (v instanceof Constr) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "fields";
                  }
              })())({
                  reflectSymbol: function () {
                      return "constr";
                  }
              })())())({
                  constr: Aeson.encodeAeson(Aeson.encodeAesonBigInt)(v.value0),
                  fields: Aeson.encodeAeson(Aeson.encodeAesonArray(encodeAesonPlutusData))(v.value1)
              });
          };
          if (v instanceof $$Map) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "map";
                  }
              })())())({
                  map: Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonNil)({
                      reflectSymbol: function () {
                          return "value";
                      }
                  })())({
                      reflectSymbol: function () {
                          return "key";
                      }
                  })())()))(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                      return {
                          key: Aeson.encodeAeson(encodeAesonPlutusData)(v1.value0),
                          value: Aeson.encodeAeson(encodeAesonPlutusData)(v1.value1)
                      };
                  })(v.value0))
              });
          };
          if (v instanceof List) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonArray(encodeAesonPlutusData))(v.value0);
          };
          if (v instanceof Integer) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonBigInt)(v.value0);
          };
          if (v instanceof Bytes) {
              return Aeson["encodeAeson'"](Types_ByteArray.encodeAesonByteArray)(v.value0);
          };
          throw new Error("Failed pattern match at Types.PlutusData (line 90, column 1 - line 106, column 44): " + [ v.constructor.name ]);
      }
  };
  var decodeAesonPlutusData = {
      decodeAeson: function (aeson) {
          var decodeMap = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(aeson))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonArray(Aeson.decodeAesonObject(Aeson.decodeAesonAeson)))(obj)("map"))(function (map1) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(map1)(function (entryJson) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonPlutusData)(entryJson)("key"))(function (key) {
                          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonPlutusData)(entryJson)("value"))(function (value) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(key, value));
                          });
                      });
                  }))(function (kvs) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new $$Map(kvs));
                  });
              });
          });
          var decodeList = Data_Functor.map(Data_Either.functorEither)(List.create)(Aeson.decodeAeson(Aeson.decodeAesonArray(decodeAesonPlutusData))(aeson));
          var decodeInteger = Data_Functor.map(Data_Either.functorEither)(Integer.create)(Aeson.decodeAeson(Aeson.decodeAesonBigInt)(aeson));
          var decodeConstr = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(aeson))(function (x) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonBigInt)(x)("constr"))(function (constr) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonArray(decodeAesonPlutusData))(x)("fields"))(function (fields) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Constr(constr, fields));
                  });
              });
          });
          var decodeBytes = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonString)(aeson))(function (bytesHex) {
              var v = Types_ByteArray.hexToByteArray(bytesHex);
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(Aeson.encodeAeson(Aeson.encodeAesonString)(bytesHex))));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Bytes(v.value0));
              };
              throw new Error("Failed pattern match at Types.PlutusData (line 85, column 7 - line 88, column 37): " + [ v.constructor.name ]);
          });
          return Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(decodeConstr)(decodeMap))(decodeList))(decodeInteger))(decodeBytes);
      }
  };
  exports["Constr"] = Constr;
  exports["Map"] = $$Map;
  exports["List"] = List;
  exports["Integer"] = Integer;
  exports["Bytes"] = Bytes;
  exports["eqPlutusData"] = eqPlutusData;
  exports["showPlutusData"] = showPlutusData;
  exports["decodeAesonPlutusData"] = decodeAesonPlutusData;
  exports["encodeAesonPlutusData"] = encodeAesonPlutusData;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["ToData"] = $PS["ToData"] || {};
  var exports = $PS["ToData"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Helpers = $PS["Helpers"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var TypeLevel_Nat = $PS["TypeLevel.Nat"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var toDataUnit = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
      }
  };
  var toDataRawBytes = {
      toData: (function () {
          var $126 = Data_Newtype.unwrap();
          return function ($127) {
              return Types_PlutusData.Bytes.create($126($127));
          };
      })()
  };
  var toDataByteArray = {
      toData: Types_PlutusData.Bytes.create
  };
  var toDataBoolean = {
      toData: function (v) {
          if (!v) {
              return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
          };
          if (v) {
              return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [  ]);
          };
          throw new Error("Failed pattern match at ToData (line 240, column 1 - line 242, column 30): " + [ v.constructor.name ]);
      }
  };
  var toDataBigInt = {
      toData: Types_PlutusData.Integer.create
  };
  var toDataArgsRLHelperNilRow = {
      "toDataArgsRec'": function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return [  ];
                  };
              };
          };
      }
  };
  var toDataArgsNoArguments = function (dictIsSymbol) {
      return {
          toDataArgs: function (v) {
              return function (v1) {
                  return function (v2) {
                      return [  ];
                  };
              };
          },
          IsSymbol0: function () {
              return dictIsSymbol;
          }
      };
  };
  var toDataWithSchema = function (dict) {
      return dict.toDataWithSchema;
  };
  var toDataWithSchemaSum = function (dictToDataWithSchema) {
      return function (dictToDataWithSchema1) {
          return {
              toDataWithSchema: function (p) {
                  return function (v) {
                      if (v instanceof Data_Generic_Rep.Inl) {
                          return toDataWithSchema(dictToDataWithSchema)(p)(v.value0);
                      };
                      if (v instanceof Data_Generic_Rep.Inr) {
                          return toDataWithSchema(dictToDataWithSchema1)(p)(v.value0);
                      };
                      throw new Error("Failed pattern match at ToData (line 122, column 1 - line 128, column 54): " + [ p.constructor.name, v.constructor.name ]);
                  };
              }
          };
      };
  };
  var toDataArgsRec$prime = function (dict) {
      return dict["toDataArgsRec'"];
  };
  var toDataArgsRL = function (dictToDataArgsRLHelper) {
      return {
          toDataArgsRec: function (proxy) {
              return function (constr) {
                  return function (list) {
                      return function (rec) {
                          return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Array.sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(toDataArgsRec$prime(dictToDataArgsRLHelper)(proxy)(constr)(list)(rec)));
                      };
                  };
              };
          },
          ToDataArgsRLHelper0: function () {
              return dictToDataArgsRLHelper;
          }
      };
  };
  var toDataArgsRec = function (dict) {
      return dict.toDataArgsRec;
  };
  var toDataArgsRecord = function (dictIsSymbol) {
      return function (dictToDataArgsRL) {
          return function (dictRowToList) {
              return {
                  toDataArgs: function (proxy) {
                      return function (constr) {
                          return function (rec) {
                              return toDataArgsRec(dictToDataArgsRL)(proxy)(constr)(Type_Proxy["Proxy"].value)(rec);
                          };
                      };
                  },
                  IsSymbol0: function () {
                      return dictIsSymbol;
                  }
              };
          };
      };
  };
  var toDataArgs = function (dict) {
      return dict.toDataArgs;
  };
  var toDataArgsArgumentRecord = function (dictToDataArgs) {
      return {
          toDataArgs: function (proxy) {
              return function (constr) {
                  return function (v) {
                      return toDataArgs(dictToDataArgs)(proxy)(constr)(v);
                  };
              };
          },
          IsSymbol0: dictToDataArgs.IsSymbol0
      };
  };
  var toDataArgsProduct = function (dictToDataArgs) {
      return function (dictToDataArgs1) {
          return {
              toDataArgs: function (proxy) {
                  return function (constr) {
                      return function (v) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(toDataArgs(dictToDataArgs)(proxy)(constr)(v.value0))(toDataArgs(dictToDataArgs1)(proxy)(constr)(v.value1));
                      };
                  };
              },
              IsSymbol0: dictToDataArgs.IsSymbol0
          };
      };
  };
  var toDataWithSchemaConstruct = function (dictIsSymbol) {
      return function (dictToDataArgs) {
          return function (dictHasPlutusSchema) {
              return function (dictValidPlutusSchema) {
                  return function (dictGetIndexWithLabel) {
                      return function (dictKnownNat) {
                          return {
                              toDataWithSchema: function (p) {
                                  return function (v) {
                                      return new Types_PlutusData.Constr(Data_BigInt.fromInt(TypeLevel_Nat.natVal(dictKnownNat)(Type_Proxy["Proxy"].value)), toDataArgs(dictToDataArgs)(p)(Type_Proxy["Proxy"].value)(v));
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var toData = function (dict) {
      return dict.toData;
  };
  var toDataArgsArgument = function (dictToData) {
      return function (dictIsSymbol) {
          return {
              toDataArgs: function (v) {
                  return function (v1) {
                      return function (v2) {
                          return [ toData(dictToData)(v2) ];
                      };
                  };
              },
              IsSymbol0: function () {
                  return dictIsSymbol;
              }
          };
      };
  };
  var toDataArgsRLHelperCons = function (dictToData) {
      return function (dictToDataArgsRLHelper) {
          return function (dictLacks) {
              return function (dictCons) {
                  return function (dictRowToList) {
                      return function (dictIsSymbol) {
                          return function (dictIsSymbol1) {
                              return function (dictHasPlutusSchema) {
                                  return function (dictValidPlutusSchema) {
                                      return function (dictGetWithLabel) {
                                          return function (dictGetLabelIndex) {
                                              return function (dictKnownNat) {
                                                  return {
                                                      "toDataArgsRec'": function (v) {
                                                          return function (constr) {
                                                              return function (v1) {
                                                                  return function (x) {
                                                                      var ix = TypeLevel_Nat.natVal(dictKnownNat)(Type_Proxy["Proxy"].value);
                                                                      var field = Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(x);
                                                                      return Data_Array.cons(new Data_Tuple.Tuple(ix, toData(dictToData)(field)))(toDataArgsRec$prime(dictToDataArgsRLHelper)(Type_Proxy["Proxy"].value)(constr)(Type_Proxy["Proxy"].value)(Record["delete"](dictIsSymbol)()()(Type_Proxy["Proxy"].value)(x)));
                                                                  };
                                                              };
                                                          };
                                                      }
                                                  };
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var toDataMaybe = function (dictToData) {
      return {
          toData: function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ toData(dictToData)(v.value0) ]);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [  ]);
              };
              throw new Error("Failed pattern match at ToData (line 244, column 1 - line 246, column 33): " + [ v.constructor.name ]);
          }
      };
  };
  var toDataUInt = {
      toData: (function () {
          var $138 = toData(toDataBigInt);
          return function ($139) {
              return $138(Helpers.uIntToBigInt($139));
          };
      })()
  };
  var genericToData = function (dictGeneric) {
      return function (dictToDataWithSchema) {
          var $140 = toDataWithSchema(dictToDataWithSchema)(Type_Proxy["Proxy"].value);
          var $141 = Data_Generic_Rep.from(dictGeneric);
          return function ($142) {
              return $140($141($142));
          };
      };
  };
  exports["genericToData"] = genericToData;
  exports["toData"] = toData;
  exports["toDataArgsRL"] = toDataArgsRL;
  exports["toDataWithSchemaSum"] = toDataWithSchemaSum;
  exports["toDataWithSchemaConstruct"] = toDataWithSchemaConstruct;
  exports["toDataArgsNoArguments"] = toDataArgsNoArguments;
  exports["toDataArgsArgumentRecord"] = toDataArgsArgumentRecord;
  exports["toDataArgsArgument"] = toDataArgsArgument;
  exports["toDataArgsRecord"] = toDataArgsRecord;
  exports["toDataArgsProduct"] = toDataArgsProduct;
  exports["toDataArgsRLHelperNilRow"] = toDataArgsRLHelperNilRow;
  exports["toDataArgsRLHelperCons"] = toDataArgsRLHelperCons;
  exports["toDataUnit"] = toDataUnit;
  exports["toDataBoolean"] = toDataBoolean;
  exports["toDataMaybe"] = toDataMaybe;
  exports["toDataBigInt"] = toDataBigInt;
  exports["toDataUInt"] = toDataUInt;
  exports["toDataByteArray"] = toDataByteArray;
  exports["toDataRawBytes"] = toDataRawBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.RawBytes"] = $PS["Types.RawBytes"] || {};
  var exports = $PS["Types.RawBytes"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];              
  var ordRawBytes = Types_ByteArray.ordByteArray;
  var monoidRawBytes = Types_ByteArray.monoidByteArray;                  
  var eqRawBytes = Types_ByteArray.eqByteArray;
  var encodeAesonRawBytes = Types_ByteArray.encodeAesonByteArray;
  var rawBytesToHex = (function () {
      var $13 = Data_Newtype.unwrap();
      return function ($14) {
          return Types_ByteArray.byteArrayToHex($13($14));
      };
  })();
  var showRawBytes = {
      show: function (rb) {
          return "(hexToRawBytesUnsafe " + (Data_Show.show(Data_Show.showString)(rawBytesToHex(rb)) + ")");
      }
  };   
  var hexToRawBytes = (function () {
      var $23 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
      return function ($24) {
          return $23(Types_ByteArray.hexToByteArray($24));
      };
  })();
  exports["rawBytesToHex"] = rawBytesToHex;
  exports["hexToRawBytes"] = hexToRawBytes;
  exports["showRawBytes"] = showRawBytes;
  exports["eqRawBytes"] = eqRawBytes;
  exports["ordRawBytes"] = ordRawBytes;
  exports["monoidRawBytes"] = monoidRawBytes;
  exports["encodeAesonRawBytes"] = encodeAesonRawBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.Hash"] = $PS["Serialization.Hash"] || {};
  var exports = $PS["Serialization.Hash"];
  var $foreign = $PS["Serialization.Hash"];
  var Aeson = $PS["Aeson"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var FfiHelpers = $PS["FfiHelpers"];
  var ToData = $PS["ToData"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var toDataEd25519KeyHash = {
      toData: (function () {
          var $37 = ToData.toData(ToData.toDataByteArray);
          var $38 = Data_Newtype.unwrap();
          return function ($39) {
              return $37($38($foreign.ed25519KeyHashToBytes($39)));
          };
      })()
  };
  var showScriptHash = {
      show: function (edkh) {
          return "(ScriptHash " + (Types_RawBytes.rawBytesToHex($foreign.scriptHashToBytes(edkh)) + ")");
      }
  };
  var showEd25519KeyHash = {
      show: function (edkh) {
          return "(Ed25519KeyHash " + (Types_RawBytes.rawBytesToHex($foreign.ed25519KeyHashToBytes(edkh)) + ")");
      }
  };
  var eqScriptHash = {
      eq: Data_Function.on(Data_Eq.eq(Types_RawBytes.eqRawBytes))($foreign.scriptHashToBytes)
  };
  var ordScriptHash = {
      compare: Data_Function.on(Data_Ord.compare(Types_RawBytes.ordRawBytes))($foreign.scriptHashToBytes),
      Eq0: function () {
          return eqScriptHash;
      }
  };
  var eqEd25519KeyHash = {
      eq: Data_Function.on(Data_Eq.eq(Types_RawBytes.eqRawBytes))($foreign.ed25519KeyHashToBytes)
  };
  var ordEd25519KeyHash = {
      compare: Data_Function.on(Data_Ord.compare(Types_RawBytes.ordRawBytes))($foreign.ed25519KeyHashToBytes),
      Eq0: function () {
          return eqEd25519KeyHash;
      }
  };
  var encodeAesonScriptHash = {
      "encodeAeson'": function (sh) {
          return Aeson["encodeAeson'"](Types_RawBytes.encodeAesonRawBytes)($foreign.scriptHashToBytes(sh));
      }
  };
  var encodeAesonEd25519KeyHash = {
      "encodeAeson'": (function () {
          var $40 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
          return function ($41) {
              return $40(Types_RawBytes.rawBytesToHex($foreign.ed25519KeyHashToBytes($41)));
          };
      })()
  };                                                                                      
  var scriptHashFromBytes = $foreign["_scriptHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);      
  var ed25519KeyHashFromBytes = $foreign["_ed25519KeyHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);
  exports["ed25519KeyHashFromBytes"] = ed25519KeyHashFromBytes;
  exports["scriptHashFromBytes"] = scriptHashFromBytes;
  exports["eqEd25519KeyHash"] = eqEd25519KeyHash;
  exports["ordEd25519KeyHash"] = ordEd25519KeyHash;
  exports["showEd25519KeyHash"] = showEd25519KeyHash;
  exports["toDataEd25519KeyHash"] = toDataEd25519KeyHash;
  exports["encodeAesonEd25519KeyHash"] = encodeAesonEd25519KeyHash;
  exports["eqScriptHash"] = eqScriptHash;
  exports["ordScriptHash"] = ordScriptHash;
  exports["showScriptHash"] = showScriptHash;
  exports["encodeAesonScriptHash"] = encodeAesonScriptHash;
  exports["ed25519KeyHashToBytes"] = $foreign.ed25519KeyHashToBytes;
  exports["scriptHashToBytes"] = $foreign.scriptHashToBytes;
  exports["nativeScriptHash"] = $foreign.nativeScriptHash;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.bnCompare = lhs => rhs => lhs.compare(rhs);

  exports.zero = lib.BigNum.zero();

  exports.one = lib.BigNum.one();

  exports.bnAdd = maybe => lhs => rhs => {
    try {
      return maybe.just(lhs.checked_add(rhs));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports._fromString = maybe => str => {
    // this is needed because try/catch overuse breaks runtime badly
    // https://github.com/Plutonomicon/cardano-transaction-lib/issues/875
    if (str[0] == "-") {
      return maybe.nothing;
    }
    try {
      return maybe.just(lib.BigNum.from_str(str));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports.toString = bn => bn.to_str();
})(PS["Types.BigNum"] = PS["Types.BigNum"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.BigNum"] = $PS["Types.BigNum"] || {};
  var exports = $PS["Types.BigNum"];
  var $foreign = $PS["Types.BigNum"];
  var Aeson = $PS["Aeson"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_UInt = $PS["Data.UInt"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var showBigNum = {
      show: function (bn) {
          return "fromString \"" + ($foreign.toString(bn) + "\"");
      }
  };
  var eqBigNum = {
      eq: function (lhs) {
          return function (rhs) {
              return $foreign.bnCompare(lhs)(rhs) === 0;
          };
      }
  };
  var ordBigNum = {
      compare: function (lhs) {
          return function (rhs) {
              var v = $foreign.bnCompare(lhs)(rhs);
              if (v === 1) {
                  return Data_Ordering.GT.value;
              };
              if (v === 0) {
                  return Data_Ordering.EQ.value;
              };
              return Data_Ordering.LT.value;
          };
      },
      Eq0: function () {
          return eqBigNum;
      }
  };
  var toBigInt = function ($12) {
      return Data_BigInt.fromString($foreign.toString($12));
  };
  var toBigIntUnsafe = (function () {
      var $13 = Data_Maybe.fromJust();
      return function ($14) {
          return $13(toBigInt($14));
      };
  })();
  var encodeAesonBigNum = {
      "encodeAeson'": (function () {
          var $15 = Aeson["encodeAeson'"](Aeson.encodeAesonBigInt);
          return function ($16) {
              return $15(toBigIntUnsafe($16));
          };
      })()
  };                                                  
  var fromString = $foreign["_fromString"](FfiHelpers.maybeFfiHelper);
  var fromStringUnsafe = (function () {
      var $17 = Data_Maybe.fromJust();
      return function ($18) {
          return $17(fromString($18));
      };
  })();
  var fromUInt = function ($19) {
      return fromStringUnsafe(Data_UInt.toString($19));
  };
  var maxValue = fromStringUnsafe("18446744073709551615");
  var fromBigInt = function ($21) {
      return fromString(Data_BigInt.toString($21));
  };
  var decodeAesonBigNum = {
      decodeAeson: Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Couldn't convert `BigInt` to `BigNum`"));
          return function ($23) {
              return $22(fromBigInt($23));
          };
      })())(Aeson.decodeAeson(Aeson.decodeAesonBigInt))
  };
  var add = $foreign.bnAdd(FfiHelpers.maybeFfiHelper);
  exports["add"] = add;
  exports["fromBigInt"] = fromBigInt;
  exports["fromStringUnsafe"] = fromStringUnsafe;
  exports["maxValue"] = maxValue;
  exports["toBigInt"] = toBigInt;
  exports["toBigIntUnsafe"] = toBigIntUnsafe;
  exports["fromUInt"] = fromUInt;
  exports["eqBigNum"] = eqBigNum;
  exports["ordBigNum"] = ordBigNum;
  exports["showBigNum"] = showBigNum;
  exports["decodeAesonBigNum"] = decodeAesonBigNum;
  exports["encodeAesonBigNum"] = encodeAesonBigNum;
  exports["one"] = $foreign.one;
  exports["toString"] = $foreign.toString;
  exports["zero"] = $foreign.zero;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.CborBytes"] = $PS["Types.CborBytes"] || {};
  var exports = $PS["Types.CborBytes"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Types_ByteArray = $PS["Types.ByteArray"];               
  var ordCborBytes = Types_ByteArray.ordByteArray;                        
  var eqCborBytes = Types_ByteArray.eqByteArray;              
  var rawBytesAsCborBytes = (function () {
      var $11 = Data_Newtype.wrap();
      var $12 = Data_Newtype.unwrap();
      return function ($13) {
          return $11($12($13));
      };
  })();
  var cborBytesToHex = (function () {
      var $20 = Data_Newtype.unwrap();
      return function ($21) {
          return Types_ByteArray.byteArrayToHex($20($21));
      };
  })();
  exports["cborBytesToHex"] = cborBytesToHex;
  exports["rawBytesAsCborBytes"] = rawBytesAsCborBytes;
  exports["eqCborBytes"] = eqCborBytes;
  exports["ordCborBytes"] = ordCborBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.Address"] = $PS["Serialization.Address"] || {};
  var exports = $PS["Serialization.Address"];
  var $foreign = $PS["Serialization.Address"];
  var Aeson = $PS["Aeson"];
  var Aeson_Encode = $PS["Aeson.Encode"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Slot = function (x) {
      return x;
  };
  var TestnetId = (function () {
      function TestnetId() {

      };
      TestnetId.value = new TestnetId();
      return TestnetId;
  })();
  var MainnetId = (function () {
      function MainnetId() {

      };
      MainnetId.value = new MainnetId();
      return MainnetId;
  })();
  var showAddress = {
      show: function (a) {
          return "(Address " + ($foreign.addressBech32(a) + ")");
      }
  };
  var genericTransactionIndex_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionIndex = {
      show: Data_Show_Generic.genericShow(genericTransactionIndex_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_BigNum.showBigNum))({
          reflectSymbol: function () {
              return "TransactionIndex";
          }
      }))
  };
  var genericSlot_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showSlot = {
      show: Data_Show_Generic.genericShow(genericSlot_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_BigNum.showBigNum))({
          reflectSymbol: function () {
              return "Slot";
          }
      }))
  };
  var genericNetworkId_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return TestnetId.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return MainnetId.value;
          };
          throw new Error("Failed pattern match at Serialization.Address (line 383, column 1 - line 383, column 36): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof TestnetId) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof MainnetId) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Serialization.Address (line 383, column 1 - line 383, column 36): " + [ x.constructor.name ]);
      }
  };
  var showNetworkId = {
      show: Data_Show_Generic.genericShow(genericNetworkId_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "TestnetId";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "MainnetId";
          }
      })))
  };
  var genericCertificateIndex_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showCertificateIndex = {
      show: Data_Show_Generic.genericShow(genericCertificateIndex_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_BigNum.showBigNum))({
          reflectSymbol: function () {
              return "CertificateIndex";
          }
      }))
  };                                                     
  var eqTransactionIndex = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_BigNum.eqBigNum)(x)(y);
          };
      }
  };
  var eqStakeCredential = {
      eq: Data_Function.on(Data_Eq.eq(Types_CborBytes.eqCborBytes))($foreign.stakeCredentialToBytes)
  };
  var eqSlot = Types_BigNum.eqBigNum;
  var eqNetworkId = {
      eq: function (x) {
          return function (y) {
              if (x instanceof TestnetId && y instanceof TestnetId) {
                  return true;
              };
              if (x instanceof MainnetId && y instanceof MainnetId) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqCertificateIndex = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_BigNum.eqBigNum)(x)(y);
          };
      }
  };                                       
  var eqAddress = {
      eq: Data_Function.on(Data_Eq.eq(Types_CborBytes.eqCborBytes))($foreign.addressBytes)
  };
  var eqRewardAddress = {
      eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.rewardAddressToAddress)
  };
  var ordAddress = {
      compare: Data_Function.on(Data_Ord.compare(Types_CborBytes.ordCborBytes))($foreign.addressBytes),
      Eq0: function () {
          return eqAddress;
      }
  };                                                             
  var encodeAesonStakeCredentia = {
      "encodeAeson'": $foreign.withStakeCredential({
          onKeyHash: Aeson["encodeAeson'"](Serialization_Hash.encodeAesonEd25519KeyHash),
          onScriptHash: Aeson["encodeAeson'"](Serialization_Hash.encodeAesonScriptHash)
      })
  };
  var encodeAesonSlot = Types_BigNum.encodeAesonBigNum;
  var encodeAesonNetworkId = {
      "encodeAeson'": function (v) {
          if (v instanceof TestnetId) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Aeson_Encode.encodeTagged("TestnetId")({})(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())));
          };
          if (v instanceof MainnetId) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Aeson_Encode.encodeTagged("MainnetId")({})(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())));
          };
          throw new Error("Failed pattern match at Serialization.Address (line 373, column 18 - line 375, column 77): " + [ v.constructor.name ]);
      }
  };
  var encodeAesonAddress = {
      "encodeAeson'": (function () {
          var $161 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
          return function ($162) {
              return $161($foreign.addressBech32($162));
          };
      })()
  };                                                             
  var decodeAesonSlot = Types_BigNum.decodeAesonBigNum;          
  var stakeCredentialToScriptHash = $foreign.withStakeCredential({
      onKeyHash: Data_Function["const"](Data_Maybe.Nothing.value),
      onScriptHash: Data_Maybe.Just.create
  });
  var stakeCredentialToKeyHash = $foreign.withStakeCredential({
      onKeyHash: Data_Maybe.Just.create,
      onScriptHash: Data_Function["const"](Data_Maybe.Nothing.value)
  });
  var showVia = function (dictShow) {
      return function (nm) {
          return function (toShowable) {
              return function (addr) {
                  return "(" + (nm + (" " + (Data_Show.show(dictShow)(toShowable(addr)) + ")")));
              };
          };
      };
  };
  var showRewardAddress = {
      show: showVia(showAddress)("RewardAddress")($foreign.rewardAddressToAddress)
  };
  var showStakeCredential = {
      show: showVia(Data_Show.showString)("StakeCredenetial")($foreign.withStakeCredential({
          onKeyHash: Data_Show.show(Serialization_Hash.showEd25519KeyHash),
          onScriptHash: Data_Show.show(Serialization_Hash.showScriptHash)
      }))
  };
  var rewardAddressFromAddress = $foreign["_rewardAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var rewardAddressBytes = function ($163) {
      return $foreign.addressBytes($foreign.rewardAddressToAddress($163));
  };
  var ordRewardAddress = {
      compare: Data_Function.on(Data_Ord.compare(Types_CborBytes.ordCborBytes))(rewardAddressBytes),
      Eq0: function () {
          return eqRewardAddress;
      }
  };
  var rewardAddressBech32 = function ($166) {
      return $foreign.addressBech32($foreign.rewardAddressToAddress($166));
  };
  var encodeAesonRewardAddress = {
      "encodeAeson'": (function () {
          var $167 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
          return function ($168) {
              return $167(rewardAddressBech32($168));
          };
      })()
  };
  var pointerAddressFromAddress = $foreign["_pointerAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var networkIdtoInt = function (v) {
      if (v instanceof TestnetId) {
          return 0;
      };
      if (v instanceof MainnetId) {
          return 1;
      };
      throw new Error("Failed pattern match at Serialization.Address (line 378, column 18 - line 380, column 17): " + [ v.constructor.name ]);
  };
  var pointerAddress = $foreign["_pointerAddress"](networkIdtoInt);
  var paymentKeyHashPointerAddress = function (networkId) {
      return function (pkh) {
          return function (ptr) {
              return pointerAddress({
                  network: networkId,
                  paymentCred: $foreign.keyHashCredential(pkh),
                  stakePointer: ptr
              });
          };
      };
  };
  var scriptHashPointerAddress = function (networkId) {
      return function (sh) {
          return function (ptr) {
              return pointerAddress({
                  network: networkId,
                  paymentCred: $foreign.scriptHashCredential(sh),
                  stakePointer: ptr
              });
          };
      };
  };
  var rewardAddress = $foreign["_rewardAddress"](networkIdtoInt);
  var intToNetworkId = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(TestnetId.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(MainnetId.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var unsafeIntToNetId = function (i) {
      return Data_Maybe.fromJust()(intToNetworkId(i));
  };
  var enterpriseAddressFromAddress = $foreign["_enterpriseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var enterpriseAddress = $foreign["_enterpriseAddress"](networkIdtoInt);
  var paymentKeyHashEnterpriseAddress = function (networkId) {
      return function (pkh) {
          return enterpriseAddress({
              network: networkId,
              paymentCred: $foreign.keyHashCredential(pkh)
          });
      };
  };
  var scriptHashEnterpriseAddress = function (networkId) {
      return function (sh) {
          return enterpriseAddress({
              network: networkId,
              paymentCred: $foreign.scriptHashCredential(sh)
          });
      };
  };                                                                                            
  var baseAddressFromAddress = $foreign["_baseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var baseAddress = $foreign["_baseAddress"](networkIdtoInt);
  var paymentKeyHashScriptHashAddress = function (networkId) {
      return function (pkh) {
          return function (sh) {
              return baseAddress({
                  network: networkId,
                  paymentCred: $foreign.keyHashCredential(pkh),
                  delegationCred: $foreign.scriptHashCredential(sh)
              });
          };
      };
  };
  var paymentKeyHashStakeKeyHashAddress = function (networkId) {
      return function (pkh) {
          return function (skh) {
              return baseAddress({
                  network: networkId,
                  paymentCred: $foreign.keyHashCredential(pkh),
                  delegationCred: $foreign.keyHashCredential(skh)
              });
          };
      };
  };
  var scriptHashScriptHashAddress = function (networkId) {
      return function (sh) {
          return function (sh$prime) {
              return baseAddress({
                  network: networkId,
                  paymentCred: $foreign.scriptHashCredential(sh),
                  delegationCred: $foreign.scriptHashCredential(sh$prime)
              });
          };
      };
  };
  var scriptHashStakeKeyHashAddress = function (networkId) {
      return function (sh) {
          return function (skh) {
              return baseAddress({
                  network: networkId,
                  paymentCred: $foreign.scriptHashCredential(sh),
                  delegationCred: $foreign.keyHashCredential(skh)
              });
          };
      };
  };
  var addressPaymentCred = function (addr) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.baseAddressPaymentCred)(baseAddressFromAddress(addr)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.rewardAddressPaymentCred)(rewardAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.pointerAddressPaymentCred)(pointerAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.enterpriseAddressPaymentCred)(enterpriseAddressFromAddress(addr)));
  };
  var addressNetworkId = $foreign["_addressNetworkId"](unsafeIntToNetId);
  var addressFromBytes = $foreign["_addressFromBytes"](FfiHelpers.maybeFfiHelper);
  var addressFromBech32 = $foreign["_addressFromBech32"](FfiHelpers.maybeFfiHelper);
  exports["Slot"] = Slot;
  exports["addressNetworkId"] = addressNetworkId;
  exports["intToNetworkId"] = intToNetworkId;
  exports["baseAddress"] = baseAddress;
  exports["paymentKeyHashStakeKeyHashAddress"] = paymentKeyHashStakeKeyHashAddress;
  exports["scriptHashStakeKeyHashAddress"] = scriptHashStakeKeyHashAddress;
  exports["paymentKeyHashScriptHashAddress"] = paymentKeyHashScriptHashAddress;
  exports["scriptHashScriptHashAddress"] = scriptHashScriptHashAddress;
  exports["MainnetId"] = MainnetId;
  exports["TestnetId"] = TestnetId;
  exports["stakeCredentialToKeyHash"] = stakeCredentialToKeyHash;
  exports["stakeCredentialToScriptHash"] = stakeCredentialToScriptHash;
  exports["addressFromBytes"] = addressFromBytes;
  exports["addressFromBech32"] = addressFromBech32;
  exports["addressPaymentCred"] = addressPaymentCred;
  exports["baseAddressFromAddress"] = baseAddressFromAddress;
  exports["enterpriseAddress"] = enterpriseAddress;
  exports["enterpriseAddressFromAddress"] = enterpriseAddressFromAddress;
  exports["paymentKeyHashEnterpriseAddress"] = paymentKeyHashEnterpriseAddress;
  exports["scriptHashEnterpriseAddress"] = scriptHashEnterpriseAddress;
  exports["pointerAddressFromAddress"] = pointerAddressFromAddress;
  exports["paymentKeyHashPointerAddress"] = paymentKeyHashPointerAddress;
  exports["scriptHashPointerAddress"] = scriptHashPointerAddress;
  exports["rewardAddress"] = rewardAddress;
  exports["eqSlot"] = eqSlot;
  exports["decodeAesonSlot"] = decodeAesonSlot;
  exports["encodeAesonSlot"] = encodeAesonSlot;
  exports["showSlot"] = showSlot;
  exports["eqTransactionIndex"] = eqTransactionIndex;
  exports["showTransactionIndex"] = showTransactionIndex;
  exports["eqCertificateIndex"] = eqCertificateIndex;
  exports["showCertificateIndex"] = showCertificateIndex;
  exports["showAddress"] = showAddress;
  exports["encodeAesonAddress"] = encodeAesonAddress;
  exports["eqAddress"] = eqAddress;
  exports["ordAddress"] = ordAddress;
  exports["eqRewardAddress"] = eqRewardAddress;
  exports["showRewardAddress"] = showRewardAddress;
  exports["ordRewardAddress"] = ordRewardAddress;
  exports["encodeAesonRewardAddress"] = encodeAesonRewardAddress;
  exports["eqStakeCredential"] = eqStakeCredential;
  exports["showStakeCredential"] = showStakeCredential;
  exports["encodeAesonStakeCredentia"] = encodeAesonStakeCredentia;
  exports["encodeAesonNetworkId"] = encodeAesonNetworkId;
  exports["eqNetworkId"] = eqNetworkId;
  exports["showNetworkId"] = showNetworkId;
  exports["addressBech32"] = $foreign.addressBech32;
  exports["keyHashCredential"] = $foreign.keyHashCredential;
  exports["scriptHashCredential"] = $foreign.scriptHashCredential;
  exports["withStakeCredential"] = $foreign.withStakeCredential;
  exports["baseAddressPaymentCred"] = $foreign.baseAddressPaymentCred;
  exports["baseAddressDelegationCred"] = $foreign.baseAddressDelegationCred;
  exports["baseAddressToAddress"] = $foreign.baseAddressToAddress;
  exports["enterpriseAddressPaymentCred"] = $foreign.enterpriseAddressPaymentCred;
  exports["enterpriseAddressToAddress"] = $foreign.enterpriseAddressToAddress;
  exports["pointerAddressPaymentCred"] = $foreign.pointerAddressPaymentCred;
  exports["pointerAddressToAddress"] = $foreign.pointerAddressToAddress;
  exports["pointerAddressStakePointer"] = $foreign.pointerAddressStakePointer;
  exports["rewardAddressToAddress"] = $foreign.rewardAddressToAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Scripts"] = $PS["Types.Scripts"] || {};
  var exports = $PS["Types.Scripts"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var ValidatorHash = function (x) {
      return x;
  };
  var MintingPolicyHash = function (x) {
      return x;
  };
  var PlutusV1 = (function () {
      function PlutusV1() {

      };
      PlutusV1.value = new PlutusV1();
      return PlutusV1;
  })();
  var PlutusV2 = (function () {
      function PlutusV2() {

      };
      PlutusV2.value = new PlutusV2();
      return PlutusV2;
  })();
  var PlutusScript = function (x) {
      return x;
  };
  var MintingPolicy = function (x) {
      return x;
  };
  var Validator = function (x) {
      return x;
  };                                                                
  var ordValidatorHash = Serialization_Hash.ordScriptHash;     
  var ordMintingPolicyHash = Serialization_Hash.ordScriptHash;
  var genericValidator_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericValidatorHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showValidatorHash = {
      show: Data_Show_Generic.genericShow(genericValidatorHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
          reflectSymbol: function () {
              return "ValidatorHash";
          }
      }))
  };
  var genericPlutusScript_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericMintingPolicy_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericMintingPolicyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMintingPolicyHash = {
      show: Data_Show_Generic.genericShow(genericMintingPolicyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
          reflectSymbol: function () {
              return "MintingPolicyHash";
          }
      }))
  };
  var genericLanguage_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return PlutusV1.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return PlutusV2.value;
          };
          throw new Error("Failed pattern match at Types.Scripts (line 47, column 1 - line 47, column 35): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof PlutusV1) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof PlutusV2) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Types.Scripts (line 47, column 1 - line 47, column 35): " + [ x.constructor.name ]);
      }
  };
  var showLanguage = {
      show: Data_Show_Generic.genericShow(genericLanguage_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "PlutusV1";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "PlutusV2";
          }
      })))
  };
  var showPlutusScript = {
      show: Data_Show_Generic.genericShow(genericPlutusScript_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Tuple.showTuple(Types_ByteArray.showByteArray)(showLanguage)))({
          reflectSymbol: function () {
              return "PlutusScript";
          }
      }))
  };
  var showMintingPolicy = {
      show: Data_Show_Generic.genericShow(genericMintingPolicy_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
          reflectSymbol: function () {
              return "MintingPolicy";
          }
      }))
  };
  var showValidator = {
      show: Data_Show_Generic.genericShow(genericValidator_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
          reflectSymbol: function () {
              return "Validator";
          }
      }))
  };                                                                    
  var eqValidatorHash = Serialization_Hash.eqScriptHash;     
  var eqMintingPolicyHash = Serialization_Hash.eqScriptHash;
  var eqLanguage = {
      eq: function (x) {
          return function (y) {
              if (x instanceof PlutusV1 && y instanceof PlutusV1) {
                  return true;
              };
              if (x instanceof PlutusV2 && y instanceof PlutusV2) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqPlutusScript = Data_Tuple.eqTuple(Types_ByteArray.eqByteArray)(eqLanguage);
  var eqMintingPolicy = eqPlutusScript; 
  var eqValidator = eqPlutusScript;
  var ordLanguage = {
      compare: function (x) {
          return function (y) {
              if (x instanceof PlutusV1 && y instanceof PlutusV1) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PlutusV1) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PlutusV1) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof PlutusV2 && y instanceof PlutusV2) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Types.Scripts (line 46, column 1 - line 46, column 29): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqLanguage;
      }
  };
  var encodeAesonLanguage = {
      "encodeAeson'": (function () {
          var $119 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
          return function ($120) {
              return $119((function (v) {
                  if (v instanceof PlutusV1) {
                      return "PlutusV1";
                  };
                  if (v instanceof PlutusV2) {
                      return "PlutusV2";
                  };
                  throw new Error("Failed pattern match at Types.Scripts (line 59, column 35 - line 61, column 27): " + [ v.constructor.name ]);
              })($120));
          };
      })()
  };
  var encodeAesonPlutusScript = Aeson.encodeAesonTuple(Types_ByteArray.encodeAesonByteArray)(encodeAesonLanguage);
  var decodeAesonLanguage = {
      decodeAeson: Aeson.caseAesonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected string")))(function (v) {
          if (v === "PlutusV1") {
              return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusV1.value);
          };
          if (v === "PlutusV2") {
              return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusV2.value);
          };
          return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(Aeson.fromString(v))));
      })
  };
  var decodeAesonPlutusScript = Aeson.decodeAesonTuple(Types_ByteArray.decodeAesonByteArray)(decodeAesonLanguage);
  var plutusV1Script = function (ba) {
      return new Data_Tuple.Tuple(ba, PlutusV1.value);
  };
  var decodeAesonHelper = function (dictDecodeAeson) {
      return function (constrName) {
          return function (constr) {
              return Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonAeson))(constrName))((function () {
                  var $121 = Data_Functor.map(Data_Either.functorEither)(constr);
                  var $122 = Aeson.decodeAeson(dictDecodeAeson);
                  return function ($123) {
                      return $121($122($123));
                  };
              })()));
          };
      };
  };
  var decodeAesonMintingPolicy = {
      decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getMintingPolicy")(MintingPolicy)
  };
  var decodeAesonValidator = {
      decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getValidator")(Validator)
  };
  exports["MintingPolicyHash"] = MintingPolicyHash;
  exports["PlutusScript"] = PlutusScript;
  exports["ValidatorHash"] = ValidatorHash;
  exports["PlutusV1"] = PlutusV1;
  exports["PlutusV2"] = PlutusV2;
  exports["plutusV1Script"] = plutusV1Script;
  exports["ordLanguage"] = ordLanguage;
  exports["encodeAesonLanguage"] = encodeAesonLanguage;
  exports["showLanguage"] = showLanguage;
  exports["eqPlutusScript"] = eqPlutusScript;
  exports["encodeAesonPlutusScript"] = encodeAesonPlutusScript;
  exports["showPlutusScript"] = showPlutusScript;
  exports["eqMintingPolicy"] = eqMintingPolicy;
  exports["decodeAesonMintingPolicy"] = decodeAesonMintingPolicy;
  exports["showMintingPolicy"] = showMintingPolicy;
  exports["eqValidator"] = eqValidator;
  exports["decodeAesonValidator"] = decodeAesonValidator;
  exports["showValidator"] = showValidator;
  exports["eqMintingPolicyHash"] = eqMintingPolicyHash;
  exports["ordMintingPolicyHash"] = ordMintingPolicyHash;
  exports["showMintingPolicyHash"] = showMintingPolicyHash;
  exports["eqValidatorHash"] = eqValidatorHash;
  exports["ordValidatorHash"] = ordValidatorHash;
  exports["showValidatorHash"] = showValidatorHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Address"] = $PS["Address"] || {};
  var exports = $PS["Address"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var ogmiosAddressToAddress = Serialization_Address.addressFromBech32;
  var enterpriseAddressScriptHash = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Serialization_Address.stakeCredentialToScriptHash)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)((function () {
      var $0 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
      return function ($1) {
          return $0(Serialization_Address.enterpriseAddressPaymentCred($1));
      };
  })())(Serialization_Address.enterpriseAddressFromAddress));
  var enterpriseAddressValidatorHash = (function () {
      var $4 = Data_Functor.map(Data_Maybe.functorMaybe)(Types_Scripts.ValidatorHash);
      return function ($5) {
          return $4(enterpriseAddressScriptHash($5));
      };
  })();
  var addressToOgmiosAddress = Serialization_Address.addressBech32;
  exports["addressToOgmiosAddress"] = addressToOgmiosAddress;
  exports["enterpriseAddressValidatorHash"] = enterpriseAddressValidatorHash;
  exports["ogmiosAddressToAddress"] = ogmiosAddressToAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($63) {
              return v(f($63));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  var monadEffectReader = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
              var $75 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($76) {
                  return $74($75($76));
              };
          })(),
          Monad0: function () {
              return monadReaderT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return {
          throwError: (function () {
              var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
              var $84 = Control_Monad_Error_Class.throwError(dictMonadThrow);
              return function ($85) {
                  return $83($84($85));
              };
          })(),
          Monad0: function () {
              return monadReaderT(dictMonadThrow.Monad0());
          }
      };
  };
  var monadErrorReaderT = function (dictMonadError) {
      return {
          catchError: function (v) {
              return function (h) {
                  return function (r) {
                      return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                          var v1 = h(e);
                          return v1(r);
                      });
                  };
              };
          },
          MonadThrow0: function () {
              return monadThrowReaderT(dictMonadError.MonadThrow0());
          }
      };
  };
  var altReaderT = function (dictAlt) {
      return {
          alt: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Alt.alt(dictAlt)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictAlt.Functor0());
          }
      };
  };
  var plusReaderT = function (dictPlus) {
      return {
          empty: Data_Function["const"](Control_Plus.empty(dictPlus)),
          Alt0: function () {
              return altReaderT(dictPlus.Alt0());
          }
      };
  };
  var alternativeReaderT = function (dictAlternative) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictAlternative.Applicative0());
          },
          Plus1: function () {
              return plusReaderT(dictAlternative.Plus1());
          }
      };
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Aeson.Decode"] = $PS["Aeson.Decode"] || {};
  var exports = $PS["Aeson.Decode"];
  var Aeson = $PS["Aeson"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var value = function (dictDecodeAeson) {
      return Control_Monad_Reader_Trans.ReaderT(Aeson.decodeAeson(dictDecodeAeson));
  };
  var decode = Control_Monad_Reader_Trans.runReaderT;
  exports["decode"] = decode;
  exports["value"] = value;
})(PS);
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  };
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["string"] = string;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  } 

  exports._encodeFormURLComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail(err);
    }
  };
})(PS["JSURI"] = PS["JSURI"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                                                                                  
  var encodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_encodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeFormURLComponent"] = encodeFormURLComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var JSURI = $PS["JSURI"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI.encodeFormURLComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI.encodeFormURLComponent(v.value0)))(JSURI.encodeFormURLComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 116): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = {
      show: function (v) {
          if (v instanceof OPTIONS) {
              return "OPTIONS";
          };
          if (v instanceof GET) {
              return "GET";
          };
          if (v instanceof HEAD) {
              return "HEAD";
          };
          if (v instanceof POST) {
              return "POST";
          };
          if (v instanceof PUT) {
              return "PUT";
          };
          if (v instanceof DELETE) {
              return "DELETE";
          };
          if (v instanceof TRACE) {
              return "TRACE";
          };
          if (v instanceof CONNECT) {
              return "CONNECT";
          };
          if (v instanceof PROPFIND) {
              return "PROPFIND";
          };
          if (v instanceof PROPPATCH) {
              return "PROPPATCH";
          };
          if (v instanceof MKCOL) {
              return "MKCOL";
          };
          if (v instanceof COPY) {
              return "COPY";
          };
          if (v instanceof MOVE) {
              return "MOVE";
          };
          if (v instanceof LOCK) {
              return "LOCK";
          };
          if (v instanceof UNLOCK) {
              return "UNLOCK";
          };
          if (v instanceof PATCH) {
              return "PATCH";
          };
          throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
      }
  };
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["POST"] = POST;
  exports["print"] = print;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports._parAffAlt = function (aff1) {
    return function (aff2) {
      return Aff.ParAlt(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._makeSupervisedFiber = function (util, aff) {
    return function () {
      var supervisor = Aff.Supervisor(util);
      return {
        fiber: Aff.Fiber(util, supervisor, aff),
        supervisor: supervisor
      };
    };
  };

  exports._killAll = function (error, supervisor, cb) {
    return supervisor.killAll(error, cb);
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  var monadParReaderT = function (dictParallel) {
      return {
          parallel: Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)),
          sequential: Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)),
          Monad0: function () {
              return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
          },
          Applicative1: function () {
              return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
          }
      };
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["monadParReaderT"] = monadParReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var parOneOf = function (dictParallel) {
      return function (dictAlternative) {
          return function (dictFoldable) {
              return function (dictFunctor) {
                  var $32 = Control_Parallel_Class.sequential(dictParallel);
                  var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
                  return function ($34) {
                      return $32($33($34));
                  };
              };
          };
      };
  };
  exports["parSequence_"] = parSequence_;
  exports["parOneOf"] = parOneOf;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };
  var effectCanceler = (function () {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function ($43) {
          return Canceler(Data_Function["const"]($42($43)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };                                                            
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $46 = Effect_Class.liftEffect(monadEffectAff);
              return function ($47) {
                  return $46(k($47));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var supervise = function (aff) {
      var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
      var killAll = function (err) {
          return function (sup) {
              return $foreign.makeAff(function (k) {
                  return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
              });
          };
      };
      var acquire = function __do() {
          var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
          sup.fiber.run();
          return sup;
      };
      return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
          killed: function (err) {
              return function (sup) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ killFiber(err)(sup.fiber), killAll(err)(sup) ]);
              };
          },
          failed: Data_Function["const"](killAll(killError)),
          completed: Data_Function["const"](killAll(killError))
      })(function ($53) {
          return joinFiber((function (v) {
              return v.fiber;
          })($53));
      });
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };   
  var altParAff = {
      alt: $foreign["_parAffAlt"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var altAff = {
      alt: function (a1) {
          return function (a2) {
              return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
          };
      },
      Functor0: function () {
          return functorAff;
      }
  };
  var plusAff = {
      empty: Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")),
      Alt0: function () {
          return altAff;
      }
  };
  var plusParAff = {
      empty: Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)),
      Alt0: function () {
          return altParAff;
      }
  };
  var alternativeParAff = {
      Applicative0: function () {
          return applicativeParAff;
      },
      Plus1: function () {
          return plusParAff;
      }
  };
  exports["Canceler"] = Canceler;
  exports["launchAff_"] = launchAff_;
  exports["runAff_"] = runAff_;
  exports["supervise"] = supervise;
  exports["delay"] = delay;
  exports["finally"] = $$finally;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["alternativeParAff"] = alternativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return Data_Either.Right.create(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Data_Either.Right.create(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return Data_Either.Left.create((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };
  exports["defaultRequest"] = defaultRequest;
  exports["printError"] = printError;
  exports["request"] = request;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  var alternativeArray = {
      Applicative0: function () {
          return Control_Applicative.applicativeArray;
      },
      Plus1: function () {
          return Control_Plus.plusArray;
      }
  };
  exports["guard"] = guard;
  exports["alternativeArray"] = alternativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lattice"] = $PS["Data.Lattice"] || {};
  var exports = $PS["Data.Lattice"];
  var join = function (dict) {
      return dict.join;
  };
  exports["join"] = join;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.These"] = $PS["Data.These"] || {};
  var exports = $PS["Data.These"];                   
  var This = (function () {
      function This(value0) {
          this.value0 = value0;
      };
      This.create = function (value0) {
          return new This(value0);
      };
      return This;
  })();
  var That = (function () {
      function That(value0) {
          this.value0 = value0;
      };
      That.create = function (value0) {
          return new That(value0);
      };
      return That;
  })();
  var Both = (function () {
      function Both(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Both.create = function (value0) {
          return function (value1) {
              return new Both(value0, value1);
          };
      };
      return Both;
  })();
  var these = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  if (v3 instanceof This) {
                      return v(v3.value0);
                  };
                  if (v3 instanceof That) {
                      return v1(v3.value0);
                  };
                  if (v3 instanceof Both) {
                      return v2(v3.value0)(v3.value1);
                  };
                  throw new Error("Failed pattern match at Data.These (line 105, column 1 - line 105, column 79): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
              };
          };
      };
  };
  exports["This"] = This;
  exports["That"] = That;
  exports["Both"] = Both;
  exports["these"] = these;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  // `TextDecoder` is not available in `node`, use polyfill in that case
  let OurTextDecoder;
  if (typeof BROWSER_RUNTIME == "undefined" || !BROWSER_RUNTIME) {
    OurTextDecoder = require("util").TextDecoder;
  } else {
    OurTextDecoder = TextDecoder;
  }

  exports._decodeUtf8 = buffer => left => right => {
    let decoder = new OurTextDecoder("utf-8", { fatal: true }); // Without fatal=true it never fails

    try {
      return right(decoder.decode(buffer));
    } catch (err) {
      return left(err.toString());
    }
  };

  // FIXME: https://github.com/Plutonomicon/cardano-transaction-lib/issues/548
  const call = property => object => object[property]();
  exports.assetNameName = call("name");
})(PS["Types.TokenName"] = PS["Types.TokenName"] || {});
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var splitAt = function (i) {
      return function (s) {
          var before = take(i)(s);
          return {
              before: before,
              after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
          };
      };
  };
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["take"] = take;
  exports["splitAt"] = splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.TokenName"] = $PS["Types.TokenName"] || {};
  var exports = $PS["Types.TokenName"];
  var $foreign = $PS["Types.TokenName"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var ToData = $PS["ToData"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_RawBytes = $PS["Types.RawBytes"];                
  var TokenName = function (x) {
      return x;
  };                                                          
  var toDataTokenName = ToData.toDataRawBytes;
  var showTokenName = {
      show: function (v) {
          return "(TokenName " + (Data_Show.show(Types_RawBytes.showRawBytes)(v) + ")");
      }
  };
  var ordTokenName = Types_RawBytes.ordRawBytes;    
  var eqTokenName = Types_RawBytes.eqRawBytes;
  var mkTokenName = function (byteArr) {
      if (Types_ByteArray.byteLength(byteArr) <= 32) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(TokenName(Data_Newtype.wrap()(byteArr)));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Types.TokenName (line 100, column 1 - line 100, column 44): " + [ byteArr.constructor.name ]);
  };
  var getTokenName = function (v) {
      return Data_Newtype.unwrap()(v);
  };
  var fromTokenName = function (arrayHandler) {
      return function (stringHandler) {
          return function (v) {
              return Data_Either.either(Data_Function["const"](arrayHandler(v)))(stringHandler)($foreign["_decodeUtf8"](Data_Newtype.unwrap()(v))(Data_Either.Left.create)(Data_Either.Right.create));
          };
      };
  };
  var encodeAesonTokenName = {
      "encodeAeson'": (function () {
          var $34 = Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "unTokenName";
              }
          })())());
          var $35 = fromTokenName(function (ba) {
              return "\x00" + ("0x" + Types_ByteArray.byteArrayToHex(ba));
          })(function (s) {
              var v = Data_String_CodePoints.take(1)(s);
              if (v === "\x00") {
                  return "\x00\x00" + s;
              };
              return s;
          });
          return function ($36) {
              return $34((function (v) {
                  return {
                      unTokenName: v
                  };
              })($35($36)));
          };
      })()
  };
  var adaToken = Data_Monoid.mempty(Types_RawBytes.monoidRawBytes);
  exports["adaToken"] = adaToken;
  exports["getTokenName"] = getTokenName;
  exports["mkTokenName"] = mkTokenName;
  exports["eqTokenName"] = eqTokenName;
  exports["ordTokenName"] = ordTokenName;
  exports["toDataTokenName"] = toDataTokenName;
  exports["encodeAesonTokenName"] = encodeAesonTokenName;
  exports["showTokenName"] = showTokenName;
  exports["assetNameName"] = $foreign.assetNameName;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Cardano.Types.Value"] = $PS["Cardano.Types.Value"] || {};
  var exports = $PS["Cardano.Types.Value"];
  var Aeson = $PS["Aeson"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lattice = $PS["Data.Lattice"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_These = $PS["Data.These"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Helpers = $PS["Helpers"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_TokenName = $PS["Types.TokenName"];
  var NonAdaAsset = function (x) {
      return x;
  };
  var Coin = function (x) {
      return x;
  };
  var Value = (function () {
      function Value(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Value.create = function (value0) {
          return function (value1) {
              return new Value(value0, value1);
          };
      };
      return Value;
  })();                                             
  var splitCoin = {
      split: function (v) {
          var $127 = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
          if ($127) {
              return new Data_Tuple.Tuple(Data_Ring.negate(Data_BigInt.ringBigInt)(v), Data_Semiring.zero(Data_BigInt.semiringBigInt));
          };
          return new Data_Tuple.Tuple(Data_Semiring.zero(Data_BigInt.semiringBigInt), v);
      }
  };
  var showCurrencySymbol = {
      show: function (v) {
          return "(CurrencySymbol " + (Data_Show.show(Types_ByteArray.showByteArray)(v) + ")");
      }
  };
  var showNonAdaAsset = {
      show: function (v) {
          return "(NonAdaAsset " + (Data_Show.show(Data_Map_Internal.showMap(showCurrencySymbol)(Data_Map_Internal.showMap(Types_TokenName.showTokenName)(Data_BigInt.showBigInt)))(v) + ")");
      }
  };
  var showCoin = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("Coin")(v);
      }
  };
  var semigroupCoin = {
      append: function (v) {
          return function (v1) {
              return Data_Semiring.add(Data_BigInt.semiringBigInt)(v)(v1);
          };
      }
  };
  var ordCurrencySymbol = Types_ByteArray.ordByteArray;
  var negateCoin = {
      negation: (function () {
          var $323 = Data_Newtype.wrap();
          var $324 = Data_Ring.negate(Data_BigInt.ringBigInt);
          var $325 = Data_Newtype.unwrap();
          return function ($326) {
              return $323($324($325($326)));
          };
      })()
  };
  var monoidCoin = {
      mempty: Data_Semiring.zero(Data_BigInt.semiringBigInt),
      Semigroup0: function () {
          return semigroupCoin;
      }
  };
  var joinSemilatticeCoin = {
      join: function (v) {
          return function (v1) {
              return Data_Ord.max(Data_BigInt.ordBigInt)(v)(v1);
          };
      }
  };
  var genericValue_ = {
      to: function (x) {
          return new Value(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var showValue = {
      show: Data_Show_Generic.genericShow(genericValue_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showCoin))(Data_Show_Generic.genericShowArgsArgument(showNonAdaAsset)))({
          reflectSymbol: function () {
              return "Value";
          }
      }))
  };                                                      
  var eqCurrencySymbol = Types_ByteArray.eqByteArray;
  var eqNonAdaAsset = Data_Map_Internal.eqMap(eqCurrencySymbol)(Data_Map_Internal.eqMap(Types_TokenName.eqTokenName)(Data_BigInt.eqBigInt));
  var eqCoin = Data_BigInt.eqBigInt;
  var eqValue = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(eqCoin)(x.value0)(y.value0) && Data_Eq.eq(eqNonAdaAsset)(x.value1)(y.value1);
          };
      }
  };
  var encodeAesonCurrencySymbol = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "unCurrencySymbol";
              }
          })())())({
              unCurrencySymbol: Types_ByteArray.byteArrayToHex(v)
          });
      }
  };
  var encodeAesonNonAdaAsset = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(encodeAesonCurrencySymbol)(Aeson.encodeAesonAeson)(Data_Functor.map(Data_Map_Internal.functorMap)(Helpers.encodeMap(Types_TokenName.encodeAesonTokenName)(Aeson.encodeAesonBigInt))(v)));
      }
  };
  var encodeAesonCoin = Aeson.encodeAesonBigInt;
  var encodeAesonValue = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonCoin)(Aeson.gEncodeAesonCons(encodeAesonNonAdaAsset)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "nonAdaAsset";
              }
          })())({
              reflectSymbol: function () {
                  return "coin";
              }
          })())())({
              coin: v.value0,
              nonAdaAsset: v.value1
          });
      }
  };
  var unwrapNonAdaAsset = function (v) {
      return v;
  };
  var negateNonAdaAsset = {
      negation: (function () {
          var $327 = Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Ring.negate(Data_BigInt.ringBigInt)));
          return function ($328) {
              return NonAdaAsset($327(unwrapNonAdaAsset($328)));
          };
      })()
  };
  var unsafeAdaSymbol = Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
  var unsafeIsAda = function (curSymbol) {
      return function (tokenName) {
          return Data_Eq.eq(eqCurrencySymbol)(curSymbol)(unsafeAdaSymbol) && Data_Eq.eq(Types_TokenName.eqTokenName)(tokenName)(Types_TokenName.adaToken);
      };
  };
  var valueOf = function (v) {
      return function (curSymbol) {
          return function (tokenName) {
              var v1 = unsafeIsAda(curSymbol)(tokenName);
              if (!v1) {
                  var v2 = Data_Map_Internal.lookup(ordCurrencySymbol)(curSymbol)(v.value1);
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Data_Semiring.zero(Data_BigInt.semiringBigInt);
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      var v3 = Data_Map_Internal.lookup(Types_TokenName.ordTokenName)(tokenName)(v2.value0);
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return Data_Semiring.zero(Data_BigInt.semiringBigInt);
                      };
                      if (v3 instanceof Data_Maybe.Just) {
                          return v3.value0;
                      };
                      throw new Error("Failed pattern match at Cardano.Types.Value (line 631, column 19 - line 633, column 22): " + [ v3.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 629, column 7 - line 633, column 22): " + [ v2.constructor.name ]);
              };
              if (v1) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Cardano.Types.Value (line 627, column 3 - line 634, column 22): " + [ v1.constructor.name ]);
          };
      };
  };
  var valueToCoin$prime = function (v) {
      return valueOf(v)(unsafeAdaSymbol)(Types_TokenName.adaToken);
  };
  var union = function (dictOrd) {
      return function (l) {
          return function (r) {
              var rs = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(r);
              var ls = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(l);
              var rs$prime = Data_Array.filter(function (v) {
                  return !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                      return Data_Eq.eq(dictOrd.Eq0())(v1.value0)(v.value0);
                  })(ls);
              })(rs);
              var rs$prime$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.That.create))(rs$prime);
              var f = function (a) {
                  return function (b$prime) {
                      if (b$prime instanceof Data_Maybe.Nothing) {
                          return new Data_These.This(a);
                      };
                      if (b$prime instanceof Data_Maybe.Just) {
                          return new Data_These.Both(a, b$prime.value0);
                      };
                      throw new Error("Failed pattern match at Cardano.Types.Value (line 438, column 14 - line 440, column 25): " + [ b$prime.constructor.name ]);
                  };
              };
              var ls$prime = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return new Data_Tuple.Tuple(v.value0, f(v.value1)(Data_Map_Internal.lookup(dictOrd)(v.value0)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(rs))));
              })(ls);
              return Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ls$prime)(rs$prime$prime));
          };
      };
  };
  var unionNonAda = function (v) {
      return function (v1) {
          var unBoth = function (k) {
              if (k instanceof Data_These.This) {
                  return Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.This.create)(k.value0);
              };
              if (k instanceof Data_These.That) {
                  return Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.That.create)(k.value0);
              };
              if (k instanceof Data_These.Both) {
                  return union(Types_TokenName.ordTokenName)(k.value0)(k.value1);
              };
              throw new Error("Failed pattern match at Cardano.Types.Value (line 469, column 16 - line 472, column 28): " + [ k.constructor.name ]);
          };
          var combined = union(ordCurrencySymbol)(v)(v1);
          return Data_Functor.map(Data_Map_Internal.functorMap)(unBoth)(combined);
      };
  };   
  var split = function (dict) {
      return dict.split;
  };   
  var negation = function (dict) {
      return dict.negation;
  };
  var negateValue = {
      negation: function (v) {
          return new Value(negation(negateCoin)(v.value0), negation(negateNonAdaAsset)(v.value1));
      }
  };
  var mkValue = Value.create;
  var mkCurrencySymbol = function (byteArr) {
      return Control_Apply.applySecond(Data_Maybe.applyMaybe)(Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(byteArr)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(byteArr));
  };
  var mkNonAdaAssetsFromTokenMap$prime = function (dictTraversable) {
      var $340 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(ordCurrencySymbol)(dictTraversable.Foldable1()));
      var $341 = Data_Traversable.traverse(dictTraversable)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(mkCurrencySymbol));
      return function ($342) {
          return $340($341($342));
      };
  };
  var mpsSymbol = function (v) {
      return mkCurrencySymbol(Data_Newtype.unwrap()(Serialization_Hash.scriptHashToBytes(v)));
  };
  var mapThese = function (dictOrd) {
      return function (f) {
          return function (mps) {
              var mps$prime = Data_Functor.map(Data_Map_Internal.functorMap)(f)(mps);
              var f$prime = function (k) {
                  return function (v) {
                      return function (v1) {
                          if (v instanceof Data_These.This) {
                              return new Data_Tuple.Tuple(Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value0), v1.value1);
                          };
                          if (v instanceof Data_These.That) {
                              return new Data_Tuple.Tuple(v1.value0, Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value1));
                          };
                          if (v instanceof Data_These.Both) {
                              return new Data_Tuple.Tuple(Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value0), Data_Array.cons(new Data_Tuple.Tuple(k, v.value1))(v1.value1));
                          };
                          throw new Error("Failed pattern match at Cardano.Types.Value (line 733, column 23 - line 736, column 57): " + [ v.constructor.name ]);
                      };
                  };
              };
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(f$prime)(new Data_Tuple.Tuple([  ], [  ]))(mps$prime));
          };
      };
  };
  var splitNonAdaAsset = {
      split: function (v) {
          var splitIntl = function (mp$prime) {
              var v1 = mapThese(Types_TokenName.ordTokenName)(function (i) {
                  var $207 = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(i)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  if ($207) {
                      return new Data_These.This(Data_Ring.negate(Data_BigInt.ringBigInt)(i));
                  };
                  return new Data_These.That(i);
              })(mp$prime);
              return new Data_These.Both(v1.value0, v1.value1);
          };
          var v1 = mapThese(ordCurrencySymbol)(splitIntl)(v);
          return new Data_Tuple.Tuple(v1.value0, v1.value1);
      }
  };
  var isZero = function (v) {
      return Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_BigInt.eqBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(v.value1) && Data_Eq.eq(eqCoin)(v.value0)(Data_Monoid.mempty(monoidCoin));
  };
  var getNonAdaAsset$prime = function (v) {
      return v.value1;
  };
  var getNonAdaAsset = function (v) {
      return v.value1;
  };
  var getCurrencySymbol = function (v) {
      return v;
  };
  var flattenNonAdaValue = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v))(function (v1) {
          return Control_Bind.bind(Data_List_Types.bindList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v1.value1))(function (v2) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_List_Types.bindList)(Control_Alternative.guard(Data_List_Types.alternativeList)(Data_Eq.notEq(Data_BigInt.eqBigInt)(v2.value1)(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(function () {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(v1.value0, new Data_Tuple.Tuple(v2.value0, v2.value1)));
              });
          });
      });
  };
  var unsafeFlattenValue = function (v) {
      var flattenedNonAda = flattenNonAdaValue(v.value1);
      var v1 = Data_Eq.eq(eqCoin)(v.value0)(Data_Monoid.mempty(monoidCoin));
      if (v1) {
          return flattenedNonAda;
      };
      if (!v1) {
          return new Data_List_Types.Cons(new Data_Tuple.Tuple(unsafeAdaSymbol, new Data_Tuple.Tuple(Types_TokenName.adaToken, v.value0)), flattenedNonAda);
      };
      throw new Error("Failed pattern match at Cardano.Types.Value (line 524, column 5 - line 526, column 76): " + [ v1.constructor.name ]);
  };   
  var filterNonAdaAsset = function (p) {
      return function (v) {
          return NonAdaAsset(Data_Map_Internal.filter(ordCurrencySymbol)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Map_Internal.isEmpty))(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Map_Internal.filter(Types_TokenName.ordTokenName)(p))(v)));
      };
  };
  var normalizeNonAdaAsset = filterNonAdaAsset(Data_Eq.notEq(Data_BigInt.eqBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt)));
  var mkNonAdaAsset = function ($350) {
      return normalizeNonAdaAsset(NonAdaAsset($350));
  };
  var mkNonAdaAssetsFromTokenMap = function (dictTraversable) {
      return function (xs) {
          return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(mkNonAdaAssetsFromTokenMap$prime(dictTraversable)(xs))(mkNonAdaAsset);
      };
  };
  var unionWithNonAda = function (f) {
      return function (ls) {
          return function (rs) {
              var unBoth = function (k$prime) {
                  if (k$prime instanceof Data_These.This) {
                      return f(k$prime.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  };
                  if (k$prime instanceof Data_These.That) {
                      return f(Data_Semiring.zero(Data_BigInt.semiringBigInt))(k$prime.value0);
                  };
                  if (k$prime instanceof Data_These.Both) {
                      return f(k$prime.value0)(k$prime.value1);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 489, column 17 - line 492, column 24): " + [ k$prime.constructor.name ]);
              };
              var combined = unionNonAda(ls)(rs);
              return normalizeNonAdaAsset(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Map_Internal.functorMap)(unBoth))(combined));
          };
      };
  };
  var joinSemilatticeNonAdaAsse = {
      join: unionWithNonAda(Data_Ord.max(Data_BigInt.ordBigInt))
  };
  var joinSemilatticeValue = {
      join: function (v) {
          return function (v1) {
              return new Value(Data_Lattice.join(joinSemilatticeCoin)(v.value0)(v1.value0), Data_Lattice.join(joinSemilatticeNonAdaAsse)(v.value1)(v1.value1));
          };
      }
  };
  var semigroupNonAdaAsset = {
      append: unionWithNonAda(Data_Semiring.add(Data_BigInt.semiringBigInt))
  };
  var monoidNonAdaAsset = {
      mempty: Data_Map_Internal.empty,
      Semigroup0: function () {
          return semigroupNonAdaAsset;
      }
  };                                        
  var mkSingletonNonAdaAsset = function (curSymbol) {
      return function (tokenName) {
          return function (amount) {
              if (Data_Eq.eq(Data_BigInt.eqBigInt)(amount)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                  return Data_Monoid.mempty(monoidNonAdaAsset);
              };
              if (Data_Boolean.otherwise) {
                  return NonAdaAsset(Data_Map_Internal.singleton(curSymbol)(Data_Map_Internal.singleton(tokenName)(amount)));
              };
              throw new Error("Failed pattern match at Cardano.Types.Value (line 283, column 1 - line 287, column 17): " + [ curSymbol.constructor.name, tokenName.constructor.name, amount.constructor.name ]);
          };
      };
  };
  var mkSingletonValue$prime = function (curSymbol) {
      return function (tokenName) {
          return function (amount) {
              var isAdaCs = Data_Eq.eq(eqCurrencySymbol)(curSymbol)(unsafeAdaSymbol);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!isAdaCs || isAdaCs && Data_Eq.eq(Types_TokenName.eqTokenName)(tokenName)(Types_TokenName.adaToken)))(function () {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      if (isAdaCs) {
                          return new Value(amount, Data_Monoid.mempty(monoidNonAdaAsset));
                      };
                      return Value.create(Data_Monoid.mempty(monoidCoin))(mkSingletonNonAdaAsset(curSymbol)(tokenName)(amount));
                  })());
              });
          };
      };
  };
  var unflattenValue = function (v) {
      return mkSingletonValue$prime(v.value0)(v.value1.value0)(v.value1.value1);
  };
  var semigroupValue = {
      append: function (v) {
          return function (v1) {
              return new Value(Data_Semigroup.append(semigroupCoin)(v.value0)(v1.value0), Data_Semigroup.append(semigroupNonAdaAsset)(v.value1)(v1.value1));
          };
      }
  };
  var monoidValue = {
      mempty: new Value(Data_Monoid.mempty(monoidCoin), Data_Monoid.mempty(monoidNonAdaAsset)),
      Semigroup0: function () {
          return semigroupValue;
      }
  };
  var minus = function (lhs) {
      return function (rhs) {
          var negativeValues = Data_Functor.mapFlipped(Data_List_Types.functorList)(unsafeFlattenValue(rhs))(function (v) {
              return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, Data_Ring.negate(Data_BigInt.ringBigInt)(v.value1.value1)));
          });
          return Data_Semigroup.append(semigroupValue)(lhs)(Data_Foldable.fold(Data_List_Types.foldableList)(monoidValue)(Data_Maybe.fromJust()(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Maybe.applicativeMaybe)(unflattenValue)(negativeValues))));
      };
  };
  var splitValue = {
      split: function (v) {
          return Data_Semigroup.append(Data_Tuple.semigroupTuple(semigroupValue)(semigroupValue))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Function.flip(Value.create)(Data_Monoid.mempty(monoidNonAdaAsset)))(Data_Function.flip(Value.create)(Data_Monoid.mempty(monoidNonAdaAsset)))(split(splitCoin)(v.value0)))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Value.create(Data_Monoid.mempty(monoidCoin)))(Value.create(Data_Monoid.mempty(monoidCoin)))(split(splitNonAdaAsset)(v.value1)));
      }
  };
  var posNonAdaAsset = filterNonAdaAsset(function (x) {
      return Data_Ord.greaterThan(Data_BigInt.ordBigInt)(x)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
  });
  var checkPred = function (f) {
      return function (v) {
          return function (v1) {
              var inner = Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f);
              return f(new Data_These.Both(v.value0, v1.value0)) && Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(inner)(unionNonAda(v.value1)(v1.value1));
          };
      };
  };
  var checkBinRel = function (f) {
      return function (l) {
          return function (r) {
              var unThese = function (k$prime) {
                  if (k$prime instanceof Data_These.This) {
                      return f(k$prime.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  };
                  if (k$prime instanceof Data_These.That) {
                      return f(Data_Semiring.zero(Data_BigInt.semiringBigInt))(k$prime.value0);
                  };
                  if (k$prime instanceof Data_These.Both) {
                      return f(k$prime.value0)(k$prime.value1);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 581, column 18 - line 584, column 24): " + [ k$prime.constructor.name ]);
              };
              return checkPred(unThese)(l)(r);
          };
      };
  };
  var eq = checkBinRel(Data_Eq.eq(Data_BigInt.eqBigInt));
  var geq = checkBinRel(Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt));
  exports["Coin"] = Coin;
  exports["flattenNonAdaValue"] = flattenNonAdaValue;
  exports["geq"] = geq;
  exports["getCurrencySymbol"] = getCurrencySymbol;
  exports["getNonAdaAsset"] = getNonAdaAsset;
  exports["getNonAdaAsset'"] = getNonAdaAsset$prime;
  exports["isZero"] = isZero;
  exports["minus"] = minus;
  exports["mkCurrencySymbol"] = mkCurrencySymbol;
  exports["mkNonAdaAsset"] = mkNonAdaAsset;
  exports["mkNonAdaAssetsFromTokenMap"] = mkNonAdaAssetsFromTokenMap;
  exports["mkSingletonValue'"] = mkSingletonValue$prime;
  exports["mkValue"] = mkValue;
  exports["mpsSymbol"] = mpsSymbol;
  exports["negation"] = negation;
  exports["posNonAdaAsset"] = posNonAdaAsset;
  exports["split"] = split;
  exports["unwrapNonAdaAsset"] = unwrapNonAdaAsset;
  exports["valueToCoin'"] = valueToCoin$prime;
  exports["encodeAesonCoin"] = encodeAesonCoin;
  exports["showCoin"] = showCoin;
  exports["semigroupCoin"] = semigroupCoin;
  exports["monoidCoin"] = monoidCoin;
  exports["ordCurrencySymbol"] = ordCurrencySymbol;
  exports["showCurrencySymbol"] = showCurrencySymbol;
  exports["eqNonAdaAsset"] = eqNonAdaAsset;
  exports["showNonAdaAsset"] = showNonAdaAsset;
  exports["semigroupNonAdaAsset"] = semigroupNonAdaAsset;
  exports["monoidNonAdaAsset"] = monoidNonAdaAsset;
  exports["encodeAesonNonAdaAsset"] = encodeAesonNonAdaAsset;
  exports["eqValue"] = eqValue;
  exports["showValue"] = showValue;
  exports["semigroupValue"] = semigroupValue;
  exports["monoidValue"] = monoidValue;
  exports["joinSemilatticeValue"] = joinSemilatticeValue;
  exports["negateValue"] = negateValue;
  exports["splitValue"] = splitValue;
  exports["encodeAesonValue"] = encodeAesonValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Functor.Contravariant"] = $PS["Data.Functor.Contravariant"] || {};
  var exports = $PS["Data.Functor.Contravariant"];
  var cmap = function (dict) {
      return dict.cmap;
  };
  exports["cmap"] = cmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Datum"] = $PS["Types.Datum"] || {};
  var exports = $PS["Types.Datum"];
  var Aeson = $PS["Aeson"];
  var Aeson_Decode = $PS["Aeson.Decode"];
  var Aeson_Encode = $PS["Aeson.Encode"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Functor_Contravariant = $PS["Data.Functor.Contravariant"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Op = $PS["Data.Op"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Types_PlutusData = $PS["Types.PlutusData"];                  
  var Datum = function (x) {
      return x;
  };
  var genericDatum_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showDatum = {
      show: Data_Show_Generic.genericShow(genericDatum_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "Datum";
          }
      }))
  };                                              
  var eqDatum = Types_PlutusData.eqPlutusData;
  var encodeAesonDatum = {
      "encodeAeson'": (function () {
          var $13 = Aeson["encodeAeson'"](Aeson.encodeAesonAeson);
          var $14 = Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](Aeson_Encode.encode(Data_Functor_Contravariant.cmap(Data_Op.contravariantOp)(Data_Newtype.unwrap())(Aeson_Encode.value(Types_PlutusData.encodeAesonPlutusData)))));
          return function ($15) {
              return $13($14($15));
          };
      })()
  };
  var decodeAesonDatum = {
      decodeAeson: Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](Aeson_Decode.decode(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(Datum)(Aeson_Decode.value(Types_PlutusData.decodeAesonPlutusData)))))
  };
  exports["Datum"] = Datum;
  exports["eqDatum"] = eqDatum;
  exports["encodeAesonDatum"] = encodeAesonDatum;
  exports["decodeAesonDatum"] = decodeAesonDatum;
  exports["showDatum"] = showDatum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Transaction"] = $PS["Types.Transaction"] || {};
  var exports = $PS["Types.Transaction"];
  var Aeson = $PS["Aeson"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_UInt = $PS["Data.UInt"];
  var ToData = $PS["ToData"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var TransactionHash = function (x) {
      return x;
  };
  var DataHash = function (x) {
      return x;
  };
  var toDataTransactionHash = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(ToData.toDataByteArray)(v) ]);
      }
  };
  var toDataTransactionInput = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(toDataTransactionHash)(v.transactionId), ToData.toData(ToData.toDataUInt)(v.index) ]);
      }
  };                                          
  var ordDataHash = Types_ByteArray.ordByteArray;
  var genericTransactionInput_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTransactionHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionHash = {
      show: Data_Show_Generic.genericShow(genericTransactionHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "TransactionHash";
          }
      }))
  };
  var showTransactionInput = {
      show: Data_Show_Generic.genericShow(genericTransactionInput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "transactionId";
          }
      })(Data_Show.showRecordFieldsNil)(showTransactionHash))(Data_UInt.uintShowInstance))))({
          reflectSymbol: function () {
              return "TransactionInput";
          }
      }))
  };
  var genericDataHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showDataHash = {
      show: Data_Show_Generic.genericShow(genericDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "DataHash";
          }
      }))
  };                                                
  var eqTransactionHash = Types_ByteArray.eqByteArray;
  var eqTransactionInput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "transactionId";
      }
  })(eqTransactionHash))()({
      reflectSymbol: function () {
          return "index";
      }
  })(Data_UInt.uintEqInstance));
  var ordTransactionHash = {
      compare: function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Ord.ordString)(Types_ByteArray.byteArrayToHex(v))(Types_ByteArray.byteArrayToHex(v1));
          };
      },
      Eq0: function () {
          return eqTransactionHash;
      }
  };
  var ordTransactionInput = {
      compare: function (v) {
          return function (v1) {
              var v2 = Data_Ord.compare(ordTransactionHash)(v.transactionId)(v1.transactionId);
              if (v2 instanceof Data_Ordering.EQ) {
                  return Data_Ord.compare(Data_UInt.uintOrd)(v.index)(v1.index);
              };
              return v2;
          };
      },
      Eq0: function () {
          return eqTransactionInput;
      }
  };
  var eqDataHash = Types_ByteArray.eqByteArray;
  var encodeAesonTransactionHas = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonTransactionInp = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(encodeAesonTransactionHas)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "transactionId";
      }
  })())({
      reflectSymbol: function () {
          return "index";
      }
  })())();
  var encodeAesonDataHash = Types_ByteArray.encodeAesonByteArray;
  exports["DataHash"] = DataHash;
  exports["TransactionHash"] = TransactionHash;
  exports["eqTransactionInput"] = eqTransactionInput;
  exports["encodeAesonTransactionInp"] = encodeAesonTransactionInp;
  exports["ordTransactionInput"] = ordTransactionInput;
  exports["showTransactionInput"] = showTransactionInput;
  exports["toDataTransactionInput"] = toDataTransactionInput;
  exports["encodeAesonTransactionHas"] = encodeAesonTransactionHas;
  exports["ordTransactionHash"] = ordTransactionHash;
  exports["showTransactionHash"] = showTransactionHash;
  exports["eqDataHash"] = eqDataHash;
  exports["ordDataHash"] = ordDataHash;
  exports["encodeAesonDataHash"] = encodeAesonDataHash;
  exports["showDataHash"] = showDataHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.OutputDatum"] = $PS["Types.OutputDatum"] || {};
  var exports = $PS["Types.OutputDatum"];
  var Aeson = $PS["Aeson"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Helpers = $PS["Helpers"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var NoOutputDatum = (function () {
      function NoOutputDatum() {

      };
      NoOutputDatum.value = new NoOutputDatum();
      return NoOutputDatum;
  })();
  var OutputDatumHash = (function () {
      function OutputDatumHash(value0) {
          this.value0 = value0;
      };
      OutputDatumHash.create = function (value0) {
          return new OutputDatumHash(value0);
      };
      return OutputDatumHash;
  })();
  var OutputDatum = (function () {
      function OutputDatum(value0) {
          this.value0 = value0;
      };
      OutputDatum.create = function (value0) {
          return new OutputDatum(value0);
      };
      return OutputDatum;
  })();                              
  var genericOutputDatum_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return NoOutputDatum.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new OutputDatumHash(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new OutputDatum(x.value0.value0);
          };
          throw new Error("Failed pattern match at Types.OutputDatum (line 32, column 1 - line 32, column 38): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof NoOutputDatum) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof OutputDatumHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof OutputDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at Types.OutputDatum (line 32, column 1 - line 32, column 38): " + [ x.constructor.name ]);
      }
  };
  var showOutputDatum = {
      show: Data_Show_Generic.genericShow(genericOutputDatum_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "NoOutputDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "OutputDatumHash";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum))({
          reflectSymbol: function () {
              return "OutputDatum";
          }
      }))))
  };
  var eqOutputDatum = {
      eq: function (x) {
          return function (y) {
              if (x instanceof NoOutputDatum && y instanceof NoOutputDatum) {
                  return true;
              };
              if (x instanceof OutputDatumHash && y instanceof OutputDatumHash) {
                  return Data_Eq.eq(Types_Transaction.eqDataHash)(x.value0)(y.value0);
              };
              if (x instanceof OutputDatum && y instanceof OutputDatum) {
                  return Data_Eq.eq(Types_Datum.eqDatum)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var encodeAesonOutputDatum = {
      "encodeAeson'": function (v) {
          if (v instanceof NoOutputDatum) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())("NoOutputDatum")({}));
          };
          if (v instanceof OutputDatumHash) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_Transaction.encodeAesonDataHash)("OutputDatumHash")(v.value0));
          };
          if (v instanceof OutputDatum) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_Datum.encodeAesonDatum)("OutputDatum")(v.value0));
          };
          throw new Error("Failed pattern match at Types.OutputDatum (line 57, column 18 - line 60, column 66): " + [ v.constructor.name ]);
      }
  };
  var outputDatumDataHash = function (v) {
      if (v instanceof OutputDatumHash) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["NoOutputDatum"] = NoOutputDatum;
  exports["OutputDatumHash"] = OutputDatumHash;
  exports["OutputDatum"] = OutputDatum;
  exports["outputDatumDataHash"] = outputDatumDataHash;
  exports["eqOutputDatum"] = eqOutputDatum;
  exports["showOutputDatum"] = showOutputDatum;
  exports["encodeAesonOutputDatum"] = encodeAesonOutputDatum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.FakeOutput"] = $PS["BalanceTx.FakeOutput"] || {};
  var exports = $PS["BalanceTx.FakeOutput"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];                
  var fakeOutputWithValue = function (amount) {
      return {
          address: Data_Maybe.fromJust()(Serialization_Address.addressFromBech32("addr_test1qpu5vlrf4xkxv2qpwngf6cjhtw542ayty80v8dyr49rf5ewvxwdrt70qlcpeeagscasafhffqsxy36t90ldv06wqrk2qum8x5w")),
          amount: amount,
          datum: Types_OutputDatum.NoOutputDatum.value,
          scriptRef: Data_Maybe.Nothing.value
      };
  };
  var fakeOutputWithNonAdaAssets = (function () {
      var $1 = Cardano_Types_Value.mkValue(Data_Monoid.mempty(Cardano_Types_Value.monoidCoin));
      return function ($2) {
          return fakeOutputWithValue($1($2));
      };
  })();
  exports["fakeOutputWithNonAdaAssets"] = fakeOutputWithNonAdaAssets;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.minAdaForOutput = maybe => txOutput => dataCost => {
    try {
      return maybe.just(lib.min_ada_for_output(txOutput, dataCost));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports.newCoinsPerWord = n => lib.DataCost.new_coins_per_word(n);
  exports.newCoinsPerByte = n => lib.DataCost.new_coins_per_byte(n);
})(PS["BalanceTx.UtxoMinAda"] = PS["BalanceTx.UtxoMinAda"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Cardano.Types.NativeScript"] = $PS["Cardano.Types.NativeScript"] || {};
  var exports = $PS["Cardano.Types.NativeScript"];
  var Aeson = $PS["Aeson"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Helpers = $PS["Helpers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];                
  var ScriptPubkey = (function () {
      function ScriptPubkey(value0) {
          this.value0 = value0;
      };
      ScriptPubkey.create = function (value0) {
          return new ScriptPubkey(value0);
      };
      return ScriptPubkey;
  })();
  var ScriptAll = (function () {
      function ScriptAll(value0) {
          this.value0 = value0;
      };
      ScriptAll.create = function (value0) {
          return new ScriptAll(value0);
      };
      return ScriptAll;
  })();
  var ScriptAny = (function () {
      function ScriptAny(value0) {
          this.value0 = value0;
      };
      ScriptAny.create = function (value0) {
          return new ScriptAny(value0);
      };
      return ScriptAny;
  })();
  var ScriptNOfK = (function () {
      function ScriptNOfK(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ScriptNOfK.create = function (value0) {
          return function (value1) {
              return new ScriptNOfK(value0, value1);
          };
      };
      return ScriptNOfK;
  })();
  var TimelockStart = (function () {
      function TimelockStart(value0) {
          this.value0 = value0;
      };
      TimelockStart.create = function (value0) {
          return new TimelockStart(value0);
      };
      return TimelockStart;
  })();
  var TimelockExpiry = (function () {
      function TimelockExpiry(value0) {
          this.value0 = value0;
      };
      TimelockExpiry.create = function (value0) {
          return new TimelockExpiry(value0);
      };
      return TimelockExpiry;
  })();
  var genericNativeScript_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ScriptPubkey(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new ScriptAll(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new ScriptAny(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new ScriptNOfK(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new TimelockStart(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
              return new TimelockExpiry(x.value0.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.NativeScript (line 34, column 1 - line 34, column 39): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ScriptPubkey) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ScriptAll) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof ScriptAny) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof ScriptNOfK) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
          };
          if (x instanceof TimelockStart) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof TimelockExpiry) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))));
          };
          throw new Error("Failed pattern match at Cardano.Types.NativeScript (line 34, column 1 - line 34, column 39): " + [ x.constructor.name ]);
      }
  };
  var showNativeScript = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericNativeScript_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash))({
              reflectSymbol: function () {
                  return "ScriptPubkey";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showNativeScript)))({
              reflectSymbol: function () {
                  return "ScriptAll";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showNativeScript)))({
              reflectSymbol: function () {
                  return "ScriptAny";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showInt))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showNativeScript))))({
              reflectSymbol: function () {
                  return "ScriptNOfK";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showSlot))({
              reflectSymbol: function () {
                  return "TimelockStart";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showSlot))({
              reflectSymbol: function () {
                  return "TimelockExpiry";
              }
          })))))))(x);
      }
  };
  var eqNativeScript = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ScriptPubkey && y instanceof ScriptPubkey) {
                  return Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0)(y.value0);
              };
              if (x instanceof ScriptAll && y instanceof ScriptAll) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value0)(y.value0);
              };
              if (x instanceof ScriptAny && y instanceof ScriptAny) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value0)(y.value0);
              };
              if (x instanceof ScriptNOfK && y instanceof ScriptNOfK) {
                  return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value1)(y.value1);
              };
              if (x instanceof TimelockStart && y instanceof TimelockStart) {
                  return Data_Eq.eq(Serialization_Address.eqSlot)(x.value0)(y.value0);
              };
              if (x instanceof TimelockExpiry && y instanceof TimelockExpiry) {
                  return Data_Eq.eq(Serialization_Address.eqSlot)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var encodeAesonNativeScript = {
      "encodeAeson'": function (v) {
          if (v instanceof ScriptPubkey) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Hash.encodeAesonEd25519KeyHash)("ScriptPubKey")(v.value0));
          };
          if (v instanceof ScriptAll) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonArray(encodeAesonNativeScript))("ScriptAll")(v.value0));
          };
          if (v instanceof ScriptAny) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonArray(encodeAesonNativeScript))("ScriptAny")(v.value0));
          };
          if (v instanceof ScriptNOfK) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(encodeAesonNativeScript))(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "nativeScripts";
                  }
              })())({
                  reflectSymbol: function () {
                      return "n";
                  }
              })())())("ScriptPubKey")({
                  n: v.value0,
                  nativeScripts: v.value1
              }));
          };
          if (v instanceof TimelockStart) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonSlot)("TimeLockStart")(v.value0));
          };
          if (v instanceof TimelockExpiry) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonSlot)("TimeLockExpiry")(v.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.NativeScript (line 40, column 18 - line 47, column 72): " + [ v.constructor.name ]);
      }
  };
  exports["ScriptPubkey"] = ScriptPubkey;
  exports["ScriptAll"] = ScriptAll;
  exports["ScriptAny"] = ScriptAny;
  exports["ScriptNOfK"] = ScriptNOfK;
  exports["TimelockStart"] = TimelockStart;
  exports["TimelockExpiry"] = TimelockExpiry;
  exports["eqNativeScript"] = eqNativeScript;
  exports["showNativeScript"] = showNativeScript;
  exports["encodeAesonNativeScript"] = encodeAesonNativeScript;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Cardano.Types.ScriptRef"] = $PS["Cardano.Types.ScriptRef"] || {};
  var exports = $PS["Cardano.Types.ScriptRef"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Helpers = $PS["Helpers"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var NativeScriptRef = (function () {
      function NativeScriptRef(value0) {
          this.value0 = value0;
      };
      NativeScriptRef.create = function (value0) {
          return new NativeScriptRef(value0);
      };
      return NativeScriptRef;
  })();
  var PlutusScriptRef = (function () {
      function PlutusScriptRef(value0) {
          this.value0 = value0;
      };
      PlutusScriptRef.create = function (value0) {
          return new PlutusScriptRef(value0);
      };
      return PlutusScriptRef;
  })();
  var genericScriptRef_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new NativeScriptRef(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new PlutusScriptRef(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.ScriptRef (line 23, column 1 - line 23, column 36): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof NativeScriptRef) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof PlutusScriptRef) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.ScriptRef (line 23, column 1 - line 23, column 36): " + [ x.constructor.name ]);
      }
  };
  var showScriptRef = {
      show: Data_Show_Generic.genericShow(genericScriptRef_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_NativeScript.showNativeScript))({
          reflectSymbol: function () {
              return "NativeScriptRef";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showPlutusScript))({
          reflectSymbol: function () {
              return "PlutusScriptRef";
          }
      })))
  };
  var eqScriptRef = {
      eq: function (x) {
          return function (y) {
              if (x instanceof NativeScriptRef && y instanceof NativeScriptRef) {
                  return Data_Eq.eq(Cardano_Types_NativeScript.eqNativeScript)(x.value0)(y.value0);
              };
              if (x instanceof PlutusScriptRef && y instanceof PlutusScriptRef) {
                  return Data_Eq.eq(Types_Scripts.eqPlutusScript)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var encodeAesonScriptRef = {
      "encodeAeson'": function (v) {
          if (v instanceof NativeScriptRef) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Cardano_Types_NativeScript.encodeAesonNativeScript)("NativeScriptRef")(v.value0));
          };
          if (v instanceof PlutusScriptRef) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_Scripts.encodeAesonPlutusScript)("PlutusScriptRef")(v.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.ScriptRef (line 29, column 18 - line 31, column 74): " + [ v.constructor.name ]);
      }
  };
  var getPlutusScript = function (v) {
      if (v instanceof PlutusScriptRef) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["NativeScriptRef"] = NativeScriptRef;
  exports["PlutusScriptRef"] = PlutusScriptRef;
  exports["getPlutusScript"] = getPlutusScript;
  exports["eqScriptRef"] = eqScriptRef;
  exports["showScriptRef"] = showScriptRef;
  exports["encodeAesonScriptRef"] = encodeAesonScriptRef;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($10) {
                      return c2d(b2c(a2b($10)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var strongFn = {
      first: function (a2b) {
          return function (v) {
              return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
          };
      },
      second: Data_Functor.map(Data_Tuple.functorTuple),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
  exports["lens'"] = lens$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function(exports) {
  exports._vrfKeyHashBytes = vrfKeyhash => vrfKeyhash.to_bytes();
})(PS["Serialization.Types"] = PS["Serialization.Types"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.Types"] = $PS["Serialization.Types"] || {};
  var exports = $PS["Serialization.Types"];
  var $foreign = $PS["Serialization.Types"];
  var Aeson = $PS["Aeson"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var showVRFKeyHash = {
      show: function ($3) {
          return Types_ByteArray.byteArrayToHex($foreign["_vrfKeyHashBytes"]($3));
      }
  };
  var eqVRFKeyHash = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showVRFKeyHash))
  };
  var encodeAesonVRFKeyHash = {
      "encodeAeson'": (function () {
          var $4 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
          return function ($5) {
              return $4(Types_ByteArray.byteArrayToHex($foreign["_vrfKeyHashBytes"]($5)));
          };
      })()
  };
  exports["showVRFKeyHash"] = showVRFKeyHash;
  exports["eqVRFKeyHash"] = eqVRFKeyHash;
  exports["encodeAesonVRFKeyHash"] = encodeAesonVRFKeyHash;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.newPositive = lib.Int.new;
  exports.newNegative = lib.Int.new_negative;
  exports._intToStr = n => n.to_str();
})(PS["Types.Int"] = PS["Types.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Int"] = $PS["Types.Int"] || {};
  var exports = $PS["Types.Int"];
  var $foreign = $PS["Types.Int"];
  var Aeson = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ring = $PS["Data.Ring"];
  var Types_BigNum = $PS["Types.BigNum"];                
  var showInt = {
      show: $foreign["_intToStr"]
  };
  var eqInt = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))($foreign["_intToStr"])
  };
  var toBigInt = function ($$int) {
      return Data_Maybe.fromJust()(Data_BigInt.fromString($foreign["_intToStr"]($$int)));
  };
  var encodeAesonInt = {
      "encodeAeson'": (function () {
          var $8 = Aeson["encodeAeson'"](Aeson.encodeAesonBigInt);
          return function ($9) {
              return $8(toBigInt($9));
          };
      })()
  };
  var fromBigInt = function (bi) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.newPositive)(Types_BigNum.fromBigInt(bi)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.newNegative)(Types_BigNum.fromBigInt(Data_Ring.negate(Data_BigInt.ringBigInt)(bi))));
  };
  var fromString = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromBigInt)(Data_BigInt.fromString);
  var decodeAesonInt = {
      decodeAeson: function (aeson) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonBigInt)(aeson))((function () {
              var $10 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Int"));
              return function ($11) {
                  return $10(fromBigInt($11));
              };
          })());
      }
  };
  exports["eqInt"] = eqInt;
  exports["showInt"] = showInt;
  exports["encodeAesonInt"] = encodeAesonInt;
  exports["decodeAesonInt"] = decodeAesonInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.RedeemerTag"] = $PS["Types.RedeemerTag"] || {};
  var exports = $PS["Types.RedeemerTag"];
  var Aeson = $PS["Aeson"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Helpers = $PS["Helpers"];                
  var Spend = (function () {
      function Spend() {

      };
      Spend.value = new Spend();
      return Spend;
  })();
  var Mint = (function () {
      function Mint() {

      };
      Mint.value = new Mint();
      return Mint;
  })();
  var Cert = (function () {
      function Cert() {

      };
      Cert.value = new Cert();
      return Cert;
  })();
  var Reward = (function () {
      function Reward() {

      };
      Reward.value = new Reward();
      return Reward;
  })();
  var genericRedeemerTag_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Spend.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return Mint.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return Cert.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return Reward.value;
          };
          throw new Error("Failed pattern match at Types.RedeemerTag (line 25, column 1 - line 25, column 38): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Spend) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof Mint) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof Cert) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof Reward) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at Types.RedeemerTag (line 25, column 1 - line 25, column 38): " + [ x.constructor.name ]);
      }
  };
  var showRedeemerTag = {
      show: Data_Show_Generic.genericShow(genericRedeemerTag_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Spend";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Mint";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Cert";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Reward";
          }
      })))))
  };
  var eqRedeemerTag = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Spend && y instanceof Spend) {
                  return true;
              };
              if (x instanceof Mint && y instanceof Mint) {
                  return true;
              };
              if (x instanceof Cert && y instanceof Cert) {
                  return true;
              };
              if (x instanceof Reward && y instanceof Reward) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordRedeemerTag = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Spend && y instanceof Spend) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Spend) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Spend) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Mint && y instanceof Mint) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Mint) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Mint) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Cert && y instanceof Cert) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Cert) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Cert) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Reward && y instanceof Reward) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Types.RedeemerTag (line 27, column 1 - line 27, column 32): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqRedeemerTag;
      }
  };
  var encodeAesonRedeemerTag = {
      "encodeAeson'": function (v) {
          if (v instanceof Spend) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())("Spend")({}));
          };
          if (v instanceof Mint) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())("Mint")({}));
          };
          if (v instanceof Cert) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())("Cert")({}));
          };
          if (v instanceof Reward) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())("Reward")({}));
          };
          throw new Error("Failed pattern match at Types.RedeemerTag (line 33, column 18 - line 37, column 55): " + [ v.constructor.name ]);
      }
  };
  var fromString = function (v) {
      if (v === "spend") {
          return new Data_Maybe.Just(Spend.value);
      };
      if (v === "mint") {
          return new Data_Maybe.Just(Mint.value);
      };
      if (v === "certificate") {
          return new Data_Maybe.Just(Cert.value);
      };
      if (v === "withdrawal") {
          return new Data_Maybe.Just(Reward.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Spend"] = Spend;
  exports["Mint"] = Mint;
  exports["Cert"] = Cert;
  exports["Reward"] = Reward;
  exports["fromString"] = fromString;
  exports["eqRedeemerTag"] = eqRedeemerTag;
  exports["ordRedeemerTag"] = ordRedeemerTag;
  exports["showRedeemerTag"] = showRedeemerTag;
  exports["encodeAesonRedeemerTag"] = encodeAesonRedeemerTag;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.TransactionMetadata"] = $PS["Types.TransactionMetadata"] || {};
  var exports = $PS["Types.TransactionMetadata"];
  var Aeson = $PS["Aeson"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Helpers = $PS["Helpers"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Int = $PS["Types.Int"];
  var MetadataMap = (function () {
      function MetadataMap(value0) {
          this.value0 = value0;
      };
      MetadataMap.create = function (value0) {
          return new MetadataMap(value0);
      };
      return MetadataMap;
  })();
  var MetadataList = (function () {
      function MetadataList(value0) {
          this.value0 = value0;
      };
      MetadataList.create = function (value0) {
          return new MetadataList(value0);
      };
      return MetadataList;
  })();
  var Int = (function () {
      function Int(value0) {
          this.value0 = value0;
      };
      Int.create = function (value0) {
          return new Int(value0);
      };
      return Int;
  })();
  var Bytes = (function () {
      function Bytes(value0) {
          this.value0 = value0;
      };
      Bytes.create = function (value0) {
          return new Bytes(value0);
      };
      return Bytes;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var GeneralTransactionMetadata = function (x) {
      return x;
  };
  var showTransactionMetadatumL = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("TransactionMetadatumLabel")(v);
      }
  };
  var ordTransactionMetadatumLa = Data_BigInt.ordBigInt;
  var semigroupGeneralTransacti = {
      append: function (v) {
          return function (v1) {
              return GeneralTransactionMetadata(Helpers.appendRightMap(ordTransactionMetadatumLa)(v)(v1));
          };
      }
  };
  var genericTransactionMetadat = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new MetadataMap(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new MetadataList(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new Int(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new Bytes(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
              return new Text(x.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at Types.TransactionMetadata (line 74, column 1 - line 74, column 47): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof MetadataMap) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof MetadataList) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof Int) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof Bytes) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof Text) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
          };
          throw new Error("Failed pattern match at Types.TransactionMetadata (line 74, column 1 - line 74, column 47): " + [ x.constructor.name ]);
      }
  };
  var showTransactionMetadatum = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericTransactionMetadat)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showTransactionMetadatum)(showTransactionMetadatum)))({
              reflectSymbol: function () {
                  return "MetadataMap";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showTransactionMetadatum)))({
              reflectSymbol: function () {
                  return "MetadataList";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Int.showInt))({
              reflectSymbol: function () {
                  return "Int";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
              reflectSymbol: function () {
                  return "Bytes";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
              reflectSymbol: function () {
                  return "Text";
              }
          }))))))(x);
      }
  };
  var genericGeneralTransaction = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGeneralTransactionMet = {
      show: Data_Show_Generic.genericShow(genericGeneralTransaction)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showTransactionMetadatumL)(showTransactionMetadatum)))({
          reflectSymbol: function () {
              return "GeneralTransactionMetadata";
          }
      }))
  };                                                                                                         
  var encodeAesonTransactionMet = {
      "encodeAeson'": function (v) {
          if (v instanceof MetadataMap) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonAeson)("MetadataMap")(Helpers.encodeMap(encodeAesonTransactionMet)(encodeAesonTransactionMet)(v.value0)));
          };
          if (v instanceof MetadataList) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonArray(encodeAesonTransactionMet))("MetadataList")(v.value0));
          };
          if (v instanceof Int) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_Int.encodeAesonInt)("Int")(v.value0));
          };
          if (v instanceof Bytes) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_ByteArray.encodeAesonByteArray)("Bytes")(v.value0));
          };
          if (v instanceof Text) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonString)("Text")(v.value0));
          };
          throw new Error("Failed pattern match at Types.TransactionMetadata (line 80, column 18 - line 85, column 62): " + [ v.constructor.name ]);
      }
  };
  var encodeAesonTransactionMet1 = Aeson.encodeAesonBigInt;
  var encodeAesonGeneralTransac = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(encodeAesonTransactionMet1)(encodeAesonTransactionMet)(v));
      }
  };
  exports["MetadataMap"] = MetadataMap;
  exports["MetadataList"] = MetadataList;
  exports["Int"] = Int;
  exports["Bytes"] = Bytes;
  exports["Text"] = Text;
  exports["showGeneralTransactionMet"] = showGeneralTransactionMet;
  exports["encodeAesonGeneralTransac"] = encodeAesonGeneralTransac;
  exports["semigroupGeneralTransacti"] = semigroupGeneralTransacti;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Cardano.Types.Transaction"] = $PS["Cardano.Types.Transaction"] || {};
  var exports = $PS["Cardano.Types.Transaction"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Helpers = $PS["Helpers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_Types = $PS["Serialization.Types"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Int = $PS["Types.Int"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TransactionMetadata = $PS["Types.TransactionMetadata"];
  var ScriptDataHash = function (x) {
      return x;
  };
  var PublicKey = function (x) {
      return x;
  };
  var Vkey = function (x) {
      return x;
  };
  var IdentityNonce = (function () {
      function IdentityNonce() {

      };
      IdentityNonce.value = new IdentityNonce();
      return IdentityNonce;
  })();
  var HashNonce = (function () {
      function HashNonce(value0) {
          this.value0 = value0;
      };
      HashNonce.create = function (value0) {
          return new HashNonce(value0);
      };
      return HashNonce;
  })();
  var ToOtherPot = (function () {
      function ToOtherPot(value0) {
          this.value0 = value0;
      };
      ToOtherPot.create = function (value0) {
          return new ToOtherPot(value0);
      };
      return ToOtherPot;
  })();
  var ToStakeCreds = (function () {
      function ToStakeCreds(value0) {
          this.value0 = value0;
      };
      ToStakeCreds.create = function (value0) {
          return new ToStakeCreds(value0);
      };
      return ToStakeCreds;
  })();
  var SingleHostAddr = (function () {
      function SingleHostAddr(value0) {
          this.value0 = value0;
      };
      SingleHostAddr.create = function (value0) {
          return new SingleHostAddr(value0);
      };
      return SingleHostAddr;
  })();
  var SingleHostName = (function () {
      function SingleHostName(value0) {
          this.value0 = value0;
      };
      SingleHostName.create = function (value0) {
          return new SingleHostName(value0);
      };
      return SingleHostName;
  })();
  var MultiHostName = (function () {
      function MultiHostName(value0) {
          this.value0 = value0;
      };
      MultiHostName.create = function (value0) {
          return new MultiHostName(value0);
      };
      return MultiHostName;
  })();
  var Ed25519Signature = function (x) {
      return x;
  };
  var Vkeywitness = function (x) {
      return x;
  };
  var Costmdls = function (x) {
      return x;
  };
  var StakeRegistration = (function () {
      function StakeRegistration(value0) {
          this.value0 = value0;
      };
      StakeRegistration.create = function (value0) {
          return new StakeRegistration(value0);
      };
      return StakeRegistration;
  })();
  var StakeDeregistration = (function () {
      function StakeDeregistration(value0) {
          this.value0 = value0;
      };
      StakeDeregistration.create = function (value0) {
          return new StakeDeregistration(value0);
      };
      return StakeDeregistration;
  })();
  var StakeDelegation = (function () {
      function StakeDelegation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StakeDelegation.create = function (value0) {
          return function (value1) {
              return new StakeDelegation(value0, value1);
          };
      };
      return StakeDelegation;
  })();
  var PoolRegistration = (function () {
      function PoolRegistration(value0) {
          this.value0 = value0;
      };
      PoolRegistration.create = function (value0) {
          return new PoolRegistration(value0);
      };
      return PoolRegistration;
  })();
  var PoolRetirement = (function () {
      function PoolRetirement(value0) {
          this.value0 = value0;
      };
      PoolRetirement.create = function (value0) {
          return new PoolRetirement(value0);
      };
      return PoolRetirement;
  })();
  var GenesisKeyDelegation = (function () {
      function GenesisKeyDelegation(value0) {
          this.value0 = value0;
      };
      GenesisKeyDelegation.create = function (value0) {
          return new GenesisKeyDelegation(value0);
      };
      return GenesisKeyDelegation;
  })();
  var MoveInstantaneousRewardsCert = (function () {
      function MoveInstantaneousRewardsCert(value0) {
          this.value0 = value0;
      };
      MoveInstantaneousRewardsCert.create = function (value0) {
          return new MoveInstantaneousRewardsCert(value0);
      };
      return MoveInstantaneousRewardsCert;
  })();
  var TransactionWitnessSet = function (x) {
      return x;
  };
  var TxBody = function (x) {
      return x;
  };
  var Transaction = function (x) {
      return x;
  };
  var semigroupMint = Cardano_Types_Value.semigroupNonAdaAsset;
  var semigroupAuxiliaryData = {
      append: function (v) {
          return function (v1) {
              return {
                  metadata: Data_Semigroup.append(Data_Maybe.semigroupMaybe(Types_TransactionMetadata.semigroupGeneralTransacti))(v.metadata)(v1.metadata),
                  nativeScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Cardano_Types_NativeScript.eqNativeScript))(v.nativeScripts)(v1.nativeScripts),
                  plutusScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Scripts.eqPlutusScript))(v.plutusScripts)(v1.plutusScripts)
              };
          };
      }
  };
  var genericVkeywitness_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericVkey_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericURL_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showURL = {
      show: Data_Show_Generic.genericShow(genericURL_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "URL";
          }
      }))
  };
  var genericTxBody_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTransaction_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTransactionWitness = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTransactionOutput_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionOutput = {
      show: Data_Show_Generic.genericShow(genericTransactionOutput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "address";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "amount";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "datum";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "scriptRef";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(Types_OutputDatum.showOutputDatum))(Cardano_Types_Value.showValue))(Serialization_Address.showAddress))))({
          reflectSymbol: function () {
              return "TransactionOutput";
          }
      }))
  };
  var genericScriptDataHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showScriptDataHash = {
      show: Data_Show_Generic.genericShow(genericScriptDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "ScriptDataHash";
          }
      }))
  };
  var genericRequiredSigner_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showRequiredSigner = {
      show: Data_Show_Generic.genericShow(genericRequiredSigner_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash))({
          reflectSymbol: function () {
              return "RequiredSigner";
          }
      }))
  };
  var genericRelay_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new SingleHostAddr(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new SingleHostName(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new MultiHostName(x.value0.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 483, column 1 - line 483, column 32): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof SingleHostAddr) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof SingleHostName) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof MultiHostName) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 483, column 1 - line 483, column 32): " + [ x.constructor.name ]);
      }
  };
  var genericRedeemer_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showRedeemer = {
      show: Data_Show_Generic.genericShow(genericRedeemer_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "data";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "exUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "tag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Data_BigInt.showBigInt))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))))(Types_PlutusData.showPlutusData))))({
          reflectSymbol: function () {
              return "Redeemer";
          }
      }))
  };
  var genericPublicKey_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPublicKey = {
      show: Data_Show_Generic.genericShow(genericPublicKey_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "PublicKey";
          }
      }))
  };
  var showVkey = {
      show: Data_Show_Generic.genericShow(genericVkey_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPublicKey))({
          reflectSymbol: function () {
              return "Vkey";
          }
      }))
  };
  var genericProposedProtocolPa = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericPoolMetadata_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericPoolMetadataHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPoolMetadataHash = {
      show: Data_Show_Generic.genericShow(genericPoolMetadataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "PoolMetadataHash";
          }
      }))
  };
  var showPoolMetadata = {
      show: Data_Show_Generic.genericShow(genericPoolMetadata_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "hash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "url";
          }
      })(Data_Show.showRecordFieldsNil)(showURL))(showPoolMetadataHash))))({
          reflectSymbol: function () {
              return "PoolMetadata";
          }
      }))
  };
  var genericNonce_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return IdentityNonce.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new HashNonce(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 399, column 1 - line 399, column 32): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof IdentityNonce) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof HashNonce) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 399, column 1 - line 399, column 32): " + [ x.constructor.name ]);
      }
  };
  var showNonce = {
      show: Data_Show_Generic.genericShow(genericNonce_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "IdentityNonce";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "HashNonce";
          }
      })))
  };
  var genericMoveInstantaneousR = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ToOtherPot(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new ToStakeCreds(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 560, column 1 - line 560, column 50): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ToOtherPot) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ToStakeCreds) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 560, column 1 - line 560, column 50): " + [ x.constructor.name ]);
      }
  };
  var genericMint_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMint = {
      show: Data_Show_Generic.genericShow(genericMint_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showNonAdaAsset))({
          reflectSymbol: function () {
              return "Mint";
          }
      }))
  };
  var genericMIRToStakeCredenti = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMIRToStakeCredentials = {
      show: Data_Show_Generic.genericShow(genericMIRToStakeCredenti)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Serialization_Address.showStakeCredential)(Types_Int.showInt)))({
          reflectSymbol: function () {
              return "MIRToStakeCredentials";
          }
      }))
  };
  var showMoveInstantaneousRewa = {
      show: Data_Show_Generic.genericShow(genericMoveInstantaneousR)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "amount";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "pot";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(Types_BigNum.showBigNum))))({
          reflectSymbol: function () {
              return "ToOtherPot";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "amounts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "pot";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(showMIRToStakeCredentials))))({
          reflectSymbol: function () {
              return "ToStakeCreds";
          }
      })))
  };
  var genericIpv6_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showIpv6 = {
      show: Data_Show_Generic.genericShow(genericIpv6_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "Ipv6";
          }
      }))
  };
  var genericIpv4_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showIpv4 = {
      show: Data_Show_Generic.genericShow(genericIpv4_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "Ipv4";
          }
      }))
  };
  var showRelay = {
      show: Data_Show_Generic.genericShow(genericRelay_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "ipv4";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "ipv6";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "port";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(showIpv6)))(Data_Maybe.showMaybe(showIpv4)))))({
          reflectSymbol: function () {
              return "SingleHostAddr";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "dnsName";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "port";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString))))({
          reflectSymbol: function () {
              return "SingleHostName";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "dnsName";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showString))))({
          reflectSymbol: function () {
              return "MultiHostName";
          }
      }))))
  };
  var genericGenesisHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGenesisHash = {
      show: Data_Show_Generic.genericShow(genericGenesisHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "GenesisHash";
          }
      }))
  };
  var genericGenesisDelegateHas = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGenesisDelegateHash = {
      show: Data_Show_Generic.genericShow(genericGenesisDelegateHas)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "GenesisDelegateHash";
          }
      }))
  };
  var genericEpoch_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showEpoch = {
      show: Data_Show_Generic.genericShow(genericEpoch_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
          reflectSymbol: function () {
              return "Epoch";
          }
      }))
  };
  var genericEd25519Signature_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showEd25519Signature = {
      show: Data_Show_Generic.genericShow(genericEd25519Signature_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "Ed25519Signature";
          }
      }))
  };
  var showVkeywitness = {
      show: Data_Show_Generic.genericShow(genericVkeywitness_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Tuple.showTuple(showVkey)(showEd25519Signature)))({
          reflectSymbol: function () {
              return "Vkeywitness";
          }
      }))
  };
  var showTransactionWitnessSet = {
      show: Data_Show_Generic.genericShow(genericTransactionWitness)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "bootstraps";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "nativeScripts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "plutusData";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "plutusScripts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemers";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "vkeys";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(showVkeywitness))))(Data_Maybe.showMaybe(Data_Show.showArray(showRedeemer))))(Data_Maybe.showMaybe(Data_Show.showArray(Types_Scripts.showPlutusScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Types_PlutusData.showPlutusData))))(Data_Maybe.showMaybe(Data_Show.showArray(Cardano_Types_NativeScript.showNativeScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "attributes";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "chainCode";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "signature";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "vkey";
          }
      })(Data_Show.showRecordFieldsNil)(showVkey))(showEd25519Signature))(Types_ByteArray.showByteArray))(Types_ByteArray.showByteArray))))))))({
          reflectSymbol: function () {
              return "TransactionWitnessSet";
          }
      }))
  };
  var genericCostmdls_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericCostModel_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showCostModel = {
      show: Data_Show_Generic.genericShow(genericCostModel_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Types_Int.showInt)))({
          reflectSymbol: function () {
              return "CostModel";
          }
      }))
  };
  var showCostmdls = {
      show: Data_Show_Generic.genericShow(genericCostmdls_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Types_Scripts.showLanguage)(showCostModel)))({
          reflectSymbol: function () {
              return "Costmdls";
          }
      }))
  };
  var showProposedProtocolParam = {
      show: Data_Show_Generic.genericShow(genericProposedProtocolPa)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showGenesisHash)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "adaPerUtxoByte";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "costModels";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "executionCosts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "expansionRate";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "keyDeposit";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockBodySize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockExUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockHeaderSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxEpoch";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxTxExUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxTxSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxValueSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "minPoolCost";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "minfeeA";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "minfeeB";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "nOpt";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolDeposit";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolPledgeInfluence";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "protocolVersion";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "treasuryGrowthRate";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "major";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "minor";
          }
      })(Data_Show.showRecordFieldsNil)(Data_UInt.uintShowInstance))(Data_UInt.uintShowInstance)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Types_BigNum.showBigNum)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt)))))(Data_Maybe.showMaybe(showEpoch)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt)))))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "memPrice";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "stepPrice";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))))(Data_Maybe.showMaybe(showCostmdls)))(Data_Maybe.showMaybe(Types_BigNum.showBigNum))))))({
          reflectSymbol: function () {
              return "ProposedProtocolParameterUpdates";
          }
      }))
  };
  var genericCertificate_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new StakeRegistration(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new StakeDeregistration(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new StakeDelegation(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new PoolRegistration(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new PoolRetirement(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new GenesisKeyDelegation(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
              return new MoveInstantaneousRewardsCert(x.value0.value0.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 597, column 1 - line 597, column 38): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof StakeRegistration) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof StakeDeregistration) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof StakeDelegation) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
          };
          if (x instanceof PoolRegistration) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof PoolRetirement) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof GenesisKeyDelegation) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof MoveInstantaneousRewardsCert) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))));
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 597, column 1 - line 597, column 38): " + [ x.constructor.name ]);
      }
  };
  var showCertificate = {
      show: Data_Show_Generic.genericShow(genericCertificate_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))({
          reflectSymbol: function () {
              return "StakeRegistration";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))({
          reflectSymbol: function () {
              return "StakeDeregistration";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash)))({
          reflectSymbol: function () {
              return "StakeDelegation";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "cost";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "margin";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "operator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "pledge";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolMetadata";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolOwners";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "relays";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "rewardAccount";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "vrfKeyhash";
          }
      })(Data_Show.showRecordFieldsNil)(Serialization_Types.showVRFKeyHash))(Serialization_Address.showRewardAddress))(Data_Show.showArray(showRelay)))(Data_Show.showArray(Serialization_Hash.showEd25519KeyHash)))(Data_Maybe.showMaybe(showPoolMetadata)))(Types_BigNum.showBigNum))(Serialization_Hash.showEd25519KeyHash))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))(Types_BigNum.showBigNum))))({
          reflectSymbol: function () {
              return "PoolRegistration";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "epoch";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolKeyhash";
          }
      })(Data_Show.showRecordFieldsNil)(Serialization_Hash.showEd25519KeyHash))(showEpoch))))({
          reflectSymbol: function () {
              return "PoolRetirement";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "genesisDelegateHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "genesisHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "vrfKeyhash";
          }
      })(Data_Show.showRecordFieldsNil)(Serialization_Types.showVRFKeyHash))(showGenesisHash))(showGenesisDelegateHash))))({
          reflectSymbol: function () {
              return "GenesisKeyDelegation";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showMoveInstantaneousRewa))({
          reflectSymbol: function () {
              return "MoveInstantaneousRewardsCert";
          }
      }))))))))
  };
  var genericAuxiliaryData_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showAuxiliaryData = {
      show: Data_Show_Generic.genericShow(genericAuxiliaryData_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "metadata";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "nativeScripts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "plutusScripts";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(Types_Scripts.showPlutusScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Cardano_Types_NativeScript.showNativeScript))))(Data_Maybe.showMaybe(Types_TransactionMetadata.showGeneralTransactionMet)))))({
          reflectSymbol: function () {
              return "AuxiliaryData";
          }
      }))
  };
  var genericAuxiliaryDataHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showAuxiliaryDataHash = {
      show: Data_Show_Generic.genericShow(genericAuxiliaryDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "AuxiliaryDataHash";
          }
      }))
  };
  var showTxBody = {
      show: Data_Show_Generic.genericShow(genericTxBody_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "auxiliaryDataHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "certs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "collateral";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "collateralReturn";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "fee";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "inputs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mint";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "networkId";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "outputs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "referenceInputs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "requiredSigners";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "scriptDataHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "totalCollateral";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "ttl";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "update";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "validityStartInterval";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "withdrawals";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Map_Internal.showMap(Serialization_Address.showRewardAddress)(Cardano_Types_Value.showCoin))))(Data_Maybe.showMaybe(Serialization_Address.showSlot)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "epoch";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "proposedProtocolParameterUpdates";
          }
      })(Data_Show.showRecordFieldsNil)(showProposedProtocolParam))(showEpoch)))))(Data_Maybe.showMaybe(Serialization_Address.showSlot)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(showScriptDataHash)))(Data_Maybe.showMaybe(Data_Show.showArray(showRequiredSigner))))(Data_Set.showSet(Types_Transaction.showTransactionInput)))(Data_Show.showArray(showTransactionOutput)))(Data_Maybe.showMaybe(Serialization_Address.showNetworkId)))(Data_Maybe.showMaybe(showMint)))(Data_Set.showSet(Types_Transaction.showTransactionInput)))(Cardano_Types_Value.showCoin))(Data_Maybe.showMaybe(showTransactionOutput)))(Data_Maybe.showMaybe(Data_Show.showArray(Types_Transaction.showTransactionInput))))(Data_Maybe.showMaybe(Data_Show.showArray(showCertificate))))(Data_Maybe.showMaybe(showAuxiliaryDataHash)))))({
          reflectSymbol: function () {
              return "TxBody";
          }
      }))
  };
  var showTransaction = {
      show: Data_Show_Generic.genericShow(genericTransaction_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "auxiliaryData";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "body";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "isValid";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "witnessSet";
          }
      })(Data_Show.showRecordFieldsNil)(showTransactionWitnessSet))(Data_Show.showBoolean))(showTxBody))(Data_Maybe.showMaybe(showAuxiliaryData)))))({
          reflectSymbol: function () {
              return "Transaction";
          }
      }))
  };
  var eqURL = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var eqTransactionOutput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "scriptRef";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef)))()({
      reflectSymbol: function () {
          return "datum";
      }
  })(Types_OutputDatum.eqOutputDatum))()({
      reflectSymbol: function () {
          return "amount";
      }
  })(Cardano_Types_Value.eqValue))()({
      reflectSymbol: function () {
          return "address";
      }
  })(Serialization_Address.eqAddress));              
  var eqRequiredSigner = Serialization_Hash.eqEd25519KeyHash;
  var eqRedeemer = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "tag";
      }
  })(Types_RedeemerTag.eqRedeemerTag))()({
      reflectSymbol: function () {
          return "index";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "exUnits";
      }
  })(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "steps";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "mem";
      }
  })(Data_BigInt.eqBigInt))))()({
      reflectSymbol: function () {
          return "data";
      }
  })(Types_PlutusData.eqPlutusData));
  var eqPublicKey = Data_Eq.eqString;
  var eqVkey = eqPublicKey;
  var eqPoolMetadataHash = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqPoolMetadata = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(eqPoolMetadataHash)(x.hash)(y.hash) && Data_Eq.eq(eqURL)(x.url)(y.url);
          };
      }
  };                                             
  var eqMIRToStakeCredentials = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Map_Internal.eqMap(Serialization_Address.eqStakeCredential)(Types_Int.eqInt))(x)(y);
          };
      }
  };
  var eqMoveInstantaneousReward = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ToOtherPot && y instanceof ToOtherPot) {
                  return Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.amount)(y.value0.amount) && x.value0.pot === y.value0.pot;
              };
              if (x instanceof ToStakeCreds && y instanceof ToStakeCreds) {
                  return Data_Eq.eq(eqMIRToStakeCredentials)(x.value0.amounts)(y.value0.amounts) && x.value0.pot === y.value0.pot;
              };
              return false;
          };
      }
  };
  var eqIpv6 = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqIpv4 = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqRelay = {
      eq: function (x) {
          return function (y) {
              if (x instanceof SingleHostAddr && y instanceof SingleHostAddr) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv4))(x.value0.ipv4)(y.value0.ipv4) && Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv6))(x.value0.ipv6)(y.value0.ipv6) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
              };
              if (x instanceof SingleHostName && y instanceof SingleHostName) {
                  return x.value0.dnsName === y.value0.dnsName && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
              };
              if (x instanceof MultiHostName && y instanceof MultiHostName) {
                  return x.value0.dnsName === y.value0.dnsName;
              };
              return false;
          };
      }
  };
  var eqGenesisHash = Types_ByteArray.eqByteArray;
  var eqGenesisDelegateHash = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqEpoch = Data_UInt.uintEqInstance;
  var eqEd25519Signature = Data_Eq.eqString;
  var eqVkeywitness = Data_Tuple.eqTuple(eqVkey)(eqEd25519Signature);
  var semigroupTransactionWitne = {
      append: function (v) {
          return function (v1) {
              return {
                  vkeys: Helpers.maybeArrayMerge(eqVkeywitness)(v.vkeys)(v1.vkeys),
                  nativeScripts: Helpers.maybeArrayMerge(Cardano_Types_NativeScript.eqNativeScript)(v.nativeScripts)(v1.nativeScripts),
                  bootstraps: Helpers.maybeArrayMerge(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                      reflectSymbol: function () {
                          return "vkey";
                      }
                  })(eqVkey))()({
                      reflectSymbol: function () {
                          return "signature";
                      }
                  })(eqEd25519Signature))()({
                      reflectSymbol: function () {
                          return "chainCode";
                      }
                  })(Types_ByteArray.eqByteArray))()({
                      reflectSymbol: function () {
                          return "attributes";
                      }
                  })(Types_ByteArray.eqByteArray)))(v.bootstraps)(v1.bootstraps),
                  plutusScripts: Helpers.maybeArrayMerge(Types_Scripts.eqPlutusScript)(v.plutusScripts)(v1.plutusScripts),
                  plutusData: Helpers.maybeArrayMerge(Types_PlutusData.eqPlutusData)(v.plutusData)(v1.plutusData),
                  redeemers: Helpers.maybeArrayMerge(eqRedeemer)(v.redeemers)(v1.redeemers)
              };
          };
      }
  };
  var monoidTransactionWitnessS = {
      mempty: {
          vkeys: Data_Maybe.Nothing.value,
          nativeScripts: Data_Maybe.Nothing.value,
          bootstraps: Data_Maybe.Nothing.value,
          plutusScripts: Data_Maybe.Nothing.value,
          plutusData: Data_Maybe.Nothing.value,
          redeemers: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupTransactionWitne;
      }
  };                                              
  var eqCertificate = {
      eq: function (x) {
          return function (y) {
              if (x instanceof StakeRegistration && y instanceof StakeRegistration) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
              };
              if (x instanceof StakeDeregistration && y instanceof StakeDeregistration) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
              };
              if (x instanceof StakeDelegation && y instanceof StakeDelegation) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value1)(y.value1);
              };
              if (x instanceof PoolRegistration && y instanceof PoolRegistration) {
                  return Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.cost)(y.value0.cost) && (Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.margin.denominator)(y.value0.margin.denominator) && Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.margin.numerator)(y.value0.margin.numerator)) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.operator)(y.value0.operator) && Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.pledge)(y.value0.pledge) && Data_Eq.eq(Data_Maybe.eqMaybe(eqPoolMetadata))(x.value0.poolMetadata)(y.value0.poolMetadata) && Data_Eq.eq(Data_Eq.eqArray(Serialization_Hash.eqEd25519KeyHash))(x.value0.poolOwners)(y.value0.poolOwners) && Data_Eq.eq(Data_Eq.eqArray(eqRelay))(x.value0.relays)(y.value0.relays) && Data_Eq.eq(Serialization_Address.eqRewardAddress)(x.value0.rewardAccount)(y.value0.rewardAccount) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
              };
              if (x instanceof PoolRetirement && y instanceof PoolRetirement) {
                  return Data_Eq.eq(eqEpoch)(x.value0.epoch)(y.value0.epoch) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.poolKeyhash)(y.value0.poolKeyhash);
              };
              if (x instanceof GenesisKeyDelegation && y instanceof GenesisKeyDelegation) {
                  return Data_Eq.eq(eqGenesisDelegateHash)(x.value0.genesisDelegateHash)(y.value0.genesisDelegateHash) && Data_Eq.eq(eqGenesisHash)(x.value0.genesisHash)(y.value0.genesisHash) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
              };
              if (x instanceof MoveInstantaneousRewardsCert && y instanceof MoveInstantaneousRewardsCert) {
                  return Data_Eq.eq(eqMoveInstantaneousReward)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var semigroupTxBody = {
      append: function (v) {
          return function (v1) {
              var lowerbound = function (v2) {
                  return function (v3) {
                      return Serialization_Address.Slot(Data_Ord.min(Types_BigNum.ordBigNum)(v2)(v3));
                  };
              };
              return {
                  inputs: Data_Set.union(Types_Transaction.ordTransactionInput)(v.inputs)(v1.inputs),
                  outputs: Data_Array.union(eqTransactionOutput)(v.outputs)(v1.outputs),
                  fee: Data_Semigroup.append(Cardano_Types_Value.semigroupCoin)(v.fee)(v1.fee),
                  ttl: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.ttl)(v1.ttl),
                  certs: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqCertificate))(v.certs)(v1.certs),
                  withdrawals: Control_Apply.lift2(Data_Maybe.applyMaybe)(Helpers.appendMap(Serialization_Address.ordRewardAddress)(Cardano_Types_Value.semigroupCoin))(v.withdrawals)(v1.withdrawals),
                  update: Helpers.appendLastMaybe(v.update)(v1.update),
                  auxiliaryDataHash: Helpers.appendLastMaybe(v.auxiliaryDataHash)(v1.auxiliaryDataHash),
                  validityStartInterval: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.validityStartInterval)(v1.validityStartInterval),
                  mint: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupMint))(v.mint)(v1.mint),
                  referenceInputs: Data_Semigroup.append(Data_Set.semigroupSet(Types_Transaction.ordTransactionInput))(v.referenceInputs)(v1.referenceInputs),
                  scriptDataHash: Helpers.appendLastMaybe(v.scriptDataHash)(v1.scriptDataHash),
                  collateral: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Transaction.eqTransactionInput))(v.collateral)(v1.collateral),
                  requiredSigners: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqRequiredSigner))(v.requiredSigners)(v1.requiredSigners),
                  networkId: Helpers.appendLastMaybe(v.networkId)(v1.networkId),
                  collateralReturn: Control_Alt.alt(Data_Maybe.altMaybe)(v.collateralReturn)(v.collateralReturn),
                  totalCollateral: Control_Alt.alt(Data_Maybe.altMaybe)(v.totalCollateral)(v.totalCollateral)
              };
          };
      }
  };
  var monoidTxBody = {
      mempty: {
          inputs: Data_Monoid.mempty(Data_Set.monoidSet(Types_Transaction.ordTransactionInput)),
          outputs: Data_Monoid.mempty(Data_Monoid.monoidArray),
          fee: Data_Monoid.mempty(Cardano_Types_Value.monoidCoin),
          ttl: Data_Maybe.Nothing.value,
          certs: Data_Maybe.Nothing.value,
          withdrawals: Data_Maybe.Nothing.value,
          update: Data_Maybe.Nothing.value,
          auxiliaryDataHash: Data_Maybe.Nothing.value,
          validityStartInterval: Data_Maybe.Nothing.value,
          mint: Data_Maybe.Nothing.value,
          scriptDataHash: Data_Maybe.Nothing.value,
          collateral: Data_Maybe.Nothing.value,
          requiredSigners: Data_Maybe.Nothing.value,
          networkId: Data_Maybe.Nothing.value,
          collateralReturn: Data_Maybe.Nothing.value,
          totalCollateral: Data_Maybe.Nothing.value,
          referenceInputs: Data_Monoid.mempty(Data_Set.monoidSet(Types_Transaction.ordTransactionInput))
      },
      Semigroup0: function () {
          return semigroupTxBody;
      }
  };
  var semigroupTransaction = {
      append: function (v) {
          return function (v1) {
              var txCheck$prime = function (dictMonoid) {
                  return Data_Monoid.guard(dictMonoid)(v1.isValid);
              };
              var txCheck = function (dictMonoid) {
                  return Data_Monoid.guard(dictMonoid)(v.isValid);
              };
              return {
                  body: Data_Semigroup.append(semigroupTxBody)(txCheck(monoidTxBody)(v.body))(txCheck$prime(monoidTxBody)(v1.body)),
                  witnessSet: Data_Semigroup.append(semigroupTransactionWitne)(txCheck(monoidTransactionWitnessS)(v.witnessSet))(txCheck$prime(monoidTransactionWitnessS)(v1.witnessSet)),
                  isValid: v.isValid && v1.isValid,
                  auxiliaryData: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupAuxiliaryData))(txCheck(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v.auxiliaryData))(txCheck$prime(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v1.auxiliaryData))
              };
          };
      }
  };
  var monoidTransaction = {
      mempty: {
          body: Data_Monoid.mempty(monoidTxBody),
          witnessSet: Data_Monoid.mempty(monoidTransactionWitnessS),
          isValid: true,
          auxiliaryData: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupTransaction;
      }
  };
  var encodeAesonURL = Aeson.encodeAesonString;
  var encodeAesonTransactionOut = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonAddress)(Aeson.gEncodeAesonCons(Cardano_Types_Value.encodeAesonValue)(Aeson.gEncodeAesonCons(Types_OutputDatum.encodeAesonOutputDatum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_ScriptRef.encodeAesonScriptRef))(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "scriptRef";
      }
  })())({
      reflectSymbol: function () {
          return "datum";
      }
  })())({
      reflectSymbol: function () {
          return "amount";
      }
  })())({
      reflectSymbol: function () {
          return "address";
      }
  })())();
  var encodeAesonScriptDataHash = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonRequiredSigner = Serialization_Hash.encodeAesonEd25519KeyHash;
  var encodeAesonRedeemer = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_PlutusData.encodeAesonPlutusData)(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "steps";
      }
  })())({
      reflectSymbol: function () {
          return "mem";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Types_RedeemerTag.encodeAesonRedeemerTag)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "tag";
      }
  })())({
      reflectSymbol: function () {
          return "index";
      }
  })())({
      reflectSymbol: function () {
          return "exUnits";
      }
  })())({
      reflectSymbol: function () {
          return "data";
      }
  })())();
  var encodeAesonPublicKey = Aeson.encodeAesonString;
  var encodeAesonVkey = encodeAesonPublicKey;
  var encodeAesonPoolMetadataHa = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonPoolMetadata = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonPoolMetadataHa)(Aeson.gEncodeAesonCons(encodeAesonURL)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "url";
              }
          })())({
              reflectSymbol: function () {
                  return "hash";
              }
          })())())(v);
      }
  };
  var encodeAesonMint = Cardano_Types_Value.encodeAesonNonAdaAsset;
  var encodeAesonMIRToStakeCred = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(Serialization_Address.encodeAesonStakeCredentia)(Types_Int.encodeAesonInt)(v));
      }
  };
  var encodeAesonMoveInstantane = {
      "encodeAeson'": function (v) {
          if (v instanceof ToOtherPot) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonNumber)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "pot";
                  }
              })())({
                  reflectSymbol: function () {
                      return "amount";
                  }
              })())())("ToOtherPot")(v.value0));
          };
          if (v instanceof ToStakeCreds) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonMIRToStakeCred)(Aeson.gEncodeAesonCons(Aeson.encodeAesonNumber)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "pot";
                  }
              })())({
                  reflectSymbol: function () {
                      return "amounts";
                  }
              })())())("ToStakeCreds")(v.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 566, column 18 - line 568, column 68): " + [ v.constructor.name ]);
      }
  };
  var encodeAesonIpv6 = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonIpv4 = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonRelay = {
      "encodeAeson'": function (v) {
          if (v instanceof SingleHostAddr) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonIpv4))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonIpv6))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonInt))(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "port";
                  }
              })())({
                  reflectSymbol: function () {
                      return "ipv6";
                  }
              })())({
                  reflectSymbol: function () {
                      return "ipv4";
                  }
              })())())("SingleHostAddr")(v.value0));
          };
          if (v instanceof SingleHostName) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonInt))(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "port";
                  }
              })())({
                  reflectSymbol: function () {
                      return "dnsName";
                  }
              })())())("SingleHostName")(v.value0));
          };
          if (v instanceof MultiHostName) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "dnsName";
                  }
              })())())("MultiHostName")(v.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 489, column 18 - line 492, column 70): " + [ v.constructor.name ]);
      }
  };
  var encodeAesonGenesisHash = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonGenesisDelegat = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonEpoch = Aeson.encodeAesonUInt;
  var encodeAesonEd25519Signatu = Aeson.encodeAesonString;
  var encodeAesonVkeywitness = Aeson.encodeAesonTuple(encodeAesonVkey)(encodeAesonEd25519Signatu);
  var encodeAesonTransactionWit = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonCons(encodeAesonEd25519Signatu)(Aeson.gEncodeAesonCons(encodeAesonVkey)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "vkey";
      }
  })())({
      reflectSymbol: function () {
          return "signature";
      }
  })())({
      reflectSymbol: function () {
          return "chainCode";
      }
  })())({
      reflectSymbol: function () {
          return "attributes";
      }
  })())())))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Cardano_Types_NativeScript.encodeAesonNativeScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_PlutusData.encodeAesonPlutusData)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Scripts.encodeAesonPlutusScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonRedeemer)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonVkeywitness)))(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "vkeys";
      }
  })())({
      reflectSymbol: function () {
          return "redeemers";
      }
  })())({
      reflectSymbol: function () {
          return "plutusScripts";
      }
  })())({
      reflectSymbol: function () {
          return "plutusData";
      }
  })())({
      reflectSymbol: function () {
          return "nativeScripts";
      }
  })())({
      reflectSymbol: function () {
          return "bootstraps";
      }
  })())();
  var encodeAesonCostModel = Aeson.encodeAesonArray(Types_Int.encodeAesonInt);
  var encodeAesonCostmdls = {
      "encodeAeson'": (function () {
          var $583 = Aeson["encodeAeson'"](Aeson.encodeAesonAeson);
          var $584 = Helpers.encodeMap(Types_Scripts.encodeAesonLanguage)(encodeAesonCostModel);
          var $585 = Data_Newtype.unwrap();
          return function ($586) {
              return $583($584($585($586)));
          };
      })()
  };
  var encodeAesonProposedProtoc = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(encodeAesonGenesisHash)(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_BigNum.encodeAesonBigNum))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonCostmdls))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "numerator";
              }
          })())({
              reflectSymbol: function () {
                  return "denominator";
              }
          })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "numerator";
              }
          })())({
              reflectSymbol: function () {
                  return "denominator";
              }
          })())())(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "stepPrice";
              }
          })())({
              reflectSymbol: function () {
                  return "memPrice";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "numerator";
              }
          })())({
              reflectSymbol: function () {
                  return "denominator";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })())({
              reflectSymbol: function () {
                  return "mem";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonEpoch))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })())({
              reflectSymbol: function () {
                  return "mem";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_BigNum.encodeAesonBigNum))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "numerator";
              }
          })())({
              reflectSymbol: function () {
                  return "denominator";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "minor";
              }
          })())({
              reflectSymbol: function () {
                  return "major";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "numerator";
              }
          })())({
              reflectSymbol: function () {
                  return "denominator";
              }
          })())()))(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "treasuryGrowthRate";
              }
          })())({
              reflectSymbol: function () {
                  return "protocolVersion";
              }
          })())({
              reflectSymbol: function () {
                  return "poolPledgeInfluence";
              }
          })())({
              reflectSymbol: function () {
                  return "poolDeposit";
              }
          })())({
              reflectSymbol: function () {
                  return "nOpt";
              }
          })())({
              reflectSymbol: function () {
                  return "minfeeB";
              }
          })())({
              reflectSymbol: function () {
                  return "minfeeA";
              }
          })())({
              reflectSymbol: function () {
                  return "minPoolCost";
              }
          })())({
              reflectSymbol: function () {
                  return "maxValueSize";
              }
          })())({
              reflectSymbol: function () {
                  return "maxTxSize";
              }
          })())({
              reflectSymbol: function () {
                  return "maxTxExUnits";
              }
          })())({
              reflectSymbol: function () {
                  return "maxEpoch";
              }
          })())({
              reflectSymbol: function () {
                  return "maxBlockHeaderSize";
              }
          })())({
              reflectSymbol: function () {
                  return "maxBlockExUnits";
              }
          })())({
              reflectSymbol: function () {
                  return "maxBlockBodySize";
              }
          })())({
              reflectSymbol: function () {
                  return "keyDeposit";
              }
          })())({
              reflectSymbol: function () {
                  return "expansionRate";
              }
          })())({
              reflectSymbol: function () {
                  return "executionCosts";
              }
          })())({
              reflectSymbol: function () {
                  return "costModels";
              }
          })())({
              reflectSymbol: function () {
                  return "adaPerUtxoByte";
              }
          })())())(v));
      }
  };
  var encodeAesonCertificate = {
      "encodeAeson'": function (v) {
          if (v instanceof StakeRegistration) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonStakeCredentia)("StakeRegistration")(v.value0));
          };
          if (v instanceof StakeDeregistration) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonStakeCredentia)("StakeDeregistration")(v.value0));
          };
          if (v instanceof StakeDelegation) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonStakeCredentia)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "stakeCredential";
                  }
              })())({
                  reflectSymbol: function () {
                      return "ed25519KeyHash";
                  }
              })())())("StakeDelegation")({
                  stakeCredential: v.value0,
                  ed25519KeyHash: v.value1
              }));
          };
          if (v instanceof PoolRegistration) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "numerator";
                  }
              })())({
                  reflectSymbol: function () {
                      return "denominator";
                  }
              })())())(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonPoolMetadata))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Serialization_Hash.encodeAesonEd25519KeyHash))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(encodeAesonRelay))(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonRewardAddress)(Aeson.gEncodeAesonCons(Serialization_Types.encodeAesonVRFKeyHash)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "vrfKeyhash";
                  }
              })())({
                  reflectSymbol: function () {
                      return "rewardAccount";
                  }
              })())({
                  reflectSymbol: function () {
                      return "relays";
                  }
              })())({
                  reflectSymbol: function () {
                      return "poolOwners";
                  }
              })())({
                  reflectSymbol: function () {
                      return "poolMetadata";
                  }
              })())({
                  reflectSymbol: function () {
                      return "pledge";
                  }
              })())({
                  reflectSymbol: function () {
                      return "operator";
                  }
              })())({
                  reflectSymbol: function () {
                      return "margin";
                  }
              })())({
                  reflectSymbol: function () {
                      return "cost";
                  }
              })())())("PoolRegistration")(v.value0));
          };
          if (v instanceof PoolRetirement) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonEpoch)(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "poolKeyhash";
                  }
              })())({
                  reflectSymbol: function () {
                      return "epoch";
                  }
              })())())("PoolRetirement")(v.value0));
          };
          if (v instanceof GenesisKeyDelegation) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonGenesisDelegat)(Aeson.gEncodeAesonCons(encodeAesonGenesisHash)(Aeson.gEncodeAesonCons(Serialization_Types.encodeAesonVRFKeyHash)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "vrfKeyhash";
                  }
              })())({
                  reflectSymbol: function () {
                      return "genesisHash";
                  }
              })())({
                  reflectSymbol: function () {
                      return "genesisDelegateHash";
                  }
              })())())("GenesisKeyDelegation")(v.value0));
          };
          if (v instanceof MoveInstantaneousRewardsCert) {
              return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](encodeAesonMoveInstantane)("MoveInstantaneousReward")(v.value0));
          };
          throw new Error("Failed pattern match at Cardano.Types.Transaction (line 603, column 18 - line 616, column 8): " + [ v.constructor.name ]);
      }
  };
  var encodeAesonAuxiliaryDataH = Types_ByteArray.encodeAesonByteArray;
  var encodeAesonTxBody = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonAuxiliaryDataH))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonCertificate)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Transaction.encodeAesonTransactionInp)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonTransactionOut))(Aeson.gEncodeAesonCons(Cardano_Types_Value.encodeAesonCoin)(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonMint))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonNetworkId))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(encodeAesonTransactionOut))(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonRequiredSigner)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonScriptDataHash))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonSlot))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonEpoch)(Aeson.gEncodeAesonCons(encodeAesonProposedProtoc)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "proposedProtocolParameterUpdates";
              }
          })())({
              reflectSymbol: function () {
                  return "epoch";
              }
          })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonSlot))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonAeson))(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "withdrawals";
              }
          })())({
              reflectSymbol: function () {
                  return "validityStartInterval";
              }
          })())({
              reflectSymbol: function () {
                  return "update";
              }
          })())({
              reflectSymbol: function () {
                  return "ttl";
              }
          })())({
              reflectSymbol: function () {
                  return "totalCollateral";
              }
          })())({
              reflectSymbol: function () {
                  return "scriptDataHash";
              }
          })())({
              reflectSymbol: function () {
                  return "requiredSigners";
              }
          })())({
              reflectSymbol: function () {
                  return "referenceInputs";
              }
          })())({
              reflectSymbol: function () {
                  return "outputs";
              }
          })())({
              reflectSymbol: function () {
                  return "networkId";
              }
          })())({
              reflectSymbol: function () {
                  return "mint";
              }
          })())({
              reflectSymbol: function () {
                  return "inputs";
              }
          })())({
              reflectSymbol: function () {
                  return "fee";
              }
          })())({
              reflectSymbol: function () {
                  return "collateralReturn";
              }
          })())({
              reflectSymbol: function () {
                  return "collateral";
              }
          })())({
              reflectSymbol: function () {
                  return "certs";
              }
          })())({
              reflectSymbol: function () {
                  return "auxiliaryDataHash";
              }
          })())())({
              inputs: Helpers.encodeSet(Types_Transaction.encodeAesonTransactionInp)(v.inputs),
              withdrawals: Data_Functor.map(Data_Maybe.functorMaybe)(Helpers.encodeMap(Serialization_Address.encodeAesonRewardAddress)(Cardano_Types_Value.encodeAesonCoin))(v.withdrawals),
              referenceInputs: Helpers.encodeSet(Types_Transaction.encodeAesonTransactionInp)(v.referenceInputs),
              auxiliaryDataHash: v.auxiliaryDataHash,
              certs: v.certs,
              collateral: v.collateral,
              collateralReturn: v.collateralReturn,
              fee: v.fee,
              mint: v.mint,
              networkId: v.networkId,
              outputs: v.outputs,
              requiredSigners: v.requiredSigners,
              scriptDataHash: v.scriptDataHash,
              totalCollateral: v.totalCollateral,
              ttl: v.ttl,
              update: v.update,
              validityStartInterval: v.validityStartInterval
          });
      }
  };
  var encodeAesonAuxiliaryData = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_TransactionMetadata.encodeAesonGeneralTransac))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Cardano_Types_NativeScript.encodeAesonNativeScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Scripts.encodeAesonPlutusScript)))(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "plutusScripts";
      }
  })())({
      reflectSymbol: function () {
          return "nativeScripts";
      }
  })())({
      reflectSymbol: function () {
          return "metadata";
      }
  })())();
  var encodeAesonTransaction = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonAuxiliaryData))(Aeson.gEncodeAesonCons(encodeAesonTxBody)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBoolean)(Aeson.gEncodeAesonCons(encodeAesonTransactionWit)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "witnessSet";
      }
  })())({
      reflectSymbol: function () {
          return "isValid";
      }
  })())({
      reflectSymbol: function () {
          return "body";
      }
  })())({
      reflectSymbol: function () {
          return "auxiliaryData";
      }
  })())();
  var _witnessSet = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.witnessSet, function (ws) {
              return {
                  body: v.body,
                  witnessSet: ws,
                  isValid: v.isValid,
                  auxiliaryData: v.auxiliaryData
              };
          });
      })(dictStrong);
  };
  var _vkeys = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.vkeys, function (vk) {
              return {
                  vkeys: vk,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: v.plutusData,
                  redeemers: v.redeemers
              };
          });
      })(dictStrong);
  };
  var _totalCollateral = function (dictStrong) {
      var $599 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $600 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "totalCollateral";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($601) {
          return $599($600($601));
      };
  };
  var _scriptDataHash = function (dictStrong) {
      var $602 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $603 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "scriptDataHash";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($604) {
          return $602($603($604));
      };
  };
  var _requiredSigners = function (dictStrong) {
      var $605 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $606 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "requiredSigners";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($607) {
          return $605($606($607));
      };
  };
  var _referenceInputs = function (dictStrong) {
      var $608 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $609 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "referenceInputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($610) {
          return $608($609($610));
      };
  };
  var _redeemers = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.redeemers, function (red) {
              return {
                  vkeys: v.vkeys,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: v.plutusData,
                  redeemers: red
              };
          });
      })(dictStrong);
  };
  var _plutusData = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.plutusData, function (pd) {
              return {
                  vkeys: v.vkeys,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: pd,
                  redeemers: v.redeemers
              };
          });
      })(dictStrong);
  };
  var _outputs = function (dictStrong) {
      var $611 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $612 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "outputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($613) {
          return $611($612($613));
      };
  };
  var _networkId = function (dictStrong) {
      var $614 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $615 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "networkId";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($616) {
          return $614($615($616));
      };
  };
  var _mint = function (dictStrong) {
      var $617 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $618 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "mint";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($619) {
          return $617($618($619));
      };
  };
  var _isValid = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.isValid, function (iv) {
              return {
                  body: v.body,
                  witnessSet: v.witnessSet,
                  isValid: iv,
                  auxiliaryData: v.auxiliaryData
              };
          });
      })(dictStrong);
  };
  var _inputs = function (dictStrong) {
      var $620 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $621 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "inputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($622) {
          return $620($621($622));
      };
  };
  var _fee = function (dictStrong) {
      var $623 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $624 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "fee";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($625) {
          return $623($624($625));
      };
  };
  var _collateralReturn = function (dictStrong) {
      var $626 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $627 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "collateralReturn";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($628) {
          return $626($627($628));
      };
  };
  var _collateral = function (dictStrong) {
      var $629 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $630 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "collateral";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($631) {
          return $629($630($631));
      };
  };
  var _body = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.body, function (bod) {
              return {
                  body: bod,
                  witnessSet: v.witnessSet,
                  isValid: v.isValid,
                  auxiliaryData: v.auxiliaryData
              };
          });
      })(dictStrong);
  };
  exports["StakeRegistration"] = StakeRegistration;
  exports["StakeDeregistration"] = StakeDeregistration;
  exports["StakeDelegation"] = StakeDelegation;
  exports["PoolRegistration"] = PoolRegistration;
  exports["PoolRetirement"] = PoolRetirement;
  exports["GenesisKeyDelegation"] = GenesisKeyDelegation;
  exports["MoveInstantaneousRewardsCert"] = MoveInstantaneousRewardsCert;
  exports["Costmdls"] = Costmdls;
  exports["Ed25519Signature"] = Ed25519Signature;
  exports["ToOtherPot"] = ToOtherPot;
  exports["ToStakeCreds"] = ToStakeCreds;
  exports["PublicKey"] = PublicKey;
  exports["SingleHostAddr"] = SingleHostAddr;
  exports["SingleHostName"] = SingleHostName;
  exports["MultiHostName"] = MultiHostName;
  exports["ScriptDataHash"] = ScriptDataHash;
  exports["Transaction"] = Transaction;
  exports["TransactionWitnessSet"] = TransactionWitnessSet;
  exports["TxBody"] = TxBody;
  exports["Vkey"] = Vkey;
  exports["Vkeywitness"] = Vkeywitness;
  exports["_body"] = _body;
  exports["_collateral"] = _collateral;
  exports["_collateralReturn"] = _collateralReturn;
  exports["_fee"] = _fee;
  exports["_inputs"] = _inputs;
  exports["_isValid"] = _isValid;
  exports["_mint"] = _mint;
  exports["_networkId"] = _networkId;
  exports["_outputs"] = _outputs;
  exports["_plutusData"] = _plutusData;
  exports["_redeemers"] = _redeemers;
  exports["_referenceInputs"] = _referenceInputs;
  exports["_requiredSigners"] = _requiredSigners;
  exports["_scriptDataHash"] = _scriptDataHash;
  exports["_totalCollateral"] = _totalCollateral;
  exports["_vkeys"] = _vkeys;
  exports["_witnessSet"] = _witnessSet;
  exports["encodeAesonTransaction"] = encodeAesonTransaction;
  exports["showTransaction"] = showTransaction;
  exports["monoidTransaction"] = monoidTransaction;
  exports["semigroupMint"] = semigroupMint;
  exports["showCostmdls"] = showCostmdls;
  exports["showNonce"] = showNonce;
  exports["semigroupTransactionWitne"] = semigroupTransactionWitne;
  exports["monoidTransactionWitnessS"] = monoidTransactionWitnessS;
  exports["eqPublicKey"] = eqPublicKey;
  exports["showPublicKey"] = showPublicKey;
  exports["encodeAesonRedeemer"] = encodeAesonRedeemer;
  exports["showRedeemer"] = showRedeemer;
  exports["eqTransactionOutput"] = eqTransactionOutput;
  exports["encodeAesonTransactionOut"] = encodeAesonTransactionOut;
  exports["showTransactionOutput"] = showTransactionOutput;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Heterogeneous.Folding"] = $PS["Heterogeneous.Folding"] || {};
  var exports = $PS["Heterogeneous.Folding"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var hfoldl = function (dict) {
      return dict.hfoldl;
  };
  var functionFolding = {
      folding: function (f) {
          return f;
      }
  };
  var foldlRecordRowList = function (dict) {
      return dict.foldlRecordRowList;
  };
  var hfoldlRecord = function (dictRowToList) {
      return function (dictFoldlRecord) {
          return {
              hfoldl: function (f) {
                  return function (x) {
                      return foldlRecordRowList(dictFoldlRecord)(f)(x)(Type_Proxy["Proxy"].value);
                  };
              }
          };
      };
  };
  var foldlRecordNil = {
      foldlRecordRowList: function (v) {
          return function (x) {
              return function (v1) {
                  return function (v2) {
                      return x;
                  };
              };
          };
      }
  };
  var foldingWithIndex = function (dict) {
      return dict.foldingWithIndex;
  };
  var foldlRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictFoldingWithIndex) {
              return function (dictFoldlRecord) {
                  return {
                      foldlRecordRowList: function (f) {
                          return function (x) {
                              return function (v) {
                                  return function (r) {
                                      return foldlRecordRowList(dictFoldlRecord)(f)(foldingWithIndex(dictFoldingWithIndex)(f)(Type_Proxy["Proxy"].value)(x)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r)))(Type_Proxy["Proxy"].value)(r);
                                  };
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var folding = function (dict) {
      return dict.folding;
  };
  var constFolding = function (dictFolding) {
      return {
          foldingWithIndex: function (v) {
              return function (v1) {
                  return folding(dictFolding)(v);
              };
          }
      };
  };
  exports["hfoldl"] = hfoldl;
  exports["functionFolding"] = functionFolding;
  exports["constFolding"] = constFolding;
  exports["hfoldlRecord"] = hfoldlRecord;
  exports["foldlRecordCons"] = foldlRecordCons;
  exports["foldlRecordNil"] = foldlRecordNil;
})(PS);
(function(exports) {
  const uniqid = require("uniqid");

  exports.uniqueId = str => () => uniqid(str);
})(PS["QueryM.UniqueId"] = PS["QueryM.UniqueId"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.UniqueId"] = $PS["QueryM.UniqueId"] || {};
  var exports = $PS["QueryM.UniqueId"];
  var $foreign = $PS["QueryM.UniqueId"];
  exports["uniqueId"] = $foreign.uniqueId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.JsonWsp"] = $PS["QueryM.JsonWsp"] || {};
  var exports = $PS["QueryM.JsonWsp"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Traversable = $PS["Data.Traversable"];
  var QueryM_UniqueId = $PS["QueryM.UniqueId"];
  var Record = $PS["Record"];                
  var JsonWspCall = function (x) {
      return x;
  };
  var parseMirror = Aeson.caseAesonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected string")))(Control_Applicative.pure(Data_Either.applicativeEither));
  var mkJsonWspRequest = function (service) {
      return function (method) {
          return function __do() {
              var id = QueryM_UniqueId.uniqueId(method.methodname + "-")();
              return Record.merge()()({
                  mirror: id
              })(Record.merge()()(service)(method));
          };
      };
  };
  var mkCallType = function (dictEncodeAeson) {
      return function (service) {
          return function (v) {
              return JsonWspCall(function (i) {
                  return function __do() {
                      var req = mkJsonWspRequest(service)({
                          methodname: v.methodname,
                          args: v.args(i)
                      })();
                      return {
                          body: Aeson.encodeAeson(dictEncodeAeson)(req),
                          id: req.mirror
                      };
                  };
              });
          };
      };
  };
  var buildRequest = function (v) {
      return v;
  };
  var aesonObject = Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected object")));
  var parseJsonWspResponse = function (dictDecodeAeson) {
      return aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("type"))(function (typeField) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("version"))(function (version) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("servicename"))(function (servicename) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getFieldOptional(Aeson.decodeAesonString)(o)("methodname"))(function (methodname) {
                          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Aeson.decodeAeson(dictDecodeAeson)))(Aeson.getFieldOptional(Aeson.decodeAesonAeson)(o)("result")))(function (result) {
                              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Aeson.decodeAeson(Aeson.decodeAesonAeson)))(Aeson.getFieldOptional(Aeson.decodeAesonAeson)(o)("fault")))(function (fault) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(parseMirror)(Aeson.getField(Aeson.decodeAesonAeson)(o)("reflection")))(function (reflection) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          type: typeField,
                                          version: version,
                                          servicename: servicename,
                                          methodname: methodname,
                                          result: result,
                                          fault: fault,
                                          reflection: reflection
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var parseJsonWspResponseId = aesonObject(function (o) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(parseMirror)(Aeson.getField(Aeson.decodeAesonAeson)(o)("reflection"));
  });
  exports["mkCallType"] = mkCallType;
  exports["buildRequest"] = buildRequest;
  exports["parseJsonWspResponse"] = parseJsonWspResponse;
  exports["parseJsonWspResponseId"] = parseJsonWspResponseId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Natural"] = $PS["Types.Natural"] || {};
  var exports = $PS["Types.Natural"];
  var Aeson = $PS["Aeson"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var ToData = $PS["ToData"];                                    
  var Natural = function (x) {
      return x;
  };                                                           
  var toDataNatural = {
      toData: function (v) {
          return ToData.toData(ToData.toDataBigInt)(v);
      }
  };
  var showNatural = {
      show: function (v) {
          return "(fromBigInt' (BigInt." + (Data_Show.show(Data_BigInt.showBigInt)(v) + "))");
      }
  };
  var semiringNatural = Data_BigInt.semiringBigInt;
  var ordNatural = Data_BigInt.ordBigInt;                            
  var eqNatural = Data_BigInt.eqBigInt;
  var toBigInt = function (v) {
      return v;
  };
  var fromSemiringType$prime = function (dictSemiring) {
      return function (dictOrd) {
          return function (f) {
              return function (n) {
                  if (Data_Ord.greaterThanOrEq(dictOrd)(n)(Data_Semiring.zero(dictSemiring))) {
                      return f(n);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Ring.negate(Data_BigInt.ringBigInt)(f(n));
                  };
                  throw new Error("Failed pattern match at Types.Natural (line 67, column 1 - line 68, column 78): " + [ f.constructor.name, n.constructor.name ]);
              };
          };
      };
  };
  var fromSemiringType = function (dictSemiring) {
      return function (dictOrd) {
          return function (f) {
              return function (n) {
                  if (Data_Ord.greaterThanOrEq(dictOrd)(n)(Data_Semiring.zero(dictSemiring))) {
                      return new Data_Maybe.Just(Natural(f(n)));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Types.Natural (line 59, column 1 - line 60, column 79): " + [ f.constructor.name, n.constructor.name ]);
              };
          };
      };
  };
  var fromInt$prime = fromSemiringType$prime(Data_Semiring.semiringInt)(Data_Ord.ordInt)(Data_BigInt.fromInt);
  var fromInt = fromSemiringType(Data_Semiring.semiringInt)(Data_Ord.ordInt)(Data_BigInt.fromInt);
  var fromBigInt$prime = fromSemiringType$prime(Data_BigInt.semiringBigInt)(Data_BigInt.ordBigInt)(Control_Category.identity(Control_Category.categoryFn));
  var fromBigInt = fromSemiringType(Data_BigInt.semiringBigInt)(Data_BigInt.ordBigInt)(Control_Category.identity(Control_Category.categoryFn));
  var fromString = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromBigInt)(Data_BigInt.fromString);
  var decodeAesonNatural = {
      decodeAeson: Aeson.caseAesonBigInt(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected BigInt from Aeson decoding")))(function (bi) {
          return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Invalid Natural number: " + Data_Show.show(Data_BigInt.showBigInt)(bi)))(fromBigInt(bi));
      })
  };
  var binaryOnBigInt = function (bin) {
      return function (n) {
          var $26 = Data_Function.on(bin)(toBigInt)(n);
          return function ($27) {
              return fromBigInt($26($27));
          };
      };
  };
  var minus = function (n) {
      var $28 = Data_Maybe.fromMaybe(Data_Semiring.zero(semiringNatural));
      var $29 = binaryOnBigInt(Data_Ring.sub(Data_BigInt.ringBigInt))(n);
      return function ($30) {
          return $28($29($30));
      };
  };
  exports["fromBigInt"] = fromBigInt;
  exports["fromBigInt'"] = fromBigInt$prime;
  exports["fromInt'"] = fromInt$prime;
  exports["fromString"] = fromString;
  exports["minus"] = minus;
  exports["toBigInt"] = toBigInt;
  exports["eqNatural"] = eqNatural;
  exports["ordNatural"] = ordNatural;
  exports["semiringNatural"] = semiringNatural;
  exports["showNatural"] = showNatural;
  exports["toDataNatural"] = toDataNatural;
  exports["decodeAesonNatural"] = decodeAesonNatural;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ratio"] = $PS["Data.Ratio"] || {};
  var exports = $PS["Data.Ratio"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];                
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var showRatio = function (dictShow) {
      return {
          show: function (v) {
              return Data_Show.show(dictShow)(v.value0) + (" % " + Data_Show.show(dictShow)(v.value1));
          }
      };
  };
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var semiringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return {
              one: new Ratio(Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())),
              mul: function (v) {
                  return function (v1) {
                      return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value0))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
                  };
              },
              zero: new Ratio(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())),
              add: function (v) {
                  return function (v1) {
                      return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
                  };
              }
          };
      };
  };
  var ringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return {
              sub: function (v) {
                  return function (v1) {
                      return reduce(dictOrd)(dictEuclideanRing)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
                  };
              },
              Semiring0: function () {
                  return semiringRatio(dictOrd)(dictEuclideanRing);
              }
          };
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var eqRatio = function (dictEq) {
      return {
          eq: function (v) {
              return function (v1) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq(dictEq)(v.value1)(v1.value1);
              };
          }
      };
  };
  var ordRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ring.sub(ringRatio(dictOrd)(dictEuclideanRing))(x)(y);
                      var $70 = Data_Eq.eq(dictOrd.Eq0())(v.value0)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($70) {
                          return Data_Ordering.EQ.value;
                      };
                      var v1 = Data_Ord.greaterThan(dictOrd)(v.value1)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      var v2 = Data_Ord.greaterThan(dictOrd)(v.value0)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if (v2 && v1) {
                          return Data_Ordering.GT.value;
                      };
                      if (!v2 && !v1) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ordering.LT.value;
                  };
              },
              Eq0: function () {
                  return eqRatio(dictOrd.Eq0());
              }
          };
      };
  };
  var denominator = function (v) {
      return v.value1;
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["showRatio"] = showRatio;
  exports["ordRatio"] = ordRatio;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Rational"] = $PS["Types.Rational"] || {};
  var exports = $PS["Types.Rational"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var showRational = Data_Ratio.showRatio(Data_BigInt.showBigInt);
  var semiringRational = Data_Ratio.semiringRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
  var ringRational = Data_Ratio.ringRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
  var rationalComponentBigInt = {
      reduce: function (n) {
          return function (d) {
              if (Data_Eq.eq(Data_BigInt.eqBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Just.create(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(n)(d));
              };
              throw new Error("Failed pattern match at Types.Rational (line 126, column 1 - line 129, column 48): " + [ n.constructor.name, d.constructor.name ]);
          };
      }
  };
  var ordRational = Data_Ratio.ordRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);                        
  var reduce = function (dict) {
      return dict.reduce;
  };
  var fromDataRational = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Constr && (v.value1.length === 2 && (v["value1"][0] instanceof Types_PlutusData.Integer && (v["value1"][1] instanceof Types_PlutusData.Integer && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))))) {
              return reduce(rationalComponentBigInt)(v["value1"][0].value0)(v["value1"][1].value0);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var numerator = function (v) {
      return Data_Ratio.numerator(v);
  };
  var denominator = function (v) {
      return Data_Ratio.denominator(v);
  };
  var toDataRational = {
      toData: function (r) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ new Types_PlutusData.Integer(numerator(r)), new Types_PlutusData.Integer(denominator(r)) ]);
      }
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["showRational"] = showRational;
  exports["ordRational"] = ordRational;
  exports["semiringRational"] = semiringRational;
  exports["ringRational"] = ringRational;
  exports["toDataRational"] = toDataRational;
  exports["fromDataRational"] = fromDataRational;
  exports["rationalComponentBigInt"] = rationalComponentBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.Ogmios"] = $PS["QueryM.Ogmios"] || {};
  var exports = $PS["QueryM.Ogmios"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Helpers = $PS["Helpers"];
  var Heterogeneous_Folding = $PS["Heterogeneous.Folding"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Types_Int = $PS["Types.Int"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var Untagged_Union = $PS["Untagged.Union"];
  var SubmitTxSuccess = (function () {
      function SubmitTxSuccess(value0) {
          this.value0 = value0;
      };
      SubmitTxSuccess.create = function (value0) {
          return new SubmitTxSuccess(value0);
      };
      return SubmitTxSuccess;
  })();
  var SubmitFail = (function () {
      function SubmitFail(value0) {
          this.value0 = value0;
      };
      SubmitFail.create = function (value0) {
          return new SubmitFail(value0);
      };
      return SubmitFail;
  })();
  var PParamRational = function (x) {
      return x;
  };
  var UtxoQR = function (x) {
      return x;
  };
  var AwaitAcquired = function (x) {
      return x;
  };
  var ExtraRedeemers = (function () {
      function ExtraRedeemers(value0) {
          this.value0 = value0;
      };
      ExtraRedeemers.create = function (value0) {
          return new ExtraRedeemers(value0);
      };
      return ExtraRedeemers;
  })();
  var MissingRequiredDatums = (function () {
      function MissingRequiredDatums(value0) {
          this.value0 = value0;
      };
      MissingRequiredDatums.create = function (value0) {
          return new MissingRequiredDatums(value0);
      };
      return MissingRequiredDatums;
  })();
  var MissingRequiredScripts = (function () {
      function MissingRequiredScripts(value0) {
          this.value0 = value0;
      };
      MissingRequiredScripts.create = function (value0) {
          return new MissingRequiredScripts(value0);
      };
      return MissingRequiredScripts;
  })();
  var ValidatorFailed = (function () {
      function ValidatorFailed(value0) {
          this.value0 = value0;
      };
      ValidatorFailed.create = function (value0) {
          return new ValidatorFailed(value0);
      };
      return ValidatorFailed;
  })();
  var UnknownInputReferencedByRedeemer = (function () {
      function UnknownInputReferencedByRedeemer(value0) {
          this.value0 = value0;
      };
      UnknownInputReferencedByRedeemer.create = function (value0) {
          return new UnknownInputReferencedByRedeemer(value0);
      };
      return UnknownInputReferencedByRedeemer;
  })();
  var NonScriptInputReferencedByRedeemer = (function () {
      function NonScriptInputReferencedByRedeemer(value0) {
          this.value0 = value0;
      };
      NonScriptInputReferencedByRedeemer.create = function (value0) {
          return new NonScriptInputReferencedByRedeemer(value0);
      };
      return NonScriptInputReferencedByRedeemer;
  })();
  var IllFormedExecutionBudget = (function () {
      function IllFormedExecutionBudget(value0) {
          this.value0 = value0;
      };
      IllFormedExecutionBudget.create = function (value0) {
          return new IllFormedExecutionBudget(value0);
      };
      return IllFormedExecutionBudget;
  })();
  var NoCostModelForLanguage = (function () {
      function NoCostModelForLanguage(value0) {
          this.value0 = value0;
      };
      NoCostModelForLanguage.create = function (value0) {
          return new NoCostModelForLanguage(value0);
      };
      return NoCostModelForLanguage;
  })();
  var UnparsedError = (function () {
      function UnparsedError(value0) {
          this.value0 = value0;
      };
      UnparsedError.create = function (value0) {
          return new UnparsedError(value0);
      };
      return UnparsedError;
  })();
  var ScriptFailures = (function () {
      function ScriptFailures(value0) {
          this.value0 = value0;
      };
      ScriptFailures.create = function (value0) {
          return new ScriptFailures(value0);
      };
      return ScriptFailures;
  })();
  var TxEvaluationResult = function (x) {
      return x;
  };
  var CoinsPerUtxoByte = (function () {
      function CoinsPerUtxoByte(value0) {
          this.value0 = value0;
      };
      CoinsPerUtxoByte.create = function (value0) {
          return new CoinsPerUtxoByte(value0);
      };
      return CoinsPerUtxoByte;
  })();
  var CoinsPerUtxoWord = (function () {
      function CoinsPerUtxoWord(value0) {
          this.value0 = value0;
      };
      CoinsPerUtxoWord.create = function (value0) {
          return new CoinsPerUtxoWord(value0);
      };
      return CoinsPerUtxoWord;
  })();
  var CtChainOrigin = (function () {
      function CtChainOrigin(value0) {
          this.value0 = value0;
      };
      CtChainOrigin.create = function (value0) {
          return new CtChainOrigin(value0);
      };
      return CtChainOrigin;
  })();
  var CtChainPoint = (function () {
      function CtChainPoint(value0) {
          this.value0 = value0;
      };
      CtChainPoint.create = function (value0) {
          return new CtChainPoint(value0);
      };
      return CtChainPoint;
  })();
  var Assets = function (x) {
      return x;
  };
  var showUtxoQR = Data_Map_Internal.showMap(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "index";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "txId";
      }
  })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_UInt.uintShowInstance)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "address";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "datum";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "datumHash";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "script";
      }
  })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function () {
          return "value";
      }
  })(Data_Show.showRecordFieldsNil)(Cardano_Types_Value.showValue))(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Show.showString)));
  var showSlotLength = {
      show: function (v) {
          return Helpers.showWithParens(Data_Show.showNumber)("SlotLength")(v);
      }
  };
  var showSafeZone = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("SafeZone")(v);
      }
  };
  var showRelativeTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_Show.showNumber)("RelativeTime")(v);
      }
  };
  var showMempoolSnapshotAcquir = {
      show: function (v) {
          return "(AwaitAcquired " + (Data_Show.show(Serialization_Address.showSlot)(v) + ")");
      }
  };
  var showEpochLength = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("EpochLength")(v);
      }
  };
  var showEpoch = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("Epoch")(v);
      }
  };
  var showCurrentEpoch = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("CurrentEpoch")(v);
      }
  };
  var semiringSafeZone = Data_BigInt.semiringBigInt;
  var hasRuntimeTypeChainOrigin = Untagged_TypeCheck.hasRuntimeTypeString;
  var genericTxEvaluationResult = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTxEvaluationResult = {
      show: Data_Show_Generic.genericShow(genericTxEvaluationResult)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerIndex";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerTag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Types_Natural.showNatural)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "memory";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Types_Natural.showNatural))(Types_Natural.showNatural)))))({
          reflectSymbol: function () {
              return "TxEvaluationResult";
          }
      }))
  };
  var genericTxEvaluationR_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTxEvaluationFailur = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new UnparsedError(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new ScriptFailures(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 648, column 1 - line 648, column 46): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof UnparsedError) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ScriptFailures) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 648, column 1 - line 648, column 46): " + [ x.constructor.name ]);
      }
  };
  var genericSystemStart_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showSystemStart = {
      show: Data_Show_Generic.genericShow(genericSystemStart_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "SystemStart";
          }
      }))
  };
  var genericSubmitTxR_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new SubmitTxSuccess(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new SubmitFail(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 321, column 1 - line 321, column 36): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof SubmitTxSuccess) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof SubmitFail) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 321, column 1 - line 321, column 36): " + [ x.constructor.name ]);
      }
  };
  var showSubmitTxR = {
      show: Data_Show_Generic.genericShow(genericSubmitTxR_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "SubmitTxSuccess";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Aeson.showAeson)))({
          reflectSymbol: function () {
              return "SubmitFail";
          }
      })))
  };
  var genericScriptFailure_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ExtraRedeemers(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new MissingRequiredDatums(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new MissingRequiredScripts(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new ValidatorFailed(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new UnknownInputReferencedByRedeemer(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new NonScriptInputReferencedByRedeemer(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new IllFormedExecutionBudget(x.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))) {
              return new NoCostModelForLanguage(x.value0.value0.value0.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 634, column 1 - line 634, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ExtraRedeemers) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof MissingRequiredDatums) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof MissingRequiredScripts) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof ValidatorFailed) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof UnknownInputReferencedByRedeemer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof NonScriptInputReferencedByRedeemer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof IllFormedExecutionBudget) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
          };
          if (x instanceof NoCostModelForLanguage) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))))));
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 634, column 1 - line 634, column 40): " + [ x.constructor.name ]);
      }
  };
  var showScriptFailure = {
      show: Data_Show_Generic.genericShow(genericScriptFailure_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerIndex";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerTag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Types_Natural.showNatural)))))({
          reflectSymbol: function () {
              return "ExtraRedeemers";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "missing";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "provided";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(Data_Show.showString))))(Data_Show.showArray(Data_Show.showString)))))({
          reflectSymbol: function () {
              return "MissingRequiredDatums";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "missing";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "resolved";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Map_Internal.showMap(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerIndex";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerTag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Types_Natural.showNatural)))(Data_Show.showString)))(Data_Show.showArray(Data_Show.showString)))))({
          reflectSymbol: function () {
              return "MissingRequiredScripts";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "error";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "traces";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showString)))(Data_Show.showString))))({
          reflectSymbol: function () {
              return "ValidatorFailed";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txId";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt))))({
          reflectSymbol: function () {
              return "UnknownInputReferencedByRedeemer";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txId";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt))))({
          reflectSymbol: function () {
              return "NonScriptInputReferencedByRedeemer";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "memory";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Types_Natural.showNatural))(Types_Natural.showNatural)))))({
          reflectSymbol: function () {
              return "IllFormedExecutionBudget";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "NoCostModelForLanguage";
          }
      })))))))))
  };
  var showTxEvaluationFailure = {
      show: Data_Show_Generic.genericShow(genericTxEvaluationFailur)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "UnparsedError";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerIndex";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemerTag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Types_Natural.showNatural)))(Data_Show.showArray(showScriptFailure))))({
          reflectSymbol: function () {
              return "ScriptFailures";
          }
      })))
  };
  var showTxEvaluationR = {
      show: Data_Show_Generic.genericShow(genericTxEvaluationR_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Either.showEither(showTxEvaluationFailure)(showTxEvaluationResult)))({
          reflectSymbol: function () {
              return "TxEvaluationR";
          }
      }))
  };
  var genericProtocolParameters = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericOgmiosBlockHeaderH = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showOgmiosBlockHeaderHash = {
      show: Data_Show_Generic.genericShow(genericOgmiosBlockHeaderH)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "OgmiosBlockHeaderHash";
          }
      }))
  };
  var genericEraSummary_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericEraSummaryTime_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showEraSummaryTime = {
      show: Data_Show_Generic.genericShow(genericEraSummaryTime_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "epoch";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "slot";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "time";
          }
      })(Data_Show.showRecordFieldsNil)(showRelativeTime))(Serialization_Address.showSlot))(showEpoch))))({
          reflectSymbol: function () {
              return "EraSummaryTime";
          }
      }))
  };
  var genericEraSummaryParamete = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showEraSummaryParameters = {
      show: Data_Show_Generic.genericShow(genericEraSummaryParamete)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "epochLength";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "safeZone";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "slotLength";
          }
      })(Data_Show.showRecordFieldsNil)(showSlotLength))(showSafeZone))(showEpochLength))))({
          reflectSymbol: function () {
              return "EraSummaryParameters";
          }
      }))
  };
  var showEraSummary = {
      show: Data_Show_Generic.genericShow(genericEraSummary_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "end";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "parameters";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "start";
          }
      })(Data_Show.showRecordFieldsNil)(showEraSummaryTime))(showEraSummaryParameters))(Data_Maybe.showMaybe(showEraSummaryTime)))))({
          reflectSymbol: function () {
              return "EraSummary";
          }
      }))
  };
  var genericEraSummaries_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showEraSummaries = {
      show: Data_Show_Generic.genericShow(genericEraSummaries_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showEraSummary)))({
          reflectSymbol: function () {
              return "EraSummaries";
          }
      }))
  };
  var genericCoinsPerUtxoUnit_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new CoinsPerUtxoByte(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new CoinsPerUtxoWord(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 817, column 1 - line 817, column 43): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CoinsPerUtxoByte) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof CoinsPerUtxoWord) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 817, column 1 - line 817, column 43): " + [ x.constructor.name ]);
      }
  };
  var showCoinsPerUtxoUnit = {
      show: Data_Show_Generic.genericShow(genericCoinsPerUtxoUnit_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showCoin))({
          reflectSymbol: function () {
              return "CoinsPerUtxoByte";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showCoin))({
          reflectSymbol: function () {
              return "CoinsPerUtxoWord";
          }
      })))
  };
  var showProtocolParameters = {
      show: Data_Show_Generic.genericShow(genericProtocolParameters)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "coinsPerUtxoUnit";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "collateralPercent";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "costModels";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "decentralization";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "extraPraosEntropy";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockBodySize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockExUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxBlockHeaderSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxCollateralInputs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxTxExUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxTxSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "maxValueSize";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "minPoolCost";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "monetaryExpansion";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolPledgeInfluence";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "poolRetireMaxEpoch";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "prices";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "protocolVersion";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "stakeAddressDeposit";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "stakePoolDeposit";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "treasuryCut";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txFeeFixed";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txFeePerByte";
          }
      })(Data_Show.showRecordFieldsNil)(Data_UInt.uintShowInstance))(Data_UInt.uintShowInstance))(Types_Rational.showRational))(Cardano_Types_Value.showCoin))(Cardano_Types_Value.showCoin))(Data_Tuple.showTuple(Data_UInt.uintShowInstance)(Data_UInt.uintShowInstance)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "memPrice";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "stepPrice";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "denominator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "numerator";
          }
      })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))))(showEpoch))(Types_Rational.showRational))(Types_Rational.showRational))(Cardano_Types_Value.showCoin))(Data_UInt.uintShowInstance))(Data_UInt.uintShowInstance))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))))(Data_UInt.uintShowInstance))(Data_UInt.uintShowInstance))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))))(Data_UInt.uintShowInstance))(Data_Maybe.showMaybe(Cardano_Types_Transaction.showNonce)))(Types_Rational.showRational))(Cardano_Types_Transaction.showCostmdls))(Data_UInt.uintShowInstance))(showCoinsPerUtxoUnit))))({
          reflectSymbol: function () {
              return "ProtocolParameters";
          }
      }))
  };
  var genericChainTipQR_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new CtChainOrigin(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new CtChainPoint(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 1110, column 1 - line 1110, column 37): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CtChainOrigin) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof CtChainPoint) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 1110, column 1 - line 1110, column 37): " + [ x.constructor.name ]);
      }
  };
  var genericChainOrigin_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showChainOrigin = {
      show: Data_Show_Generic.genericShow(genericChainOrigin_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "ChainOrigin";
          }
      }))
  };
  var showChainTipQR = {
      show: Data_Show_Generic.genericShow(genericChainTipQR_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showChainOrigin))({
          reflectSymbol: function () {
              return "CtChainOrigin";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "hash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "slot";
          }
      })(Data_Show.showRecordFieldsNil)(Serialization_Address.showSlot))(showOgmiosBlockHeaderHash))))({
          reflectSymbol: function () {
              return "CtChainPoint";
          }
      })))
  };                                                    
  var decodeAesonSystemStart = Aeson.decodeAesonString;
  var decodeAesonSafeZone = Aeson.decodeAesonBigInt;
  var decodeAesonRelativeTime = Aeson.decodeAesonNumber;
  var decodeAesonPParamRational = {
      decodeAeson: (function () {
          var err = new Data_Argonaut_Decode_Error.TypeMismatch("PParamRaional");
          return Aeson.caseAesonString(new Data_Either.Left(err))(function (string) {
              var v = Data_String_Common.split("/")(string);
              if (v.length === 2) {
                  return Data_Either.note(err)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_BigInt.fromString(v[0]))(function (numerator) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_BigInt.fromString(v[1]))(function (denominator) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(PParamRational)(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(numerator)(denominator));
                      });
                  }));
              };
              return new Data_Either.Left(err);
          });
      })()
  };
  var decodeAesonOgmiosBlockHea = Aeson.decodeAesonString;
  var decodeAesonEpochLength = Aeson.decodeAesonBigInt;
  var decodeAesonEpoch = Aeson.decodeAesonBigInt;
  var decodeAesonCurrentEpoch = Aeson.decodeAesonBigInt;
  var decodeAesonChainOrigin = Aeson.decodeAesonString;
  var decodeAesonChainTipQR = {
      decodeAeson: function (j) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson["decodeAeson|+|"]()(decodeAesonChainOrigin)(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonOgmiosBlockHea))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Serialization_Address.decodeAesonSlot))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "slot";
              }
          })()())({
              reflectSymbol: function () {
                  return "hash";
              }
          })()())()))(j))(function (v) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.either(CtChainOrigin.create)(CtChainPoint.create)(Untagged_Union.toEither1(hasRuntimeTypeChainOrigin)(v)));
          });
      }
  };
  var decodeAesonAssets = {
      decodeAeson: function (j) {
          var assetStrError = function (str) {
              return function (t) {
                  return function (v) {
                      return Data_Argonaut_Decode_Error.TypeMismatch.create("In " + (str + (": Expected hex-encoded " + (t + (", got: " + v)))));
                  };
              };
          };
          var decodeAsset = function (assetStr) {
              return function (quantity) {
                  var v = (function () {
                      var v1 = Data_String_CodePoints.indexOf(".")(assetStr);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Tuple.Tuple(assetStr, "");
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          var v2 = Data_String_CodePoints.splitAt(v1.value0)(assetStr);
                          var tn = Data_Maybe.fromMaybe("")(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_String_CodePoints.uncons(v2.after))(function (v3) {
                              return v3.tail;
                          }));
                          return new Data_Tuple.Tuple(v2.before, tn);
                      };
                      throw new Error("Failed pattern match at QueryM.Ogmios (line 1335, column 31 - line 1342, column 27): " + [ v1.constructor.name ]);
                  })();
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(assetStrError(assetStr)("CurrencySymbol")(v.value0))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Cardano_Types_Value.mkCurrencySymbol)(Types_ByteArray.hexToByteArray(v.value0))))(function (currSymb) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(assetStrError(assetStr)("TokenName")(v.value1))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.hexToByteArray(v.value1))))(function (tokenName) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(currSymb, Data_Map_Internal.singleton(tokenName)(quantity)));
                      });
                  });
              };
          };
          return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray))(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonBigInt))(j)))(function (v) {
              return Data_Functor.map(Data_Either.functorEither)((function () {
                  var $422 = Data_Map_Internal.fromFoldableWith(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray)(Data_Map_Internal.unionWith(Types_TokenName.ordTokenName)(Data_Semiring.add(Data_BigInt.semiringBigInt)));
                  return function ($423) {
                      return Assets($422($423));
                  };
              })())(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(decodeAsset))(v)));
          });
      }
  };
  var slotLengthFactor = 1000.0;
  var redeemerPtrTypeMismatch = new Data_Argonaut_Decode_Error.TypeMismatch("Expected redeemer pointer to be encoded as: ^(spend|mint|certificate|withdrawal):[0-9]+$");
  var rationalToSubcoin = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.fromBigInt(Types_Rational.numerator(v)))(function (numerator) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.fromBigInt(Types_Rational.denominator(v)))(function (denominator) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  numerator: numerator,
                  denominator: denominator
              });
          });
      });
  };
  var parseValue = function (outer) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(outer)("value"))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(Aeson.getField(Aeson.decodeAesonBigInt)(o)("coins"))(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected 'coins' to be an Int or a BigInt"))))(function (coins) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe(Data_Map_Internal.empty))(Aeson.getFieldOptional(decodeAesonAssets)(o)("assets")))(function (v) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Cardano_Types_Value.mkValue(Data_Newtype.wrap()(coins))(Cardano_Types_Value.mkNonAdaAsset(v)));
              });
          });
      });
  };
  var mkOgmiosCallType = function (dictEncodeAeson) {
      return QueryM_JsonWsp.mkCallType(dictEncodeAeson)({
          type: "jsonwsp/request",
          version: "1.0",
          servicename: "ogmios"
      });
  };
  var mkOgmiosCallTypeNoArgs = function (methodname) {
      return mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonNil)())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "version";
          }
      })())({
          reflectSymbol: function () {
              return "type";
          }
      })())({
          reflectSymbol: function () {
              return "servicename";
          }
      })())({
          reflectSymbol: function () {
              return "mirror";
          }
      })())({
          reflectSymbol: function () {
              return "methodname";
          }
      })())({
          reflectSymbol: function () {
              return "args";
          }
      })())())({
          methodname: methodname,
          args: Data_Function["const"]({})
      });
  };
  var queryChainTipCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "chainTip"
      })
  });
  var queryEraSummariesCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "eraSummaries"
      })
  });
  var queryProtocolParametersCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "currentProtocolParameters"
      })
  });
  var querySystemStartCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "systemStart"
      })
  });
  var queryUtxoCall = (function () {
      var renameFields = function (v) {
          return {
              txId: v.transactionId,
              index: v.index
          };
      };
      return mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(Types_Transaction.encodeAesonTransactionHas)(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "txId";
          }
      })())({
          reflectSymbol: function () {
              return "index";
          }
      })())()))(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "utxo";
          }
      })())())(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "query";
          }
      })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "version";
          }
      })())({
          reflectSymbol: function () {
              return "type";
          }
      })())({
          reflectSymbol: function () {
              return "servicename";
          }
      })())({
          reflectSymbol: function () {
              return "mirror";
          }
      })())({
          reflectSymbol: function () {
              return "methodname";
          }
      })())({
          reflectSymbol: function () {
              return "args";
          }
      })())())({
          methodname: "Query",
          args: (function () {
              var $424 = Data_Newtype.unwrap();
              return function ($425) {
                  return (function (v) {
                      return {
                          query: v
                      };
                  })((function (v) {
                      return {
                          utxo: v
                      };
                  })(Data_Array.singleton(renameFields($424($425)))));
              };
          })()
      });
  })();
  var queryUtxosAtCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Aeson.encodeAesonString))(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "utxo";
      }
  })())())(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: function ($426) {
          return (function (v) {
              return {
                  query: v
              };
          })((function (v) {
              return {
                  utxo: v
              };
          })(Data_Array.singleton($426)));
      }
  });
  var submitTxCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "submit";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "SubmitTx",
      args: function ($427) {
          return (function (v) {
              return {
                  submit: v
              };
          })(Types_CborBytes.cborBytesToHex(Data_Tuple.snd($427)));
      }
  });
  var mempoolSnapshotHasTxCall = function (v) {
      return mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "id";
          }
      })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
          reflectSymbol: function () {
              return "version";
          }
      })())({
          reflectSymbol: function () {
              return "type";
          }
      })())({
          reflectSymbol: function () {
              return "servicename";
          }
      })())({
          reflectSymbol: function () {
              return "mirror";
          }
      })())({
          reflectSymbol: function () {
              return "methodname";
          }
      })())({
          reflectSymbol: function () {
              return "args";
          }
      })())())({
          methodname: "HasTx",
          args: function (v1) {
              return {
                  id: v1
              };
          }
      });
  };
  var liftField = function (dictDecodeAeson) {
      return function (f) {
          return function (act) {
              return Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(dictDecodeAeson))(f))(act);
          };
      };
  };
  var evaluateTxCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "evaluate";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "EvaluateTx",
      args: function ($428) {
          return (function (v) {
              return {
                  evaluate: v
              };
          })(Types_CborBytes.cborBytesToHex($428));
      }
  });
  var decodeRedeemerPointer = function (redeemerPtrRaw) {
      return Data_Either.note(redeemerPtrTypeMismatch)((function () {
          var v = Data_String_Common.split(":")(redeemerPtrRaw);
          if (v.length === 2) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return function (v2) {
                      return {
                          redeemerTag: v1,
                          redeemerIndex: v2
                      };
                  };
              })(Types_RedeemerTag.fromString(v[0])))(Types_Natural.fromString(v[1]));
          };
          return Data_Maybe.Nothing.value;
      })());
  };
  var convertCostModel = function (dictHFoldl) {
      return function (model) {
          return Data_Newtype.wrap()(Data_Array.reverse(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Heterogeneous_Folding.hfoldl(dictHFoldl)(function (xs) {
              return function (x) {
                  return new Data_List_Types.Cons(x, xs);
              };
          })(Data_Monoid.mempty(Data_List_Types.monoidList))(model))));
      };
  };
  var decodeAesonProtocolParame = {
      decodeAeson: function (aeson) {
          var decodePrices = function (ps) {
              return Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("ExUnitPrices"))(Control_Bind.bind(Data_Maybe.bindMaybe)(rationalToSubcoin(ps.prices.memory))(function (memPrice) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(rationalToSubcoin(ps.prices.steps))(function (stepPrice) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          memPrice: memPrice,
                          stepPrice: stepPrice
                      });
                  });
              }));
          };
          var decodeExUnits = function (v) {
              return {
                  mem: v.memory,
                  steps: v.steps
              };
          };
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-intercept";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Int.decodeAesonInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "verifySchnorrSecp256k1Signature-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifySchnorrSecp256k1Signature-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifySchnorrSecp256k1Signature-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEd25519Signature-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEcdsaSecp256k1Signature-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifyEcdsaSecp256k1Signature-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "serialiseData-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "serialiseData-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "serialiseData-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "serialiseData-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-intercept";
              }
          })()())()))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "plutus:v2";
              }
          })()())({
              reflectSymbol: function () {
                  return "plutus:v1";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "minor";
              }
          })()())({
              reflectSymbol: function () {
                  return "major";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "treasuryExpansion";
              }
          })()())({
              reflectSymbol: function () {
                  return "stakeKeyDeposit";
              }
          })()())({
              reflectSymbol: function () {
                  return "protocolVersion";
              }
          })()())({
              reflectSymbol: function () {
                  return "prices";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolRetirementEpochBound";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolInfluence";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolDeposit";
              }
          })()())({
              reflectSymbol: function () {
                  return "monetaryExpansion";
              }
          })()())({
              reflectSymbol: function () {
                  return "minPoolCost";
              }
          })()())({
              reflectSymbol: function () {
                  return "minFeeConstant";
              }
          })()())({
              reflectSymbol: function () {
                  return "minFeeCoefficient";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxValueSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxTxSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxExecutionUnitsPerTransaction";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxExecutionUnitsPerBlock";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxCollateralInputs";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxBlockHeaderSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxBlockBodySize";
              }
          })()())({
              reflectSymbol: function () {
                  return "desiredNumberOfPools";
              }
          })()())({
              reflectSymbol: function () {
                  return "costModels";
              }
          })()())({
              reflectSymbol: function () {
                  return "collateralPercentage";
              }
          })()())({
              reflectSymbol: function () {
                  return "coinsPerUtxoWord";
              }
          })()())({
              reflectSymbol: function () {
                  return "coinsPerUtxoByte";
              }
          })()())())(aeson))(function (v) {
              return Control_Bind.bind(Data_Either.bindEither)(decodePrices(v))(function (prices) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Maybe.maybe(Data_Either.Left.create(Data_Argonaut_Decode_Error.AtKey.create("coinsPerUtxoByte or coinsPerUtxoWord")(Data_Argonaut_Decode_Error.MissingValue.value)))(Control_Applicative.pure(Data_Either.applicativeEither))(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($429) {
                      return CoinsPerUtxoByte.create(Cardano_Types_Value.Coin($429));
                  })(v.coinsPerUtxoByte))(Data_Functor.map(Data_Maybe.functorMaybe)(function ($430) {
                      return CoinsPerUtxoWord.create(Cardano_Types_Value.Coin($430));
                  })(v.coinsPerUtxoWord))))(function (coinsPerUtxoUnit) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          protocolVersion: new Data_Tuple.Tuple(v.protocolVersion.major, v.protocolVersion.minor),
                          decentralization: Data_Semiring.zero(Types_Rational.semiringRational),
                          extraPraosEntropy: Data_Maybe.Nothing.value,
                          maxBlockHeaderSize: v.maxBlockHeaderSize,
                          maxBlockBodySize: v.maxBlockBodySize,
                          maxTxSize: v.maxTxSize,
                          txFeeFixed: v.minFeeConstant,
                          txFeePerByte: v.minFeeCoefficient,
                          stakeAddressDeposit: v.stakeKeyDeposit,
                          stakePoolDeposit: v.poolDeposit,
                          minPoolCost: v.minPoolCost,
                          poolRetireMaxEpoch: v.poolRetirementEpochBound,
                          poolPledgeInfluence: Data_Newtype.unwrap()(v.poolInfluence),
                          monetaryExpansion: Data_Newtype.unwrap()(v.monetaryExpansion),
                          treasuryCut: Data_Newtype.unwrap()(v.treasuryExpansion),
                          coinsPerUtxoUnit: coinsPerUtxoUnit,
                          costModels: Cardano_Types_Transaction.Costmdls(Data_Map_Internal.fromFoldable(Types_Scripts.ordLanguage)(Data_Foldable.foldableArray)(Data_Array.catMaybes([ Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Types_Scripts.PlutusV1.value, convertCostModel(Heterogeneous_Folding.hfoldlRecord()(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "addInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "addInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "addInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "addInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendByteString-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendByteString-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendString-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "appendString-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "bData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "bData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "blake2b_256-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "blake2b_256-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "blake2b_256-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekApplyCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekApplyCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekBuiltinCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekBuiltinCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekConstCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekConstCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekDelayCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekDelayCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekForceCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekForceCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekLamCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekLamCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekStartupCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekStartupCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekVarCost-exBudgetCPU";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "cekVarCost-exBudgetMemory";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseList-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseList-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseUnit-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "chooseUnit-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "consByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "consByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "consByteString-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "consByteString-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "constrData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "constrData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "decodeUtf8-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "decodeUtf8-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "decodeUtf8-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "decodeUtf8-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-cpu-arguments-model-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-cpu-arguments-model-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-memory-arguments-minimum";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "divideInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "encodeUtf8-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "encodeUtf8-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "encodeUtf8-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "encodeUtf8-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsByteString-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsByteString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsData-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsData-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsInteger-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsString-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "equalsString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "fstPair-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "fstPair-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "headList-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "headList-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "iData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "iData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "ifThenElse-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "ifThenElse-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "indexByteString-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "indexByteString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lengthOfByteString-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lengthOfByteString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanByteString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsByteString-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanEqualsInteger-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "lessThanInteger-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "listData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "listData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mapData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mapData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkCons-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkCons-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkNilData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkNilData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkNilPairData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkNilPairData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkPairData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "mkPairData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-cpu-arguments-model-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-cpu-arguments-model-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-memory-arguments-minimum";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "modInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "multiplyInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "multiplyInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "multiplyInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "multiplyInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "nullList-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "nullList-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-cpu-arguments-model-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-cpu-arguments-model-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-memory-arguments-minimum";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "quotientInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-cpu-arguments-constant";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-cpu-arguments-model-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-cpu-arguments-model-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-memory-arguments-minimum";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "remainderInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha2_256-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha2_256-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha2_256-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha3_256-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha3_256-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sha3_256-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sliceByteString-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sliceByteString-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sliceByteString-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sliceByteString-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sndPair-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "sndPair-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "subtractInteger-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "subtractInteger-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "subtractInteger-memory-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "subtractInteger-memory-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "tailList-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "tailList-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "trace-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "trace-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unBData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unBData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unConstrData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unConstrData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unIData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unIData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unListData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unListData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unMapData-cpu-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "unMapData-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "verifyEd25519Signature-cpu-arguments-intercept";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "verifyEd25519Signature-cpu-arguments-slope";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                              reflectSymbol: function () {
                                  return "verifyEd25519Signature-memory-arguments";
                              }
                          })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordNil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(v["costModels"]["plutus:v1"]))), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                              var $431 = convertCostModel(Heterogeneous_Folding.hfoldlRecord()(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "addInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "addInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "addInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "addInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendByteString-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendByteString-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendString-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "appendString-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "bData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "bData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "blake2b_256-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "blake2b_256-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "blake2b_256-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekApplyCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekApplyCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekBuiltinCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekBuiltinCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekConstCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekConstCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekDelayCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekDelayCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekForceCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekForceCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekLamCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekLamCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekStartupCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekStartupCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekVarCost-exBudgetCPU";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "cekVarCost-exBudgetMemory";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseList-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseList-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseUnit-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "chooseUnit-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "consByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "consByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "consByteString-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "consByteString-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "constrData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "constrData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "decodeUtf8-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "decodeUtf8-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "decodeUtf8-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "decodeUtf8-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-cpu-arguments-model-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-cpu-arguments-model-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-memory-arguments-minimum";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "divideInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "encodeUtf8-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "encodeUtf8-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "encodeUtf8-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "encodeUtf8-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsByteString-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsByteString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsData-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsData-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsInteger-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsString-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "equalsString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "fstPair-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "fstPair-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "headList-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "headList-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "iData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "iData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "ifThenElse-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "ifThenElse-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "indexByteString-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "indexByteString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lengthOfByteString-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lengthOfByteString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanByteString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsByteString-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanEqualsInteger-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "lessThanInteger-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "listData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "listData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mapData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mapData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkCons-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkCons-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkNilData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkNilData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkNilPairData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkNilPairData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkPairData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "mkPairData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-cpu-arguments-model-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-cpu-arguments-model-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-memory-arguments-minimum";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "modInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "multiplyInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "multiplyInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "multiplyInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "multiplyInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "nullList-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "nullList-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-cpu-arguments-model-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-cpu-arguments-model-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-memory-arguments-minimum";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "quotientInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-cpu-arguments-constant";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-cpu-arguments-model-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-cpu-arguments-model-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-memory-arguments-minimum";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "remainderInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "serialiseData-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "serialiseData-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "serialiseData-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "serialiseData-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha2_256-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha2_256-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha2_256-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha3_256-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha3_256-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sha3_256-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sliceByteString-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sliceByteString-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sliceByteString-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sliceByteString-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sndPair-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "sndPair-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "subtractInteger-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "subtractInteger-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "subtractInteger-memory-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "subtractInteger-memory-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "tailList-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "tailList-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "trace-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "trace-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unBData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unBData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unConstrData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unConstrData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unIData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unIData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unListData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unListData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unMapData-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "unMapData-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifyEcdsaSecp256k1Signature-cpu-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifyEcdsaSecp256k1Signature-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifyEd25519Signature-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifyEd25519Signature-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifyEd25519Signature-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifySchnorrSecp256k1Signature-cpu-arguments-intercept";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifySchnorrSecp256k1Signature-cpu-arguments-slope";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordCons({
                                  reflectSymbol: function () {
                                      return "verifySchnorrSecp256k1Signature-memory-arguments";
                                  }
                              })()(Heterogeneous_Folding.constFolding(Heterogeneous_Folding.functionFolding))(Heterogeneous_Folding.foldlRecordNil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
                              return function ($432) {
                                  return (function (v1) {
                                      return new Data_Tuple.Tuple(Types_Scripts.PlutusV2.value, v1);
                                  })($431($432));
                              };
                          })())(v["costModels"]["plutus:v2"]) ]))),
                          prices: prices,
                          maxTxExUnits: decodeExUnits(v.maxExecutionUnitsPerTransaction),
                          maxBlockExUnits: decodeExUnits(v.maxExecutionUnitsPerBlock),
                          maxValueSize: v.maxValueSize,
                          collateralPercent: v.collateralPercentage,
                          maxCollateralInputs: v.maxCollateralInputs
                      });
                  });
              });
          });
      }
  };
  var aesonObject = Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")));
  var parseTxOutRef = aesonObject(function (o) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("txId"))(function (txId) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonUInt)(o)("index"))(function (index) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  txId: txId,
                  index: index
              });
          });
      });
  });
  var decodeAesonEraSummaryPara = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEpochLength)(o)("epochLength"))(function (epochLength) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Data_Functor.map(Data_Either.functorEither)(Data_Semiring.mul(Data_Semiring.semiringNumber)(slotLengthFactor))(Aeson.getField(Aeson.decodeAesonNumber)(o)("slotLength"))))(function (slotLength) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe(Data_Semiring.zero(semiringSafeZone)))(Aeson.getField(Aeson.decodeAesonMaybe(decodeAesonSafeZone))(o)("safeZone")))(function (safeZone) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                          epochLength: epochLength,
                          slotLength: slotLength,
                          safeZone: safeZone
                      }));
                  });
              });
          });
      })
  };
  var decodeAesonEraSummaryTime = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonRelativeTime)(o)("time"))(function (time) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Serialization_Address.decodeAesonSlot)(o)("slot"))(function (slot) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEpoch)(o)("epoch"))(function (epoch) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                          time: time,
                          slot: slot,
                          epoch: epoch
                      }));
                  });
              });
          });
      })
  };
  var decodeAesonEraSummary = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEraSummaryTime)(o)("start"))(function (start) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonAeson)(o)("end"))(function (end$prime) {
                  return Control_Bind.bind(Data_Either.bindEither)((function () {
                      var $382 = Aeson.isNull(end$prime);
                      if ($382) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                      };
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Aeson.decodeAeson(decodeAesonEraSummaryTime)(end$prime));
                  })())(function (end) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEraSummaryPara)(o)("parameters"))(function (parameters) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                              start: start,
                              end: end,
                              parameters: parameters
                          }));
                      });
                  });
              });
          });
      })
  };
  var decodeAesonMempoolSnapsho = {
      decodeAeson: (function () {
          var $433 = Data_Functor.map(Data_Either.functorEither)(AwaitAcquired);
          var $434 = aesonObject(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson)))("AwaitAcquired"))(Data_Function.flip(Aeson.getField(Serialization_Address.decodeAesonSlot))("slot")));
          return function ($435) {
              return $433($434($435));
          };
      })()
  };
  var decodeAesonScriptFailure = {
      decodeAeson: (function () {
          var defaultCase = Control_Monad_Reader_Trans.ReaderT(Data_Function["const"](Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected ScriptFailure"))));
          var decodeValidatorFailed = liftField(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonString))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonArray(Aeson.decodeAesonString)))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "traces";
              }
          })()())({
              reflectSymbol: function () {
                  return "error";
              }
          })()())())("validatorFailed")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new ValidatorFailed(o));
          });
          var decodeUnknownInputReferencedByRedeemer = liftField(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonString))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "txId";
              }
          })()())({
              reflectSymbol: function () {
                  return "index";
              }
          })()())())("unknownInputReferencedByRedeemer")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new UnknownInputReferencedByRedeemer(o));
          });
          var decodeNonScriptInputReferencedByRedeemer = liftField(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonString))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "txId";
              }
          })()())({
              reflectSymbol: function () {
                  return "index";
              }
          })()())())("nonScriptInputReferencedByRedeemer")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new NonScriptInputReferencedByRedeemer(o));
          });
          var decodeNoCostModelForLanguage = liftField(Aeson.decodeAesonString)("noCostModelForLanguage")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new NoCostModelForLanguage(o));
          });
          var decodeMissingRequiredScripts = liftField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))("missingRequiredScripts")(function (o) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray))(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonString))(o)("resolved")))(function (resolvedKV) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function () {
                          return "redeemerTag";
                      }
                  })(Types_RedeemerTag.ordRedeemerTag))()({
                      reflectSymbol: function () {
                          return "redeemerIndex";
                      }
                  })(Types_Natural.ordNatural)))(Data_Foldable.foldableArray))(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(resolvedKV)(function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(function (v2) {
                          return new Data_Tuple.Tuple(v2, v.value1);
                      })(decodeRedeemerPointer(v.value0));
                  })))(function (resolved) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonArray(Aeson.decodeAesonString))(o)("missing"))(function (missing) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new MissingRequiredScripts({
                              resolved: resolved,
                              missing: missing
                          }));
                      });
                  });
              });
          });
          var decodeMissingRequiredDatums = liftField(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonArray(Aeson.decodeAesonString)))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonArray(Aeson.decodeAesonString)))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "provided";
              }
          })()())({
              reflectSymbol: function () {
                  return "missing";
              }
          })()())())("missingRequiredDatums")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new MissingRequiredDatums(o));
          });
          var decodeIllFormedExecutionBudget = liftField(Aeson.decodeAesonMaybe(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Natural.decodeAesonNatural))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Natural.decodeAesonNatural))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))("illFormedExecutionBudget")(function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new IllFormedExecutionBudget(o));
          });
          var decodeExtraRedeemers = Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(ExtraRedeemers.create)(liftField(Aeson.decodeAesonArray(Aeson.decodeAesonString))("extraRedeemers")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodeRedeemerPointer)));
          var cases = Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(decodeExtraRedeemers)(decodeMissingRequiredDatums))(decodeMissingRequiredScripts))(decodeValidatorFailed))(decodeUnknownInputReferencedByRedeemer))(decodeNonScriptInputReferencedByRedeemer))(decodeIllFormedExecutionBudget))(decodeNoCostModelForLanguage))(defaultCase);
          return aesonObject(Control_Monad_Reader_Trans.runReaderT(cases));
      })()
  };
  var decodeAesonSubmitTxR = {
      decodeAeson: aesonObject(function (o) {
          return Control_Alt.alt(Data_Either.altEither)(Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(o)("SubmitSuccess"))(Data_Function.flip(Aeson.getField(Aeson.decodeAesonString))("txId")))((function () {
              var $436 = Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected hexstring")))((function () {
                  var $438 = Control_Applicative.pure(Data_Either.applicativeEither);
                  return function ($439) {
                      return $438(SubmitTxSuccess.create($439));
                  };
              })());
              return function ($437) {
                  return $436(Types_ByteArray.hexToByteArray($437));
              };
          })()))(Data_Functor.map(Data_Either.functorEither)(SubmitFail.create)(Aeson.getField(Aeson.decodeAesonArray(Aeson.decodeAesonAeson))(o)("SubmitFail")));
      })
  };
  var decodeAesonTxEvaluationFa = {
      decodeAeson: (function () {
          var defaultCase = function (o) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new UnparsedError(Aeson.stringifyAeson(Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(o))));
          };
          var decodeScriptFailures = function (o) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray))(Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(o)("EvaluationFailure"))(Data_Function.flip(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson)))("ScriptFailures"))))(function (scriptFailuresKV) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function () {
                          return "redeemerTag";
                      }
                  })(Types_RedeemerTag.ordRedeemerTag))()({
                      reflectSymbol: function () {
                          return "redeemerIndex";
                      }
                  })(Types_Natural.ordNatural)))(Data_Foldable.foldableArray))(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(scriptFailuresKV)(function (v) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonArray(decodeAesonScriptFailure))(v.value1))(function (v$prime) {
                          return Data_Functor.map(Data_Either.functorEither)(function (v2) {
                              return new Data_Tuple.Tuple(v2, v$prime);
                          })(decodeRedeemerPointer(v.value0));
                      });
                  })))(function (scriptFailures) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new ScriptFailures(scriptFailures));
                  });
              });
          };
          var cases = Control_Alt.alt(Control_Monad_Reader_Trans.altReaderT(Data_Either.altEither))(decodeScriptFailures)(defaultCase);
          return aesonObject(Control_Monad_Reader_Trans.runReaderT(cases));
      })()
  };
  var decodeAesonTxEvaluationRe = {
      decodeAeson: (function () {
          var decodeRdmrPtrExUnitsItem = function (v) {
              return Control_Bind.bind(Data_Either.bindEither)(decodeRedeemerPointer(v.value0))(function (redeemerPtr) {
                  return Data_Function.flip(aesonObject)(v.value1)(function (exUnitsObj) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Types_Natural.decodeAesonNatural)(exUnitsObj)("memory"))(function (memory) {
                          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Types_Natural.decodeAesonNatural)(exUnitsObj)("steps"))(function (steps) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(redeemerPtr, {
                                  memory: memory,
                                  steps: steps
                              }));
                          });
                      });
                  });
              });
          };
          return aesonObject(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray))(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(obj)("EvaluationResult")))(function (v) {
                  return Data_Functor.map(Data_Either.functorEither)((function () {
                      var $440 = Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "redeemerTag";
                          }
                      })(Types_RedeemerTag.ordRedeemerTag))()({
                          reflectSymbol: function () {
                              return "redeemerIndex";
                          }
                      })(Types_Natural.ordNatural)))(Data_Foldable.foldableArray);
                      return function ($441) {
                          return TxEvaluationResult($440($441));
                      };
                  })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodeRdmrPtrExUnitsItem)(v));
              });
          });
      })()
  };
  var decodeAesonTxEvaluationR = {
      decodeAeson: function (aeson) {
          return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)((function () {
              var $442 = Data_Newtype.wrap();
              return function ($443) {
                  return $442(Data_Either.Right.create($443));
              };
          })())(Aeson.decodeAeson(decodeAesonTxEvaluationRe)(aeson)))(Data_Functor.map(Data_Either.functorEither)((function () {
              var $444 = Data_Newtype.wrap();
              return function ($445) {
                  return $444(Data_Either.Left.create($445));
              };
          })())(Aeson.decodeAeson(decodeAesonTxEvaluationFa)(aeson)));
      }
  };
  var aesonArray = Aeson.caseAesonArray(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array")));
  var parseScript = function (outer) {
      var parsePlutusScriptWithLang = function (lang) {
          return function (aeson) {
              var scriptTypeMismatch = Data_Argonaut_Decode_Error.TypeMismatch.create("Expected hex-encoded Plutus script, got: " + Data_Show.show(Aeson.showAeson)(aeson));
              return Aeson.caseAesonString(new Data_Either.Left(scriptTypeMismatch))(function (hexEncodedScript) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(scriptTypeMismatch)(Types_ByteArray.hexToByteArray(hexEncodedScript)))(function (scriptBytes) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Cardano_Types_ScriptRef.PlutusScriptRef.create(new Data_Tuple.Tuple(scriptBytes, lang)));
                  });
              })(aeson);
          };
      };
      var parseNativeScript = function (aeson) {
          if (Aeson.isString(aeson)) {
              var pubKeyHashTypeMismatch = Data_Argonaut_Decode_Error.TypeMismatch.create("Expected hex-encoded pub key hash, got: " + Data_Show.show(Aeson.showAeson)(aeson));
              var pubKeyHashHex = Data_Maybe.fromJust()(Aeson.toString(aeson));
              return Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.ScriptPubkey.create)(Data_Either.note(pubKeyHashTypeMismatch)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Serialization_Hash.ed25519KeyHashFromBytes)(Types_RawBytes.hexToRawBytes(pubKeyHashHex))));
          };
          if (Data_Boolean.otherwise) {
              return aesonObject(function (obj) {
                  var scriptTypeMismatch = Data_Argonaut_Decode_Error.TypeMismatch.create("Expected native script, got: " + Data_Show.show(Aeson.showAeson)(aeson));
                  var v = Data_Array.head(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(obj));
                  if (v instanceof Data_Maybe.Just && v.value0.value0 === "any") {
                      return aesonArray((function () {
                          var $446 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.ScriptAny.create);
                          var $447 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(parseNativeScript);
                          return function ($448) {
                              return $446($447($448));
                          };
                      })())(v.value0.value1);
                  };
                  if (v instanceof Data_Maybe.Just && v.value0.value0 === "all") {
                      return aesonArray((function () {
                          var $449 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.ScriptAll.create);
                          var $450 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(parseNativeScript);
                          return function ($451) {
                              return $449($450($451));
                          };
                      })())(v.value0.value1);
                  };
                  if (v instanceof Data_Maybe.Just && v.value0.value0 === "expiresAt") {
                      return Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.TimelockExpiry.create)(Aeson.decodeAeson(Serialization_Address.decodeAesonSlot)(v.value0.value1));
                  };
                  if (v instanceof Data_Maybe.Just && v.value0.value0 === "startsAt") {
                      return Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.TimelockStart.create)(Aeson.decodeAeson(Serialization_Address.decodeAesonSlot)(v.value0.value1));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(scriptTypeMismatch)(Data_Int.fromString(v.value0.value0)))(function (n) {
                          return aesonArray((function () {
                              var $452 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_NativeScript.ScriptNOfK.create(n));
                              var $453 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(parseNativeScript);
                              return function ($454) {
                                  return $452($453($454));
                              };
                          })())(v.value0.value1);
                      });
                  };
                  return new Data_Either.Left(scriptTypeMismatch);
              })(aeson);
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 1268, column 3 - line 1268, column 68): " + [ aeson.constructor.name ]);
      };
      return Control_Bind.bind(Data_Either.bindEither)(Aeson["getFieldOptional'"](Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(outer)("script"))(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              var v1 = Data_Array.head(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0));
              if (v1 instanceof Data_Maybe.Just && v1.value0.value0 === "plutus:v1") {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(parsePlutusScriptWithLang(Types_Scripts.PlutusV1.value)(v1.value0.value1));
              };
              if (v1 instanceof Data_Maybe.Just && v1.value0.value0 === "plutus:v2") {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(parsePlutusScriptWithLang(Types_Scripts.PlutusV2.value)(v1.value0.value1));
              };
              if (v1 instanceof Data_Maybe.Just && v1.value0.value0 === "native") {
                  return Data_Functor.map(Data_Either.functorEither)(function ($455) {
                      return Data_Maybe.Just.create(Cardano_Types_ScriptRef.NativeScriptRef.create($455));
                  })(parseNativeScript(v1.value0.value1));
              };
              return Data_Either.Left.create(Data_Argonaut_Decode_Error.TypeMismatch.create("Expected native or Plutus script, got: " + Data_Show.show(Foreign_Object.showObject(Aeson.showAeson))(v.value0)));
          };
          throw new Error("Failed pattern match at QueryM.Ogmios (line 1238, column 40 - line 1253, column 69): " + [ v.constructor.name ]);
      });
  };
  var parseTxOut = aesonObject(function (o) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("address"))(function (address) {
          return Control_Bind.bind(Data_Either.bindEither)(parseValue(o))(function (value) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson["getFieldOptional'"](Aeson.decodeAesonString)(o)("datumHash"))(function (datumHash) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson["getFieldOptional'"](Aeson.decodeAesonString)(o)("datum"))(function (datum) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseScript(o))(function (script) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                              address: address,
                              value: value,
                              datumHash: datumHash,
                              datum: datum,
                              script: script
                          });
                      });
                  });
              });
          });
      });
  });
  var parseUtxoQueryResult = (function () {
      var insertFunc = function (acc) {
          var inner = function (innerArray) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("missing 0th element, expected an OgmiosTxOutRef"))(Data_Array.index(innerArray)(0)))(function (txOutRefJson) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("missing 1st element, expected a TxOut"))(Data_Array.index(innerArray)(1)))(function (txOutJson) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseTxOutRef(txOutRefJson))(function (txOutRef) {
                          return Control_Bind.bind(Data_Either.bindEither)(parseTxOut(txOutJson))(function (txOut) {
                              return Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                                  reflectSymbol: function () {
                                      return "txId";
                                  }
                              })(Data_Ord.ordString))()({
                                  reflectSymbol: function () {
                                      return "index";
                                  }
                              })(Data_UInt.uintOrd)))(txOutRef)(txOut))(acc);
                          });
                      });
                  });
              });
          };
          return aesonArray(inner);
      };
      return aesonArray(Data_Foldable.foldl(Data_Foldable.foldableArray)(insertFunc)(new Data_Either.Right(Data_Map_Internal.empty)));
  })();
  var decodeAesonUtxoQR = {
      decodeAeson: (function () {
          var $456 = Data_Functor.map(Data_Either.functorEither)(UtxoQR);
          return function ($457) {
              return $456(parseUtxoQueryResult($457));
          };
      })()
  };
  var decodeAesonEraSummaries = {
      decodeAeson: aesonArray((function () {
          var $458 = Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap());
          var $459 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Aeson.decodeAeson(decodeAesonEraSummary));
          return function ($460) {
              return $458($459($460));
          };
      })())
  };
  var acquireMempoolSnapshotCall = mkOgmiosCallTypeNoArgs("AwaitAcquire");
  exports["CtChainOrigin"] = CtChainOrigin;
  exports["CtChainPoint"] = CtChainPoint;
  exports["CoinsPerUtxoByte"] = CoinsPerUtxoByte;
  exports["CoinsPerUtxoWord"] = CoinsPerUtxoWord;
  exports["ExtraRedeemers"] = ExtraRedeemers;
  exports["MissingRequiredDatums"] = MissingRequiredDatums;
  exports["MissingRequiredScripts"] = MissingRequiredScripts;
  exports["ValidatorFailed"] = ValidatorFailed;
  exports["UnknownInputReferencedByRedeemer"] = UnknownInputReferencedByRedeemer;
  exports["NonScriptInputReferencedByRedeemer"] = NonScriptInputReferencedByRedeemer;
  exports["IllFormedExecutionBudget"] = IllFormedExecutionBudget;
  exports["NoCostModelForLanguage"] = NoCostModelForLanguage;
  exports["SubmitTxSuccess"] = SubmitTxSuccess;
  exports["SubmitFail"] = SubmitFail;
  exports["UnparsedError"] = UnparsedError;
  exports["ScriptFailures"] = ScriptFailures;
  exports["acquireMempoolSnapshotCall"] = acquireMempoolSnapshotCall;
  exports["evaluateTxCall"] = evaluateTxCall;
  exports["mempoolSnapshotHasTxCall"] = mempoolSnapshotHasTxCall;
  exports["queryChainTipCall"] = queryChainTipCall;
  exports["queryEraSummariesCall"] = queryEraSummariesCall;
  exports["queryProtocolParametersCall"] = queryProtocolParametersCall;
  exports["querySystemStartCall"] = querySystemStartCall;
  exports["queryUtxoCall"] = queryUtxoCall;
  exports["queryUtxosAtCall"] = queryUtxosAtCall;
  exports["submitTxCall"] = submitTxCall;
  exports["slotLengthFactor"] = slotLengthFactor;
  exports["showMempoolSnapshotAcquir"] = showMempoolSnapshotAcquir;
  exports["decodeAesonMempoolSnapsho"] = decodeAesonMempoolSnapsho;
  exports["showSubmitTxR"] = showSubmitTxR;
  exports["decodeAesonSubmitTxR"] = decodeAesonSubmitTxR;
  exports["decodeAesonSystemStart"] = decodeAesonSystemStart;
  exports["showSystemStart"] = showSystemStart;
  exports["decodeAesonCurrentEpoch"] = decodeAesonCurrentEpoch;
  exports["showCurrentEpoch"] = showCurrentEpoch;
  exports["showEraSummaries"] = showEraSummaries;
  exports["decodeAesonEraSummaries"] = decodeAesonEraSummaries;
  exports["showTxEvaluationR"] = showTxEvaluationR;
  exports["decodeAesonTxEvaluationR"] = decodeAesonTxEvaluationR;
  exports["showTxEvaluationFailure"] = showTxEvaluationFailure;
  exports["showProtocolParameters"] = showProtocolParameters;
  exports["decodeAesonProtocolParame"] = decodeAesonProtocolParame;
  exports["showChainTipQR"] = showChainTipQR;
  exports["decodeAesonChainTipQR"] = decodeAesonChainTipQR;
  exports["showUtxoQR"] = showUtxoQR;
  exports["decodeAesonUtxoQR"] = decodeAesonUtxoQR;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const setter = prop => obj => value => () => obj["set_" + prop](value);

  exports.hashTransaction = body => () => lib.hash_transaction(body);

  exports.newValueFromAssets = multiasset => () =>
    lib.Value.new_from_assets(multiasset);

  exports.valueSetCoin = setter("coin");

  exports.newTransactionInput = transaction_id => index => () =>
    lib.TransactionInput.new(transaction_id, index);

  exports.newTransactionInputs = () => lib.TransactionInputs.new();

  exports.addTransactionInput = inputs => input => () => inputs.add(input);

  exports.newTransactionOutput = address => amount => () =>
    lib.TransactionOutput.new(address, amount);

  exports.newTransactionOutputs = () => lib.TransactionOutputs.new();

  exports.addTransactionOutput = outputs => output => () => outputs.add(output);

  exports.newTransactionBody = inputs => outputs => fee => () =>
    lib.TransactionBody.new_tx_body(inputs, outputs, fee);

  exports.setTxIsValid = tx => isValid => () => tx.set_is_valid(isValid);

  exports.newTransaction = body => witness_set => auxiliary_data => () =>
    lib.Transaction.new(body, witness_set, auxiliary_data);

  exports.newTransaction_ = body => witness_set => () =>
    lib.Transaction.new(body, witness_set);     

  exports.newMultiAsset = () => lib.MultiAsset.new();

  exports.insertMultiAsset = multiasset => key => value => () =>
    multiasset.insert(key, value);

  exports.newAssets = () => lib.Assets.new();

  exports.insertAssets = assets => key => value => () =>
    assets.insert(key, value);

  exports.newAssetName = name => () => lib.AssetName.new(name);

  exports.transactionOutputSetDataHash = setter("data_hash");

  exports.transactionOutputSetPlutusData = setter("plutus_data");

  exports.transactionOutputSetScriptRef = setter("script_ref");

  exports.scriptRefNewNativeScript = nativeScript =>
    lib.ScriptRef.new_native_script(nativeScript);

  exports.scriptRefNewPlutusScript = plutusScript =>
    lib.ScriptRef.new_plutus_script(plutusScript);         

  exports.makeVkeywitness = hash => key => () => lib.make_vkey_witness(hash, key);

  exports.publicKeyFromPrivateKey = private_key => () => {
    return private_key.to_public();
  };

  exports._privateKeyFromBytes = maybe => bytes => {
    try {
      return maybe.just(lib.PrivateKey.from_normal_bytes(bytes));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports.publicKeyHash = pk => pk.hash();                

  exports.toBytes = sth => sth.to_bytes();

  exports.newCostmdls = () => lib.Costmdls.new();     

  exports.costmdlsSetCostModel = cms => lang => cm => () => cms.insert(lang, cm);

  exports.newCostModel = () => lib.CostModel.new();

  exports.costModelSetCost = cm => op => cost => () => cm.set(op, cost);

  exports.newPlutusV1 = () => lib.Language.new_plutus_v1();

  exports.newPlutusV2 = () => lib.Language.new_plutus_v2();

  exports._hashScriptData = rs => cms => ds => () => {
    const list = lib.PlutusList.new();
    ds.forEach(d => list.add(d));
    return lib.hash_script_data(rs, cms, list);
  };

  exports._hashScriptDataNoDatums = rs => cms => () =>
    lib.hash_script_data(rs, cms);

  exports.newRedeemers = () => lib.Redeemers.new();

  exports.addRedeemer = rs => r => () => rs.add(r);

  exports.setTxBodyReferenceInputs = txBody => referenceInputs => () =>
    txBody.set_reference_inputs(referenceInputs);

  exports.newScriptDataHashFromBytes = bytes => () =>
    lib.ScriptDataHash.from_bytes(bytes);

  exports.setTxBodyScriptDataHash = setter("script_data_hash");

  exports.setTxBodyMint = setter("mint");

  exports.newMint = () => lib.Mint.new();

  exports._bigIntToInt = maybe => bigInt => {
    try {
      const str = bigInt.to_str();
      if (str[0] == "-") {
        return maybe.just(
          lib.Int.new_negative(lib.BigNum.from_str(str.slice(1)))
        );
      } else {
        return maybe.just(lib.Int.new(lib.BigNum.from_str(str)));
      }
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports.newMintAssets = lib.MintAssets.new;

  exports.insertMintAssets = mint => scriptHash => mintAssets => () =>
    mint.insert(scriptHash, mintAssets);

  exports.insertMintAsset = mintAssets => assetName => int => () =>
    mintAssets.insert(assetName, int);

  exports.networkIdTestnet = () => lib.NetworkId.testnet();

  exports.networkIdMainnet = () => lib.NetworkId.mainnet();

  exports.setTxBodyCollateralReturn = txBody => collateralReturn => () =>
    txBody.set_collateral_return(collateralReturn);

  exports.setTxBodyTotalCollateral = txBody => totalCollateral => () =>
    txBody.set_total_collateral(totalCollateral);

  exports.setTxBodyTtl = setter("ttl");

  exports.setTxBodyCerts = setter("certs");

  exports.newCertificates = () => lib.Certificates.new();

  exports.newStakeRegistrationCertificate = stakeCredential => () =>
    lib.Certificate.new_stake_registration(
      lib.StakeRegistration.new(stakeCredential)
    );

  exports.newStakeDeregistrationCertificate = stakeCredential => () =>
    lib.Certificate.new_stake_deregistration(
      lib.StakeDeregistration.new(stakeCredential)
    );

  exports.newStakeDelegationCertificate =
    stakeCredential => ed25519KeyHash => () =>
      lib.Certificate.new_stake_delegation(
        lib.StakeDelegation.new(stakeCredential, ed25519KeyHash)
      );

  exports.newPoolRegistrationCertificate =
    operator =>
    vrfKeyhash =>
    pledge =>
    cost =>
    margin =>
    reward_account =>
    poolOwners =>
    relays =>
    poolMetadata =>
    () =>
      lib.Certificate.new_pool_registration(
        lib.PoolRegistration.new(
          lib.PoolParams.new(
            operator,
            vrfKeyhash,
            pledge,
            cost,
            margin,
            reward_account,
            poolOwners,
            relays,
            poolMetadata
          )
        )
      );

  exports.newUnitInterval = numerator => denominator => () =>
    lib.UnitInterval.new(numerator, denominator);

  exports.newPoolRetirementCertificate = poolKeyHash => epoch => () =>
    lib.Certificate.new_pool_retirement(
      lib.PoolRetirement.new(poolKeyHash, epoch)
    );

  exports.newGenesisKeyDelegationCertificate =
    genesisHash => genesisDelegateHash => vrfKeyhash => () =>
      lib.Certificate.new_genesis_key_delegation(
        lib.GenesisKeyDelegation.new(genesisHash, genesisDelegateHash, vrfKeyhash)
      );

  exports.addCert = certificates => certificate => () =>
    certificates.add(certificate);

  exports.setTxBodyCollateral = setter("collateral");

  exports.setTxBodyNetworkId = setter("network_id");

  exports.transactionBodySetRequiredSigners =
    containerHelper => body => keyHashes => () =>
      body.set_required_signers(
        containerHelper.pack(lib.Ed25519KeyHashes, keyHashes)
      );

  exports.transactionBodySetValidityStartInterval = setter(
    "validity_start_interval_bignum"
  );

  exports.transactionBodySetAuxiliaryDataHash = txBody => hashBytes => () =>
    txBody.set_auxiliary_data_hash(lib.AuxiliaryDataHash.from_bytes(hashBytes));

  exports.convertPoolOwners = containerHelper => keyHashes => () =>
    containerHelper.pack(lib.Ed25519KeyHashes, keyHashes);

  exports.packRelays = containerHelper => relays =>
    containerHelper.pack(lib.Relays, relays);

  exports.newIpv4 = data => () => lib.Ipv4.new(data);

  exports.newIpv6 = data => () => lib.Ipv6.new(data);

  exports.newSingleHostAddr = port => ipv4 => ipv6 => () =>
    lib.Relay.new_single_host_addr(lib.SingleHostAddr.new(port, ipv4, ipv6));

  exports.newSingleHostName = port => dnsName => () =>
    lib.Relay.new_single_host_name(
      lib.SingleHostName.new(port, lib.DNSRecordAorAAAA.new(dnsName))
    );

  exports.newMultiHostName = dnsName => () =>
    lib.Relay.new_multi_host_name(
      lib.MultiHostName.new(lib.DNSRecordSRV.new(dnsName))
    );

  exports.newPoolMetadata = url => hash => () =>
    lib.PoolMetadata.new(lib.URL.new(url), lib.PoolMetadataHash.from_bytes(hash));

  exports.newGenesisHash = bytes => () => lib.GenesisHash.from_bytes(bytes);

  exports.newGenesisDelegateHash = bytes => () =>
    lib.GenesisDelegateHash.from_bytes(bytes);

  exports.newMoveInstantaneousRewardToOtherPot = pot => amount => () =>
    lib.MoveInstantaneousReward.new_to_other_pot(pot, amount);

  exports.newMoveInstantaneousRewardToStakeCreds = pot => amounts => () =>
    lib.MoveInstantaneousReward.new_to_stake_creds(pot, amounts);

  exports.newMIRToStakeCredentials = containerHelper => entries => () =>
    containerHelper.packMap(lib.MIRToStakeCredentials, entries);

  exports.newMoveInstantaneousRewardsCertificate = mir => () =>
    lib.Certificate.new_move_instantaneous_rewards_cert(
      lib.MoveInstantaneousRewardsCert.new(mir)
    );

  exports.newWithdrawals = containerHelper => entries => () =>
    containerHelper.packMap(lib.Withdrawals, entries);

  exports.setTxBodyWithdrawals = setter("withdrawals");

  exports.setTxBodyUpdate = setter("update");

  exports.newUpdate = ppUpdates => epoch => () =>
    lib.Update.new(ppUpdates, epoch);

  exports.ppuSetMinfeeA = setter("minfee_a");

  exports.ppuSetMinfeeB = setter("minfee_b");

  exports.ppuSetMaxBlockBodySize = setter("max_block_body_size");

  exports.ppuSetMaxTxSize = setter("max_tx_size");

  exports.ppuSetMaxBlockHeaderSize = setter("max_block_header_size");

  exports.ppuSetKeyDeposit = setter("key_deposit");

  exports.ppuSetPoolDeposit = setter("pool_deposit");

  exports.ppuSetMaxEpoch = setter("max_epoch");

  exports.ppuSetNOpt = setter("n_opt");

  exports.ppuSetPoolPledgeInfluence = setter("pool_pledge_influence");

  exports.ppuSetExpansionRate = setter("expansion_rate");

  exports.ppuSetTreasuryGrowthRate = setter("treasury_growth_rate");

  exports.newProtocolVersion = major => minor => () =>
    lib.ProtocolVersion.new(major, minor);

  exports.ppuSetProtocolVersion = ppu => version => () =>
    ppu.set_protocol_version(version);

  exports.ppuSetMinPoolCost = setter("min_pool_cost");

  exports.ppuSetAdaPerUtxoByte = setter("ada_per_utxo_byte");

  exports.ppuSetCostModels = setter("cost_models");

  exports.newExUnitPrices = mem_price => step_price => () =>
    lib.ExUnitPrices.new(mem_price, step_price);

  exports.ppuSetExecutionCosts = setter("execution_costs");

  exports.ppuSetMaxTxExUnits = setter("max_tx_ex_units");

  exports.ppuSetMaxBlockExUnits = setter("max_block_ex_units");

  exports.ppuSetMaxValueSize = setter("max_value_size");

  exports.newProtocolParamUpdate = () => lib.ProtocolParamUpdate.new();

  exports.newProposedProtocolParameterUpdates = containerHelper => kvs => () =>
    containerHelper.packMap(lib.ProposedProtocolParameterUpdates, kvs);
})(PS["Serialization"] = PS["Serialization"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const fromBytes = name => helper => bytes => {
    try {
      return helper.valid(lib[name].from_bytes(bytes));
    } catch (e) {
      return helper.error(name + ".from_bytes() raised " + e);
    }
  };

  exports._fromBytesDataHash = fromBytes("DataHash");      
  exports._fromBytesTransactionHash = fromBytes("TransactionHash");
  exports._fromBytesPlutusData = fromBytes("PlutusData");
  exports._fromBytesTransactionUnspentOutput = fromBytes(
    "TransactionUnspentOutput"
  );
  exports._fromBytesTransactionWitnessSet = fromBytes("TransactionWitnessSet");
  exports._fromBytesValue = fromBytes("Value");
})(PS["Deserialization.FromBytes"] = PS["Deserialization.FromBytes"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  exports["inj"] = inj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.FromBytes"] = $PS["Deserialization.FromBytes"] || {};
  var exports = $PS["Deserialization.FromBytes"];
  var $foreign = $PS["Deserialization.FromBytes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var fromBytes$prime = function (dict) {
      return dict["fromBytes'"];
  };
  var fromBytes = function (dictFromBytes) {
      var $16 = fromBytes$prime(dictFromBytes);
      return function ($17) {
          return Data_Either.hush($16($17));
      };
  };
  var fromBytesEffect = function (dictFromBytes) {
      return function (bytes) {
          var v = fromBytes(dictFromBytes)(bytes);
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"]("from_bytes() call failed");
          };
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Deserialization.FromBytes (line 76, column 3 - line 78, column 21): " + [ v.constructor.name ]);
      };
  };
  var _fromBytesError = Type_Proxy["Proxy"].value;
  var eh = FfiHelpers.errorHelper(Data_Variant.inj()({
      reflectSymbol: function () {
          return "fromBytesError";
      }
  })(_fromBytesError));
  var fromBytesDataHash = {
      "fromBytes'": $foreign["_fromBytesDataHash"](eh)
  };
  var fromBytesPlutusData = {
      "fromBytes'": $foreign["_fromBytesPlutusData"](eh)
  };
  var fromBytesTransactionHash = {
      "fromBytes'": $foreign["_fromBytesTransactionHash"](eh)
  };
  var fromBytesTransactionUnspe = {
      "fromBytes'": $foreign["_fromBytesTransactionUnspentOutput"](eh)
  };
  var fromBytesTransactionWitne = {
      "fromBytes'": $foreign["_fromBytesTransactionWitnessSet"](eh)
  };
  var fromBytesValue = {
      "fromBytes'": $foreign["_fromBytesValue"](eh)
  };
  exports["fromBytes"] = fromBytes;
  exports["fromBytesEffect"] = fromBytesEffect;
  exports["fromBytesDataHash"] = fromBytesDataHash;
  exports["fromBytesTransactionHash"] = fromBytesTransactionHash;
  exports["fromBytesPlutusData"] = fromBytesPlutusData;
  exports["fromBytesTransactionUnspe"] = fromBytesTransactionUnspe;
  exports["fromBytesTransactionWitne"] = fromBytesTransactionWitne;
  exports["fromBytesValue"] = fromBytesValue;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const setter = prop => obj => value => () => obj["set_" + prop](value);

  exports.newAuxiliaryData = () => lib.AuxiliaryData.new();

  exports.setAuxiliaryDataNativeScripts = setter("native_scripts");

  exports.setAuxiliaryDataPlutusScripts = setter("plutus_scripts");

  exports.setAuxiliaryDataGeneralTransactionMetadata = setter("metadata");

  exports.newGeneralTransactionMetadata = containerHelper => entries => () =>
    containerHelper.packMap(lib.GeneralTransactionMetadata, entries);

  exports.newMetadataMap = containerHelper => entries => () =>
    lib.TransactionMetadatum.new_map(
      containerHelper.packMap(lib.MetadataMap, entries)
    );

  exports.newMetadataList = containerHelper => entries => () =>
    lib.TransactionMetadatum.new_list(
      containerHelper.pack(lib.MetadataList, entries)
    );

  exports.newMetadataInt = int => () => lib.TransactionMetadatum.new_int(int);

  exports.newMetadataBytes = bytes => () =>
    lib.TransactionMetadatum.new_bytes(bytes);

  exports.newMetadataText = text => () => lib.TransactionMetadatum.new_text(text);
})(PS["Serialization.AuxiliaryData"] = PS["Serialization.AuxiliaryData"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const mkScript = prop => arg => lib.NativeScript[prop](arg);

  exports.mkScriptPubkey = keyHash => lib.ScriptPubkey.new(keyHash);
  exports.nativeScript_new_script_pubkey = mkScript("new_script_pubkey");
  exports.nativeScript_new_script_all = mkScript("new_script_all");
  exports.nativeScript_new_script_any = mkScript("new_script_any");
  exports.nativeScript_new_script_n_of_k = mkScript("new_script_n_of_k");
  exports.nativeScript_new_timelock_start = mkScript("new_timelock_start");
  exports.nativeScript_new_timelock_expiry = mkScript("new_timelock_expiry");
  exports._packNativeScripts = helper => nss =>
    helper.pack(lib.NativeScripts, nss);
  exports.mkScriptAll = nss => lib.ScriptAll.new(nss);
  exports.mkScriptAny = nss => lib.ScriptAny.new(nss);
  exports.mkScriptNOfK = n => nss => lib.ScriptNOfK.new(n, nss);
  exports.mkTimelockExpiry = n => lib.TimelockExpiry.new_timelockexpiry(n);
  exports.mkTimelockStart = n => lib.TimelockStart.new_timelockstart(n);
})(PS["Serialization.NativeScript"] = PS["Serialization.NativeScript"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.NativeScript"] = $PS["Serialization.NativeScript"] || {};
  var exports = $PS["Serialization.NativeScript"];
  var $foreign = $PS["Serialization.NativeScript"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var packNativeScripts = $foreign["_packNativeScripts"](FfiHelpers.containerHelper);
  var convertTimelockStart = function (v) {
      return $foreign.nativeScript_new_timelock_start($foreign.mkTimelockStart(v));
  };
  var convertTimelockExpiry = function (v) {
      return $foreign.nativeScript_new_timelock_expiry($foreign.mkTimelockExpiry(v));
  };
  var convertScriptPubkey = function (hash) {
      return $foreign.nativeScript_new_script_pubkey($foreign.mkScriptPubkey(hash));
  };
  var convertScriptNOfK = function (n) {
      return function (nss) {
          return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $13 = $foreign.mkScriptNOfK(n);
              return function ($14) {
                  return $foreign.nativeScript_new_script_n_of_k($13(packNativeScripts($14)));
              };
          })())(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
      };
  };
  var convertScriptAny = function (nss) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($15) {
          return $foreign.nativeScript_new_script_any($foreign.mkScriptAny(packNativeScripts($15)));
      })(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
  };
  var convertScriptAll = function (nss) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($16) {
          return $foreign.nativeScript_new_script_all($foreign.mkScriptAll(packNativeScripts($16)));
      })(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
  };
  var convertNativeScript = function (v) {
      if (v instanceof Cardano_Types_NativeScript.ScriptPubkey) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertScriptPubkey(v.value0));
      };
      if (v instanceof Cardano_Types_NativeScript.ScriptAll) {
          return convertScriptAll(v.value0);
      };
      if (v instanceof Cardano_Types_NativeScript.ScriptAny) {
          return convertScriptAny(v.value0);
      };
      if (v instanceof Cardano_Types_NativeScript.ScriptNOfK) {
          return convertScriptNOfK(v.value0)(v.value1);
      };
      if (v instanceof Cardano_Types_NativeScript.TimelockStart) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertTimelockStart(v.value0));
      };
      if (v instanceof Cardano_Types_NativeScript.TimelockExpiry) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertTimelockExpiry(v.value0));
      };
      throw new Error("Failed pattern match at Serialization.NativeScript (line 40, column 23 - line 46, column 61): " + [ v.constructor.name ]);
  };
  var convertNativeScripts = (function () {
      var $17 = Data_Functor.map(Data_Maybe.functorMaybe)(packNativeScripts);
      var $18 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript);
      return function ($19) {
          return $17($18($19));
      };
  })();
  exports["convertNativeScript"] = convertNativeScript;
  exports["convertNativeScripts"] = convertNativeScripts;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.newPlutusV1Script = bytes => lib.PlutusScript.new(bytes);

  exports.newPlutusV2Script = bytes => lib.PlutusScript.new_v2(bytes);
})(PS["Serialization.PlutusScript"] = PS["Serialization.PlutusScript"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.PlutusScript"] = $PS["Serialization.PlutusScript"] || {};
  var exports = $PS["Serialization.PlutusScript"];
  var $foreign = $PS["Serialization.PlutusScript"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var convertPlutusScript = function (v) {
      return (function () {
          if (v.value1 instanceof Types_Scripts.PlutusV1) {
              return $foreign.newPlutusV1Script;
          };
          if (v.value1 instanceof Types_Scripts.PlutusV2) {
              return $foreign.newPlutusV2Script;
          };
          throw new Error("Failed pattern match at Serialization.PlutusScript (line 18, column 11 - line 20, column 36): " + [ v.value1.constructor.name ]);
      })()(v.value0);
  };
  exports["convertPlutusScript"] = convertPlutusScript;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.newTransactionWitnessSet = () => lib.TransactionWitnessSet.new();

  exports.newEd25519Signature = bech32 => () =>
    lib.Ed25519Signature.from_bech32(bech32);

  exports.newPublicKey = bech32 => () => lib.PublicKey.from_bech32(bech32);

  exports.newVkeyFromPublicKey = public_key => () => lib.Vkey.new(public_key);

  exports.newVkeywitnesses = () => lib.Vkeywitnesses.new();

  exports.newVkeywitness = vkey => signature => () =>
    lib.Vkeywitness.new(vkey, signature);

  exports.addVkeywitness = witnesses => witness => () => witnesses.add(witness);

  exports.newPlutusScripts = () => lib.PlutusScripts.new();

  exports.addPlutusScript = scripts => script => () => scripts.add(script);

  exports.transactionWitnessSetSetVkeys = ws => vkeys => () =>
    ws.set_vkeys(vkeys);

  exports.txWitnessSetSetPlutusScripts = ws => scripts => () =>
    ws.set_plutus_scripts(scripts);

  exports.transactionWitnessSetSetNativeScripts = ws => scripts => () =>
    ws.set_native_scripts(scripts);

  exports._wsSetBootstraps = helper => ws => bootstraps => () =>
    ws.set_bootstraps(helper.pack(lib.BootstrapWitnesses, bootstraps));

  exports.newBootstrapWitness =
    vkey => signature => chain_code => attributes => () => {
      lib.BootstrapWitness.new(vkey, signature, chain_code, attributes);
    };

  exports._wsSetPlutusData = helper => ws => plutus_data => () =>
    ws.set_plutus_data(helper.pack(lib.PlutusList, plutus_data));

  exports.newRedeemer = tag => index => data => ex_units => () =>
    lib.Redeemer.new(tag, index, data, ex_units);

  exports._newRedeemerTag = tag => () => lib.RedeemerTag["new_" + tag]();

  exports.newExUnits = mem => steps => lib.ExUnits.new(mem, steps);

  exports._wsSetRedeemers = helper => ws => redeemers => () =>
    ws.set_redeemers(helper.pack(lib.Redeemers, redeemers));

  exports._wsSetPlutusScripts = helper => ws => scripts => () =>
    ws.set_plutus_scripts(helper.pack(lib.PlutusScripts, scripts));
})(PS["Serialization.WitnessSet"] = PS["Serialization.WitnessSet"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports._mkPlutusData_bytes = bytes => lib.PlutusData.new_bytes(bytes);
  exports._mkPlutusData_list = list => lib.PlutusData.new_list(list);
  exports._mkPlutusData_map = list => lib.PlutusData.new_map(list);
  exports._mkPlutusData_integer = int => lib.PlutusData.new_integer(int);
  exports._mkPlutusData_constr = constr =>
    lib.PlutusData.new_constr_plutus_data(constr);

  exports._packPlutusList = containerHelper => elems =>
    containerHelper.pack(lib.PlutusList, elems);
  exports._mkConstrPlutusData = n => list => lib.ConstrPlutusData.new(n, list);

  exports._bigIntFromString = maybe => str => {
    try {
      return maybe.just(lib.BigInt.from_str(str));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports._packMap = first => second => kvs => {
    const res = lib.PlutusMap.new();
    for (let kv of kvs) {
      res.insert(first(kv), second(kv));
    }
    return res;
  };
})(PS["Serialization.PlutusData"] = PS["Serialization.PlutusData"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.PlutusData"] = $PS["Serialization.PlutusData"] || {};
  var exports = $PS["Serialization.PlutusData"];
  var $foreign = $PS["Serialization.PlutusData"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var convertBigInt = function (n) {
      return $foreign["_bigIntFromString"](FfiHelpers.maybeFfiHelper)(Data_BigInt.toString(n));
  };
  var convertPlutusInteger = function (n) {
      return Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkPlutusData_integer"])(convertBigInt(n));
  };
  var convertPlutusMap = function (mp) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(mp)(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value0))(function (k$prime) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value1))(function (v$prime) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(k$prime, v$prime));
              });
          });
      }))(function (entries) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign["_mkPlutusData_map"]($foreign["_packMap"](Data_Tuple.fst)(Data_Tuple.snd)(entries)));
      });
  };
  var convertPlutusList = function (x) {
      return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $12 = $foreign["_packPlutusList"](FfiHelpers.containerHelper);
          return function ($13) {
              return $foreign["_mkPlutusData_list"]($12($13));
          };
      })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData)(x));
  };
  var convertPlutusData = function (v) {
      if (v instanceof Types_PlutusData.Constr) {
          return convertConstr(v.value0)(v.value1);
      };
      if (v instanceof Types_PlutusData["Map"]) {
          return convertPlutusMap(v.value0);
      };
      if (v instanceof Types_PlutusData.List) {
          return convertPlutusList(v.value0);
      };
      if (v instanceof Types_PlutusData.Integer) {
          return convertPlutusInteger(v.value0);
      };
      if (v instanceof Types_PlutusData.Bytes) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign["_mkPlutusData_bytes"](v.value0));
      };
      throw new Error("Failed pattern match at Serialization.PlutusData (line 32, column 21 - line 37, column 44): " + [ v.constructor.name ]);
  };
  var convertConstr = function (alt) {
      return function (list) {
          return Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkPlutusData_constr"])(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkConstrPlutusData"])(Types_BigNum.fromBigInt(alt)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_packPlutusList"](FfiHelpers.containerHelper))(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(list)(convertPlutusData))));
      };
  };
  exports["convertPlutusData"] = convertPlutusData;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.WitnessSet"] = $PS["Serialization.WitnessSet"] || {};
  var exports = $PS["Serialization.WitnessSet"];
  var $foreign = $PS["Serialization.WitnessSet"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_PlutusScript = $PS["Serialization.PlutusScript"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];                
  var setWitnesses = function (f) {
      return function (ws) {
          return f(FfiHelpers.containerHelper)(ws);
      };
  };
  var setRedeemers = function (rs) {
      return function (ws) {
          return setWitnesses($foreign["_wsSetRedeemers"])(ws)(rs);
      };
  };
  var setPlutusScripts = function (ps) {
      return function (ws) {
          return setWitnesses($foreign["_wsSetPlutusScripts"])(ws)(ps);
      };
  };
  var setPlutusData = function (pd) {
      return function (ws) {
          return setWitnesses($foreign["_wsSetPlutusData"])(ws)(pd);
      };
  };
  var convertVkey = function (v) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.newPublicKey(v))($foreign.newVkeyFromPublicKey);
  };
  var convertRedeemerTag = function ($28) {
      return $foreign["_newRedeemerTag"]((function (v) {
          if (v instanceof Types_RedeemerTag.Spend) {
              return "spend";
          };
          if (v instanceof Types_RedeemerTag.Mint) {
              return "mint";
          };
          if (v instanceof Types_RedeemerTag.Cert) {
              return "cert";
          };
          if (v instanceof Types_RedeemerTag.Reward) {
              return "reward";
          };
          throw new Error("Failed pattern match at Serialization.WitnessSet (line 140, column 42 - line 144, column 25): " + [ v.constructor.name ]);
      })($28));
  };
  var convertPlutusDataEffect = function (pd) {
      return Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert PlutusData"))(Control_Applicative.pure(Effect.applicativeEffect))(Serialization_PlutusData.convertPlutusData(pd));
  };
  var convertExUnits = function (v) {
      return Data_Maybe.maybe(Effect_Exception["throw"]("Failed to construct ExUnits"))(Control_Applicative.pure(Effect.applicativeEffect))(Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.fromBigInt(v.mem))(function (mem$prime) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.fromBigInt(v.steps))(function (steps$prime) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign.newExUnits(mem$prime)(steps$prime));
          });
      }));
  };
  var convertRedeemer = function (v) {
      return function __do() {
          var tag$prime = convertRedeemerTag(v.tag)();
          var index$prime = Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert redeemer index"))(Control_Applicative.pure(Effect.applicativeEffect))(Types_BigNum.fromBigInt(v.index))();
          var data$prime = convertPlutusDataEffect(v.data)();
          var exUnits$prime = convertExUnits(v.exUnits)();
          return $foreign.newRedeemer(tag$prime)(index$prime)(data$prime)(exUnits$prime)();
      };
  };
  var convertEd25519Signature = function (v) {
      return $foreign.newEd25519Signature(v);
  };
  var convertVkeywitness = function (v) {
      return function __do() {
          var vkey$prime = convertVkey(v.value0)();
          var signature$prime = convertEd25519Signature(v.value1)();
          return $foreign.newVkeywitness(vkey$prime)(signature$prime)();
      };
  };
  var convertVkeywitnesses = function (arr) {
      return function __do() {
          var witnesses = $foreign.newVkeywitnesses();
          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertVkeywitness)($foreign.addVkeywitness(witnesses)))(arr)();
          return witnesses;
      };
  };
  var convertBootstrap = function (v) {
      return function __do() {
          var vkey$prime = convertVkey(v.vkey)();
          var signature$prime = convertEd25519Signature(v.signature)();
          return $foreign.newBootstrapWitness(vkey$prime)(signature$prime)(v.chainCode)(v.attributes)();
      };
  };
  var convertWitnessSet = function (v) {
      return function __do() {
          var ws = $foreign.newTransactionWitnessSet();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.vkeys)(Control_Bind.composeKleisli(Effect.bindEffect)(convertVkeywitnesses)($foreign.transactionWitnessSetSetVkeys(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nativeScripts)((function () {
              var $29 = Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert NativeScripts"))($foreign.transactionWitnessSetSetNativeScripts(ws));
              return function ($30) {
                  return $29(Serialization_NativeScript.convertNativeScripts($30));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.bootstraps)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertBootstrap))($foreign["_wsSetBootstraps"](FfiHelpers.containerHelper)(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusScripts)(function (ps) {
              return function __do() {
                  var scripts = $foreign.newPlutusScripts();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(ps)((function () {
                      var $31 = $foreign.addPlutusScript(scripts);
                      return function ($32) {
                          return $31(Serialization_PlutusScript.convertPlutusScript($32));
                      };
                  })())();
                  return $foreign.txWitnessSetSetPlutusScripts(ws)(scripts)();
              };
          })();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusData)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertPlutusDataEffect))($foreign["_wsSetPlutusData"](FfiHelpers.containerHelper)(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.redeemers)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertRedeemer))($foreign["_wsSetRedeemers"](FfiHelpers.containerHelper)(ws)))();
          return ws;
      };
  };
  exports["setPlutusData"] = setPlutusData;
  exports["setRedeemers"] = setRedeemers;
  exports["setPlutusScripts"] = setPlutusScripts;
  exports["convertWitnessSet"] = convertWitnessSet;
  exports["convertRedeemer"] = convertRedeemer;
  exports["convertExUnits"] = convertExUnits;
  exports["newPlutusScripts"] = $foreign.newPlutusScripts;
  exports["addPlutusScript"] = $foreign.addPlutusScript;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.AuxiliaryData"] = $PS["Serialization.AuxiliaryData"] || {};
  var exports = $PS["Serialization.AuxiliaryData"];
  var $foreign = $PS["Serialization.AuxiliaryData"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Helpers = $PS["Helpers"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_PlutusScript = $PS["Serialization.PlutusScript"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_TransactionMetadata = $PS["Types.TransactionMetadata"];                
  var convertTransactionMetadatum = function (v) {
      if (v instanceof Types_TransactionMetadata.MetadataMap) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMetadataMap(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0))(function (v1) {
              return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)(convertTransactionMetadatum(v1.value0)))(convertTransactionMetadatum(v1.value1));
          }));
      };
      if (v instanceof Types_TransactionMetadata.MetadataList) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMetadataList(FfiHelpers.containerHelper))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertTransactionMetadatum)(v.value0));
      };
      if (v instanceof Types_TransactionMetadata.Int) {
          return $foreign.newMetadataInt(v.value0);
      };
      if (v instanceof Types_TransactionMetadata.Bytes) {
          return $foreign.newMetadataBytes(v.value0);
      };
      if (v instanceof Types_TransactionMetadata.Text) {
          return $foreign.newMetadataText(v.value0);
      };
      throw new Error("Failed pattern match at Serialization.AuxiliaryData (line 114, column 31 - line 123, column 38): " + [ v.constructor.name ]);
  };
  var convertGeneralTransactionMetadata = function (v) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newGeneralTransactionMetadata(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v))(function (v1) {
          return function __do() {
              var label = Helpers.fromJustEff("convertGeneralTransactionMetadata: failing to convert MetadataumLabel")(Types_BigNum.fromBigInt(v1.value0))();
              var datum = convertTransactionMetadatum(v1.value1)();
              return new Data_Tuple.Tuple(label, datum);
          };
      }));
  };
  var convertAuxiliaryData = function (v) {
      return function __do() {
          var ad = $foreign.newAuxiliaryData();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.metadata)(Control_Bind.composeKleisli(Effect.bindEffect)(convertGeneralTransactionMetadata)($foreign.setAuxiliaryDataGeneralTransactionMetadata(ad)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nativeScripts)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
              var $22 = Helpers.fromJustEff("convertAuxiliaryData: failed to convert NativeScripts");
              return function ($23) {
                  return $22(Serialization_NativeScript.convertNativeScripts($23));
              };
          })())($foreign.setAuxiliaryDataNativeScripts(ad)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusScripts)(function (ps) {
              return function __do() {
                  var scripts = Serialization_WitnessSet.newPlutusScripts();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(ps)((function () {
                      var $24 = Serialization_WitnessSet.addPlutusScript(scripts);
                      return function ($25) {
                          return $24(Serialization_PlutusScript.convertPlutusScript($25));
                      };
                  })())();
                  return $foreign.setAuxiliaryDataPlutusScripts(ad)(scripts)();
              };
          })();
          return ad;
      };
  };
  exports["convertAuxiliaryData"] = convertAuxiliaryData;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports._BigInt_from_str = helper => str => {
    try {
      return helper.just(lib.BigInt.from_str(str));
    } catch (_) {
      return helper.nothing;
    }
  };
})(PS["Serialization.BigInt"] = PS["Serialization.BigInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.BigInt"] = $PS["Serialization.BigInt"] || {};
  var exports = $PS["Serialization.BigInt"];
  var $foreign = $PS["Serialization.BigInt"];
  var Data_BigInt = $PS["Data.BigInt"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var convertBigInt = (function () {
      var $0 = $foreign["_BigInt_from_str"](FfiHelpers.maybeFfiHelper);
      return function ($1) {
          return $0(Data_BigInt.toString($1));
      };
  })();
  exports["convertBigInt"] = convertBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization"] = $PS["Serialization"] || {};
  var exports = $PS["Serialization"];
  var $foreign = $PS["Serialization"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Set = $PS["Data.Set"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Effect = $PS["Effect"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Helpers = $PS["Helpers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_AuxiliaryData = $PS["Serialization.AuxiliaryData"];
  var Serialization_BigInt = $PS["Serialization.BigInt"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_PlutusScript = $PS["Serialization.PlutusScript"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Untagged_Union = $PS["Untagged.Union"];                                           
  var privateKeyFromBytes = $foreign["_privateKeyFromBytes"](FfiHelpers.maybeFfiHelper);
  var mkUnitInterval = function (x) {
      return $foreign.newUnitInterval(x.numerator)(x.denominator);
  };
  var convertWithdrawals = function (mp) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newWithdrawals(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(mp))(function (v) {
          return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(v.value0))(Helpers.fromJustEff("convertWithdrawals: Failed to convert BigNum")(Types_BigNum.fromBigInt(v.value1)));
      }));
  };
  var convertValue = function (val) {
      var m = Cardano_Types_Value["getNonAdaAsset'"](val);
      var lovelace = Cardano_Types_Value["valueToCoin'"](val);
      return function __do() {
          var multiasset = $foreign.newMultiAsset();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(m)(function (scriptHashBytes$prime) {
              return function (values) {
                  var mScripthash = Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(Cardano_Types_Value.getCurrencySymbol(scriptHashBytes$prime)));
                  return function __do() {
                      var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                      var assets = $foreign.newAssets();
                      Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                          return function (bigIntValue) {
                              var tokenName = Types_TokenName.getTokenName(tokenName$prime);
                              return function __do() {
                                  var assetName = $foreign.newAssetName(tokenName)();
                                  var value = Helpers.fromJustEff("convertValue: number must not be negative")(Types_BigNum.fromBigInt(bigIntValue))();
                                  return $foreign.insertAssets(assets)(assetName)(value)();
                              };
                          };
                      })();
                      return $foreign.insertMultiAsset(multiasset)(scripthash)(assets)();
                  };
              };
          })();
          var value = $foreign.newValueFromAssets(multiasset)();
          Control_Bind.bindFlipped(Effect.bindEffect)($foreign.valueSetCoin(value))(Helpers.fromJustEff("convertValue: coin value must not be negative")(Types_BigNum.fromBigInt(lovelace)))();
          return value;
      };
  };
  var convertTxInput = function (v) {
      return function __do() {
          var tx_hash = Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionHash)(Data_Newtype.unwrap()(v.transactionId))();
          return $foreign.newTransactionInput(tx_hash)(v.index)();
      };
  };
  var convertTxInputs = function (dictFoldable) {
      return function (fInputs) {
          return function __do() {
              var inputs = $foreign.newTransactionInputs();
              Data_Foldable.traverse_(Effect.applicativeEffect)(dictFoldable)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInput)($foreign.addTransactionInput(inputs)))(fInputs)();
              return inputs;
          };
      };
  };
  var convertScriptRef = function (v) {
      if (v instanceof Cardano_Types_ScriptRef.NativeScriptRef) {
          return Data_Functor.map(Effect.functorEffect)($foreign.scriptRefNewNativeScript)(Helpers.fromJustEff("convertScriptRef")(Serialization_NativeScript.convertNativeScript(v.value0)));
      };
      if (v instanceof Cardano_Types_ScriptRef.PlutusScriptRef) {
          return Control_Applicative.pure(Effect.applicativeEffect)($foreign.scriptRefNewPlutusScript(Serialization_PlutusScript.convertPlutusScript(v.value0)));
      };
      throw new Error("Failed pattern match at Serialization (line 816, column 1 - line 816, column 52): " + [ v.constructor.name ]);
  };
  var convertTxOutput = function (v) {
      return function __do() {
          var value = convertValue(v.amount)();
          var txo = $foreign.newTransactionOutput(v.address)(value)();
          (function () {
              if (v.datum instanceof Types_OutputDatum.NoOutputDatum) {
                  return Data_Unit.unit;
              };
              if (v.datum instanceof Types_OutputDatum.OutputDatumHash) {
                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesDataHash)(Data_Newtype.unwrap()(v.datum.value0)))($foreign.transactionOutputSetDataHash(txo))();
              };
              if (v.datum instanceof Types_OutputDatum.OutputDatum) {
                  return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.transactionOutputSetPlutusData(txo))(Helpers.fromJustEff("convertTxOutput")(Serialization_PlutusData.convertPlutusData(Data_Newtype.unwrap()(v.datum.value0))))();
              };
              throw new Error("Failed pattern match at Serialization (line 803, column 3 - line 811, column 50): " + [ v.datum.constructor.name ]);
          })();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.scriptRef)(Control_Bind.composeKleisli(Effect.bindEffect)(convertScriptRef)($foreign.transactionOutputSetScriptRef(txo)))();
          return txo;
      };
  };
  var convertTxOutputs = function (arrOutputs) {
      return function __do() {
          var outputs = $foreign.newTransactionOutputs();
          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxOutput)($foreign.addTransactionOutput(outputs)))(arrOutputs)();
          return outputs;
      };
  };
  var convertRelays = function (relays) {
      return Data_Functor.map(Effect.functorEffect)($foreign.packRelays(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(relays)(function (relay) {
          if (relay instanceof Cardano_Types_Transaction.SingleHostAddr) {
              return function __do() {
                  var ipv4$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv4))($foreign.newIpv4))();
                  var ipv6$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv6))($foreign.newIpv6))();
                  return $foreign.newSingleHostAddr(Untagged_Union.maybeToUor(relay.value0.port))(ipv4$prime)(ipv6$prime)();
              };
          };
          if (relay instanceof Cardano_Types_Transaction.SingleHostName) {
              return $foreign.newSingleHostName(Untagged_Union.maybeToUor(relay.value0.port))(relay.value0.dnsName);
          };
          if (relay instanceof Cardano_Types_Transaction.MultiHostName) {
              return $foreign.newMultiHostName(relay.value0.dnsName);
          };
          throw new Error("Failed pattern match at Serialization (line 739, column 55 - line 747, column 31): " + [ relay.constructor.name ]);
      }));
  };
  var convertPoolMetadata = function (v) {
      return $foreign.newPoolMetadata(v.url)(v.hash);
  };
  var convertNetworkId = function (v) {
      if (v instanceof Serialization_Address.TestnetId) {
          return $foreign.networkIdTestnet;
      };
      if (v instanceof Serialization_Address.MainnetId) {
          return $foreign.networkIdMainnet;
      };
      throw new Error("Failed pattern match at Serialization (line 750, column 20 - line 752, column 34): " + [ v.constructor.name ]);
  };
  var convertMint = function (v) {
      var m = Cardano_Types_Value.unwrapNonAdaAsset(v);
      return function __do() {
          var mint = $foreign.newMint();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(m)(function (scriptHashBytes$prime) {
              return function (values) {
                  var mScripthash = Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(Cardano_Types_Value.getCurrencySymbol(scriptHashBytes$prime)));
                  return function __do() {
                      var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                      var assets = $foreign.newMintAssets();
                      Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                          return function (bigIntValue) {
                              var tokenName = Types_TokenName.getTokenName(tokenName$prime);
                              return function __do() {
                                  var assetName = $foreign.newAssetName(tokenName)();
                                  var bigInt = Helpers.fromJustEff("convertMint: failed to convert BigInt")(Serialization_BigInt.convertBigInt(bigIntValue))();
                                  var $$int = Helpers.fromJustEff("convertMint: numeric overflow or underflow")($foreign["_bigIntToInt"](FfiHelpers.maybeFfiHelper)(bigInt))();
                                  return $foreign.insertMintAsset(assets)(assetName)($$int)();
                              };
                          };
                      })();
                      return $foreign.insertMintAssets(mint)(scripthash)(assets)();
                  };
              };
          })();
          return mint;
      };
  };
  var convertMIRToStakeCredentials = function (v) {
      return $foreign.newMIRToStakeCredentials(FfiHelpers.containerHelper)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
  };
  var convertMoveInstantaneousReward = function (v) {
      if (v instanceof Cardano_Types_Transaction.ToOtherPot) {
          return $foreign.newMoveInstantaneousRewardToOtherPot(v.value0.pot)(v.value0.amount);
      };
      if (v instanceof Cardano_Types_Transaction.ToStakeCreds) {
          return Control_Bind.bind(Effect.bindEffect)(convertMIRToStakeCredentials(v.value0.amounts))($foreign.newMoveInstantaneousRewardToStakeCreds(v.value0.pot));
      };
      throw new Error("Failed pattern match at Serialization (line 724, column 1 - line 725, column 65): " + [ v.constructor.name ]);
  };
  var convertExUnitPrices = function (v) {
      return Control_Bind.join(Effect.bindEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)($foreign.newExUnitPrices)(mkUnitInterval(v.memPrice)))(mkUnitInterval(v.stepPrice)));
  };
  var convertCostModel = function (v) {
      return function __do() {
          var costModel = $foreign.newCostModel();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_FoldableWithIndex.foldableWithIndexArray)(v)(function (operation) {
              return function (cost) {
                  return $foreign.costModelSetCost(costModel)(operation)(cost);
              };
          })();
          return costModel;
      };
  };
  var convertCostmdls = function (v) {
      return function __do() {
          var costmdls = $foreign.newCostmdls();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(v)(function (language) {
              return function (costModel) {
                  return function __do() {
                      var language$prime = (function () {
                          if (language instanceof Types_Scripts.PlutusV1) {
                              return $foreign.newPlutusV1();
                          };
                          if (language instanceof Types_Scripts.PlutusV2) {
                              return $foreign.newPlutusV2();
                          };
                          throw new Error("Failed pattern match at Serialization (line 854, column 18 - line 856, column 32): " + [ language.constructor.name ]);
                      })();
                      var costModel$prime = convertCostModel(costModel)();
                      return $foreign.costmdlsSetCostModel(costmdls)(language$prime)(costModel$prime)();
                  };
              };
          })();
          return costmdls;
      };
  };
  var convertProtocolParamUpdate = function (v) {
      return function __do() {
          var ppu = $foreign.newProtocolParamUpdate();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minfeeA)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetMinfeeA(ppu))((function () {
              var $136 = Helpers.fromJustEff("convertProtocolParamUpdate: min_fee_a must not be negative");
              var $137 = Data_Newtype.unwrap();
              return function ($138) {
                  return $136(Types_BigNum.fromBigInt($137($138)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minfeeB)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetMinfeeB(ppu))((function () {
              var $139 = Helpers.fromJustEff("convertProtocolParamUpdate: min_fee_b must not be negative");
              var $140 = Data_Newtype.unwrap();
              return function ($141) {
                  return $139(Types_BigNum.fromBigInt($140($141)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockBodySize)((function () {
              var $142 = $foreign.ppuSetMaxBlockBodySize(ppu);
              return function ($143) {
                  return $142(Data_UInt.toInt($143));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxTxSize)((function () {
              var $144 = $foreign.ppuSetMaxTxSize(ppu);
              return function ($145) {
                  return $144(Data_UInt.toInt($145));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockHeaderSize)((function () {
              var $146 = $foreign.ppuSetMaxBlockHeaderSize(ppu);
              return function ($147) {
                  return $146(Data_UInt.toInt($147));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.keyDeposit)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetKeyDeposit(ppu))((function () {
              var $148 = Helpers.fromJustEff("convertProtocolParamUpdate: key_deposit must not be negative");
              var $149 = Data_Newtype.unwrap();
              return function ($150) {
                  return $148(Types_BigNum.fromBigInt($149($150)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.poolDeposit)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetPoolDeposit(ppu))((function () {
              var $151 = Helpers.fromJustEff("convertProtocolParamUpdate: pool_deposit must not be negative");
              var $152 = Data_Newtype.unwrap();
              return function ($153) {
                  return $151(Types_BigNum.fromBigInt($152($153)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxEpoch)((function () {
              var $154 = $foreign.ppuSetMaxEpoch(ppu);
              var $155 = Data_Newtype.unwrap();
              return function ($156) {
                  return $154(Data_UInt.toInt($155($156)));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nOpt)((function () {
              var $157 = $foreign.ppuSetNOpt(ppu);
              return function ($158) {
                  return $157(Data_UInt.toInt($158));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.poolPledgeInfluence)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetPoolPledgeInfluence(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.expansionRate)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetExpansionRate(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.treasuryGrowthRate)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetTreasuryGrowthRate(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.protocolVersion)(function (pv) {
              return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.ppuSetProtocolVersion(ppu))($foreign.newProtocolVersion(Data_UInt.toInt(pv.major))(Data_UInt.toInt(pv.minor)));
          })();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minPoolCost)($foreign.ppuSetMinPoolCost(ppu))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.adaPerUtxoByte)($foreign.ppuSetAdaPerUtxoByte(ppu))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.costModels)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCostmdls)($foreign.ppuSetCostModels(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.executionCosts)(Control_Bind.composeKleisli(Effect.bindEffect)(convertExUnitPrices)($foreign.ppuSetExecutionCosts(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxTxExUnits)(Control_Bind.composeKleisli(Effect.bindEffect)(Serialization_WitnessSet.convertExUnits)($foreign.ppuSetMaxTxExUnits(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockExUnits)(Control_Bind.composeKleisli(Effect.bindEffect)(Serialization_WitnessSet.convertExUnits)($foreign.ppuSetMaxBlockExUnits(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxValueSize)((function () {
              var $159 = $foreign.ppuSetMaxValueSize(ppu);
              return function ($160) {
                  return $159(Data_UInt.toInt($160));
              };
          })())();
          return ppu;
      };
  };
  var convertProposedProtocolParameterUpdates = function (ppus) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newProposedProtocolParameterUpdates(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Newtype.unwrap()(ppus)))(function (v) {
          return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)($foreign.newGenesisHash(Data_Newtype.unwrap()(v.value0))))(convertProtocolParamUpdate(v.value1));
      }));
  };
  var convertUpdate = function (v) {
      return function __do() {
          var ppUpdates = convertProposedProtocolParameterUpdates(v.proposedProtocolParameterUpdates)();
          return $foreign.newUpdate(ppUpdates)(Data_UInt.toInt(Data_Newtype.unwrap()(v.epoch)))();
      };
  };
  var hashScriptData = function (cms) {
      return function (rs) {
          return function (ps) {
              return function __do() {
                  var rs$prime = $foreign.newRedeemers();
                  var cms$prime = convertCostmdls(cms)();
                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.addRedeemer(rs$prime))(Serialization_WitnessSet.convertRedeemer))(rs)();
                  if (ps.length === 0) {
                      return $foreign["_hashScriptDataNoDatums"](rs$prime)(cms$prime)();
                  };
                  return Control_Bind.bindFlipped(Effect.bindEffect)($foreign["_hashScriptData"](rs$prime)(cms$prime))(Helpers.fromJustEff("failed to convert datums")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Serialization_PlutusData.convertPlutusData)(ps)))();
              };
          };
      };
  };
  var convertCert = function (v) {
      if (v instanceof Cardano_Types_Transaction.StakeRegistration) {
          return $foreign.newStakeRegistrationCertificate(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.StakeDeregistration) {
          return $foreign.newStakeDeregistrationCertificate(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.StakeDelegation) {
          return $foreign.newStakeDelegationCertificate(v.value0)(v.value1);
      };
      if (v instanceof Cardano_Types_Transaction.PoolRegistration) {
          return function __do() {
              var margin$prime = $foreign.newUnitInterval(v.value0.margin.numerator)(v.value0.margin.denominator)();
              var poolOwners$prime = $foreign.convertPoolOwners(FfiHelpers.containerHelper)(v.value0.poolOwners)();
              var relays$prime = convertRelays(v.value0.relays)();
              var poolMetadata$prime = Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v.value0.poolMetadata)(convertPoolMetadata)();
              return $foreign.newPoolRegistrationCertificate(v.value0.operator)(v.value0.vrfKeyhash)(v.value0.pledge)(v.value0.cost)(margin$prime)(v.value0.rewardAccount)(poolOwners$prime)(relays$prime)(Untagged_Union.maybeToUor(poolMetadata$prime))();
          };
      };
      if (v instanceof Cardano_Types_Transaction.PoolRetirement) {
          return $foreign.newPoolRetirementCertificate(v.value0.poolKeyhash)(Data_UInt.toInt(Data_Newtype.unwrap()(v.value0.epoch)));
      };
      if (v instanceof Cardano_Types_Transaction.GenesisKeyDelegation) {
          return Control_Bind.join(Effect.bindEffect)(Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)($foreign.newGenesisKeyDelegationCertificate)($foreign.newGenesisHash(v.value0.genesisHash)))($foreign.newGenesisDelegateHash(v.value0.genesisDelegateHash)))(Control_Applicative.pure(Effect.applicativeEffect)(v.value0.vrfKeyhash)));
      };
      if (v instanceof Cardano_Types_Transaction.MoveInstantaneousRewardsCert) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMoveInstantaneousRewardsCertificate)(convertMoveInstantaneousReward(v.value0));
      };
      throw new Error("Failed pattern match at Serialization (line 676, column 15 - line 717, column 41): " + [ v.constructor.name ]);
  };
  var convertCerts = function (certs) {
      return function __do() {
          var certificates = $foreign.newCertificates();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCert)($foreign.addCert(certificates)))();
          return certificates;
      };
  };
  var convertTxBody = function (v) {
      return function __do() {
          var inputs = convertTxInputs(Data_Set.foldableSet)(v.inputs)();
          var outputs = convertTxOutputs(v.outputs)();
          var fee = Helpers.fromJustEff("Failed to convert fee")(Types_BigNum.fromBigInt(Data_Newtype.unwrap()(v.fee)))();
          var txBody = $foreign.newTransactionBody(inputs)(outputs)(fee)();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.ttl)((function () {
              var $161 = $foreign.setTxBodyTtl(txBody);
              var $162 = Data_Newtype.unwrap();
              return function ($163) {
                  return $161($162($163));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCerts)($foreign.setTxBodyCerts(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.withdrawals)(Control_Bind.composeKleisli(Effect.bindEffect)(convertWithdrawals)($foreign.setTxBodyWithdrawals(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.update)(Control_Bind.composeKleisli(Effect.bindEffect)(convertUpdate)($foreign.setTxBodyUpdate(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.auxiliaryDataHash)((function () {
              var $164 = $foreign.transactionBodySetAuxiliaryDataHash(txBody);
              var $165 = Data_Newtype.unwrap();
              return function ($166) {
                  return $164($165($166));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.validityStartInterval)((function () {
              var $167 = $foreign.transactionBodySetValidityStartInterval(txBody);
              var $168 = Data_Newtype.unwrap();
              return function ($169) {
                  return $167(Types_BigNum.fromStringUnsafe(Types_BigNum.toString($168($169))));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.requiredSigners)((function () {
              var $170 = $foreign.transactionBodySetRequiredSigners(FfiHelpers.containerHelper)(txBody);
              var $171 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
              return function ($172) {
                  return $170($171($172));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.auxiliaryDataHash)((function () {
              var $173 = $foreign.transactionBodySetAuxiliaryDataHash(txBody);
              var $174 = Data_Newtype.unwrap();
              return function ($175) {
                  return $173($174($175));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.networkId)(Control_Bind.composeKleisli(Effect.bindEffect)(convertNetworkId)($foreign.setTxBodyNetworkId(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.mint)(Control_Bind.composeKleisli(Effect.bindEffect)(convertMint)($foreign.setTxBodyMint(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.scriptDataHash)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
              var $176 = Data_Newtype.wrap();
              var $177 = Data_Newtype.unwrap();
              return function ($178) {
                  return $foreign.newScriptDataHashFromBytes($176($177($178)));
              };
          })())($foreign.setTxBodyScriptDataHash(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.collateral)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInputs(Data_Foldable.foldableArray))($foreign.setTxBodyCollateral(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.requiredSigners)((function () {
              var $179 = $foreign.transactionBodySetRequiredSigners(FfiHelpers.containerHelper)(txBody);
              var $180 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
              return function ($181) {
                  return $179($180($181));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.networkId)(Control_Bind.composeKleisli(Effect.bindEffect)(convertNetworkId)($foreign.setTxBodyNetworkId(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.collateralReturn)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxOutput)($foreign.setTxBodyCollateralReturn(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.totalCollateral)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
              var $182 = Helpers.fromJustEff("Failed to convert fee");
              var $183 = Data_Newtype.unwrap();
              return function ($184) {
                  return $182(Types_BigNum.fromBigInt($183($184)));
              };
          })())($foreign.setTxBodyTotalCollateral(txBody)))();
          (function () {
              var $122 = Data_Foldable["null"](Data_Set.foldableSet)(v.referenceInputs);
              if ($122) {
                  return Data_Unit.unit;
              };
              return Control_Bind.bind(Effect.bindEffect)(convertTxInputs(Data_Set.foldableSet)(v.referenceInputs))($foreign.setTxBodyReferenceInputs(txBody))();
          })();
          return txBody;
      };
  };
  var convertTransaction = function (v) {
      return function __do() {
          var txBody = convertTxBody(v.body)();
          var ws = Serialization_WitnessSet.convertWitnessSet(v.witnessSet)();
          var mbAuxiliaryData = Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v.auxiliaryData)(Serialization_AuxiliaryData.convertAuxiliaryData)();
          var tx = (function () {
              if (mbAuxiliaryData instanceof Data_Maybe.Nothing) {
                  return $foreign.newTransaction_(txBody)(ws)();
              };
              if (mbAuxiliaryData instanceof Data_Maybe.Just) {
                  return $foreign.newTransaction(txBody)(ws)(mbAuxiliaryData.value0)();
              };
              throw new Error("Failed pattern match at Serialization (line 556, column 11 - line 558, column 45): " + [ mbAuxiliaryData.constructor.name ]);
          })();
          $foreign.setTxIsValid(tx)(v.isValid)();
          return tx;
      };
  };
  exports["convertExUnitPrices"] = convertExUnitPrices;
  exports["convertTransaction"] = convertTransaction;
  exports["convertTxBody"] = convertTxBody;
  exports["convertTxOutput"] = convertTxOutput;
  exports["hashScriptData"] = hashScriptData;
  exports["privateKeyFromBytes"] = privateKeyFromBytes;
  exports["toBytes"] = $foreign.toBytes;
  exports["hashTransaction"] = $foreign.hashTransaction;
  exports["publicKeyHash"] = $foreign.publicKeyHash;
  exports["publicKeyFromPrivateKey"] = $foreign.publicKeyFromPrivateKey;
  exports["makeVkeywitness"] = $foreign.makeVkeywitness;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.UtxoMinAda"] = $PS["BalanceTx.UtxoMinAda"] || {};
  var exports = $PS["BalanceTx.UtxoMinAda"];
  var $foreign = $PS["BalanceTx.UtxoMinAda"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var Serialization = $PS["Serialization"];
  var Types_BigNum = $PS["Types.BigNum"];                
  var utxoMinAdaValue = function (coinsPerUtxoUnit) {
      return function (txOutput) {
          return function __do() {
              var cslTxOutput = Serialization.convertTxOutput(txOutput)();
              var dataCost = (function () {
                  if (coinsPerUtxoUnit instanceof QueryM_Ogmios.CoinsPerUtxoByte) {
                      return Data_Functor.map(Effect.functorEffect)($foreign.newCoinsPerByte)(Control_Monad_Error_Class.liftMaybe(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error("Failed to convert CoinsPerUtxoByte"))(Types_BigNum.fromBigInt(coinsPerUtxoUnit.value0)))();
                  };
                  if (coinsPerUtxoUnit instanceof QueryM_Ogmios.CoinsPerUtxoWord) {
                      return Data_Functor.map(Effect.functorEffect)($foreign.newCoinsPerWord)(Control_Monad_Error_Class.liftMaybe(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error("Failed to convert CoinsPerUtxoWord"))(Types_BigNum.fromBigInt(coinsPerUtxoUnit.value0)))();
                  };
                  throw new Error("Failed pattern match at BalanceTx.UtxoMinAda (line 36, column 15 - line 42, column 30): " + [ coinsPerUtxoUnit.constructor.name ]);
              })();
              return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.minAdaForOutput(FfiHelpers.maybeFfiHelper)(cslTxOutput)(dataCost))(Types_BigNum.toBigInt);
          };
      };
  };
  exports["utxoMinAdaValue"] = utxoMinAdaValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.Collateral.Select"] = $PS["BalanceTx.Collateral.Select"] || {};
  var exports = $PS["BalanceTx.Collateral.Select"];
  var BalanceTx_FakeOutput = $PS["BalanceTx.FakeOutput"];
  var BalanceTx_UtxoMinAda = $PS["BalanceTx.UtxoMinAda"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];                
  var CollateralCandidate = function (x) {
      return x;
  };
  var AdaOut = function (x) {
      return x;
  };
  var eqCollateralCandidate = {
      eq: Data_Function.on(Data_Eq.eq(Data_BigInt.eqBigInt))((function () {
          var $26 = Data_Newtype.unwrap();
          return function ($27) {
              return Data_Tuple.snd($26($27));
          };
      })())
  };
  var subsequences = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return new Data_List_Types.Cons(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
      };
      if (v instanceof Data_List_Types.Cons) {
          var subs = subsequences(v.value1);
          return Data_Semigroup.append(Data_List_Types.semigroupList)(Data_Functor.map(Data_List_Types.functorList)(Data_List_Types.Cons.create(v.value0))(subs))(subs);
      };
      throw new Error("Failed pattern match at BalanceTx.Collateral.Select (line 170, column 1 - line 170, column 60): " + [ v.constructor.name ]);
  };
  var nonAdaAsset = (function () {
      var $28 = Data_Newtype.unwrap();
      var $29 = Data_Newtype.unwrap();
      return function ($30) {
          return Cardano_Types_Value.getNonAdaAsset((function (v) {
              return v.amount;
          })($28((function (v) {
              return v.output;
          })($29($30)))));
      };
  })();
  var mkCollateralCandidate = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $31 = Data_Tuple.Tuple.create(v.value0);
          return function ($32) {
              return CollateralCandidate($31($32));
          };
      })())(v.value1);
  };
  var minRequiredCollateral = Data_BigInt.fromInt(5000000);
  var maxCandidateUtxos = 10;
  var combinations = function (k) {
      var $33 = Data_List.filter(function (x) {
          return Data_List.length(x) <= k && !Data_List["null"](x);
      });
      return function ($34) {
          return $33(subsequences($34));
      };
  };
  var collateralReturnMinAdaValue = function (coinsPerUtxoUnit) {
      var $35 = BalanceTx_UtxoMinAda.utxoMinAdaValue(coinsPerUtxoUnit);
      var $36 = Data_Foldable.foldMap(Data_List_Types.foldableList)(Cardano_Types_Value.monoidNonAdaAsset)(nonAdaAsset);
      return function ($37) {
          return $35(BalanceTx_FakeOutput.fakeOutputWithNonAdaAssets($36($37)));
      };
  };
  var asTxUnspentOutput = function (v) {
      return Data_Newtype.wrap()({
          input: v.value0,
          output: v.value1
      });
  };
  var adaValue = (function () {
      var $38 = Data_Newtype.unwrap();
      var $39 = Data_Newtype.unwrap();
      return function ($40) {
          return Cardano_Types_Value["valueToCoin'"]((function (v) {
              return v.amount;
          })($38((function (v) {
              return v.output;
          })($39($40)))));
      };
  })();
  var adaValue$prime = function (init) {
      var $41 = Data_Semiring.add(Data_BigInt.semiringBigInt)(init);
      return function ($42) {
          return $41(adaValue($42));
      };
  };
  var ordCollateralCandidate = {
      compare: function (lhs) {
          return function (rhs) {
              var caseEq = function (v) {
                  return function (v1) {
                      if (v instanceof Data_Ordering.EQ) {
                          return v1;
                      };
                      return v;
                  };
              };
              var byReturnOutMinAda = (function () {
                  var $43 = Data_Newtype.unwrap();
                  return function ($44) {
                      return Data_Tuple.snd($43($44));
                  };
              })();
              var byNumOfInputs = (function () {
                  var $45 = Data_Newtype.unwrap();
                  return function ($46) {
                      return Data_List.length(Data_Tuple.fst($45($46)));
                  };
              })();
              var byAdaValue = (function () {
                  var $47 = Data_Foldable.foldl(Data_List_Types.foldableList)(adaValue$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  var $48 = Data_Newtype.unwrap();
                  return function ($49) {
                      return $47(Data_Tuple.fst($48($49)));
                  };
              })();
              return caseEq(Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))(byReturnOutMinAda)(lhs)(rhs))(caseEq(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(byNumOfInputs)(lhs)(rhs))(Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))(byAdaValue)(lhs)(rhs)));
          };
      },
      Eq0: function () {
          return eqCollateralCandidate;
      }
  };
  var eqAdaOut = {
      eq: Data_Function.on(Data_Eq.eq(Data_BigInt.eqBigInt))((function () {
          var $50 = Data_Newtype.unwrap();
          return function ($51) {
              return adaValue($50($51));
          };
      })())
  };
  var ordAdaOut = {
      compare: Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))((function () {
          var $52 = Data_Newtype.unwrap();
          return function ($53) {
              return adaValue($52($53));
          };
      })()),
      Eq0: function () {
          return eqAdaOut;
      }
  };
  var selectCollateral = function (coinsPerUtxoUnit) {
      return function (maxCollateralInputs) {
          var $54 = Data_Functor.map(Effect.functorEffect)((function () {
              var $65 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                  var $68 = Data_Newtype.unwrap();
                  return function ($69) {
                      return Data_Tuple.fst($68($69));
                  };
              })());
              var $66 = Data_List.sort(ordCollateralCandidate);
              return function ($67) {
                  return $65(Data_List.head($66($67)));
              };
          })());
          var $55 = Data_Functor.map(Effect.functorEffect)(Data_List.mapMaybe(mkCollateralCandidate));
          var $56 = Data_Traversable.traverse(Data_List_Types.traversableList)(Effect.applicativeEffect)(function (x) {
              return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(x))(collateralReturnMinAdaValue(coinsPerUtxoUnit)(x));
          });
          var $57 = Data_List.filter(function (x) {
              return Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(Data_Foldable.foldl(Data_List_Types.foldableList)(adaValue$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(x))(minRequiredCollateral);
          });
          var $58 = combinations(maxCollateralInputs);
          var $59 = Data_List.take(maxCandidateUtxos);
          var $60 = Data_Functor.map(Data_List_Types.functorList)(Data_Newtype.unwrap());
          var $61 = Data_List.sortBy(function (lhs) {
              var $70 = Data_Ord.compare(ordAdaOut)(lhs);
              return function ($71) {
                  return Data_Ordering.invert($70($71));
              };
          });
          var $62 = Data_Functor.map(Data_List_Types.functorList)(function ($72) {
              return AdaOut(asTxUnspentOutput($72));
          });
          var $63 = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
          return function ($64) {
              return $54($55($56($57($58($59($60($61($62($63($64))))))))));
          };
      };
  };
  exports["minRequiredCollateral"] = minRequiredCollateral;
  exports["selectCollateral"] = selectCollateral;
})(PS);
(function(exports) {
  "use strict";

  function lengthImpl (str) {
    return Array.from(str).length;
  }

  function padEndPrimeImpl (targetLength, str) {
    return str.padEnd(targetLength);
  }                                                      
  exports.lengthImpl                 = lengthImpl;        
  exports.padEndPrimeImpl            = padEndPrimeImpl;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Utils"] = $PS["Data.String.Utils"] || {};
  var exports = $PS["Data.String.Utils"];
  var $foreign = $PS["Data.String.Utils"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var padEnd$prime = function (n) {
      return function (s) {
          return $foreign.padEndPrimeImpl(n, s);
      };
  };
  var padEnd = function (n) {
      return function (s) {
          var numberOfCodeUnits = Data_String_CodeUnits.length(s);
          var numberOfCodePoints = Data_String_CodePoints.length(s);
          return padEnd$prime((n + numberOfCodeUnits | 0) - numberOfCodePoints | 0)(s);
      };
  };                                     
  var length = function (dictWarn) {
      return function (s) {
          return $foreign.lengthImpl(s);
      };
  };
  exports["padEnd"] = padEnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var monadAffAff = {
      liftAff: Control_Category.identity(Control_Category.categoryFn),
      MonadEffect0: function () {
          return Effect_Aff.monadEffectAff;
      }
  };
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffReader = function (dictMonadAff) {
      return {
          liftAff: (function () {
              var $26 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
              var $27 = liftAff(dictMonadAff);
              return function ($28) {
                  return $26($27($28));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
          }
      };
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffReader"] = monadAffReader;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify'"] = modify$prime;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  const ReconnectingWebSocket = require("reconnecting-websocket");

  var WebSocket = (function () {
    function WebSocket(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    WebSocket.create = function (value0) {
        return function (value1) {
            return new WebSocket(value0, value1);
        };
    };
    return WebSocket;
})();

  let OurWebSocket;
  if (typeof BROWSER_RUNTIME == "undefined" || !BROWSER_RUNTIME) {
    OurWebSocket = require("ws");
  } else {
    OurWebSocket = WebSocket;
  }

  class NoPerMessageDeflateWebSocket extends OurWebSocket {
    constructor(url, protocols, options) {
      options = options || {};
      options.perMessageDeflate = false;
      super(url, protocols, options);
    }
  }

  exports._mkWebSocket = logger => url => () => {
    try {
      let ws;
      if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
        ws = new ReconnectingWebSocket.default(url);
      } else {
        ws = new ReconnectingWebSocket(url, [], {
          WebSocket: NoPerMessageDeflateWebSocket,
        });
      }
      logger("Created a new WebSocket")();
      return ws;
    } catch (e) {
      logger("Failed to create a new WebSocket");
      throw e;
    }
  };

  exports._onWsConnect = ws => fn => () => ws.addEventListener("open", fn);

  exports._onWsError = ws => fn => () => {
    const listener = function (event) {
      fn(event.toString())();
    };
    ws.addEventListener("error", listener);
    return listener;
  };

  exports._removeOnWsError = ws => listener => () =>
    ws.removeEventListener("error", listener);

  exports._onWsMessage = ws => logger => fn => () => {
    ws.addEventListener("message", function func(event) {
      const str = event.data;
      logger(`message: ${str}`)();
      fn(str)();
    });
  };

  exports._wsSend = ws => logger => str => () => {
    logger(`sending: ${str}`)();
    ws.send(str);
  };

  exports._wsReconnect = ws => () => {
    ws.reconnect();
  };

  exports._wsClose = ws => () => ws.close();
})(PS["JsWebSocket"] = PS["JsWebSocket"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["JsWebSocket"] = $PS["JsWebSocket"] || {};
  var exports = $PS["JsWebSocket"];
  var $foreign = $PS["JsWebSocket"];
  exports["_mkWebSocket"] = $foreign["_mkWebSocket"];
  exports["_onWsConnect"] = $foreign["_onWsConnect"];
  exports["_onWsError"] = $foreign["_onWsError"];
  exports["_removeOnWsError"] = $foreign["_removeOnWsError"];
  exports["_onWsMessage"] = $foreign["_onWsMessage"];
  exports["_wsSend"] = $foreign["_wsSend"];
  exports["_wsReconnect"] = $foreign["_wsReconnect"];
  exports["_wsClose"] = $foreign["_wsClose"];
})(PS);
(function(exports) {
  const base64 = require("base64-js");         

  exports.toByteArray = base64.toByteArray;

  exports._decodeBase64 = maybe => str => {
    try {
      return maybe.just(base64.toByteArray(str));
    } catch (_) {
      return maybe.nothing;
    }
  };
})(PS["Base64"] = PS["Base64"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Base64"] = $PS["Base64"] || {};
  var exports = $PS["Base64"];
  var $foreign = $PS["Base64"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var showBase64String = {
      show: function (str) {
          return "(fromByteArray " + (Data_Show.show(Types_ByteArray.showByteArray)($foreign.toByteArray(str)) + ")");
      }
  };
  var decodeBase64 = $foreign["_decodeBase64"](FfiHelpers.maybeFfiHelper);
  var mkBase64String = function (str) {
      return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(decodeBase64(str))(str);
  };
  var decodeAesonBase64String = {
      decodeAeson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonString)(json))((function () {
              var $8 = Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Base64String")))(Control_Applicative.pure(Data_Either.applicativeEither));
              return function ($9) {
                  return $8(mkBase64String($9));
              };
          })());
      }
  };
  exports["showBase64String"] = showBase64String;
  exports["decodeAesonBase64String"] = decodeAesonBase64String;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.DatumCacheWsp"] = $PS["QueryM.DatumCacheWsp"] || {};
  var exports = $PS["QueryM.DatumCacheWsp"];
  var Aeson = $PS["Aeson"];
  var Base64 = $PS["Base64"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Transaction = $PS["Types.Transaction"];
  var GetTxByHashR = function (x) {
      return x;
  };
  var GetDatumsByHashesR = function (x) {
      return x;
  };
  var GetDatumByHashR = function (x) {
      return x;
  };
  var GetDatumByHash = (function () {
      function GetDatumByHash() {

      };
      GetDatumByHash.value = new GetDatumByHash();
      return GetDatumByHash;
  })();
  var GetDatumsByHashes = (function () {
      function GetDatumsByHashes() {

      };
      GetDatumsByHashes.value = new GetDatumsByHashes();
      return GetDatumsByHashes;
  })();
  var GetTxByHash = (function () {
      function GetTxByHash() {

      };
      GetTxByHash.value = new GetTxByHash();
      return GetTxByHash;
  })();
  var genericGetTxByHashR_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGetTxByHashR = {
      show: Data_Show_Generic.genericShow(genericGetTxByHashR_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Base64.showBase64String)))({
          reflectSymbol: function () {
              return "GetTxByHashR";
          }
      }))
  };
  var genericGetDatumsByHashesR = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGetDatumsByHashesR = {
      show: Data_Show_Generic.genericShow(genericGetDatumsByHashesR)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Types_Transaction.showDataHash)(Types_Datum.showDatum)))({
          reflectSymbol: function () {
              return "GetDatumsByHashesR";
          }
      }))
  };
  var genericGetDatumByHashR_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showGetDatumByHashR = {
      show: Data_Show_Generic.genericShow(genericGetDatumByHashR_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Types_Datum.showDatum)))({
          reflectSymbol: function () {
              return "GetDatumByHashR";
          }
      }))
  };
  var decodeAesonGetTxByHashR = {
      decodeAeson: function (r) {
          return Data_Functor.map(Data_Either.functorEither)(GetTxByHashR)((function () {
              var txNotFound = Data_Functor.voidRight(Data_Either.functorEither)(Data_Maybe.Nothing.value)(Aeson.getNestedAeson(r)([ "TxNotFound" ]));
              var txFound = Control_Bind.bind(Data_Either.bindEither)(Aeson.getNestedAeson(r)([ "TxFound", "value", "raw" ]))(Aeson.decodeAeson(Aeson.decodeAesonMaybe(Base64.decodeAesonBase64String)));
              return Control_Alt.alt(Data_Either.altEither)(txFound)(txNotFound);
          })());
      }
  };
  var decodeAesonGetDatumsByHas = {
      decodeAeson: function (r) {
          var decodeDatum = Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("expected object")))(function (o) {
              return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Aeson.getField(Types_ByteArray.decodeAesonByteArray)(o)("hash"))))(Control_Bind.bindFlipped(Data_Either.bindEither)(Aeson.decodeAeson(Types_Datum.decodeAesonDatum))(Aeson.getField(Aeson.decodeAesonAeson)(o)("value")));
          });
          var decodeDatumArray = Aeson.caseAesonArray(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("expected array")))((function () {
              var $38 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(Types_Transaction.ordDataHash)(Data_Foldable.foldableArray));
              var $39 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodeDatum);
              return function ($40) {
                  return $38($39($40));
              };
          })());
          var datumsNotFound = Data_Functor.voidLeft(Data_Either.functorEither)(Aeson.getNestedAeson(r)([ "DatumsNotFound" ]))(Data_Map_Internal.empty);
          var datumsFound = Control_Bind.bindFlipped(Data_Either.bindEither)((function () {
              var $41 = Data_Functor.map(Data_Either.functorEither)(GetDatumsByHashesR);
              return function ($42) {
                  return $41(decodeDatumArray($42));
              };
          })())(Aeson.getNestedAeson(r)([ "DatumsFound", "value" ]));
          return Control_Alt.alt(Data_Either.altEither)(datumsFound)(datumsNotFound);
      }
  };
  var decodeAesonGetDatumByHash = {
      decodeAeson: function (r) {
          return Data_Functor.map(Data_Either.functorEither)(GetDatumByHashR)((function () {
              var datumNotFound = Data_Functor.voidRight(Data_Either.functorEither)(Data_Maybe.Nothing.value)(Aeson.getNestedAeson(r)([ "DatumNotFound" ]));
              var datumFound = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Control_Bind.bindFlipped(Data_Either.bindEither)(Aeson.decodeAeson(Types_Datum.decodeAesonDatum))(Aeson.getNestedAeson(r)([ "DatumFound", "value" ])));
              return Control_Alt.alt(Data_Either.altEither)(datumFound)(datumNotFound);
          })());
      }
  };
  var datumCacheMethodToString = function (v) {
      if (v instanceof GetDatumByHash) {
          return "GetDatumByHash";
      };
      if (v instanceof GetDatumsByHashes) {
          return "GetDatumsByHashes";
      };
      if (v instanceof GetTxByHash) {
          return "GetTxByHash";
      };
      throw new Error("Failed pattern match at QueryM.DatumCacheWsp (line 162, column 28 - line 165, column 31): " + [ v.constructor.name ]);
  };
  var mkDatumCacheCallType = function (dictEncodeAeson) {
      return function (method) {
          return function (args) {
              return QueryM_JsonWsp.mkCallType(dictEncodeAeson)({
                  type: "jsonwsp/request",
                  version: "1.0",
                  servicename: "ogmios"
              })({
                  methodname: datumCacheMethodToString(method),
                  args: args
              });
          };
      };
  };
  var getDatumByHashCall = mkDatumCacheCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "hash";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())(GetDatumByHash.value)((function () {
      var $43 = Data_Newtype.unwrap();
      return function ($44) {
          return (function (v) {
              return {
                  hash: v
              };
          })(Types_ByteArray.byteArrayToHex($43($44)));
      };
  })());
  var getTxByHash = mkDatumCacheCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "hash";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())(GetTxByHash.value)(function ($49) {
      return (function (v) {
          return {
              hash: v
          };
      })(Types_ByteArray.byteArrayToHex($49));
  });
  exports["getDatumByHashCall"] = getDatumByHashCall;
  exports["getTxByHash"] = getTxByHash;
  exports["showGetDatumByHashR"] = showGetDatumByHashR;
  exports["decodeAesonGetDatumByHash"] = decodeAesonGetDatumByHash;
  exports["showGetDatumsByHashesR"] = showGetDatumsByHashesR;
  exports["decodeAesonGetDatumsByHas"] = decodeAesonGetDatumsByHas;
  exports["showGetTxByHashR"] = showGetTxByHashR;
  exports["decodeAesonGetTxByHashR"] = decodeAesonGetTxByHashR;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.ServerConfig"] = $PS["QueryM.ServerConfig"] || {};
  var exports = $PS["QueryM.ServerConfig"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_UInt = $PS["Data.UInt"];                
  var mkServerUrl = function (protocol) {
      return function (cfg) {
          return (function () {
              if (cfg.secure) {
                  return protocol + "s";
              };
              return protocol;
          })() + ("://" + (cfg.host + (":" + (Data_UInt.toString(cfg.port) + Data_Maybe.maybe("")(function (v) {
              return "/" + v;
          })(cfg.path)))));
      };
  };
  var mkWsUrl = mkServerUrl("ws");
  var mkOgmiosDatumCacheWsUrl = function (cfg) {
      return mkWsUrl(cfg) + "/ws";
  };
  var mkHttpUrl = mkServerUrl("http");
  exports["mkHttpUrl"] = mkHttpUrl;
  exports["mkWsUrl"] = mkWsUrl;
  exports["mkOgmiosDatumCacheWsUrl"] = mkOgmiosDatumCacheWsUrl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Chain"] = $PS["Types.Chain"] || {};
  var exports = $PS["Types.Chain"];
  var TipAtGenesis = (function () {
      function TipAtGenesis() {

      };
      TipAtGenesis.value = new TipAtGenesis();
      return TipAtGenesis;
  })();
  var Tip = (function () {
      function Tip(value0) {
          this.value0 = value0;
      };
      Tip.create = function (value0) {
          return new Tip(value0);
      };
      return Tip;
  })();
  exports["TipAtGenesis"] = TipAtGenesis;
  exports["Tip"] = Tip;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.MultiMap"] = $PS["Types.MultiMap"] || {};
  var exports = $PS["Types.MultiMap"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var MultiMap = function (x) {
      return x;
  };
  var singleton = function (dictOrd) {
      return function (k) {
          return function (v) {
              return MultiMap(Data_Map_Internal.insert(dictOrd)(k)(Data_Array.singleton(v))(Data_Map_Internal.empty));
          };
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          return function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictOrd)(k)(v))(Data_Array.head);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              return function (v1) {
                  return MultiMap(Data_Map_Internal.insertWith(dictOrd)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(k)(Data_Array.singleton(v))(v1));
              };
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (v) {
              return MultiMap(Data_Map_Internal.update(dictOrd)((function () {
                  var $15 = Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                      return v1.tail;
                  });
                  return function ($16) {
                      return $15(Data_Array.uncons($16));
                  };
              })())(k)(v));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["lookup"] = lookup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.UsedTxOuts"] = $PS["Types.UsedTxOuts"] || {};
  var exports = $PS["Types.UsedTxOuts"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_UInt = $PS["Data.UInt"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Types_Transaction = $PS["Types.Transaction"];
  var UsedTxOuts = function (x) {
      return x;
  };
  var semigroupTxOutRefUnlockKe = {
      append: function (k1) {
          return function (k2) {
              return Data_Newtype.wrap()(Data_Map_Internal.unionWith(Types_Transaction.ordTransactionHash)(Data_Set.union(Data_UInt.uintOrd))(Data_Newtype.unwrap()(k1))(Data_Newtype.unwrap()(k2)));
          };
      }
  };
  var monoidTxOutRefUnlockKeys = {
      mempty: Data_Newtype.wrap()(Data_Map_Internal.empty),
      Semigroup0: function () {
          return semigroupTxOutRefUnlockKe;
      }
  };
  var unlockTxOutRefs = function (dictMonadAsk) {
      return function (dictMonadEffect) {
          return function (dictFoldable) {
              return function (txOutRefs$prime) {
                  var updateCache = function (cache) {
                      return Data_Foldable.foldr(dictFoldable)(function (v) {
                          return Data_Map_Internal.update(Types_Transaction.ordTransactionHash)((function () {
                              var $48 = Data_Set["delete"](Data_UInt.uintOrd)(v.index);
                              return function ($49) {
                                  return (function (s) {
                                      var $30 = Data_Set.isEmpty(s);
                                      if ($30) {
                                          return Data_Maybe.Nothing.value;
                                      };
                                      return new Data_Maybe.Just(s);
                                  })($48($49));
                              };
                          })())(v.transactionId);
                      })(cache)(txOutRefs$prime);
                  };
                  return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadAsk))((function () {
                      var $50 = Effect_Class.liftEffect(dictMonadEffect);
                      var $51 = Effect_Ref.modify_(updateCache);
                      var $52 = Data_Newtype.unwrap();
                      return function ($53) {
                          return $50($51($52($53)));
                      };
                  })());
              };
          };
      };
  };
  var txOutRefs = function (tx) {
      return Data_Set.map(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
          reflectSymbol: function () {
              return "transactionId";
          }
      })(Types_Transaction.ordTransactionHash))()({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_UInt.uintOrd)))(Data_Newtype.unwrap())((Data_Newtype.unwrap()((Data_Newtype.unwrap()(tx)).body)).inputs);
  };
  var unlockTransactionInputs = function (dictMonadAsk) {
      return function (dictMonadEffect) {
          var $60 = unlockTxOutRefs(dictMonadAsk)(dictMonadEffect)(Data_Set.foldableSet);
          return function ($61) {
              return $60(txOutRefs($61));
          };
      };
  };
  var newUsedTxOuts = function (dictMonadEffect) {
      return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(UsedTxOuts)(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Map_Internal.empty)));
  };
  var cacheContains = function (cache) {
      return function (v) {
          return Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Types_Transaction.ordTransactionHash)(v.transactionId)(cache))(function (indices) {
              return Control_Alternative.guard(Data_Maybe.alternativeMaybe)(Data_Set.member(Data_UInt.uintOrd)(v.index)(indices));
          }));
      };
  };
  var isTxOutRefUsed = function (dictMonadAsk) {
      return function (dictMonadEffect) {
          return function (ref) {
              return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Control_Bind.bindFlipped((dictMonadAsk.Monad0()).Bind1())((function () {
                  var $62 = Effect_Class.liftEffect(dictMonadEffect);
                  var $63 = Data_Newtype.unwrap();
                  return function ($64) {
                      return $62(Effect_Ref.read($63($64)));
                  };
              })())(Control_Monad_Reader_Class.ask(dictMonadAsk)))(function (cache) {
                  return Control_Applicative.pure((dictMonadAsk.Monad0()).Applicative0())(cacheContains(cache)(ref));
              });
          };
      };
  };
  var lockRemainingTransactionInputs = function (dictMonadAsk) {
      return function (dictMonadError) {
          return function (dictMonadEffect) {
              return function (alreadyLocked) {
                  return function (tx) {
                      var outRefs = Data_Set.filter(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "transactionId";
                          }
                      })(Types_Transaction.ordTransactionHash))()({
                          reflectSymbol: function () {
                              return "index";
                          }
                      })(Data_UInt.uintOrd)))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(cacheContains(Data_Newtype.unwrap()(alreadyLocked))))(txOutRefs(tx));
                      var isUnlocked = function (cache) {
                          return function (v) {
                              return Data_Maybe.maybe(true)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Set.member(Data_UInt.uintOrd)(v.index)))(Data_Map_Internal.lookup(Types_Transaction.ordTransactionHash)(v.transactionId)(cache));
                          };
                      };
                      var insertCache = function (v) {
                          return Data_Map_Internal.alter(Types_Transaction.ordTransactionHash)((function () {
                              var $65 = Data_Set.insert(Data_UInt.uintOrd)(v.index);
                              var $66 = Data_Maybe.fromMaybe(Data_Set.empty);
                              return function ($67) {
                                  return Data_Maybe.Just.create($65($66($67)));
                              };
                          })())(v.transactionId);
                      };
                      var refsToTxOut = Data_Foldable.foldr(Data_Set.foldableSet)(insertCache)(Data_Map_Internal.empty);
                      var updateCache = function (cache) {
                          if (Data_Foldable.all(Data_Set.foldableSet)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isUnlocked(cache))(outRefs)) {
                              return {
                                  state: Data_Foldable.foldr(Data_Set.foldableSet)(insertCache)(cache)(outRefs),
                                  value: true
                              };
                          };
                          if (Data_Boolean.otherwise) {
                              return {
                                  state: cache,
                                  value: false
                              };
                          };
                          throw new Error("Failed pattern match at Types.UsedTxOuts (line 95, column 5 - line 95, column 81): " + [ cache.constructor.name ]);
                      };
                      return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(Data_Newtype.unwrap())(Control_Monad_Reader_Class.ask(dictMonadAsk)))(function (cache) {
                          return Control_Bind.bind((dictMonadAsk.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["modify'"](updateCache)(cache)))(function (success) {
                              return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadAsk.Monad0()).Bind1())(Control_Applicative.unless((dictMonadAsk.Monad0()).Applicative0())(success)(Effect_Class.liftEffect(dictMonadEffect)(Effect_Exception["throw"]("Transaction inputs locked by another transaction"))))(function () {
                                  return Control_Applicative.pure((dictMonadAsk.Monad0()).Applicative0())(Data_Semigroup.append(semigroupTxOutRefUnlockKe)(Data_Newtype.wrap()(refsToTxOut(outRefs)))(alreadyLocked));
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var lockTransactionInputs = function (dictMonadAsk) {
      return function (dictMonadError) {
          return function (dictMonadEffect) {
              return lockRemainingTransactionInputs(dictMonadAsk)(dictMonadError)(dictMonadEffect)(Data_Monoid.mempty(monoidTxOutRefUnlockKeys));
          };
      };
  };
  exports["isTxOutRefUsed"] = isTxOutRefUsed;
  exports["lockTransactionInputs"] = lockTransactionInputs;
  exports["newUsedTxOuts"] = newUsedTxOuts;
  exports["unlockTransactionInputs"] = unlockTransactionInputs;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  const getIsWalletAvailableFunctionName = wallet => {
    const strs = {
      nami: "isNamiWalletAvailable",
      gerowallet: "isGeroWalletAvailable",
      flint: "isFlintWalletAvailable",
      LodeWallet: "isLodeWalletAvailable",
      eternl: "isEternlWalletAvailable",
    };

    return strs[wallet] || "is?WalletAvailable";
  };

  const wallets = {
    nami: "nami",
    flint: "flint",
    gero: "gerowallet",
    lode: "LodeWallet",
    eternl: "eternl",
  };

  const nodeEnvError = new Error(
    "`window` is not an object. Are you trying to run a Contract with" +
      " connected light wallet in NodeJS environment?")
   ;

  const checkNotNode = () => {
    if (typeof window != "object") {
      throw nodeEnvError;
    }
  };

  const enableWallet = wallet => () => {
    const isAvailable = isWalletAvailable(wallet)();
    if (isAvailable) {
      return window.cardano[wallet].enable().catch(e => {
        throw new Error(
          "enableWallet failed: " +
            (typeof e.info == "string" ? e.info : e.toString()))
         ;
      });
    } else {
      throw new Error(
        "Wallet is not available. Use `" +
          getIsWalletAvailableFunctionName(wallet) +
          "` before connecting.")
       ;
    }
  };

  exports._enableNami = enableWallet(wallets.nami);
  exports._enableGero = enableWallet(wallets.gero);
  exports._enableFlint = enableWallet(wallets.flint);
  exports._enableLode = enableWallet(wallets.lode);
  exports._enableEternl = enableWallet(wallets.eternl);

  const isWalletAvailable = walletName => () => {
    checkNotNode();
    return (
      typeof window.cardano != "undefined" &&
      typeof window.cardano[walletName] != "undefined" &&
      typeof window.cardano[walletName].enable == "function"
    );
  };                                                           
  exports._isLodeAvailable = isWalletAvailable(wallets.lode);
})(PS["Wallet"] = PS["Wallet"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  exports._getAddresses = conn => conn.getUsedAddresses;

  exports._getCollateral = maybe => conn => () =>
    conn.experimental.getCollateral().then(utxos => {
      return utxos.length ? maybe.just(utxos) : maybe.nothing;
    });

  exports._signTx = txHex => conn => () => {
    return conn.signTx(txHex, true).catch(e => {
      console.log("Error in signTx: ", e);
      throw JSON.stringify(e);
    });
  };

  exports._getBalance = conn => () => conn.getBalance();

  exports._getUtxos = maybe => conn => () =>
    conn.getUtxos().then(res => (res === null ? maybe.nothing : maybe.just(res)));
})(PS["Wallet.Cip30"] = PS["Wallet.Cip30"] || {});
(function(exports) {
  // module Control.Promise

  exports.promise = function (f) {
    return function () {
      return new Promise(function (success, error) {
        var succF = function (s) { return function() { return success(s); } };
        var failF = function (s) { return function() { return error(s); } };

        // This indicates the aff was wrong?
        try { f(succF)(failF)(); }
        catch (e) {
          error(e);
        }
      });
    };
  };

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Promise"] = $PS["Control.Promise"] || {};
  var exports = $PS["Control.Promise"];
  var $foreign = $PS["Control.Promise"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var toAff$prime = function (customCoerce) {
      return function (p) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                  return cb(Data_Either.Left.create(customCoerce($1)))();
              })(function ($2) {
                  return cb(Data_Either.Right.create($2))();
              }));
          });
      };
  };
  var fromAff = function (aff) {
      return $foreign.promise(function (succ) {
          return function (err) {
              return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
          };
      });
  };
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
  };
  var toAff = toAff$prime(coerce);
  var toAffE = function (f) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
  };
  exports["fromAff"] = fromAff;
  exports["toAffE"] = toAffE;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const call = property => object => object[property]();
  const callMaybe = property => maybe => object => {
    const res = object[property]();
    return res != null ? maybe.just(res) : maybe.nothing;
  };

  // Classes like TransactionInputs are just monomorphic containers with `len`
  // and `get()` methods. This function abstracts away converting them to Array
  // of something.
  const containerExtractor = obj => {
    const res = [];

    for (let i = 0; i < obj.len(); i++) {
      res.push(obj.get(i));
    }

    return res;
  };

  // Dictionary wrappers share the same interface (with functions keys() and
  // get(k)).
  const extractDict = tuple => dict => {
    const keys = containerExtractor(dict.keys());
    const res = [];
    for (let key of keys) {
      // We assume that something that is in keys() is always present in the
      // structure as well.
      res.push(tuple(key)(dict.get(key)));
    }
    return res;
  };

  exports.getInput = call("input");
  exports.getOutput = call("output");
  exports.getTransactionHash = call("transaction_id");
  exports.getTransactionIndex = call("index");
  exports.getAddress = call("address");
  exports.getPlutusData = callMaybe("plutus_data");
  exports.getScriptRef = callMaybe("script_ref");
  exports.withScriptRef = ccNativeScript => ccPlutusScript => scriptRef => {
    if (scriptRef.is_native_script()) {
      return ccNativeScript(scriptRef.native_script());
    } else if (scriptRef.is_plutus_script()) {
      return ccPlutusScript(scriptRef.plutus_script());
    } else {
      throw "Impossible happened: withScriptRef: not a script";
    }
  };

  exports.getAmount = call("amount");
  exports.getCoin = call("coin");
  exports.getMultiAsset = callMaybe("multiasset");
  exports.extractMultiAsset = extractDict;
  exports.extractAssets = extractDict;
  exports.getDataHash = callMaybe("data_hash");
})(PS["Deserialization.UnspentOutput"] = PS["Deserialization.UnspentOutput"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  const getNativeScriptAs = prop => maybe => ns => {
    const res = ns[prop]();
    return res == null ? maybe.nothing : maybe.just(res);
  };

  const call = property => object => object[property]();

  exports.getScriptPubkey = getNativeScriptAs("as_script_pubkey");
  exports.getScriptAll = getNativeScriptAs("as_script_all");
  exports.getScriptAny = getNativeScriptAs("as_script_any");
  exports.getScriptNOfK = getNativeScriptAs("as_script_n_of_k");
  exports.getTimelockStart = getNativeScriptAs("as_timelock_start");
  exports.getTimelockExpiry = getNativeScriptAs("as_timelock_expiry");
  exports.scriptPubkey_addr_keyhash = call("addr_keyhash");
  exports.scriptAllScripts = helper =>
    helper.unpackFromProperty("native_scripts");
  exports.scriptAnyScripts = helper =>
    helper.unpackFromProperty("native_scripts");
  exports.scriptNOfKScripts = helper =>
    helper.unpackFromProperty("native_scripts");
  exports.scriptNOfK_n = call("n");
  exports.timelockStart_slot = call("slot_bignum");
  exports.timelockExpiry_slot = call("slot_bignum");
})(PS["Deserialization.NativeScript"] = PS["Deserialization.NativeScript"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.NativeScript"] = $PS["Deserialization.NativeScript"] || {};
  var exports = $PS["Deserialization.NativeScript"];
  var $foreign = $PS["Deserialization.NativeScript"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var convertTimelockStart = (function () {
      var $0 = Data_Functor.map(Data_Maybe.functorMaybe)(function ($3) {
          return Cardano_Types_NativeScript.TimelockStart.create(Serialization_Address.Slot($foreign.timelockStart_slot($3)));
      });
      var $1 = $foreign.getTimelockStart(FfiHelpers.maybeFfiHelper);
      return function ($2) {
          return $0($1($2));
      };
  })();
  var convertTimelockExpiry = (function () {
      var $4 = Data_Functor.map(Data_Maybe.functorMaybe)(function ($7) {
          return Cardano_Types_NativeScript.TimelockExpiry.create(Serialization_Address.Slot($foreign.timelockExpiry_slot($7)));
      });
      var $5 = $foreign.getTimelockExpiry(FfiHelpers.maybeFfiHelper);
      return function ($6) {
          return $4($5($6));
      };
  })();
  var convertScriptPubKey = function (ns) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($8) {
          return Cardano_Types_NativeScript.ScriptPubkey.create($foreign.scriptPubkey_addr_keyhash($8));
      })($foreign.getScriptPubkey(FfiHelpers.maybeFfiHelper)(ns));
  };
  var convertScriptNOfK = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptNOfK(FfiHelpers.maybeFfiHelper)(ns))(function (scriptNOfK) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptNOfKScripts(FfiHelpers.containerHelper)(scriptNOfK)))(function (res) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Cardano_Types_NativeScript.ScriptNOfK($foreign.scriptNOfK_n(scriptNOfK), res));
          });
      });
  };
  var convertScriptAny = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptAny(FfiHelpers.maybeFfiHelper)(ns))(function (scriptAny) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_NativeScript.ScriptAny.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptAnyScripts(FfiHelpers.containerHelper)(scriptAny)));
      });
  };
  var convertScriptAll = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptAll(FfiHelpers.maybeFfiHelper)(ns))(function (scriptAll) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_NativeScript.ScriptAll.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptAllScripts(FfiHelpers.containerHelper)(scriptAll)));
      });
  };
  var convertNativeScript = function (ns) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(convertScriptPubKey(ns))(convertScriptAll(ns)))(convertScriptAny(ns)))(convertScriptNOfK(ns)))(convertTimelockStart(ns)))(convertTimelockExpiry(ns));
  };
  exports["convertNativeScript"] = convertNativeScript;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  const plutusDataAs = what => helper => data => {
    const res = data["as_" + what]();
    return res == null ? helper.nothing : helper.just(res);
  };

  exports._PlutusData_constr = plutusDataAs("constr_plutus_data");
  exports._PlutusData_map = plutusDataAs("map");
  exports._PlutusData_list = plutusDataAs("list");
  exports._PlutusData_integer = plutusDataAs("integer");
  exports._PlutusData_bytes = plutusDataAs("bytes");
  exports._unpackPlutusList = containerHelper => containerHelper.unpack;
  exports._ConstrPlutusData_alternative = x => x.alternative();
  exports._ConstrPlutusData_data = x => x.data();

  exports._unpackPlutusMap = containerHelper => tuple => plutusMap => {
    const keys = containerHelper.unpack(plutusMap.keys());
    const res = [];
    for (let key of keys) {
      // Assuming that `PlutusMap.get()` never fails on elements from result of
      // its `.keys()` call.
      res.push(tuple(key)(plutusMap.get(key)));
    }
    return res;
  };
})(PS["Deserialization.PlutusData"] = PS["Deserialization.PlutusData"] || {});
(function(exports) {
  exports._BigInt_to_str = x => x.to_str();
})(PS["Deserialization.BigInt"] = PS["Deserialization.BigInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.BigInt"] = $PS["Deserialization.BigInt"] || {};
  var exports = $PS["Deserialization.BigInt"];
  var $foreign = $PS["Deserialization.BigInt"];
  var Data_BigInt = $PS["Data.BigInt"];                
  var convertBigInt = function ($0) {
      return Data_BigInt.fromString($foreign["_BigInt_to_str"]($0));
  };
  exports["convertBigInt"] = convertBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.PlutusData"] = $PS["Deserialization.PlutusData"] || {};
  var exports = $PS["Deserialization.PlutusData"];
  var $foreign = $PS["Deserialization.PlutusData"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Deserialization_BigInt = $PS["Deserialization.BigInt"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var convertPlutusInteger = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.Integer.create)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_integer"](FfiHelpers.maybeFfiHelper)(pd))(Deserialization_BigInt.convertBigInt));
  };
  var convertPlutusBytes = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.Bytes.create)($foreign["_PlutusData_bytes"](FfiHelpers.maybeFfiHelper)(pd));
  };
  var convertPlutusMap = function (pd) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_map"](FfiHelpers.maybeFfiHelper)(pd))((function () {
          var $5 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value0))(function (k$prime) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value1))(function (v$prime) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(k$prime, v$prime));
                  });
              });
          });
          var $6 = $foreign["_unpackPlutusMap"](FfiHelpers.containerHelper)(Data_Tuple.Tuple.create);
          return function ($7) {
              return $5($6($7));
          };
      })()))(function (entries) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Types_PlutusData["Map"](entries));
      });
  };
  var convertPlutusList = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.List.create)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_list"](FfiHelpers.maybeFfiHelper)(pd))((function () {
          var $8 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData);
          var $9 = $foreign["_unpackPlutusList"](FfiHelpers.containerHelper);
          return function ($10) {
              return $8($9($10));
          };
      })()));
  };
  var convertPlutusData = function (pd) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(convertPlutusConstr(pd))(convertPlutusMap(pd)))(convertPlutusList(pd)))(convertPlutusInteger(pd)))(convertPlutusBytes(pd));
  };
  var convertPlutusConstr = function (pd) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_constr"](FfiHelpers.maybeFfiHelper)(pd))(function (constr) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData)($foreign["_unpackPlutusList"](FfiHelpers.containerHelper)($foreign["_ConstrPlutusData_data"](constr))))(function (data$prime) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt($foreign["_ConstrPlutusData_alternative"](constr)))(function (alt) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Types_PlutusData.Constr(alt, data$prime));
              });
          });
      });
  };
  exports["convertPlutusData"] = convertPlutusData;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const call = property => object => object[property]();

  const callMaybe = property => maybe => object => {
    const res = object[property]();
    return res != null ? maybe.just(res) : maybe.nothing;
  };

  // Classes like TransactionInputs are just monomorphic containers with `len`
  // and `get()` methods. This function abstracts away converting them to Array
  // of something.
  const containerExtractor = obj => {
    const res = [];

    for (let i = 0; i < obj.len(); i++) {
      res.push(obj.get(i));
    }

    return res;
  };

  exports.getVkeywitnesses = callMaybe("vkeys");
  exports.extractWitnesses = containerExtractor;
  exports.getVkey = call("vkey");
  exports.getSignature = call("signature");
  exports.vkeyPublicKey = call("public_key");
  exports.publicKeyToBech32 = call("to_bech32");
  exports.signatureToBech32 = call("to_bech32");
  exports.getNativeScripts = callMaybe("native_scripts");
  exports.extractNativeScripts = containerExtractor;     
  exports.getBootstraps = callMaybe("bootstraps");
  exports.extractBootstraps = containerExtractor;
  exports.getBootstrapVkey = call("vkey");
  exports.getBootstrapSignature = call("signature");
  exports.getBootstrapChainCode = call("chain_code");
  exports.getBootstrapAttributes = call("attributes");
  exports.getPlutusScripts = callMaybe("plutus_scripts");
  exports.extractPlutusScripts = containerExtractor;
  exports.plutusScriptBytes = call("bytes");
  exports.plutusScriptVersion = call("language_version");
  exports.getWitnessSetPlutusData = callMaybe("plutus_data");
  exports.extractPlutusData = containerExtractor;
  exports.getRedeemers = callMaybe("redeemers");
  exports.getRedeemerTag = call("tag");
  exports.getRedeemerIndex = call("index");
  exports.extractRedeemers = containerExtractor;
  exports.getRedeemerTagKind = call("kind");
  exports.getRedeemerPlutusData = call("data");
  exports.getExUnits = call("ex_units");
  exports.getExUnitsMem = call("mem");
  exports.getExUnitsSteps = call("steps");
})(PS["Deserialization.WitnessSet"] = PS["Deserialization.WitnessSet"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  // foreign import _convertLanguage
  //   :: forall r.ErrorFfiHelper r -> { plutusV1 :: Language, plutusV2 :: Language } -> CSL.Language -> E r Language
  exports._convertLanguage = errorHelper => langCtors => cslLang => {
    try {
      if (cslLang.kind() == lib.LanguageKind.PlutusV1) {
        return errorHelper.valid(langCtors.plutusV1);
      } else if (cslLang.kind() == lib.LanguageKind.PlutusV2) {
        return errorHelper.valid(langCtors.plutusV2);
      } else {
        return errorHelper.error(
          "_convertLanguage: Unsupported language kind: " + cslLang.kind()
        );
      }
    } catch (e) {
      return errorHelper.error("_convertLanguage raised: " + e);
    }
  };
})(PS["Deserialization.Language"] = PS["Deserialization.Language"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.Error"] = $PS["Deserialization.Error"] || {};
  var exports = $PS["Deserialization.Error"];
  var Type_Proxy = $PS["Type.Proxy"];
  var _fromCslRepError = Type_Proxy["Proxy"].value;
  exports["_fromCslRepError"] = _fromCslRepError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.Language"] = $PS["Deserialization.Language"] || {};
  var exports = $PS["Deserialization.Language"];
  var $foreign = $PS["Deserialization.Language"];
  var Data_Variant = $PS["Data.Variant"];
  var Deserialization_Error = $PS["Deserialization.Error"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var convertLanguage = $foreign["_convertLanguage"](FfiHelpers.errorHelper(Data_Variant.inj()({
      reflectSymbol: function () {
          return "fromCslRepError";
      }
  })(Deserialization_Error["_fromCslRepError"])))({
      plutusV1: Types_Scripts.PlutusV1.value,
      plutusV2: Types_Scripts.PlutusV2.value
  });
  exports["convertLanguage"] = convertLanguage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.WitnessSet"] = $PS["Deserialization.WitnessSet"] || {};
  var exports = $PS["Deserialization.WitnessSet"];
  var $foreign = $PS["Deserialization.WitnessSet"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Deserialization_Language = $PS["Deserialization.Language"];
  var Deserialization_NativeScript = $PS["Deserialization.NativeScript"];
  var Deserialization_PlutusData = $PS["Deserialization.PlutusData"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];                                                 
  var convertVkey = function ($2) {
      return Cardano_Types_Transaction.Vkey(Cardano_Types_Transaction.PublicKey($foreign.publicKeyToBech32($foreign.vkeyPublicKey($2))));
  };
  var convertSignature = function ($3) {
      return Cardano_Types_Transaction.Ed25519Signature($foreign.signatureToBech32($3));
  };
  var convertVkeyWitness = function (witness) {
      var vkey = $foreign.getVkey(witness);
      var signature = convertSignature($foreign.getSignature(witness));
      var publicKey = convertVkey(vkey);
      return Cardano_Types_Transaction.Vkeywitness(new Data_Tuple.Tuple(publicKey, signature));
  };
  var convertVkeyWitnesses = (function () {
      var $4 = Data_Functor.map(Data_Functor.functorArray)(convertVkeyWitness);
      return function ($5) {
          return $4($foreign.extractWitnesses($5));
      };
  })();
  var convertRedeemerTag = function (tag) {
      var v = $foreign.getRedeemerTagKind(tag);
      if (v === 0) {
          return new Data_Maybe.Just(Types_RedeemerTag.Spend.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Types_RedeemerTag.Mint.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Types_RedeemerTag.Cert.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Types_RedeemerTag.Reward.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var convertPlutusScript = function (plutusScript) {
      return Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Deserialization_Language.convertLanguage($foreign.plutusScriptVersion(plutusScript)))(function (language) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Tuple.curry(Types_Scripts.PlutusScript)($foreign.plutusScriptBytes(plutusScript))(language));
      }));
  };
  var convertPlutusScripts = function (plutusScripts) {
      return Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)($foreign.extractPlutusScripts(plutusScripts))(convertPlutusScript);
  };
  var convertPlutusList = (function () {
      var $6 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Deserialization_PlutusData.convertPlutusData);
      return function ($7) {
          return $6($foreign.extractPlutusData($7));
      };
  })();
  var convertNativeScripts = function (nativeScripts) {
      return Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)($foreign.extractNativeScripts(nativeScripts))(Deserialization_NativeScript.convertNativeScript);
  };
  var convertExUnits = function (eu) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt($foreign.getExUnitsMem(eu)))(function (mem) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt($foreign.getExUnitsSteps(eu)))(function (steps) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  mem: mem,
                  steps: steps
              });
          });
      });
  };
  var convertRedeemer = function (redeemer) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertRedeemerTag($foreign.getRedeemerTag(redeemer)))(function (tag) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt($foreign.getRedeemerIndex(redeemer)))(function (index) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertExUnits($foreign.getExUnits(redeemer)))(function (exUnits) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_PlutusData.convertPlutusData($foreign.getRedeemerPlutusData(redeemer)))(function (data_) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          tag: tag,
                          index: index,
                          data: data_,
                          exUnits: exUnits
                      });
                  });
              });
          });
      });
  };
  var convertRedeemers = (function () {
      var $8 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertRedeemer);
      return function ($9) {
          return $8($foreign.extractRedeemers($9));
      };
  })();
  var convertBootstraps = (function () {
      var $10 = Data_Functor.map(Data_Functor.functorArray)(function (bootstrap) {
          return {
              vkey: convertVkey($foreign.getBootstrapVkey(bootstrap)),
              signature: convertSignature($foreign.getBootstrapSignature(bootstrap)),
              chainCode: $foreign.getBootstrapChainCode(bootstrap),
              attributes: $foreign.getBootstrapAttributes(bootstrap)
          };
      });
      return function ($11) {
          return $10($foreign.extractBootstraps($11));
      };
  })();
  var convertWitnessSet = function (ws) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getNativeScripts(FfiHelpers.maybeFfiHelper)(ws))(convertNativeScripts))(function (nativeScripts) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getRedeemers(FfiHelpers.maybeFfiHelper)(ws))(convertRedeemers))(function (redeemers) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getWitnessSetPlutusData(FfiHelpers.maybeFfiHelper)(ws))(convertPlutusList))(function (plutusData) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getPlutusScripts(FfiHelpers.maybeFfiHelper)(ws))(convertPlutusScripts))(function (plutusScripts) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          vkeys: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getVkeywitnesses(FfiHelpers.maybeFfiHelper)(ws))(convertVkeyWitnesses),
                          nativeScripts: nativeScripts,
                          bootstraps: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getBootstraps(FfiHelpers.maybeFfiHelper)(ws))(convertBootstraps),
                          plutusScripts: plutusScripts,
                          plutusData: plutusData,
                          redeemers: redeemers
                      });
                  });
              });
          });
      });
  };
  exports["convertPlutusScript"] = convertPlutusScript;
  exports["convertVkeyWitness"] = convertVkeyWitness;
  exports["convertWitnessSet"] = convertWitnessSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.UnspentOutput"] = $PS["Deserialization.UnspentOutput"] || {};
  var exports = $PS["Deserialization.UnspentOutput"];
  var $foreign = $PS["Deserialization.UnspentOutput"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Deserialization_NativeScript = $PS["Deserialization.NativeScript"];
  var Deserialization_PlutusData = $PS["Deserialization.PlutusData"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Untagged_Union = $PS["Untagged.Union"];                                                                             
  var convertValue = function (value) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt($foreign.getCoin(value)))(function (coin) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getMultiAsset(FfiHelpers.maybeFfiHelper)(value))(function (multiasset) {
              var multiasset$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)($foreign.extractAssets(Data_Tuple.Tuple.create)))($foreign.extractMultiAsset(Data_Tuple.Tuple.create)(multiasset));
              return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                  var $8 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray));
                  var $9 = (function () {
                      var $11 = Data_Functor.map(Data_Maybe.functorMaybe);
                      var $12 = Data_Functor.map(Data_Functor.functorArray);
                      return function ($13) {
                          return $11($12($13));
                      };
                  })()(Data_Functor.map(Data_Tuple.functorTuple)(Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray)));
                  return function ($10) {
                      return $8($9($10));
                  };
              })()(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)((function () {
                  var $14 = Data_Newtype.unwrap();
                  return function ($15) {
                      return Cardano_Types_Value.mkCurrencySymbol($14(Serialization_Hash.scriptHashToBytes($15)));
                  };
              })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(function ($16) {
                  return Types_TokenName.mkTokenName(Types_TokenName.assetNameName($16));
              }))))(multiasset$prime)))(function (v) {
                  return Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Types_BigNum.toBigInt))(v);
              });
          }))(function (multiasset) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Cardano_Types_Value.mkValue(coin)(Cardano_Types_Value.mkNonAdaAsset(Data_Maybe.fromMaybe(Data_Map_Internal.empty)(multiasset))));
          });
      });
  };
  var convertScriptRef = $foreign.withScriptRef((function () {
      var $17 = Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_ScriptRef.NativeScriptRef.create);
      return function ($18) {
          return $17(Deserialization_NativeScript.convertNativeScript($18));
      };
  })())((function () {
      var $19 = Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_ScriptRef.PlutusScriptRef.create);
      return function ($20) {
          return $19(Deserialization_WitnessSet.convertPlutusScript($20));
      };
  })());
  var convertOutput = function (output) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertValue($foreign.getAmount(output)))(function (amount) {
          var mbDatum = $foreign.getPlutusData(FfiHelpers.maybeFfiHelper)(output);
          var mbDataHash = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getDataHash(FfiHelpers.maybeFfiHelper)(output))((function () {
              var $21 = Untagged_Union.asOneOf();
              return function ($22) {
                  return Types_Transaction.DataHash(Serialization.toBytes($21($22)));
              };
          })());
          var address = $foreign.getAddress(output);
          return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
              if (mbDatum instanceof Data_Maybe.Just && mbDataHash instanceof Data_Maybe.Just) {
                  return Data_Maybe.Nothing.value;
              };
              if (mbDatum instanceof Data_Maybe.Just && mbDataHash instanceof Data_Maybe.Nothing) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $23 = Data_Newtype.wrap();
                      return function ($24) {
                          return Types_OutputDatum.OutputDatum.create($23($24));
                      };
                  })())(Deserialization_PlutusData.convertPlutusData(mbDatum.value0));
              };
              if (mbDatum instanceof Data_Maybe.Nothing && mbDataHash instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Types_OutputDatum.OutputDatumHash(mbDataHash.value0));
              };
              if (mbDatum instanceof Data_Maybe.Nothing && mbDataHash instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Types_OutputDatum.NoOutputDatum.value);
              };
              throw new Error("Failed pattern match at Deserialization.UnspentOutput (line 95, column 12 - line 100, column 43): " + [ mbDatum.constructor.name, mbDataHash.constructor.name ]);
          })())(function (datum) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Maybe.applicativeMaybe)(convertScriptRef)($foreign.getScriptRef(FfiHelpers.maybeFfiHelper)(output)))(function (scriptRef) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                      address: address,
                      amount: amount,
                      datum: datum,
                      scriptRef: scriptRef
                  });
              });
          });
      });
  };
  var convertInput = function (input) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_UInt["fromInt'"]($foreign.getTransactionIndex(input)))(function (index) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
              transactionId: Types_Transaction.TransactionHash(Serialization.toBytes(Untagged_Union.asOneOf()($foreign.getTransactionHash(input)))),
              index: index
          });
      });
  };
  var convertUnspentOutput = function (tuo) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertInput($foreign.getInput(tuo)))(function (input) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(convertOutput($foreign.getOutput(tuo)))(function (output) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  input: input,
                  output: output
              });
          });
      });
  };
  exports["convertUnspentOutput"] = convertUnspentOutput;
  exports["convertValue"] = convertValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Wallet.Cip30"] = $PS["Wallet.Cip30"] || {};
  var exports = $PS["Wallet.Cip30"];
  var $foreign = $PS["Wallet.Cip30"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Deserialization_UnspentOutput = $PS["Deserialization.UnspentOutput"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var txToHex = (function () {
      var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $12 = Data_Functor.map(Effect.functorEffect)((function () {
          var $14 = Untagged_Union.asOneOf();
          return function ($15) {
              return Types_ByteArray.byteArrayToHex(Serialization.toBytes($14($15)));
          };
      })());
      return function ($13) {
          return $11($12(Serialization.convertTransaction($13)));
      };
  })();
  var getWalletAddresses = function (conn) {
      return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Promise.toAffE($foreign["_getAddresses"](conn)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($16) {
          return Serialization_Address.addressFromBytes(Types_CborBytes.rawBytesAsCborBytes($16));
      })(Types_RawBytes.hexToRawBytes)));
  };
  var getUtxos = function (conn) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Promise.toAffE($foreign["_getUtxos"](FfiHelpers.maybeFfiHelper)(conn)))(function (mArrayStr) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(mArrayStr)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (str) {
              return Control_Monad_Error_Class.liftMaybe(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error("Unable to convert UTxO"))(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Types_RawBytes.hexToRawBytes(str))((function () {
                  var $17 = Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesTransactionUnspe);
                  var $18 = Data_Newtype.unwrap();
                  return function ($19) {
                      return $17($18($19));
                  };
              })()))(Deserialization_UnspentOutput.convertUnspentOutput));
          })));
      });
  };
  var getCip30Collateral = (function () {
      var $20 = Data_Function.flip(Control_Monad_Error_Class.catchError(Control_Monad_Error_Class.monadErrorEffect))(function (v) {
          return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(Effect_Exception.error("Wallet doesn't implement `getCollateral`."));
      });
      var $21 = $foreign["_getCollateral"](FfiHelpers.maybeFfiHelper);
      return function ($22) {
          return $20($21($22));
      };
  })();
  var getCollateral = function (conn) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Promise.toAffE(getCip30Collateral(conn)))(function (mbUtxoStrs) {
          var v = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Types_RawBytes.hexToRawBytes))(mbUtxoStrs));
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v)(function (collateralUtxos) {
              return Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(collateralUtxos)(function (bytes) {
                  return Control_Bind.bindFlipped(Effect.bindEffect)(Data_Maybe.maybe(Effect_Exception["throw"]("Unable to convert UTxO"))(Control_Applicative.pure(Effect.applicativeEffect)))(Data_Functor.map(Effect.functorEffect)(Deserialization_UnspentOutput.convertUnspentOutput)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionUnspe)(Data_Newtype.unwrap()(bytes))));
              });
          }));
      });
  };
  var fromHexString = function (act) {
      var $23 = Data_Functor.map(Effect_Aff.functorAff)(Types_RawBytes.hexToRawBytes);
      return function ($24) {
          return $23(Control_Promise.toAffE(act($24)));
      };
  };
  var getBalance = function (wallet) {
      return Data_Functor.mapFlipped(Effect_Aff.functorAff)(fromHexString($foreign["_getBalance"])(wallet))(function (mbBytes) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(mbBytes)(function (bytes) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesValue)(Data_Newtype.unwrap()(bytes)))(Deserialization_UnspentOutput.convertValue);
          });
      });
  };
  var signTx = function (conn) {
      return function (tx) {
          var combineWitnessSet = function (v) {
              return function (newWits) {
                  return Cardano_Types_Transaction.Transaction({
                      body: v.body,
                      witnessSet: Data_Semigroup.append(Cardano_Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(newWits),
                      isValid: v.isValid,
                      auxiliaryData: v.auxiliaryData
                  });
              };
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(txToHex(tx))(function (txHex) {
              return Control_Bind.bind(Effect_Aff.bindAff)(fromHexString($foreign["_signTx"](txHex))(conn))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(combineWitnessSet(tx)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Deserialization_WitnessSet.convertWitnessSet)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionWitne)(Data_Newtype.unwrap()(v.value0)))));
                  };
                  throw new Error("Failed pattern match at Wallet.Cip30 (line 116, column 42 - line 121, column 8): " + [ v.constructor.name ]);
              });
          });
      };
  };
  var mkCip30WalletAff = function (walletName) {
      return function (enableWallet) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Promise.toAffE(enableWallet))(function (wallet) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Monad.whenM(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.isNothing)(getCollateral(wallet)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"](walletName + " wallet missing collateral"))))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      connection: wallet,
                      getWalletAddresses: getWalletAddresses,
                      getCollateral: getCollateral,
                      signTx: signTx,
                      getBalance: getBalance,
                      getUtxos: getUtxos
                  });
              });
          });
      };
  };
  exports["mkCip30WalletAff"] = mkCip30WalletAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var setJust = function (p) {
      var $24 = set(p);
      return function ($25) {
          return $24(Data_Maybe.Just.create($25));
      };
  };
  var modifying = function (dictMonadState) {
      return function (p) {
          return function (f) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(over(p)(f)));
          };
      };
  };
  var assign = function (dictMonadState) {
      return function (p) {
          return function (b) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(set(p)(b)));
          };
      };
  };
  var appendOver = function (dictSemigroup) {
      return function (p) {
          var $58 = over(p);
          var $59 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
          return function ($60) {
              return $58($59($60));
          };
      };
  };
  var appendModifying = function (dictMonadState) {
      return function (dictSemigroup) {
          return function (p) {
              var $61 = modifying(dictMonadState)(p);
              var $62 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
              return function ($63) {
                  return $61($62($63));
              };
          };
      };
  };
  exports["over"] = over;
  exports["set"] = set;
  exports["appendOver"] = appendOver;
  exports["setJust"] = setJust;
  exports["assign"] = assign;
  exports["modifying"] = modifying;
  exports["appendModifying"] = appendModifying;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Wallet.Key"] = $PS["Wallet.Key"] || {};
  var exports = $PS["Wallet.Key"];
  var BalanceTx_Collateral_Select = $PS["BalanceTx.Collateral.Select"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var PrivateStakeKey = function (x) {
      return x;
  };
  var PrivatePaymentKey = function (x) {
      return x;
  };
  var privateKeysToKeyWallet = function (payKey) {
      return function (mbStakeKey) {
          var signTx = function (v) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                  var txBody = Serialization.convertTxBody(v.body)();
                  var hash = Serialization.hashTransaction(txBody)();
                  var wit = Data_Functor.map(Effect.functorEffect)(Deserialization_WitnessSet.convertVkeyWitness)(Serialization.makeVkeywitness(hash)(Data_Newtype.unwrap()(payKey)))();
                  var witnessSet$prime = Data_Lens_Setter.set(Cardano_Types_Transaction["_vkeys"](Data_Profunctor_Strong.strongFn))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Applicative.pure(Control_Applicative.applicativeArray)(wit)))(Data_Monoid.mempty(Cardano_Types_Transaction.monoidTransactionWitnessS));
                  return witnessSet$prime;
              });
          };
          var selectCollateral = function (coinsPerUtxoByte) {
              return function (maxCollateralInputs) {
                  return function (utxos) {
                      return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.fromFoldable(Data_List_Types.foldableList)))(BalanceTx_Collateral_Select.selectCollateral(coinsPerUtxoByte)(maxCollateralInputs)(utxos));
                  };
              };
          };
          var address = function (network) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Serialization.publicKeyFromPrivateKey(Data_Newtype.unwrap()(payKey))))(function (pubPayKey) {
                  if (mbStakeKey instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Serialization.publicKeyFromPrivateKey(Data_Newtype.unwrap()(mbStakeKey.value0))))(function (pubStakeKey) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Serialization_Address.baseAddressToAddress(Serialization_Address.baseAddress({
                              network: network,
                              paymentCred: Serialization_Address.keyHashCredential(Serialization.publicKeyHash(pubPayKey)),
                              delegationCred: Serialization_Address.keyHashCredential(Serialization.publicKeyHash(pubStakeKey))
                          })));
                      });
                  };
                  if (mbStakeKey instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)((function ($10) {
                          return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.enterpriseAddress((function (v) {
                              return {
                                  network: network,
                                  paymentCred: v
                              };
                          })(Serialization_Address.keyHashCredential($10))));
                      })(Serialization.publicKeyHash(pubPayKey)));
                  };
                  throw new Error("Failed pattern match at Wallet.Key (line 89, column 5 - line 103, column 39): " + [ mbStakeKey.constructor.name ]);
              });
          };
          return {
              address: address,
              selectCollateral: selectCollateral,
              signTx: signTx,
              paymentKey: payKey,
              stakeKey: mbStakeKey
          };
      };
  };
  exports["PrivatePaymentKey"] = PrivatePaymentKey;
  exports["PrivateStakeKey"] = PrivateStakeKey;
  exports["privateKeysToKeyWallet"] = privateKeysToKeyWallet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Wallet"] = $PS["Wallet"] || {};
  var exports = $PS["Wallet"];
  var $foreign = $PS["Wallet"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Types_Natural = $PS["Types.Natural"];
  var Wallet_Cip30 = $PS["Wallet.Cip30"];
  var Wallet_Key = $PS["Wallet.Key"];                
  var Nami = (function () {
      function Nami(value0) {
          this.value0 = value0;
      };
      Nami.create = function (value0) {
          return new Nami(value0);
      };
      return Nami;
  })();
  var Gero = (function () {
      function Gero(value0) {
          this.value0 = value0;
      };
      Gero.create = function (value0) {
          return new Gero(value0);
      };
      return Gero;
  })();
  var Flint = (function () {
      function Flint(value0) {
          this.value0 = value0;
      };
      Flint.create = function (value0) {
          return new Flint(value0);
      };
      return Flint;
  })();
  var Eternl = (function () {
      function Eternl(value0) {
          this.value0 = value0;
      };
      Eternl.create = function (value0) {
          return new Eternl(value0);
      };
      return Eternl;
  })();
  var Lode = (function () {
      function Lode(value0) {
          this.value0 = value0;
      };
      Lode.create = function (value0) {
          return new Lode(value0);
      };
      return Lode;
  })();
  var KeyWallet = (function () {
      function KeyWallet(value0) {
          this.value0 = value0;
      };
      KeyWallet.create = function (value0) {
          return new KeyWallet(value0);
      };
      return KeyWallet;
  })();
  var mkNamiWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Nami.create)(Wallet_Cip30.mkCip30WalletAff("Nami")($foreign["_enableNami"]));
  var mkKeyWallet = function (payKey) {
      return function (mbStakeKey) {
          return KeyWallet.create(Wallet_Key.privateKeysToKeyWallet(payKey)(mbStakeKey));
      };
  };
  var mkGeroWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Gero.create)(Wallet_Cip30.mkCip30WalletAff("Gero")($foreign["_enableGero"]));
  var mkFlintWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Flint.create)(Wallet_Cip30.mkCip30WalletAff("Flint")($foreign["_enableFlint"]));
  var mkEternlWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Eternl.create)(Wallet_Cip30.mkCip30WalletAff("Eternl")($foreign["_enableEternl"]));
  var isLodeAvailable = $foreign["_isLodeAvailable"];
  var mkLodeWalletAff = (function () {
      var retryNWithIntervalUntil = function (n) {
          return function (ms) {
              return function (mBool) {
                  var $5 = Data_Eq.eq(Types_Natural.eqNatural)(n)(Data_Semiring.zero(Types_Natural.semiringNatural));
                  if ($5) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(mBool)(function (v) {
                      if (v) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      return Control_Apply.applySecond(Effect_Aff.applyAff)(Effect_Aff.delay(Data_Newtype.wrap()(ms)))(retryNWithIntervalUntil(Types_Natural.minus(n)(Data_Semiring.one(Types_Natural.semiringNatural)))(ms)(mBool));
                  });
              };
          };
      };
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(retryNWithIntervalUntil(Types_Natural["fromInt'"](10))(Data_Int.toNumber(100))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(isLodeAvailable)))(function () {
          return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(Data_Functor.map(Effect_Aff.functorAff)(Lode.create)(Wallet_Cip30.mkCip30WalletAff("Lode")($foreign["_enableLode"])))(function (e) {
              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(Data_Show.show(Effect_Exception.showError)(e) + " Note: LodeWallet is injected asynchronously and may be unreliable."));
          });
      });
  })();
  var cip30Wallet = function (v) {
      if (v instanceof Nami) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Gero) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Flint) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Eternl) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Lode) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof KeyWallet) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Wallet (line 131, column 15 - line 137, column 25): " + [ v.constructor.name ]);
  };
  exports["Gero"] = Gero;
  exports["Nami"] = Nami;
  exports["Flint"] = Flint;
  exports["Lode"] = Lode;
  exports["Eternl"] = Eternl;
  exports["KeyWallet"] = KeyWallet;
  exports["mkEternlWalletAff"] = mkEternlWalletAff;
  exports["mkNamiWalletAff"] = mkNamiWalletAff;
  exports["mkGeroWalletAff"] = mkGeroWalletAff;
  exports["mkFlintWalletAff"] = mkFlintWalletAff;
  exports["mkLodeWalletAff"] = mkLodeWalletAff;
  exports["mkKeyWallet"] = mkKeyWallet;
  exports["cip30Wallet"] = cip30Wallet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Cbor"] = $PS["Types.Cbor"] || {};
  var exports = $PS["Types.Cbor"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_UInt = $PS["Data.UInt"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var ByteStringType = (function () {
      function ByteStringType(value0) {
          this.value0 = value0;
      };
      ByteStringType.create = function (value0) {
          return new ByteStringType(value0);
      };
      return ByteStringType;
  })();
  var UnknownType = (function () {
      function UnknownType(value0) {
          this.value0 = value0;
      };
      UnknownType.create = function (value0) {
          return new UnknownType(value0);
      };
      return UnknownType;
  })();
  var UnknownAdditionalInformation = (function () {
      function UnknownAdditionalInformation(value0) {
          this.value0 = value0;
      };
      UnknownAdditionalInformation.create = function (value0) {
          return new UnknownAdditionalInformation(value0);
      };
      return UnknownAdditionalInformation;
  })();
  var ByteArrayTooShort = (function () {
      function ByteArrayTooShort(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ByteArrayTooShort.create = function (value0) {
          return function (value1) {
              return new ByteArrayTooShort(value0, value1);
          };
      };
      return ByteArrayTooShort;
  })();
  var showCborParseError = {
      show: function (v) {
          if (v instanceof UnknownType) {
              return "(UnknownType " + (Data_Show.show(Data_UInt.uintShowInstance)(v.value0) + ")");
          };
          if (v instanceof UnknownAdditionalInformation) {
              return "(UnknownAdditionalInformation " + (Data_Show.show(Data_UInt.uintShowInstance)(v.value0) + ")");
          };
          if (v instanceof ByteArrayTooShort) {
              return "(ByteArrayTooShort " + (Data_Show.show(Types_ByteArray.showByteArray)(v.value0) + (" " + (Data_Show.show(Data_Show.showInt)(v.value1) + ")")));
          };
          throw new Error("Failed pattern match at Types.Cbor (line 54, column 10 - line 63, column 13): " + [ v.constructor.name ]);
      }
  };                                       
  var takeN$prime = function ($27) {
      return (function (n) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity))))(function (ba) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(n > Types_ByteArray.byteLength(ba))(Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity)))(new ByteArrayTooShort(ba, n))))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Types_ByteArray.subarray(n)(Types_ByteArray.byteLength(ba))(ba)))(function () {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(Types_ByteArray.subarray(0)(n)(ba));
                  });
              });
          });
      })(Data_UInt.toInt($27));
  };
  var takeN = function (n) {
      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))((function () {
          var $28 = Data_Functor.map(Data_Functor.functorArray)(Data_UInt.fromInt);
          return function ($29) {
              return $28(Types_ByteArray.byteArrayToIntArray($29));
          };
      })())(takeN$prime(n));
  };
  var runParser = function (parser) {
      return function (v) {
          return Control_Monad_Except.runExcept(Data_Function.flip(Control_Monad_State_Trans.evalStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(v)(parser));
      };
  };
  var partitionType = function (u) {
      return {
          majorType: Data_UInt.zshr(u)(Data_UInt.fromInt(5)),
          additionalInformation: Data_UInt.and(u)(Data_UInt.fromInt(31))
      };
  };
  var fromBytes = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
      return function (b) {
          return Data_UInt.or(Data_UInt.shl(acc)(Data_UInt.fromInt(8)))(b);
      };
  })(Data_Semiring.zero(Data_UInt.uintSemiring));
  var readType = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(fromBytes)(takeN(Data_Semiring.one(Data_UInt.uintSemiring)));
  var decodeType = function (rawCborType) {
      var v = partitionType(rawCborType);
      var decodeByteStringLength = (function () {
          var v1 = Data_UInt.toInt(v.additionalInformation);
          if (v1 < 24) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(v.additionalInformation);
          };
          if (v1 === 24) {
              return Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(takeN(Data_UInt.fromInt(1)))(fromBytes);
          };
          if (v1 === 25) {
              return Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(takeN(Data_UInt.fromInt(2)))(fromBytes);
          };
          if (v1 === 26) {
              return Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(takeN(Data_UInt.fromInt(4)))(fromBytes);
          };
          if (v1 === 27) {
              return Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(takeN(Data_UInt.fromInt(8)))(fromBytes);
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity)))(new UnknownAdditionalInformation(v.additionalInformation));
      })();
      var v1 = Data_UInt.toInt(v.majorType);
      if (v1 === 2) {
          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(ByteStringType.create)(decodeByteStringLength);
      };
      return Control_Monad_Error_Class.throwError(Control_Monad_State_Trans.monadThrowStateT(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity)))(new UnknownType(v.majorType));
  };
  var cborType = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(readType)(decodeType);
  var toByteArray = runParser(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)))(cborType)(function (v) {
      return takeN$prime(v.value0);
  }));
  exports["toByteArray"] = toByteArray;
  exports["showCborParseError"] = showCborParseError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Cardano.TextEnvelope"] = $PS["Cardano.TextEnvelope"] || {};
  var exports = $PS["Cardano.TextEnvelope"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Cbor = $PS["Types.Cbor"];                
  var PlutusScriptV1 = (function () {
      function PlutusScriptV1() {

      };
      PlutusScriptV1.value = new PlutusScriptV1();
      return PlutusScriptV1;
  })();
  var PlutusScriptV2 = (function () {
      function PlutusScriptV2() {

      };
      PlutusScriptV2.value = new PlutusScriptV2();
      return PlutusScriptV2;
  })();
  var PaymentSigningKeyShelleyed25519 = (function () {
      function PaymentSigningKeyShelleyed25519() {

      };
      PaymentSigningKeyShelleyed25519.value = new PaymentSigningKeyShelleyed25519();
      return PaymentSigningKeyShelleyed25519;
  })();
  var StakeSigningKeyShelleyed25519 = (function () {
      function StakeSigningKeyShelleyed25519() {

      };
      StakeSigningKeyShelleyed25519.value = new StakeSigningKeyShelleyed25519();
      return StakeSigningKeyShelleyed25519;
  })();
  var JsonDecodeError = (function () {
      function JsonDecodeError(value0) {
          this.value0 = value0;
      };
      JsonDecodeError.create = function (value0) {
          return new JsonDecodeError(value0);
      };
      return JsonDecodeError;
  })();
  var CborParseError = (function () {
      function CborParseError(value0) {
          this.value0 = value0;
      };
      CborParseError.create = function (value0) {
          return new CborParseError(value0);
      };
      return CborParseError;
  })();
  var showTextEnvelopeType = {
      show: function (v) {
          if (v instanceof PlutusScriptV1) {
              return "PlutusScriptV1";
          };
          if (v instanceof PlutusScriptV2) {
              return "PlutusScriptV2";
          };
          if (v instanceof PaymentSigningKeyShelleyed25519) {
              return "PaymentSigningKeyShelley_ed25519";
          };
          if (v instanceof StakeSigningKeyShelleyed25519) {
              return "StakeSigningKeyShelley_ed25519";
          };
          throw new Error("Failed pattern match at Cardano.TextEnvelope (line 41, column 10 - line 45, column 70): " + [ v.constructor.name ]);
      }
  };
  var eqTextEnvelopeType = {
      eq: function (x) {
          return function (y) {
              if (x instanceof PlutusScriptV1 && y instanceof PlutusScriptV1) {
                  return true;
              };
              if (x instanceof PlutusScriptV2 && y instanceof PlutusScriptV2) {
                  return true;
              };
              if (x instanceof PaymentSigningKeyShelleyed25519 && y instanceof PaymentSigningKeyShelleyed25519) {
                  return true;
              };
              if (x instanceof StakeSigningKeyShelleyed25519 && y instanceof StakeSigningKeyShelleyed25519) {
                  return true;
              };
              return false;
          };
      }
  };
  var decodeAesonTextEnvelopeTy = {
      decodeAeson: function (aeson) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonString)(aeson))(function (v) {
              if (v === "PlutusScriptV1") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusScriptV1.value);
              };
              if (v === "PlutusScriptV2") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusScriptV2.value);
              };
              if (v === "PaymentSigningKeyShelley_ed25519") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(PaymentSigningKeyShelleyed25519.value);
              };
              if (v === "StakeSigningKeyShelley_ed25519") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(StakeSigningKeyShelleyed25519.value);
              };
              return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.TypeMismatch("TextEnvelopeType"));
          });
      }
  };
  var printTextEnvelopeDecodeError = function (v) {
      if (v instanceof JsonDecodeError) {
          return Data_Argonaut_Decode_Error.printJsonDecodeError(v.value0);
      };
      if (v instanceof CborParseError) {
          return Data_Show.show(Types_Cbor.showCborParseError)(v.value0);
      };
      throw new Error("Failed pattern match at Cardano.TextEnvelope (line 91, column 32 - line 93, column 33): " + [ v.constructor.name ]);
  };
  var decodeTextEnvelope = function (aeson) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(JsonDecodeError.create)(Aeson.decodeAeson(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonString))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonString))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonTextEnvelopeTy))(Aeson.gDecodeAesonRowNil)({
          reflectSymbol: function () {
              return "type";
          }
      })()())({
          reflectSymbol: function () {
              return "description";
          }
      })()())({
          reflectSymbol: function () {
              return "cborHex";
          }
      })()())())(aeson)))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(JsonDecodeError.create(new Data_Argonaut_Decode_Error.TypeMismatch("Hex")))(Types_ByteArray.hexToByteArray(v.cborHex)))(function (cborBa) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(CborParseError.create)(Types_Cbor.toByteArray(Data_Newtype.wrap()(Data_Newtype.wrap()(cborBa)))))(function (ba) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                      type_: v.type,
                      description: v.description,
                      bytes: ba
                  }));
              });
          });
      });
  };
  var textEnvelopeBytes = function (json) {
      return function (ty) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(JsonDecodeError.create)(Aeson.parseJsonStringToAeson(json)))(function (aeson) {
              return Control_Bind.bind(Data_Either.bindEither)(decodeTextEnvelope(aeson))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(Data_Eq.eq(eqTextEnvelopeType)(v.type_)(ty))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(JsonDecodeError.create(Data_Argonaut_Decode_Error.TypeMismatch.create(Data_Show.show(showTextEnvelopeType)(ty))))))(function () {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(v.bytes);
                  });
              });
          });
      };
  };
  exports["printTextEnvelopeDecodeError"] = printTextEnvelopeDecodeError;
  exports["textEnvelopeBytes"] = textEnvelopeBytes;
  exports["PaymentSigningKeyShelleyed25519"] = PaymentSigningKeyShelleyed25519;
  exports["StakeSigningKeyShelleyed25519"] = StakeSigningKeyShelleyed25519;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];    
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = {
      show: function (v) {
          if (v instanceof ASCII) {
              return "ASCII";
          };
          if (v instanceof UTF8) {
              return "UTF8";
          };
          if (v instanceof UTF16LE) {
              return "UTF16LE";
          };
          if (v instanceof UCS2) {
              return "UCS2";
          };
          if (v instanceof Base64) {
              return "Base64";
          };
          if (v instanceof Latin1) {
              return "Latin1";
          };
          if (v instanceof Binary) {
              return "Binary";
          };
          if (v instanceof Hex) {
              return "Hex";
          };
          throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
      }
  };
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Wallet.KeyFile"] = $PS["Wallet.KeyFile"] || {};
  var exports = $PS["Wallet.KeyFile"];
  var Cardano_TextEnvelope = $PS["Cardano.TextEnvelope"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Serialization = $PS["Serialization"];
  var Wallet_Key = $PS["Wallet.Key"];
  var keyFromFile = function (filePath) {
      return function (ty) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filePath)))(function (fileContents) {
              return Control_Monad_Error_Class.liftEither(Effect_Aff.monadThrowAff)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function ($10) {
                  return Effect_Exception.error(Cardano_TextEnvelope.printTextEnvelopeDecodeError($10));
              })(Cardano_TextEnvelope.textEnvelopeBytes(fileContents)(ty)));
          });
      };
  };
  var privatePaymentKeyFromFile = function (filePath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(keyFromFile(filePath)(Cardano_TextEnvelope.PaymentSigningKeyShelleyed25519.value))(function (bytes) {
          return Helpers.liftM(Effect_Aff.monadErrorAff)(Effect_Exception.error("Unable to decode private payment key"))(Data_Functor.map(Data_Maybe.functorMaybe)(Wallet_Key.PrivatePaymentKey)(Serialization.privateKeyFromBytes(Data_Newtype.wrap()(bytes))));
      });
  };
  var privateStakeKeyFromFile = function (filePath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(keyFromFile(filePath)(Cardano_TextEnvelope.StakeSigningKeyShelleyed25519.value))(function (bytes) {
          return Helpers.liftM(Effect_Aff.monadErrorAff)(Effect_Exception.error("Unable to decode private stake key"))(Data_Functor.map(Data_Maybe.functorMaybe)(Wallet_Key.PrivateStakeKey)(Serialization.privateKeyFromBytes(Data_Newtype.wrap()(bytes))));
      });
  };
  exports["privatePaymentKeyFromFile"] = privatePaymentKeyFromFile;
  exports["privateStakeKeyFromFile"] = privateStakeKeyFromFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Wallet.Spec"] = $PS["Wallet.Spec"] || {};
  var exports = $PS["Wallet.Spec"];
  var PrivateStakeKeyFile = (function () {
      function PrivateStakeKeyFile(value0) {
          this.value0 = value0;
      };
      PrivateStakeKeyFile.create = function (value0) {
          return new PrivateStakeKeyFile(value0);
      };
      return PrivateStakeKeyFile;
  })();
  var PrivateStakeKeyValue = (function () {
      function PrivateStakeKeyValue(value0) {
          this.value0 = value0;
      };
      PrivateStakeKeyValue.create = function (value0) {
          return new PrivateStakeKeyValue(value0);
      };
      return PrivateStakeKeyValue;
  })();
  var PrivatePaymentKeyFile = (function () {
      function PrivatePaymentKeyFile(value0) {
          this.value0 = value0;
      };
      PrivatePaymentKeyFile.create = function (value0) {
          return new PrivatePaymentKeyFile(value0);
      };
      return PrivatePaymentKeyFile;
  })();
  var PrivatePaymentKeyValue = (function () {
      function PrivatePaymentKeyValue(value0) {
          this.value0 = value0;
      };
      PrivatePaymentKeyValue.create = function (value0) {
          return new PrivatePaymentKeyValue(value0);
      };
      return PrivatePaymentKeyValue;
  })();
  var UseKeys = (function () {
      function UseKeys(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UseKeys.create = function (value0) {
          return function (value1) {
              return new UseKeys(value0, value1);
          };
      };
      return UseKeys;
  })();
  var ConnectToNami = (function () {
      function ConnectToNami() {

      };
      ConnectToNami.value = new ConnectToNami();
      return ConnectToNami;
  })();
  var ConnectToGero = (function () {
      function ConnectToGero() {

      };
      ConnectToGero.value = new ConnectToGero();
      return ConnectToGero;
  })();
  var ConnectToFlint = (function () {
      function ConnectToFlint() {

      };
      ConnectToFlint.value = new ConnectToFlint();
      return ConnectToFlint;
  })();
  var ConnectToEternl = (function () {
      function ConnectToEternl() {

      };
      ConnectToEternl.value = new ConnectToEternl();
      return ConnectToEternl;
  })();
  var ConnectToLode = (function () {
      function ConnectToLode() {

      };
      ConnectToLode.value = new ConnectToLode();
      return ConnectToLode;
  })();
  exports["UseKeys"] = UseKeys;
  exports["ConnectToNami"] = ConnectToNami;
  exports["ConnectToGero"] = ConnectToGero;
  exports["ConnectToFlint"] = ConnectToFlint;
  exports["ConnectToEternl"] = ConnectToEternl;
  exports["ConnectToLode"] = ConnectToLode;
  exports["PrivateStakeKeyFile"] = PrivateStakeKeyFile;
  exports["PrivateStakeKeyValue"] = PrivateStakeKeyValue;
  exports["PrivatePaymentKeyFile"] = PrivatePaymentKeyFile;
  exports["PrivatePaymentKeyValue"] = PrivatePaymentKeyValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM"] = $PS["QueryM"] || {};
  var exports = $PS["QueryM"];
  var Aeson = $PS["Aeson"];
  var Affjax = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Helpers = $PS["Helpers"];
  var JsWebSocket = $PS["JsWebSocket"];
  var QueryM_DatumCacheWsp = $PS["QueryM.DatumCacheWsp"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var QueryM_ServerConfig = $PS["QueryM.ServerConfig"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Chain = $PS["Types.Chain"];
  var Types_MultiMap = $PS["Types.MultiMap"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_UsedTxOuts = $PS["Types.UsedTxOuts"];
  var Untagged_Union = $PS["Untagged.Union"];
  var Wallet = $PS["Wallet"];
  var Wallet_KeyFile = $PS["Wallet.KeyFile"];
  var Wallet_Spec = $PS["Wallet.Spec"];                
  var WebSocket = (function () {
      function WebSocket(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WebSocket.create = function (value0) {
          return function (value1) {
              return new WebSocket(value0, value1);
          };
      };
      return WebSocket;
  })();
  var RequestInput = (function () {
      function RequestInput(value0) {
          this.value0 = value0;
      };
      RequestInput.create = function (value0) {
          return new RequestInput(value0);
      };
      return RequestInput;
  })();
  var RequestInputToStoreInPendingRequests = (function () {
      function RequestInputToStoreInPendingRequests(value0) {
          this.value0 = value0;
      };
      RequestInputToStoreInPendingRequests.create = function (value0) {
          return new RequestInputToStoreInPendingRequests(value0);
      };
      return RequestInputToStoreInPendingRequests;
  })();
  var JsError = (function () {
      function JsError(value0) {
          this.value0 = value0;
      };
      JsError.create = function (value0) {
          return new JsError(value0);
      };
      return JsError;
  })();
  var JsonError = (function () {
      function JsonError(value0) {
          this.value0 = value0;
      };
      JsonError.create = function (value0) {
          return new JsonError(value0);
      };
      return JsonError;
  })();
  var FaultError = (function () {
      function FaultError(value0) {
          this.value0 = value0;
      };
      FaultError.create = function (value0) {
          return new FaultError(value0);
      };
      return FaultError;
  })();
  var ListenerCancelled = (function () {
      function ListenerCancelled(value0) {
          this.value0 = value0;
      };
      ListenerCancelled.create = function (value0) {
          return new ListenerCancelled(value0);
      };
      return ListenerCancelled;
  })();
  var QueryRuntimeModel = (function () {
      function QueryRuntimeModel(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      QueryRuntimeModel.create = function (value0) {
          return function (value1) {
              return new QueryRuntimeModel(value0, value1);
          };
      };
      return QueryRuntimeModel;
  })();
  var ClientHttpError = (function () {
      function ClientHttpError(value0) {
          this.value0 = value0;
      };
      ClientHttpError.create = function (value0) {
          return new ClientHttpError(value0);
      };
      return ClientHttpError;
  })();
  var ClientHttpResponseError = (function () {
      function ClientHttpResponseError(value0) {
          this.value0 = value0;
      };
      ClientHttpResponseError.create = function (value0) {
          return new ClientHttpResponseError(value0);
      };
      return ClientHttpResponseError;
  })();
  var ClientDecodeJsonError = (function () {
      function ClientDecodeJsonError(value0) {
          this.value0 = value0;
      };
      ClientDecodeJsonError.create = function (value0) {
          return new ClientDecodeJsonError(value0);
      };
      return ClientDecodeJsonError;
  })();
  var ClientEncodingError = (function () {
      function ClientEncodingError(value0) {
          this.value0 = value0;
      };
      ClientEncodingError.create = function (value0) {
          return new ClientEncodingError(value0);
      };
      return ClientEncodingError;
  })();
  var ClientOtherError = (function () {
      function ClientOtherError(value0) {
          this.value0 = value0;
      };
      ClientOtherError.create = function (value0) {
          return new ClientOtherError(value0);
      };
      return ClientOtherError;
  })();
  var showDispatchError = {
      show: function (v) {
          if (v instanceof JsError) {
              return "(JsError (message " + (Data_Show.show(Data_Show.showString)(Effect_Exception.message(v.value0)) + "))");
          };
          if (v instanceof JsonError) {
              return "(JsonError " + (Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0) + ")");
          };
          if (v instanceof FaultError) {
              return "(FaultError " + (Data_Show.show(Aeson.showAeson)(v.value0) + ")");
          };
          if (v instanceof ListenerCancelled) {
              return "(ListenerCancelled " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          };
          throw new Error("Failed pattern match at QueryM (line 1200, column 1 - line 1205, column 52): " + [ v.constructor.name ]);
      }
  };
  var showClientError = {
      show: function (v) {
          if (v instanceof ClientHttpError) {
              return "(ClientHttpError " + (Affjax.printError(v.value0) + ")");
          };
          if (v instanceof ClientHttpResponseError) {
              return "(ClientHttpResponseError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          };
          if (v instanceof ClientDecodeJsonError) {
              return "(ClientDecodeJsonError " + (Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0) + ")");
          };
          if (v instanceof ClientEncodingError) {
              return "(ClientEncodingError " + (v.value0 + ")");
          };
          if (v instanceof ClientOtherError) {
              return "(ClientEncodingError " + (v.value0 + ")");
          };
          throw new Error("Failed pattern match at QueryM (line 579, column 1 - line 599, column 13): " + [ v.constructor.name ]);
      }
  };
  var monadThrowErrorQueryMExte = Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff);
  var monadQueryMExtendedAff = Control_Monad_Reader_Trans.monadReaderT(Effect_Aff.monadAff);
  var monadErrorErrorQueryMExte = Control_Monad_Reader_Trans.monadErrorReaderT(Effect_Aff.monadErrorAff);
  var monadEffectQueryMExtended = Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
  var monadAskQueryEnvQueryMExt = Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff);
  var monadAffQueryMExtendedAff = Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff);
  var functorQueryMExtended = function (dictFunctor) {
      return Control_Monad_Reader_Trans.functorReaderT(dictFunctor);
  };
  var bindQueryMExtended = function (dictBind) {
      return Control_Monad_Reader_Trans.bindReaderT(dictBind);
  };
  var monadLoggerQueryMExtended = {
      log: function (msg) {
          return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function (v) {
              return v.config;
          }))(function (config) {
              var logFunction = Data_Maybe.fromMaybe(Helpers.logWithLevel(Effect_Aff.monadEffectAff)(config.logLevel))((function (v) {
                  return v.customLogger;
              })(config));
              return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(logFunction(msg));
          });
      },
      MonadEffect0: function () {
          return monadEffectQueryMExtended;
      }
  };
  var applyQueryMExtended = function (dictApply) {
      return Control_Monad_Reader_Trans.applyReaderT(dictApply);
  };
  var applicativeQueryMExtended = function (dictApplicative) {
      return Control_Monad_Reader_Trans.applicativeReaderT(dictApplicative);
  };
  var parallelQueryMExtendedPar = {
      parallel: (function () {
          var $237 = Data_Newtype.wrap();
          var $238 = Control_Parallel_Class.parallel(Control_Parallel_Class.monadParReaderT(Effect_Aff.parallelAff));
          var $239 = Data_Newtype.unwrap();
          return function ($240) {
              return $237($238($239($240)));
          };
      })(),
      sequential: (function () {
          var $241 = Data_Newtype.wrap();
          var $242 = Control_Parallel_Class.sequential(Control_Parallel_Class.monadParReaderT(Effect_Aff.parallelAff));
          var $243 = Data_Newtype.unwrap();
          return function ($244) {
              return $241($242($243($244)));
          };
      })(),
      Monad0: function () {
          return monadQueryMExtendedAff;
      },
      Applicative1: function () {
          return applicativeQueryMExtended(Effect_Aff.applicativeParAff);
      }
  };
  var alternativeQueryMExtended = function (dictAlternative) {
      return Control_Monad_Reader_Trans.alternativeReaderT(dictAlternative);
  };
  var withMWallet = function (act) {
      return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($245) {
          return (function (v) {
              return v.wallet;
          })((function (v) {
              return v.runtime;
          })($245));
      }))(Data_Maybe.maybe(Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Maybe.Nothing.value))(act));
  };
  var withMWalletAff = function (act) {
      return withMWallet((function () {
          var $246 = Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff);
          return function ($247) {
              return $246(act($247));
          };
      })());
  };
  var underlyingWebSocket = function (v) {
      return v.value0;
  };
  var stopQueryRuntime = function (runtime) {
      return function __do() {
          JsWebSocket["_wsClose"](underlyingWebSocket(runtime.ogmiosWs))();
          return JsWebSocket["_wsClose"](underlyingWebSocket(runtime.datumCacheWs))();
      };
  };
  var scriptToAeson = (function () {
      var $248 = Aeson.encodeAeson(Aeson.encodeAesonString);
      var $249 = Data_Newtype.unwrap();
      return function ($250) {
          return $248(Types_ByteArray.byteArrayToHex(Data_Tuple.fst($249($250))));
      };
  })();
  var queryDispatch = function (dictDecodeAeson) {
      return function (dictShow) {
          return function (ref) {
              return function (str) {
                  var withAction = function (reflection) {
                      return function (cb) {
                          return function __do() {
                              var idMap = Effect_Ref.read(ref)();
                              var mbAction = Types_MultiMap.lookup(Data_Ord.ordString)(reflection)(idMap);
                              return cb(mbAction);
                          };
                      };
                  };
                  var impossibleErrorMsg = "Impossible happened: response does not contain neither " + ("`fault` nor `result`, please report as bug. Response: " + str);
                  var eiAeson = Aeson.parseJsonStringToAeson(str);
                  var v = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponseId)(eiAeson);
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create(new JsonError(v.value0)));
                  };
                  if (v instanceof Data_Either.Right) {
                      return withAction(v.value0)(function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Left(new ListenerCancelled(v.value0));
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Either.Right.create(v1.value0((function () {
                                  var v2 = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponse(dictDecodeAeson))(eiAeson);
                                  if (v2 instanceof Data_Either.Left) {
                                      return Data_Either.Left.create(new JsonError(v2.value0));
                                  };
                                  if (v2 instanceof Data_Either.Right && v2.value0.result instanceof Data_Maybe.Just) {
                                      return new Data_Either.Right(v2.value0.result.value0);
                                  };
                                  if (v2 instanceof Data_Either.Right && (v2.value0.result instanceof Data_Maybe.Nothing && v2.value0.fault instanceof Data_Maybe.Just)) {
                                      return Data_Either.Left.create(new FaultError(v2.value0.fault.value0));
                                  };
                                  if (v2 instanceof Data_Either.Right && (v2.value0.result instanceof Data_Maybe.Nothing && v2.value0.fault instanceof Data_Maybe.Nothing)) {
                                      return Data_Either.Left.create(JsError.create(Effect_Exception.error(impossibleErrorMsg)));
                                  };
                                  throw new Error("Failed pattern match at QueryM (line 1317, column 13 - line 1325, column 58): " + [ v2.constructor.name ]);
                              })()));
                          };
                          throw new Error("Failed pattern match at QueryM (line 1312, column 29 - line 1325, column 58): " + [ v1.constructor.name ]);
                      });
                  };
                  throw new Error("Failed pattern match at QueryM (line 1307, column 3 - line 1325, column 58): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var postAeson = function (url) {
      return function (body) {
          return Affjax.request({
              method: new Data_Either.Left(Data_HTTP_Method.POST.value),
              url: url,
              headers: [ new Affjax_RequestHeader.ContentType(Data_MediaType_Common.applicationJSON) ],
              content: Data_Maybe.Just.create(Affjax_RequestBody["String"].create(Aeson.stringifyAeson(body))),
              username: Affjax.defaultRequest.username,
              password: Affjax.defaultRequest.password,
              withCredentials: Affjax.defaultRequest.withCredentials,
              responseFormat: Affjax_ResponseFormat.string,
              timeout: Affjax.defaultRequest.timeout
          });
      };
  };
  var ogmiosMessageDispatch = function (v) {
      return [ queryDispatch(QueryM_Ogmios.decodeAesonUtxoQR)(QueryM_Ogmios.showUtxoQR)(v.utxoDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonUtxoQR)(QueryM_Ogmios.showUtxoQR)(v.utxosAtDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonChainTipQR)(QueryM_Ogmios.showChainTipQR)(v.chainTipDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonTxEvaluationR)(QueryM_Ogmios.showTxEvaluationR)(v.evaluateTxDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonProtocolParame)(QueryM_Ogmios.showProtocolParameters)(v.getProtocolParametersDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSubmitTxR)(QueryM_Ogmios.showSubmitTxR)(v.submitDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonEraSummaries)(QueryM_Ogmios.showEraSummaries)(v.eraSummariesDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonCurrentEpoch)(QueryM_Ogmios.showCurrentEpoch)(v.currentEpochDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSystemStart)(QueryM_Ogmios.showSystemStart)(v.systemStartDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonMempoolSnapsho)(QueryM_Ogmios.showMempoolSnapshotAcquir)(v.acquireMempoolDispatchMap), queryDispatch(Aeson.decodeAesonBoolean)(Data_Show.showBoolean)(v.mempoolHasTxDispatchMap) ];
  };
  var mkWalletBySpec = function (v) {
      if (v instanceof Wallet_Spec.UseKeys) {
          return Control_Bind.bind(Effect_Aff.bindAff)((function () {
              if (v.value0 instanceof Wallet_Spec.PrivatePaymentKeyFile) {
                  return Wallet_KeyFile.privatePaymentKeyFromFile(v.value0.value0);
              };
              if (v.value0 instanceof Wallet_Spec.PrivatePaymentKeyValue) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0.value0);
              };
              throw new Error("Failed pattern match at QueryM (line 386, column 26 - line 389, column 45): " + [ v.value0.constructor.name ]);
          })())(function (privatePaymentKey) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(v.value1)(function (v1) {
                  if (v1 instanceof Wallet_Spec.PrivateStakeKeyFile) {
                      return Wallet_KeyFile.privateStakeKeyFromFile(v1.value0);
                  };
                  if (v1 instanceof Wallet_Spec.PrivateStakeKeyValue) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value0);
                  };
                  throw new Error("Failed pattern match at QueryM (line 390, column 45 - line 392, column 43): " + [ v1.constructor.name ]);
              }))(function (mbPrivateStakeKey) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Wallet.mkKeyWallet(privatePaymentKey)(mbPrivateStakeKey));
              });
          });
      };
      if (v instanceof Wallet_Spec.ConnectToNami) {
          return Wallet.mkNamiWalletAff;
      };
      if (v instanceof Wallet_Spec.ConnectToGero) {
          return Wallet.mkGeroWalletAff;
      };
      if (v instanceof Wallet_Spec.ConnectToFlint) {
          return Wallet.mkFlintWalletAff;
      };
      if (v instanceof Wallet_Spec.ConnectToEternl) {
          return Wallet.mkEternlWalletAff;
      };
      if (v instanceof Wallet_Spec.ConnectToLode) {
          return Wallet.mkLodeWalletAff;
      };
      throw new Error("Failed pattern match at QueryM (line 384, column 18 - line 398, column 35): " + [ v.constructor.name ]);
  };
  var mkLogger = function (logLevel) {
      return function (mbCustomLogger) {
          return function (level) {
              return function (message) {
                  if (mbCustomLogger instanceof Data_Maybe.Nothing) {
                      return Helpers.logString(logLevel)(level)(message);
                  };
                  if (mbCustomLogger instanceof Data_Maybe.Just) {
                      return Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(function __do() {
                          var timestamp = Data_JSDate.now();
                          return Effect_Aff.launchAff_(mbCustomLogger.value0({
                              level: level,
                              message: message,
                              tags: Data_Map_Internal.empty,
                              timestamp: timestamp
                          }))();
                      });
                  };
                  throw new Error("Failed pattern match at QueryM (line 1124, column 3 - line 1128, column 73): " + [ mbCustomLogger.constructor.name ]);
              };
          };
      };
  };
  var mkListenerSet = function (dim) {
      return function (pr) {
          return {
              addMessageListener: function (id) {
                  return function (func) {
                      return Effect_Ref.modify_(Types_MultiMap.insert(Data_Ord.ordString)(id)(func))(dim);
                  };
              },
              removeMessageListener: function (id) {
                  return function __do() {
                      Effect_Ref.modify_(Types_MultiMap["delete"](Data_Ord.ordString)(id))(dim)();
                      return Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordString)(id))(pr)();
                  };
              },
              addRequest: function (id) {
                  return function (req) {
                      return Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordString)(id)(req))(pr);
                  };
              }
          };
      };
  };
  var messageFoldF = function (msg) {
      return function (acc$prime) {
          return function (func) {
              return function __do() {
                  var acc = acc$prime();
                  var $163 = Data_Either.isRight(acc);
                  if ($163) {
                      return acc$prime();
                  };
                  return func(msg)();
              };
          };
      };
  };
  var listeners = function (v) {
      return v.value1;
  };
  var liftQueryM = (function () {
      var toDefaultQueryEnv = function (c) {
          return {
              config: c.config,
              runtime: c.runtime,
              extraConfig: {}
          };
      };
      var $254 = Data_Newtype.wrap();
      var $255 = Control_Monad_Reader_Trans.withReaderT(toDefaultQueryEnv);
      var $256 = Data_Newtype.unwrap();
      return function ($257) {
          return $254($255($256($257)));
      };
  })();
  var handleAffjaxResponse = function (dictDecodeAeson) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(new ClientHttpError(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0.status < 200 || v.value0.status > 299) {
                  return new Data_Either.Left(new ClientHttpResponseError(v.value0.body));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ClientDecodeJsonError.create)(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Aeson.decodeAeson(dictDecodeAeson))(Aeson.parseJsonStringToAeson)(v.value0.body));
              };
          };
          throw new Error("Failed pattern match at QueryM (line 658, column 1 - line 662, column 31): " + [ v.constructor.name ]);
      };
  };
  var getRequestInputToStore = function (v) {
      if (v instanceof RequestInput) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof RequestInputToStoreInPendingRequests) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at QueryM (line 995, column 1 - line 996, column 69): " + [ v.constructor.name ]);
  };
  var getRequestInput = function (v) {
      if (v instanceof RequestInput) {
          return v.value0;
      };
      if (v instanceof RequestInputToStoreInPendingRequests) {
          return v.value0;
      };
      throw new Error("Failed pattern match at QueryM (line 991, column 1 - line 991, column 77): " + [ v.constructor.name ]);
  };
  var getLogger = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($258) {
      return (function (v) {
          return v.logLevel;
      })((function (v) {
          return v.config;
      })($258));
  }))(function (logLevel) {
      return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($259) {
          return (function (v) {
              return v.customLogger;
          })((function (v) {
              return v.config;
          })($259));
      }))(function (mbCustomLogger) {
          return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(mkLogger(logLevel)(mbCustomLogger));
      });
  });
  var dispatchErrorToError = function (v) {
      if (v instanceof JsError) {
          return v.value0;
      };
      if (v instanceof JsonError) {
          return Effect_Exception.error(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0));
      };
      if (v instanceof FaultError) {
          return Effect_Exception.error("Server responded with `fault`: " + Aeson.stringifyAeson(v.value0));
      };
      if (v instanceof ListenerCancelled) {
          return Effect_Exception.error("Listener cancelled (" + (v.value0 + ")"));
      };
      throw new Error("Failed pattern match at QueryM (line 1207, column 1 - line 1207, column 47): " + [ v.constructor.name ]);
  };
  var mkRequestAff$prime = function (listeners$prime) {
      return function (webSocket) {
          return function (logger) {
              return function (jsonWspCall) {
                  return function (getLs) {
                      return function (inp) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(QueryM_JsonWsp.buildRequest(jsonWspCall)(getRequestInput(inp))))(function (v) {
                              var sBody = Aeson.stringifyAeson(v.body);
                              var respLs = getLs(listeners$prime);
                              var affFunc = function (cont) {
                                  return function __do() {
                                      respLs.addMessageListener(v.id)(function (result) {
                                          return function __do() {
                                              respLs.removeMessageListener(v.id)();
                                              if (result instanceof Data_Either.Left && result.value0 instanceof ListenerCancelled) {
                                                  return Data_Unit.unit;
                                              };
                                              return cont(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(dispatchErrorToError)(result))();
                                          };
                                      })();
                                      respLs.addRequest(v.id)(new Data_Tuple.Tuple(sBody, getRequestInputToStore(inp)))();
                                      JsWebSocket["_wsSend"](webSocket)(logger(Data_Log_Level.Debug.value))(sBody)();
                                      return Effect_Aff.Canceler(function (err) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(respLs.removeMessageListener(v.id)))(function () {
                                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(err));
                                          });
                                      });
                                  };
                              };
                              return Effect_Aff.makeAff(affFunc);
                          });
                      };
                  };
              };
          };
      };
  };
  var mkRequestAff = function (listeners$prime) {
      return function (webSocket) {
          return function (logger) {
              return function (jsonWspCall) {
                  return function (getLs) {
                      var $260 = mkRequestAff$prime(listeners$prime)(webSocket)(logger)(jsonWspCall)(getLs);
                      return function ($261) {
                          return $260(RequestInput.create($261));
                      };
                  };
              };
          };
      };
  };
  var mkDatumCacheRequestAff = function (datumCacheWs) {
      return mkRequestAff(listeners(datumCacheWs))(underlyingWebSocket(datumCacheWs));
  };
  var mkOgmiosRequestAff = function (ogmiosWs) {
      return mkRequestAff(listeners(ogmiosWs))(underlyingWebSocket(ogmiosWs));
  };
  var getProtocolParametersAff = function (ogmiosWs) {
      return function (logger) {
          return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.queryProtocolParametersCall)(function (v) {
              return v.getProtocolParameters;
          })(Data_Unit.unit);
      };
  };
  var mempoolSnapshotHasTxAff = function (ogmiosWs) {
      return function (logger) {
          return function (ms) {
              return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.mempoolSnapshotHasTxCall(ms))(function (v) {
                  return v.mempoolHasTx;
              });
          };
      };
  };
  var mkRequest = function (listeners$prime) {
      return function (ws) {
          return function (jsonWspCall) {
              return function (getLs) {
                  return function (inp) {
                      return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(getLogger)(function (logger) {
                          return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(mkRequestAff(listeners$prime)(ws)(logger)(jsonWspCall)(getLs)(inp));
                      });
                  };
              };
          };
      };
  };
  var mkDatumCacheRequest = function (jsonWspCall) {
      return function (getLs) {
          return function (inp) {
              return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($262) {
                  return listeners((function (v) {
                      return v.datumCacheWs;
                  })((function (v) {
                      return v.runtime;
                  })($262)));
              }))(function (listeners$prime) {
                  return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($263) {
                      return underlyingWebSocket((function (v) {
                          return v.datumCacheWs;
                      })((function (v) {
                          return v.runtime;
                      })($263)));
                  }))(function (websocket) {
                      return mkRequest(listeners$prime)(websocket)(jsonWspCall)(getLs)(inp);
                  });
              });
          };
      };
  };
  var getDatumByHash = function (hash) {
      return Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(Data_Newtype.unwrap())(mkDatumCacheRequest(QueryM_DatumCacheWsp.getDatumByHashCall)(function (v) {
          return v.getDatumByHash;
      })(hash));
  };
  var mkOgmiosRequest = function (jsonWspCall) {
      return function (getLs) {
          return function (inp) {
              return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($264) {
                  return listeners((function (v) {
                      return v.ogmiosWs;
                  })((function (v) {
                      return v.runtime;
                  })($264)));
              }))(function (listeners$prime) {
                  return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($265) {
                      return underlyingWebSocket((function (v) {
                          return v.ogmiosWs;
                      })((function (v) {
                          return v.runtime;
                      })($265)));
                  }))(function (websocket) {
                      return mkRequest(listeners$prime)(websocket)(jsonWspCall)(getLs)(inp);
                  });
              });
          };
      };
  };
  var evaluateTxOgmios = mkOgmiosRequest(QueryM_Ogmios.evaluateTxCall)(function (v) {
      return v.evaluate;
  });
  var getChainTip = (function () {
      var ogmiosChainTipToTip = function (v) {
          if (v instanceof QueryM_Ogmios.CtChainOrigin) {
              return Types_Chain.TipAtGenesis.value;
          };
          if (v instanceof QueryM_Ogmios.CtChainPoint) {
              return Types_Chain.Tip.create(Data_Newtype.wrap()({
                  slot: v.value0.slot,
                  blockHeaderHash: Data_Newtype.wrap()(Data_Newtype.unwrap()(v.value0.hash))
              }));
          };
          throw new Error("Failed pattern match at QueryM (line 441, column 25 - line 444, column 52): " + [ v.constructor.name ]);
      };
      return Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(ogmiosChainTipToTip)(mkOgmiosRequest(QueryM_Ogmios.queryChainTipCall)(function (v) {
          return v.chainTip;
      })(Data_Unit.unit));
  })();
  var submitTxOgmios = function (txHash) {
      return function (tx) {
          return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($266) {
              return underlyingWebSocket((function (v) {
                  return v.ogmiosWs;
              })((function (v) {
                  return v.runtime;
              })($266)));
          }))(function (ws) {
              return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($267) {
                  return listeners((function (v) {
                      return v.ogmiosWs;
                  })((function (v) {
                      return v.runtime;
                  })($267)));
              }))(function (listeners$prime) {
                  return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function (v) {
                      return v.config;
                  }))(function (cfg) {
                      var inp = new RequestInputToStoreInPendingRequests(new Data_Tuple.Tuple(txHash, tx));
                      return Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(mkRequestAff$prime(listeners$prime)(ws)(mkLogger(cfg.logLevel)(cfg.customLogger))(QueryM_Ogmios.submitTxCall)(function (v) {
                          return v.submit;
                      })(inp));
                  });
              });
          });
      };
  };
  var defaultErr = new Data_Argonaut_Decode_Error.TypeMismatch("default error");
  var defaultMessageListener = function (logger) {
      return function (dispatchArray) {
          return function (msg) {
              return function __do() {
                  var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(messageFoldF(msg))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create(new JsonError(defaultErr))))(dispatchArray)();
                  return Data_Either.either(function (err) {
                      return Control_Applicative.unless(Effect.applicativeEffect)((function () {
                          if (err instanceof JsonError) {
                              return Data_Eq.eq(Data_Argonaut_Decode_Error.eqJsonDecodeError)(err.value0)(defaultErr);
                          };
                          return false;
                      })())(logger(Data_Log_Level["Error"].value)("unexpected error on input: " + (msg + (" Error:" + Data_Show.show(showDispatchError)(err)))));
                  })(Control_Category.identity(Control_Category.categoryFn))(v)();
              };
          };
      };
  };
  var datumCacheMessageDispatch = function (v) {
      return [ queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumByHash)(QueryM_DatumCacheWsp.showGetDatumByHashR)(v.getDatumByHashDispatchMap), queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumsByHas)(QueryM_DatumCacheWsp.showGetDatumsByHashesR)(v.getDatumsByHashesDispatchMap), queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetTxByHashR)(QueryM_DatumCacheWsp.showGetTxByHashR)(v.getTxByHashDispatchMap) ];
  };
  var createPendingRequests = Effect_Ref["new"](Data_Map_Internal.empty);
  var createMutableDispatch = Effect_Ref["new"](Types_MultiMap.empty);
  var mkDatumCacheWebSocket$prime = function (logger) {
      return function (serverCfg) {
          return function ($$continue) {
              return function __do() {
                  var getDatumByHashDispatchMap = createMutableDispatch();
                  var getDatumsByHashesDispatchMap = createMutableDispatch();
                  var getTxByHashDispatchMap = createMutableDispatch();
                  var getDatumByHashPendingRequests = createPendingRequests();
                  var getDatumsByHashesPendingRequests = createPendingRequests();
                  var getTxByHashPendingRequests = createPendingRequests();
                  var messageDispatch = datumCacheMessageDispatch({
                      getDatumByHashDispatchMap: getDatumByHashDispatchMap,
                      getDatumsByHashesDispatchMap: getDatumsByHashesDispatchMap,
                      getTxByHashDispatchMap: getTxByHashDispatchMap
                  });
                  var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkOgmiosDatumCacheWsUrl(serverCfg))();
                  var sendRequest = (function () {
                      var $268 = JsWebSocket["_wsSend"](ws)(logger(Data_Log_Level.Debug.value));
                      return function ($269) {
                          return $268(Data_Tuple.fst($269));
                      };
                  })();
                  var resendPendingRequests = function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumByHashPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumsByHashesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getTxByHashPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                  };
                  var onFirstConnectionError = function (errMessage) {
                      return function __do() {
                          JsWebSocket["_wsClose"](ws)();
                          logger(Data_Log_Level["Error"].value)("First connection to Ogmios Datum Cache WebSocket failed. " + ("Terminating. Error: " + errMessage))();
                          return $$continue(Data_Either.Left.create(Effect_Exception.error(errMessage)))();
                      };
                  };
                  var firstConnectionErrorRef = JsWebSocket["_onWsError"](ws)(onFirstConnectionError)();
                  var hasConnectedOnceRef = Effect_Ref["new"](false)();
                  JsWebSocket["_onWsConnect"](ws)(function __do() {
                      var v = Effect_Ref.read(hasConnectedOnceRef)();
                      if (v) {
                          logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache WS connection re-established, resending " + "pending requests...")();
                          return resendPendingRequests();
                      };
                      if (!v) {
                          logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache Connection established")();
                          Effect_Ref.write(true)(hasConnectedOnceRef)();
                          JsWebSocket["_removeOnWsError"](ws)(firstConnectionErrorRef)();
                          JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(logger)(messageDispatch))();
                          Data_Functor["void"](Effect.functorEffect)(JsWebSocket["_onWsError"](ws)(function (err) {
                              return function __do() {
                                  logger(Data_Log_Level.Debug.value)("Ogmios Datum Cache WebSocket error (" + (err + "). Reconnecting..."))();
                                  return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(500.0)))(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(JsWebSocket["_wsReconnect"](ws));
                                  }))();
                              };
                          }))();
                          return $$continue(Data_Either.Right.create(new WebSocket(ws, {
                              getDatumByHash: mkListenerSet(getDatumByHashDispatchMap)(getDatumByHashPendingRequests),
                              getDatumsByHashes: mkListenerSet(getDatumsByHashesDispatchMap)(getDatumsByHashesPendingRequests),
                              getTxByHash: mkListenerSet(getTxByHashDispatchMap)(getTxByHashPendingRequests)
                          })))();
                      };
                      throw new Error("Failed pattern match at QueryM (line 934, column 54 - line 960, column 10): " + [ v.constructor.name ]);
                  })();
                  return Effect_Aff.Canceler(function (err) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          JsWebSocket["_wsClose"](ws)();
                          return $$continue(Data_Either.Left.create(err))();
                      });
                  });
              };
          };
      };
  };
  var mkDatumCacheWebSocketAff = function (logger) {
      var $270 = mkDatumCacheWebSocket$prime(logger);
      return function ($271) {
          return Effect_Aff.makeAff($270($271));
      };
  };
  var checkTxByHashAff = function (datumCacheWs) {
      return function (logger) {
          var $272 = Data_Functor.map(Effect_Aff.functorAff)((function () {
              var $275 = Data_Newtype.unwrap();
              return function ($276) {
                  return Data_Maybe.isJust($275($276));
              };
          })());
          var $273 = mkDatumCacheRequestAff(datumCacheWs)(logger)(QueryM_DatumCacheWsp.getTxByHash)(function (v) {
              return v.getTxByHash;
          });
          return function ($274) {
              return $272($273($274));
          };
      };
  };
  var callCip30Wallet = function (wallet) {
      return function (act) {
          return act(wallet)(wallet.connection);
      };
  };
  var getWalletAddresses = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($277) {
      return (function (v) {
          return v.networkId;
      })((function (v) {
          return v.config;
      })($277));
  }))(function (networkId) {
      return withMWalletAff(function (v) {
          if (v instanceof Wallet.Eternl) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddresses;
              });
          };
          if (v instanceof Wallet.Nami) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddresses;
              });
          };
          if (v instanceof Wallet.Gero) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddresses;
              });
          };
          if (v instanceof Wallet.Flint) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddresses;
              });
          };
          if (v instanceof Wallet.Lode) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddresses;
              });
          };
          if (v instanceof Wallet.KeyWallet) {
              return Data_Functor.map(Effect_Aff.functorAff)(function ($278) {
                  return Data_Maybe.Just.create(Data_Array.singleton($278));
              })((Data_Newtype.unwrap()(v.value0)).address(networkId));
          };
          throw new Error("Failed pattern match at QueryM (line 527, column 18 - line 533, column 81): " + [ v.constructor.name ]);
      });
  });
  var ownPubKeyHashes = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(getWalletAddresses)(function (mbAddress) {
      return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap()))(Control_Bind.bind(Data_Maybe.bindMaybe)(mbAddress)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred)(Serialization_Address.stakeCredentialToKeyHash)))));
  });
  var ownPaymentPubKeyHashes = Data_Functor.map(functorQueryMExtended(Effect_Aff.functorAff))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap())))(ownPubKeyHashes);
  var ownStakePubKeyHash = Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(functorQueryMExtended(Effect_Aff.functorAff))(getWalletAddresses)(function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
  }))(function (mbAddress) {
      return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(mbAddress)(Serialization_Address.baseAddressFromAddress))(function (baseAddress) {
          return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $279 = Data_Newtype.wrap();
              var $280 = Data_Newtype.wrap();
              return function ($281) {
                  return $279($280($281));
              };
          })())(Serialization_Address.stakeCredentialToKeyHash(Serialization_Address.baseAddressDelegationCred(baseAddress)));
      }));
  });
  var applyArgs = function (dictNewtype) {
      return function (dictDecodeAeson) {
          return function (script) {
              return function (args) {
                  var plutusDataToAeson = (function () {
                      var $282 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $284 = Aeson.encodeAeson(Aeson.encodeAesonString);
                          var $285 = Untagged_Union.asOneOf();
                          return function ($286) {
                              return $284(Types_ByteArray.byteArrayToHex(Serialization.toBytes($285($286))));
                          };
                      })());
                      return function ($283) {
                          return $282(Serialization_PlutusData.convertPlutusData($283));
                      };
                  })();
                  return Control_Bind.bind(bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(monadAskQueryEnvQueryMExt)(function ($287) {
                      return (function (v) {
                          return v.ctlServerConfig;
                      })((function (v) {
                          return v.config;
                      })($287));
                  }))(function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Either.Left.create(new ClientOtherError("The `ctl-server` service is required to call `applyArgs`. Please provide a `Just` value in `ConfigParams.ctlServerConfig` and make sure that the `ctl-server` service is running and available at the provided host and port. The `ctl-server` packages can be obtained from `overlays.ctl-server` defined in CTL's flake. Please see `doc/runtime.md` in the CTL repository for more information")));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          var v1 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(plutusDataToAeson)(args);
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Either.Left.create(new ClientEncodingError("Failed to convert script args")));
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              var url = QueryM_ServerConfig.mkHttpUrl(v.value0) + "/apply-args";
                              var reqBody = Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("script", scriptToAeson(Data_Newtype.unwrap()(script))), new Data_Tuple.Tuple("args", Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonAeson))(v1.value0)) ]));
                              var language = Data_Tuple.snd(Data_Newtype.unwrap()(Data_Newtype.unwrap()(script)));
                              return Data_Functor.mapFlipped(functorQueryMExtended(Effect_Aff.functorAff))(Effect_Aff_Class.liftAff(monadAffQueryMExtendedAff)(postAeson(url)(reqBody)))((function () {
                                  var $288 = Data_Functor.map(Data_Either.functorEither)((function () {
                                      var $291 = Data_Newtype.wrap();
                                      var $292 = Data_Function.flip(Data_Tuple.Tuple.create)(language);
                                      return function ($293) {
                                          return $291(Types_Scripts.PlutusScript($292($293)));
                                      };
                                  })());
                                  var $289 = handleAffjaxResponse(Types_ByteArray.decodeAesonByteArray);
                                  return function ($290) {
                                      return $288($289($290));
                                  };
                              })());
                          };
                          throw new Error("Failed pattern match at QueryM (line 622, column 20 - line 641, column 33): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at QueryM (line 611, column 45 - line 641, column 33): " + [ v.constructor.name ]);
                  });
              };
          };
      };
  };
  var acquireMempoolSnapshotAff = function (ogmiosWs) {
      return function (logger) {
          return mkOgmiosRequestAff(ogmiosWs)(logger)(QueryM_Ogmios.acquireMempoolSnapshotCall)(function (v) {
              return v.acquireMempool;
          })(Data_Unit.unit);
      };
  };
  var withMempoolSnapshot = function (ogmiosWs) {
      return function (logger) {
          return function (cont) {
              return Data_Function.flip(Effect_Aff.runAff_)(acquireMempoolSnapshotAff(ogmiosWs)(logger))(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return function __do() {
                          logger(Data_Log_Level["Error"].value)("Failed to acquire a mempool snapshot: Error: " + Data_Show.show(Effect_Exception.showError)(v.value0))();
                          return Effect_Aff.launchAff_(cont(Data_Maybe.Nothing.value))();
                      };
                  };
                  if (v instanceof Data_Either.Right) {
                      return Effect_Aff.launchAff_(cont(new Data_Maybe.Just(v.value0)));
                  };
                  throw new Error("Failed pattern match at QueryM (line 481, column 62 - line 487, column 47): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var resendPendingSubmitRequests = function (ogmiosWs) {
      return function (datumCacheWs) {
          return function (logger) {
              return function (sendRequest) {
                  return function (dim) {
                      return function (pr) {
                          var log = function (label) {
                              return function (value) {
                                  return function (txHash) {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logger(Data_Log_Level.Debug.value)(label + (": " + (Data_Show.show(Data_Show.showBoolean)(value) + (" TxHash: " + Data_Show.show(Types_ByteArray.showByteArray)(txHash))))));
                                  };
                              };
                          };
                          var handlePendingSubmitRequest = function (ms) {
                              return function (listenerId) {
                                  return function (requestBody) {
                                      return function (txHash) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(mempoolSnapshotHasTxAff(ogmiosWs)(logger)(ms)(txHash))(function (txInMempool) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(log("Tx in the mempool")(txInMempool)(txHash))(function () {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                                      if (txInMempool) {
                                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
                                                      };
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(checkTxByHashAff(datumCacheWs)(logger)(txHash))(function (txConfirmed) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(log("Tx confirmed")(txConfirmed)(txHash))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.unless(Effect_Aff.applicativeAff)(txConfirmed)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(sendRequest(new Data_Tuple.Tuple(requestBody, Data_Unit.unit)))))(function () {
                                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(!txConfirmed);
                                                              });
                                                          });
                                                      });
                                                  })())(function (retrySubmitTx) {
                                                      return Control_Applicative.unless(Effect_Aff.applicativeAff)(retrySubmitTx)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                                          Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordString)(listenerId))(pr)();
                                                          var dispatchMap = Effect_Ref.read(dim)();
                                                          Effect_Ref.modify_(Types_MultiMap["delete"](Data_Ord.ordString)(listenerId))(dim)();
                                                          return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(function (v) {
                                                              return v(Data_Either.Right.create(new QueryM_Ogmios.SubmitTxSuccess(txHash)));
                                                          })(Types_MultiMap.lookup(Data_Ord.ordString)(listenerId)(dispatchMap))();
                                                      }));
                                                  });
                                              });
                                          });
                                      };
                                  };
                              };
                          };
                          return function __do() {
                              var submitPendingRequests = Effect_Ref.read(pr)();
                              return Control_Applicative.unless(Effect.applicativeEffect)(Data_Map_Internal.isEmpty(submitPendingRequests))(withMempoolSnapshot(ogmiosWs)(logger)(function (v) {
                                  if (v instanceof Data_Maybe.Nothing) {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest)(submitPendingRequests));
                                  };
                                  if (v instanceof Data_Maybe.Just) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(5000.0)))(function () {
                                          var v1 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(submitPendingRequests);
                                          return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v1)(function (v2) {
                                              if (v2.value1.value1 instanceof Data_Maybe.Nothing) {
                                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(sendRequest(new Data_Tuple.Tuple(v2.value1.value0, Data_Unit.unit)));
                                              };
                                              if (v2.value1.value1 instanceof Data_Maybe.Just) {
                                                  return handlePendingSubmitRequest(v.value0)(v2.value0)(v2.value1.value0)(v2.value1.value1.value0.value0);
                                              };
                                              throw new Error("Failed pattern match at QueryM (line 858, column 11 - line 862, column 74): " + [ v2.value1.value1.constructor.name ]);
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at QueryM (line 849, column 41 - line 862, column 74): " + [ v.constructor.name ]);
                              }))();
                          };
                      };
                  };
              };
          };
      };
  };
  var mkOgmiosWebSocket$prime = function (datumCacheWs) {
      return function (logger) {
          return function (serverCfg) {
              return function ($$continue) {
                  return function __do() {
                      var utxoDispatchMap = createMutableDispatch();
                      var utxosAtDispatchMap = createMutableDispatch();
                      var chainTipDispatchMap = createMutableDispatch();
                      var evaluateTxDispatchMap = createMutableDispatch();
                      var getProtocolParametersDispatchMap = createMutableDispatch();
                      var submitDispatchMap = createMutableDispatch();
                      var eraSummariesDispatchMap = createMutableDispatch();
                      var currentEpochDispatchMap = createMutableDispatch();
                      var systemStartDispatchMap = createMutableDispatch();
                      var acquireMempoolDispatchMap = createMutableDispatch();
                      var mempoolHasTxDispatchMap = createMutableDispatch();
                      var utxoPendingRequests = createPendingRequests();
                      var utxosAtPendingRequests = createPendingRequests();
                      var chainTipPendingRequests = createPendingRequests();
                      var evaluateTxPendingRequests = createPendingRequests();
                      var getProtocolParametersPendingRequests = createPendingRequests();
                      var submitPendingRequests = createPendingRequests();
                      var eraSummariesPendingRequests = createPendingRequests();
                      var currentEpochPendingRequests = createPendingRequests();
                      var systemStartPendingRequests = createPendingRequests();
                      var acquireMempoolPendingRequests = createPendingRequests();
                      var mempoolHasTxPendingRequests = createPendingRequests();
                      var messageDispatch = ogmiosMessageDispatch({
                          utxoDispatchMap: utxoDispatchMap,
                          utxosAtDispatchMap: utxosAtDispatchMap,
                          chainTipDispatchMap: chainTipDispatchMap,
                          evaluateTxDispatchMap: evaluateTxDispatchMap,
                          getProtocolParametersDispatchMap: getProtocolParametersDispatchMap,
                          submitDispatchMap: submitDispatchMap,
                          eraSummariesDispatchMap: eraSummariesDispatchMap,
                          currentEpochDispatchMap: currentEpochDispatchMap,
                          systemStartDispatchMap: systemStartDispatchMap,
                          acquireMempoolDispatchMap: acquireMempoolDispatchMap,
                          mempoolHasTxDispatchMap: mempoolHasTxDispatchMap
                      });
                      var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkWsUrl(serverCfg))();
                      var sendRequest = (function () {
                          var $295 = JsWebSocket["_wsSend"](ws)(logger(Data_Log_Level.Debug.value));
                          return function ($296) {
                              return $295(Data_Tuple.fst($296));
                          };
                      })();
                      var onFirstConnectionError = function (errMessage) {
                          return function __do() {
                              JsWebSocket["_wsClose"](ws)();
                              logger(Data_Log_Level["Error"].value)("First connection to Ogmios WebSocket failed. Terminating. Error: " + errMessage)();
                              JsWebSocket["_wsClose"](ws)();
                              return $$continue(Data_Either.Left.create(Effect_Exception.error(errMessage)))();
                          };
                      };
                      var ogmiosWs = new WebSocket(ws, {
                          utxo: mkListenerSet(utxoDispatchMap)(utxoPendingRequests),
                          utxosAt: mkListenerSet(utxosAtDispatchMap)(utxosAtPendingRequests),
                          chainTip: mkListenerSet(chainTipDispatchMap)(chainTipPendingRequests),
                          evaluate: mkListenerSet(evaluateTxDispatchMap)(evaluateTxPendingRequests),
                          getProtocolParameters: mkListenerSet(getProtocolParametersDispatchMap)(getProtocolParametersPendingRequests),
                          submit: mkListenerSet(submitDispatchMap)(submitPendingRequests),
                          eraSummaries: mkListenerSet(eraSummariesDispatchMap)(eraSummariesPendingRequests),
                          currentEpoch: mkListenerSet(currentEpochDispatchMap)(currentEpochPendingRequests),
                          systemStart: mkListenerSet(systemStartDispatchMap)(systemStartPendingRequests),
                          acquireMempool: mkListenerSet(acquireMempoolDispatchMap)(acquireMempoolPendingRequests),
                          mempoolHasTx: mkListenerSet(mempoolHasTxDispatchMap)(mempoolHasTxPendingRequests)
                      });
                      var resendPendingRequests = function __do() {
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(utxoPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(utxosAtPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(chainTipPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(evaluateTxPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getProtocolParametersPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(eraSummariesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(currentEpochPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(systemStartPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                          logger(Data_Log_Level.Debug.value)("Resent all pending requests")();
                          Effect_Ref.write(Types_MultiMap.empty)(acquireMempoolDispatchMap)();
                          Effect_Ref.write(Data_Map_Internal.empty)(acquireMempoolPendingRequests)();
                          Effect_Ref.write(Types_MultiMap.empty)(mempoolHasTxDispatchMap)();
                          Effect_Ref.write(Data_Map_Internal.empty)(mempoolHasTxPendingRequests)();
                          return resendPendingSubmitRequests(ogmiosWs)(datumCacheWs)(logger)(sendRequest)(submitDispatchMap)(submitPendingRequests)();
                      };
                      var firstConnectionErrorRef = JsWebSocket["_onWsError"](ws)(onFirstConnectionError)();
                      var hasConnectedOnceRef = Effect_Ref["new"](false)();
                      JsWebSocket["_onWsConnect"](ws)(function __do() {
                          var v = Effect_Ref.read(hasConnectedOnceRef)();
                          if (v) {
                              logger(Data_Log_Level.Debug.value)("Ogmios WS connection re-established, resending pending requests...")();
                              resendPendingRequests();
                              return logger(Data_Log_Level.Debug.value)("Resent all pending requests")();
                          };
                          if (!v) {
                              logger(Data_Log_Level.Debug.value)("Ogmios Connection established")();
                              Effect_Ref.write(true)(hasConnectedOnceRef)();
                              JsWebSocket["_removeOnWsError"](ws)(firstConnectionErrorRef)();
                              JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(logger)(messageDispatch))();
                              Data_Functor["void"](Effect.functorEffect)(JsWebSocket["_onWsError"](ws)(function (err) {
                                  return function __do() {
                                      logger(Data_Log_Level.Debug.value)("Ogmios WebSocket error (" + (err + "). Reconnecting..."))();
                                      return Effect_Aff.launchAff_(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(Data_Newtype.wrap()(500.0)))(function () {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(JsWebSocket["_wsReconnect"](ws));
                                      }))();
                                  };
                              }))();
                              return $$continue(new Data_Either.Right(ogmiosWs))();
                          };
                          throw new Error("Failed pattern match at QueryM (line 811, column 54 - line 829, column 32): " + [ v.constructor.name ]);
                      })();
                      return Effect_Aff.Canceler(function (err) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                              JsWebSocket["_wsClose"](ws)();
                              return $$continue(Data_Either.Left.create(err))();
                          });
                      });
                  };
              };
          };
      };
  };
  var mkOgmiosWebSocketAff = function (datumCacheWs) {
      return function (logger) {
          var $297 = mkOgmiosWebSocket$prime(datumCacheWs)(logger);
          return function ($298) {
              return Effect_Aff.makeAff($297($298));
          };
      };
  };
  var mkQueryRuntime = function (config) {
      var logger = mkLogger(config.logLevel)(config.customLogger);
      return Control_Bind.bind(Effect_Aff.bindAff)(Types_UsedTxOuts.newUsedTxOuts(Effect_Aff.monadEffectAff))(function (usedTxOuts) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Apply.apply(Effect_Aff.applyParAff)(Data_Functor.map(Effect_Aff.functorParAff)(QueryRuntimeModel.create)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(mkDatumCacheWebSocketAff(logger)(config.datumCacheConfig))(function (datumCacheWs) {
              return Control_Bind.bind(Effect_Aff.bindAff)(mkOgmiosWebSocketAff(datumCacheWs)(logger)(config.ogmiosConfig))(function (ogmiosWs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(getProtocolParametersAff(ogmiosWs)(logger))(function (pparams) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(ogmiosWs, new Data_Tuple.Tuple(datumCacheWs, pparams)));
                  });
              });
          }))))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(config.walletSpec)(mkWalletBySpec)))))(function (v) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  ogmiosWs: v.value0.value0,
                  datumCacheWs: v.value0.value1.value0,
                  wallet: v.value1,
                  usedTxOuts: usedTxOuts,
                  pparams: v.value0.value1.value1
              });
          });
      });
  };
  var withQueryRuntime = function (config) {
      return function (action) {
          return Control_Bind.bind(Effect_Aff.bindAff)(mkQueryRuntime(config))(function (runtime) {
              return Data_Function.flip(Effect_Aff["finally"])(Effect_Aff.supervise(action(runtime)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(stopQueryRuntime(runtime)));
          });
      };
  };
  exports["applyArgs"] = applyArgs;
  exports["evaluateTxOgmios"] = evaluateTxOgmios;
  exports["getChainTip"] = getChainTip;
  exports["getDatumByHash"] = getDatumByHash;
  exports["getWalletAddresses"] = getWalletAddresses;
  exports["liftQueryM"] = liftQueryM;
  exports["mkDatumCacheRequest"] = mkDatumCacheRequest;
  exports["mkLogger"] = mkLogger;
  exports["mkOgmiosRequest"] = mkOgmiosRequest;
  exports["ownPaymentPubKeyHashes"] = ownPaymentPubKeyHashes;
  exports["ownStakePubKeyHash"] = ownStakePubKeyHash;
  exports["submitTxOgmios"] = submitTxOgmios;
  exports["withMWallet"] = withMWallet;
  exports["withQueryRuntime"] = withQueryRuntime;
  exports["callCip30Wallet"] = callCip30Wallet;
  exports["functorQueryMExtended"] = functorQueryMExtended;
  exports["applyQueryMExtended"] = applyQueryMExtended;
  exports["applicativeQueryMExtended"] = applicativeQueryMExtended;
  exports["bindQueryMExtended"] = bindQueryMExtended;
  exports["alternativeQueryMExtended"] = alternativeQueryMExtended;
  exports["monadQueryMExtendedAff"] = monadQueryMExtendedAff;
  exports["monadEffectQueryMExtended"] = monadEffectQueryMExtended;
  exports["monadAffQueryMExtendedAff"] = monadAffQueryMExtendedAff;
  exports["monadThrowErrorQueryMExte"] = monadThrowErrorQueryMExte;
  exports["monadErrorErrorQueryMExte"] = monadErrorErrorQueryMExte;
  exports["monadAskQueryEnvQueryMExt"] = monadAskQueryEnvQueryMExt;
  exports["monadLoggerQueryMExtended"] = monadLoggerQueryMExtended;
  exports["parallelQueryMExtendedPar"] = parallelQueryMExtendedPar;
  exports["showClientError"] = showClientError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["ReindexRedeemers"] = $PS["ReindexRedeemers"] || {};
  var exports = $PS["ReindexRedeemers"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var CannotGetTxOutRefIndexForRedeemer = (function () {
      function CannotGetTxOutRefIndexForRedeemer(value0) {
          this.value0 = value0;
      };
      CannotGetTxOutRefIndexForRedeemer.create = function (value0) {
          return new CannotGetTxOutRefIndexForRedeemer(value0);
      };
      return CannotGetTxOutRefIndexForRedeemer;
  })();
  var genericReindexErrors_ = {
      to: function (x) {
          return new CannotGetTxOutRefIndexForRedeemer(x);
      },
      from: function (x) {
          return x.value0;
      }
  };
  var showReindexErrors = {
      show: Data_Show_Generic.genericShow(genericReindexErrors_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Transaction.showRedeemer))({
          reflectSymbol: function () {
              return "CannotGetTxOutRefIndexForRedeemer";
          }
      }))
  };
  var reindexSpentScriptRedeemers$prime = function (inputs) {
      return function (redeemersTxIns) {
          var reindex = function (ipts) {
              return function (v) {
                  if (v.value0.tag instanceof Types_RedeemerTag.Spend && v.value1 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new CannotGetTxOutRefIndexForRedeemer(v.value0))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_BigInt.fromInt)(Data_Array.elemIndex(Types_Transaction.eqTransactionInput)(v.value1.value0)(ipts))))(function (index) {
                          return Data_Either.Right.create(new Data_Tuple.Tuple({
                              tag: v.value0.tag,
                              index: index,
                              data: v.value0.data,
                              exUnits: v.value0.exUnits
                          }, new Data_Maybe.Just(v.value1.value0)));
                      });
                  };
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v.value1));
              };
          };
          return Control_Monad_Except_Trans.runExceptT(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(QueryM.monadQueryMExtendedAff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(reindex(inputs))(redeemersTxIns)));
      };
  };
  exports["reindexSpentScriptRedeemers'"] = reindexSpentScriptRedeemers$prime;
  exports["showReindexErrors"] = showReindexErrors;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  var use = function (dictMonadState) {
      return function (p) {
          return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
              return viewOn(v)(p);
          });
      };
  };
  var to = function (f) {
      return function (p) {
          var $3 = Data_Newtype.unwrap()(p);
          return function ($4) {
              return $3(f($4));
          };
      };
  };
  exports["viewOn"] = viewOn;
  exports["to"] = to;
  exports["use"] = use;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Tuple = $PS["Data.Tuple"];
  var profunctorForget = {
      dimap: function (f) {
          return function (v) {
              return function (v1) {
                  return function ($24) {
                      return v1(f($24));
                  };
              };
          };
      }
  };
  var strongForget = {
      first: function (v) {
          return function ($25) {
              return v(Data_Tuple.fst($25));
          };
      },
      second: function (v) {
          return function ($26) {
              return v(Data_Tuple.snd($26));
          };
      },
      Profunctor0: function () {
          return profunctorForget;
      }
  };
  exports["strongForget"] = strongForget;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  const Blake2 = require("blakejs");
  const SHA256 = require("jssha/dist/sha256");
  const SHA3 = require("jssha/dist/sha3");

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports.blake2b256Hash = bytesToHash => {
    return Blake2.blake2b(bytesToHash, null, 32);
  };

  exports.hashPlutusData = plutusData => {
    return lib.hash_plutus_data(plutusData).to_bytes();
  };

  exports.hashPlutusScript = script => script.hash();

  const SHA256_HASH_VARIANT = "SHA-256";
  const SHA3_256_HASH_VARIANT = "SHA3-256";

  const UINT8ARRAY_FORMAT = "UINT8ARRAY";
  const HEX_FORMAT = "HEX";
})(PS["Hashing"] = PS["Hashing"] || {});
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  const call = property => object => object[property]();
  const callMaybe = property => maybe => object => {
    const res = object[property]();
    return res != null ? maybe.just(res) : maybe.nothing;
  };                                             
  exports._txBody = tx => tx.body();

  const maybeGetter_ = fmap => propstr => maybe => obj => {
    if (typeof propstr != "string") {
      const s = "maybeGetter_ propstr must be a string, got " + propstr;
      throw s;
    }
    const res = obj[propstr]();
    return res == null ? maybe.nothing : maybe.just(fmap(res));
  };
  const maybeGetter = maybeGetter_(a => a);
  const maybeGetterMulti = propstr => containerHelper =>
    maybeGetter_(o => containerHelper.unpack(o))(propstr);
})(PS["Deserialization.Transaction"] = PS["Deserialization.Transaction"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Deserialization.Transaction"] = $PS["Deserialization.Transaction"] || {};
  var exports = $PS["Deserialization.Transaction"];
  var $foreign = $PS["Deserialization.Transaction"];
  exports["_txBody"] = $foreign["_txBody"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Hashing"] = $PS["Hashing"] || {};
  var exports = $PS["Hashing"];
  var $foreign = $PS["Hashing"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Deserialization_Transaction = $PS["Deserialization.Transaction"];
  var Serialization = $PS["Serialization"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_PlutusScript = $PS["Serialization.PlutusScript"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var transactionHash = (function () {
      var $4 = Data_Newtype.wrap();
      var $5 = Untagged_Union.asOneOf();
      return function ($6) {
          return $4($foreign.blake2b256Hash(Serialization.toBytes($5(Deserialization_Transaction["_txBody"]($6)))));
      };
  })();
  var plutusScriptHash = function ($7) {
      return $foreign.hashPlutusScript(Serialization_PlutusScript.convertPlutusScript($7));
  };
  var scriptRefHash = function (v) {
      if (v instanceof Cardano_Types_ScriptRef.PlutusScriptRef) {
          return new Data_Maybe.Just(plutusScriptHash(v.value0));
      };
      if (v instanceof Cardano_Types_ScriptRef.NativeScriptRef) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Hash.nativeScriptHash)(Serialization_NativeScript.convertNativeScript(v.value0));
      };
      throw new Error("Failed pattern match at Hashing (line 65, column 1 - line 65, column 47): " + [ v.constructor.name ]);
  };
  var datumHash = (function () {
      var $8 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $11 = Data_Newtype.wrap();
          return function ($12) {
              return $11($foreign.hashPlutusData($12));
          };
      })());
      var $9 = Data_Newtype.unwrap();
      return function ($10) {
          return $8(Serialization_PlutusData.convertPlutusData($9($10)));
      };
  })();
  exports["datumHash"] = datumHash;
  exports["plutusScriptHash"] = plutusScriptHash;
  exports["transactionHash"] = transactionHash;
  exports["scriptRefHash"] = scriptRefHash;
  exports["blake2b256Hash"] = $foreign.blake2b256Hash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.PubKeyHash"] = $PS["Types.PubKeyHash"] || {};
  var exports = $PS["Types.PubKeyHash"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];                    
  var toDataPubKeyHash = Serialization_Hash.toDataEd25519KeyHash;
  var toDataPaymentPubKeyHash = toDataPubKeyHash;
  var ordPubKeyHash = Serialization_Hash.ordEd25519KeyHash;
  var ordPaymentPubKeyHash = ordPubKeyHash;
  var genericStakePubKeyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericPubKeyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPubKeyHash = {
      show: Data_Show_Generic.genericShow(genericPubKeyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash))({
          reflectSymbol: function () {
              return "PubKeyHash";
          }
      }))
  };
  var showStakePubKeyHash = {
      show: Data_Show_Generic.genericShow(genericStakePubKeyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPubKeyHash))({
          reflectSymbol: function () {
              return "StakePubKeyHash";
          }
      }))
  };
  var genericPaymentPubKeyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPaymentPubKeyHash = {
      show: Data_Show_Generic.genericShow(genericPaymentPubKeyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPubKeyHash))({
          reflectSymbol: function () {
              return "PaymentPubKeyHash";
          }
      }))
  };                                                 
  var eqPubKeyHash = Serialization_Hash.eqEd25519KeyHash;
  var eqStakePubKeyHash = eqPubKeyHash;
  var eqPaymentPubKeyHash = eqPubKeyHash;
  var pubKeyHashBaseAddress = function (networkId) {
      return function (pkh) {
          return function (skh) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.paymentKeyHashStakeKeyHashAddress(networkId)(Data_Newtype.unwrap()(pkh))(Data_Newtype.unwrap()(Data_Newtype.unwrap()(skh))));
          };
      };
  };
  var payPubKeyHashBaseAddress = function (networkId) {
      return function (v) {
          return function (skh) {
              return pubKeyHashBaseAddress(networkId)(v)(skh);
          };
      };
  };
  var ed25519RewardAddress = function (dictNewtype) {
      return function (network) {
          return function (skh) {
              return Serialization_Address.rewardAddress({
                  network: network,
                  paymentCred: Serialization_Address.keyHashCredential(Data_Newtype.unwrap()(skh))
              });
          };
      };
  };
  var stakePubKeyHashRewardAddress = function (networkId) {
      var $61 = ed25519RewardAddress()(networkId);
      var $62 = Data_Newtype.unwrap();
      return function ($63) {
          return Serialization_Address.rewardAddressToAddress($61($62($63)));
      };
  };
  var ed25519EnterpriseAddress = function (dictNewtype) {
      return function (network) {
          return function (pkh) {
              return Serialization_Address.enterpriseAddress({
                  network: network,
                  paymentCred: Serialization_Address.keyHashCredential(Data_Newtype.unwrap()(pkh))
              });
          };
      };
  };
  var pubKeyHashEnterpriseAddress = function (networkId) {
      var $64 = ed25519EnterpriseAddress()(networkId);
      return function ($65) {
          return Serialization_Address.enterpriseAddressToAddress($64($65));
      };
  };
  var payPubKeyHashEnterpriseAddress = function (networkId) {
      return function (v) {
          return pubKeyHashEnterpriseAddress(networkId)(v);
      };
  };
  exports["payPubKeyHashBaseAddress"] = payPubKeyHashBaseAddress;
  exports["payPubKeyHashEnterpriseAddress"] = payPubKeyHashEnterpriseAddress;
  exports["stakePubKeyHashRewardAddress"] = stakePubKeyHashRewardAddress;
  exports["eqPubKeyHash"] = eqPubKeyHash;
  exports["showPubKeyHash"] = showPubKeyHash;
  exports["eqPaymentPubKeyHash"] = eqPaymentPubKeyHash;
  exports["ordPaymentPubKeyHash"] = ordPaymentPubKeyHash;
  exports["toDataPaymentPubKeyHash"] = toDataPaymentPubKeyHash;
  exports["showPaymentPubKeyHash"] = showPaymentPubKeyHash;
  exports["eqStakePubKeyHash"] = eqStakePubKeyHash;
  exports["showStakePubKeyHash"] = showStakePubKeyHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.Credential"] = $PS["Plutus.Types.Credential"] || {};
  var exports = $PS["Plutus.Types.Credential"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var PubKeyCredential = (function () {
      function PubKeyCredential(value0) {
          this.value0 = value0;
      };
      PubKeyCredential.create = function (value0) {
          return new PubKeyCredential(value0);
      };
      return PubKeyCredential;
  })();
  var ScriptCredential = (function () {
      function ScriptCredential(value0) {
          this.value0 = value0;
      };
      ScriptCredential.create = function (value0) {
          return new ScriptCredential(value0);
      };
      return ScriptCredential;
  })();
  var StakingHash = (function () {
      function StakingHash(value0) {
          this.value0 = value0;
      };
      StakingHash.create = function (value0) {
          return new StakingHash(value0);
      };
      return StakingHash;
  })();
  var StakingPtr = (function () {
      function StakingPtr(value0) {
          this.value0 = value0;
      };
      StakingPtr.create = function (value0) {
          return new StakingPtr(value0);
      };
      return StakingPtr;
  })();                              
  var genericStakingCredential_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new StakingHash(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new StakingPtr(x.value0);
          };
          throw new Error("Failed pattern match at Plutus.Types.Credential (line 108, column 1 - line 108, column 44): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof StakingHash) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof StakingPtr) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Plutus.Types.Credential (line 108, column 1 - line 108, column 44): " + [ x.constructor.name ]);
      }
  };
  var genericCredential_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new PubKeyCredential(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new ScriptCredential(x.value0);
          };
          throw new Error("Failed pattern match at Plutus.Types.Credential (line 50, column 1 - line 50, column 37): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof PubKeyCredential) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ScriptCredential) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Plutus.Types.Credential (line 50, column 1 - line 50, column 37): " + [ x.constructor.name ]);
      }
  };
  var showCredential = {
      show: Data_Show_Generic.genericShow(genericCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPubKeyHash))({
          reflectSymbol: function () {
              return "PubKeyCredential";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))({
          reflectSymbol: function () {
              return "ScriptCredential";
          }
      })))
  };
  var showStakingCredential = {
      show: Data_Show_Generic.genericShow(genericStakingCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCredential))({
          reflectSymbol: function () {
              return "StakingHash";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "certIx";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "slot";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txIx";
          }
      })(Data_Show.showRecordFieldsNil)(Serialization_Address.showTransactionIndex))(Serialization_Address.showSlot))(Serialization_Address.showCertificateIndex))))({
          reflectSymbol: function () {
              return "StakingPtr";
          }
      })))
  };
  var eqCredential = {
      eq: function (x) {
          return function (y) {
              if (x instanceof PubKeyCredential && y instanceof PubKeyCredential) {
                  return Data_Eq.eq(Types_PubKeyHash.eqPubKeyHash)(x.value0)(y.value0);
              };
              if (x instanceof ScriptCredential && y instanceof ScriptCredential) {
                  return Data_Eq.eq(Types_Scripts.eqValidatorHash)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var eqStakingCredential = {
      eq: function (x) {
          return function (y) {
              if (x instanceof StakingHash && y instanceof StakingHash) {
                  return Data_Eq.eq(eqCredential)(x.value0)(y.value0);
              };
              if (x instanceof StakingPtr && y instanceof StakingPtr) {
                  return Data_Eq.eq(Serialization_Address.eqCertificateIndex)(x.value0.certIx)(y.value0.certIx) && Data_Eq.eq(Serialization_Address.eqSlot)(x.value0.slot)(y.value0.slot) && Data_Eq.eq(Serialization_Address.eqTransactionIndex)(x.value0.txIx)(y.value0.txIx);
              };
              return false;
          };
      }
  };
  exports["PubKeyCredential"] = PubKeyCredential;
  exports["ScriptCredential"] = ScriptCredential;
  exports["StakingHash"] = StakingHash;
  exports["StakingPtr"] = StakingPtr;
  exports["eqCredential"] = eqCredential;
  exports["showCredential"] = showCredential;
  exports["eqStakingCredential"] = eqStakingCredential;
  exports["showStakingCredential"] = showStakingCredential;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.Address"] = $PS["Plutus.Types.Address"] || {};
  var exports = $PS["Plutus.Types.Address"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Plutus_Types_Credential = $PS["Plutus.Types.Credential"];
  var AddressWithNetworkTag = function (x) {
      return x;
  };                                   
  var genericAddress_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showAddress = {
      show: Data_Show_Generic.genericShow(genericAddress_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "addressCredential";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "addressStakingCredential";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Plutus_Types_Credential.showStakingCredential)))(Plutus_Types_Credential.showCredential))))({
          reflectSymbol: function () {
              return "Address";
          }
      }))
  };
  var eqAddress = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Plutus_Types_Credential.eqCredential)(x.addressCredential)(y.addressCredential) && Data_Eq.eq(Data_Maybe.eqMaybe(Plutus_Types_Credential.eqStakingCredential))(x.addressStakingCredential)(y.addressStakingCredential);
          };
      }
  };
  var scriptHashAddress = function (vh) {
      return Data_Newtype.wrap()({
          addressCredential: new Plutus_Types_Credential.ScriptCredential(vh),
          addressStakingCredential: Data_Maybe.Nothing.value
      });
  };
  exports["AddressWithNetworkTag"] = AddressWithNetworkTag;
  exports["scriptHashAddress"] = scriptHashAddress;
  exports["eqAddress"] = eqAddress;
  exports["showAddress"] = showAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Conversion.Address"] = $PS["Plutus.Conversion.Address"] || {};
  var exports = $PS["Plutus.Conversion.Address"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Credential = $PS["Plutus.Types.Credential"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var toPlutusAddressWithNetworkTag = function (addressCsl) {
      var toPlutusBaseAddress = function (addr) {
          var worker = function (addressCredential) {
              return function (delegationCred) {
                  return Data_Maybe.Just.create(Data_Newtype.wrap()({
                      addressCredential: addressCredential,
                      addressStakingCredential: Data_Function.flip(Serialization_Address.withStakeCredential)(delegationCred)({
                          onKeyHash: function (skh) {
                              return new Data_Maybe.Just(new Plutus_Types_Credential.StakingHash(new Plutus_Types_Credential.PubKeyCredential(Data_Newtype.wrap()(skh))));
                          },
                          onScriptHash: function (sh) {
                              return new Data_Maybe.Just(new Plutus_Types_Credential.StakingHash(new Plutus_Types_Credential.ScriptCredential(Data_Newtype.wrap()(sh))));
                          }
                      })
                  }));
              };
          };
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.baseAddressFromAddress(addr))(function (baseAddress) {
              var paymentCred = Serialization_Address.baseAddressPaymentCred(baseAddress);
              var delegationCred = Serialization_Address.baseAddressDelegationCred(baseAddress);
              return Data_Function.flip(Serialization_Address.withStakeCredential)(paymentCred)({
                  onKeyHash: function (pkh) {
                      return worker(new Plutus_Types_Credential.PubKeyCredential(Data_Newtype.wrap()(pkh)))(delegationCred);
                  },
                  onScriptHash: function (sh) {
                      return worker(new Plutus_Types_Credential.ScriptCredential(Data_Newtype.wrap()(sh)))(delegationCred);
                  }
              });
          });
      };
      var mkAddressCredential = Serialization_Address.withStakeCredential({
          onKeyHash: (function () {
              var $35 = Data_Newtype.wrap();
              return function ($36) {
                  return Plutus_Types_Credential.PubKeyCredential.create($35($36));
              };
          })(),
          onScriptHash: (function () {
              var $37 = Data_Newtype.wrap();
              return function ($38) {
                  return Plutus_Types_Credential.ScriptCredential.create($37($38));
              };
          })()
      });
      var toPlutusEnterpriseAddress = function (addr) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.enterpriseAddressFromAddress(addr))(function (enterpriseAddress) {
              var paymentCred = Serialization_Address.enterpriseAddressPaymentCred(enterpriseAddress);
              return Data_Maybe.Just.create(Data_Newtype.wrap()({
                  addressCredential: mkAddressCredential(paymentCred),
                  addressStakingCredential: Data_Maybe.Nothing.value
              }));
          });
      };
      var toPlutusPointerAddress = function (addr) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.pointerAddressFromAddress(addr))(function (pointerAddress) {
              var stakePointer = Serialization_Address.pointerAddressStakePointer(pointerAddress);
              var paymentCred = Serialization_Address.pointerAddressPaymentCred(pointerAddress);
              return Data_Maybe.Just.create(Data_Newtype.wrap()({
                  addressCredential: mkAddressCredential(paymentCred),
                  addressStakingCredential: new Data_Maybe.Just(new Plutus_Types_Credential.StakingPtr(stakePointer))
              }));
          });
      };
      var networkId = Serialization_Address.addressNetworkId(addressCsl);
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($39) {
          return Plutus_Types_Address.AddressWithNetworkTag((function (v) {
              return {
                  address: v,
                  networkId: networkId
              };
          })($39));
      })(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(toPlutusBaseAddress(addressCsl))(toPlutusPointerAddress(addressCsl)))(toPlutusEnterpriseAddress(addressCsl)));
  };
  var toPlutusAddress = (function () {
      var $40 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $42 = Data_Newtype.unwrap();
          return function ($43) {
              return (function (v) {
                  return v.address;
              })($42($43));
          };
      })());
      return function ($41) {
          return $40(toPlutusAddressWithNetworkTag($41));
      };
  })();
  var fromPlutusAddress = function (networkId) {
      return function (v) {
          if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.paymentKeyHashStakeKeyHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.scriptHashStakeKeyHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.paymentKeyHashScriptHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && (v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && v.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.scriptHashScriptHashAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
              return Serialization_Address.pointerAddressToAddress(Serialization_Address.paymentKeyHashPointerAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (v.addressStakingCredential instanceof Data_Maybe.Just && v.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
              return Serialization_Address.pointerAddressToAddress(Serialization_Address.scriptHashPointerAddress(networkId)(v.addressCredential.value0)(v.addressStakingCredential.value0.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && v.addressStakingCredential instanceof Data_Maybe.Nothing) {
              return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.paymentKeyHashEnterpriseAddress(networkId)(v.addressCredential.value0));
          };
          if (v.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && v.addressStakingCredential instanceof Data_Maybe.Nothing) {
              return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.scriptHashEnterpriseAddress(networkId)(v.addressCredential.value0));
          };
          throw new Error("Failed pattern match at Plutus.Conversion.Address (line 67, column 3 - line 110, column 53): " + [ v.addressCredential.constructor.name, v.addressStakingCredential.constructor.name ]);
      };
  };
  var fromPlutusAddressWithNetworkTag = function (v) {
      return fromPlutusAddress(v.networkId)(v.address);
  };
  exports["fromPlutusAddress"] = fromPlutusAddress;
  exports["fromPlutusAddressWithNetworkTag"] = fromPlutusAddressWithNetworkTag;
  exports["toPlutusAddress"] = toPlutusAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.AssocMap"] = $PS["Plutus.Types.AssocMap"] || {};
  var exports = $PS["Plutus.Types.AssocMap"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_These = $PS["Data.These"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var $$Map = function (x) {
      return x;
  };
  var genericMap_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return {
              show: Data_Show_Generic.genericShow(genericMap_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1))))({
                  reflectSymbol: function () {
                      return "Map";
                  }
              }))
          };
      };
  };
  var functorMap = {
      map: function (f) {
          return function (v) {
              return $$Map(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(f))(v));
          };
      }
  };
  var foldableMap = {
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(Data_Foldable.foldMap(Data_Foldable.foldableTuple)(dictMonoid)(f))(v);
              };
          };
      },
      foldr: function (f) {
          return Data_Foldable.foldrDefault(foldableMap)(f);
      },
      foldl: function (f) {
          return Data_Foldable.foldlDefault(foldableMap)(f);
      }
  };
  var singleton = function (k) {
      return function (v) {
          return $$Map(Data_Array.singleton(new Data_Tuple.Tuple(k, v)));
      };
  };
  var lookup = function (dictEq) {
      return function (k) {
          return function (v) {
              return Data_Foldable.lookup(Data_Foldable.foldableArray)(dictEq)(k)(v);
          };
      };
  };
  var union = function (dictEq) {
      return function (v) {
          return function (v1) {
              var rs$prime = Data_Array.filter(function (v2) {
                  return !Data_Array.any(function (v3) {
                      return Data_Eq.eq(dictEq)(v3.value0)(v2.value0);
                  })(v);
              })(v1);
              var rs$prime$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.That.create))(rs$prime);
              var f = function (a) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return new Data_These.This(a);
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return new Data_These.Both(a, v2.value0);
                      };
                      throw new Error("Failed pattern match at Plutus.Types.AssocMap (line 155, column 11 - line 157, column 25): " + [ v2.constructor.name ]);
                  };
              };
              var ls$prime = Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return new Data_Tuple.Tuple(v2.value0, f(v2.value1)(lookup(dictEq)(v2.value0)(v1)));
              })(v);
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(ls$prime)(rs$prime$prime);
          };
      };
  };
  var filter = function (f) {
      return function (v) {
          return $$Map(Data_Array.filter(function ($158) {
              return f(Data_Tuple.snd($158));
          })(v));
      };
  };
  exports["lookup"] = lookup;
  exports["singleton"] = singleton;
  exports["union"] = union;
  exports["showMap"] = showMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.CurrencySymbol"] = $PS["Plutus.Types.CurrencySymbol"] || {};
  var exports = $PS["Plutus.Types.CurrencySymbol"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var ToData = $PS["ToData"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Scripts = $PS["Types.Scripts"];                              
  var toDataCurrencySymbol = ToData.toDataByteArray;
  var showCurrencySymbol = {
      show: function (v) {
          return "(CurrencySymbol " + (Data_Show.show(Types_ByteArray.showByteArray)(v) + ")");
      }
  };                                                      
  var eqCurrencySymbol = Types_ByteArray.eqByteArray;
  var getCurrencySymbol = function (v) {
      return v;
  };
  var currencyScriptHash = (function (dictPartial) {
      var $24 = Data_Maybe.fromJust();
      var $25 = Data_Newtype.wrap();
      return function ($26) {
          return $24(Serialization_Hash.scriptHashFromBytes($25(getCurrencySymbol($26))));
      };
  })();
  var currencyMPSHash = function ($27) {
      return Types_Scripts.MintingPolicyHash(currencyScriptHash($27));
  };
  var adaSymbol = Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
  var mkCurrencySymbol = function (byteArr) {
      if (Data_Eq.eq(Types_ByteArray.eqByteArray)(byteArr)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(adaSymbol);
      };
      if (Data_Boolean.otherwise) {
          return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(byteArr)))(byteArr);
      };
      throw new Error("Failed pattern match at Plutus.Types.CurrencySymbol (line 72, column 1 - line 72, column 54): " + [ byteArr.constructor.name ]);
  };
  var mpsSymbol = function (v) {
      return mkCurrencySymbol(Data_Newtype.unwrap()(Serialization_Hash.scriptHashToBytes(v)));
  };
  exports["adaSymbol"] = adaSymbol;
  exports["currencyMPSHash"] = currencyMPSHash;
  exports["getCurrencySymbol"] = getCurrencySymbol;
  exports["mkCurrencySymbol"] = mkCurrencySymbol;
  exports["mpsSymbol"] = mpsSymbol;
  exports["eqCurrencySymbol"] = eqCurrencySymbol;
  exports["toDataCurrencySymbol"] = toDataCurrencySymbol;
  exports["showCurrencySymbol"] = showCurrencySymbol;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.Value"] = $PS["Plutus.Types.Value"] || {};
  var exports = $PS["Plutus.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_These = $PS["Data.These"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Plutus_Types_AssocMap = $PS["Plutus.Types.AssocMap"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_TokenName = $PS["Types.TokenName"];                
  var Value = function (x) {
      return x;
  };                                                                                                                                                                                         
  var showValue = {
      show: function (v) {
          return "(PlutusValue " + (Data_Show.show(Plutus_Types_AssocMap.showMap(Plutus_Types_CurrencySymbol.showCurrencySymbol)(Plutus_Types_AssocMap.showMap(Types_TokenName.showTokenName)(Data_BigInt.showBigInt)))(v) + ")");
      }
  };
  var valueOf = function (v) {
      return function (cs) {
          return function (tn) {
              return Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Types_AssocMap.lookup(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(cs)(v))(Plutus_Types_AssocMap.lookup(Types_TokenName.eqTokenName)(tn)));
          };
      };
  };
  var unionVal = function (v) {
      return function (v1) {
          return Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.This.create))(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.That.create))(Plutus_Types_AssocMap.union(Types_TokenName.eqTokenName)))(Plutus_Types_AssocMap.union(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v)(v1));
      };
  };
  var unionWith = function (f) {
      return function (lhs) {
          var $90 = Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(f)));
          var $91 = unionVal(lhs);
          return function ($92) {
              return Value($90($91($92)));
          };
      };
  };
  var semigroupValue = {
      append: unionWith(Data_Semiring.add(Data_BigInt.semiringBigInt))
  };
  var monoidValue = {
      mempty: [  ],
      Semigroup0: function () {
          return semigroupValue;
      }
  };
  var singleton = function (cs) {
      return function (tn) {
          var $93 = Plutus_Types_AssocMap.singleton(cs);
          var $94 = Plutus_Types_AssocMap.singleton(tn);
          return function ($95) {
              return Value($93($94($95)));
          };
      };
  };
  var singleton$prime = function (cs) {
      return function (tn) {
          return function (amount) {
              if (Data_Eq.eq(Types_ByteArray.eqByteArray)(cs)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray)) && Data_Eq.notEq(Types_ByteArray.eqByteArray)(tn)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  return Control_Apply.lift3(Data_Maybe.applyMaybe)(singleton)(Plutus_Types_CurrencySymbol.mkCurrencySymbol(cs))(Types_TokenName.mkTokenName(tn))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(amount));
              };
              throw new Error("Failed pattern match at Plutus.Types.Value (line 161, column 1 - line 161, column 62): " + [ cs.constructor.name, tn.constructor.name, amount.constructor.name ]);
          };
      };
  };
  var lovelaceValueOf = singleton(Plutus_Types_CurrencySymbol.adaSymbol)(Types_TokenName.adaToken);
  var getValue = function (v) {
      return v;
  };
  var flattenValue = function (v) {
      return Data_Function.flip(Data_Array.concatMap)(v)(function (v1) {
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(v1.value1)(function (v2) {
              return new Data_Tuple.Tuple(v1.value0, new Data_Tuple.Tuple(v2.value0, v2.value1));
          });
      });
  };
  var flattenNonAdaAssets = (function () {
      var $99 = Data_Array.filter((function () {
          var $101 = Data_Eq.notEq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(Plutus_Types_CurrencySymbol.adaSymbol);
          return function ($102) {
              return $101(Data_Tuple.fst($102));
          };
      })());
      return function ($100) {
          return $99(flattenValue($100));
      };
  })();
  var checkPred = function (f) {
      return function (l) {
          return function (r) {
              return Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f))(unionVal(l)(r));
          };
      };
  };
  var checkBinRel = function (f) {
      return function (l) {
          return function (r) {
              return checkPred(Data_These.these(Data_Function.flip(f)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(f(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(f))(l)(r);
          };
      };
  };
  var eqValue = {
      eq: checkBinRel(Data_Eq.eq(Data_BigInt.eqBigInt))
  };
  exports["flattenNonAdaAssets"] = flattenNonAdaAssets;
  exports["flattenValue"] = flattenValue;
  exports["getValue"] = getValue;
  exports["lovelaceValueOf"] = lovelaceValueOf;
  exports["singleton"] = singleton;
  exports["singleton'"] = singleton$prime;
  exports["valueOf"] = valueOf;
  exports["eqValue"] = eqValue;
  exports["showValue"] = showValue;
  exports["semigroupValue"] = semigroupValue;
  exports["monoidValue"] = monoidValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Conversion.Value"] = $PS["Plutus.Conversion.Value"] || {};
  var exports = $PS["Plutus.Conversion.Value"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Plutus_Types_AssocMap = $PS["Plutus.Types.AssocMap"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Types_TokenName = $PS["Types.TokenName"];                
  var toPlutusValue = function (v) {
      var nonAdaValues = Data_Functor.mapFlipped(Data_List_Types.functorList)(Cardano_Types_Value.flattenNonAdaValue(v.value1))(function (v1) {
          return Data_Maybe.fromJust()(Plutus_Types_Value["singleton'"](Cardano_Types_Value.getCurrencySymbol(v1.value0))(Types_TokenName.getTokenName(v1.value1.value0))(v1.value1.value1));
      });
      var adaValue = (function () {
          if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
              return Data_Monoid.mempty(Plutus_Types_Value.monoidValue);
          };
          if (Data_Boolean.otherwise) {
              return Plutus_Types_Value.lovelaceValueOf(v.value0);
          };
          throw new Error("Failed pattern match at Plutus.Conversion.Value (line 75, column 3 - line 75, column 27): " + [  ]);
      })();
      return Data_Semigroup.append(Plutus_Types_Value.semigroupValue)(adaValue)(Data_Foldable.fold(Data_List_Types.foldableList)(Plutus_Types_Value.monoidValue)(nonAdaValues));
  };
  var fromPlutusValue = function (plutusValue) {
      var v = (function (x) {
          return {
              adaTokenMap: x.yes,
              nonAdaTokenMap: x.no
          };
      })(Data_Array.partition(function (v1) {
          return Data_Eq.eq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v1.value0)(Plutus_Types_CurrencySymbol.adaSymbol);
      })(Data_Newtype.unwrap()(Plutus_Types_Value.getValue(plutusValue))));
      var nonAdaAssets = Data_Maybe.fromJust()(Cardano_Types_Value.mkNonAdaAssetsFromTokenMap(Data_Traversable.traversableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.nonAdaTokenMap)(function (v1) {
          return new Data_Tuple.Tuple(Plutus_Types_CurrencySymbol.getCurrencySymbol(v1.value0), Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray)(Data_Newtype.unwrap()(v1.value1)));
      })));
      var adaValue = Data_Function.flip(Cardano_Types_Value.mkValue)(Data_Monoid.mempty(Cardano_Types_Value.monoidNonAdaAsset))(Data_Newtype.wrap()(Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(Data_Array.head(v.adaTokenMap)))(function (adaTokens) {
          return Plutus_Types_AssocMap.lookup(Types_TokenName.eqTokenName)(Types_TokenName.adaToken)(adaTokens);
      }))));
      return Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(adaValue)(Cardano_Types_Value.mkValue(Data_Monoid.mempty(Cardano_Types_Value.monoidCoin))(nonAdaAssets));
  };
  exports["fromPlutusValue"] = fromPlutusValue;
  exports["toPlutusValue"] = toPlutusValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Conversion"] = $PS["Plutus.Conversion"] || {};
  var exports = $PS["Plutus.Conversion"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Hashing = $PS["Hashing"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Conversion_Value = $PS["Plutus.Conversion.Value"];                
  var toPlutusTxOutput = function (cardanoTxOut) {
      var rec = Data_Newtype.unwrap()(cardanoTxOut);
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Conversion_Address.toPlutusAddress(rec.address))(function (address) {
          var referenceScript = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Hashing.scriptRefHash)(rec.scriptRef);
          var amount = Plutus_Conversion_Value.toPlutusValue(rec.amount);
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
              address: address,
              amount: amount,
              datum: rec.datum,
              referenceScript: referenceScript
          }));
      });
  };
  var toPlutusTxOutputWithRefScript = function (cTxOutput) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(toPlutusTxOutput(cTxOutput))((function () {
          var $6 = Data_Newtype.wrap();
          return function ($7) {
              return $6((function (v) {
                  return {
                      output: v,
                      scriptRef: (Data_Newtype.unwrap()(cTxOutput)).scriptRef
                  };
              })($7));
          };
      })());
  };
  var toPlutusUtxoMap = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(toPlutusTxOutputWithRefScript);
  var fromPlutusTxOutput = function (networkId) {
      return function (scriptRef) {
          return function (plutusTxOut) {
              var rec = Data_Newtype.unwrap()(plutusTxOut);
              return Data_Newtype.wrap()({
                  address: Plutus_Conversion_Address.fromPlutusAddress(networkId)(rec.address),
                  amount: Plutus_Conversion_Value.fromPlutusValue(rec.amount),
                  datum: rec.datum,
                  scriptRef: scriptRef
              });
          };
      };
  };
  var fromPlutusTxOutputWithRefScript = function (networkId) {
      return function (v) {
          return fromPlutusTxOutput(networkId)(v.scriptRef)(v.output);
      };
  };
  exports["fromPlutusTxOutputWithRefScript"] = fromPlutusTxOutputWithRefScript;
  exports["toPlutusUtxoMap"] = toPlutusUtxoMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.Transaction"] = $PS["Plutus.Types.Transaction"] || {};
  var exports = $PS["Plutus.Types.Transaction"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var genericTransactionOutput_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionOutput = {
      show: Data_Show_Generic.genericShow(genericTransactionOutput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "address";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "amount";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "datum";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "referenceScript";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Serialization_Hash.showScriptHash)))(Types_OutputDatum.showOutputDatum))(Plutus_Types_Value.showValue))(Plutus_Types_Address.showAddress))))({
          reflectSymbol: function () {
              return "TransactionOutput";
          }
      }))
  };
  var genericTransactionOutputW = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionOutputWith = {
      show: Data_Show_Generic.genericShow(genericTransactionOutputW)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "output";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "scriptRef";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(showTransactionOutput))))({
          reflectSymbol: function () {
              return "TransactionOutputWithRefScript";
          }
      }))
  };
  var eqTransactionOutput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "referenceScript";
      }
  })(Data_Maybe.eqMaybe(Serialization_Hash.eqScriptHash)))()({
      reflectSymbol: function () {
          return "datum";
      }
  })(Types_OutputDatum.eqOutputDatum))()({
      reflectSymbol: function () {
          return "amount";
      }
  })(Plutus_Types_Value.eqValue))()({
      reflectSymbol: function () {
          return "address";
      }
  })(Plutus_Types_Address.eqAddress));
  var eqTransactionOutputWithRe = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "scriptRef";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef)))()({
      reflectSymbol: function () {
          return "output";
      }
  })(eqTransactionOutput));
  exports["eqTransactionOutputWithRe"] = eqTransactionOutputWithRe;
  exports["showTransactionOutputWith"] = showTransactionOutputWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.EraSummaries"] = $PS["QueryM.EraSummaries"] || {};
  var exports = $PS["QueryM.EraSummaries"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getEraSummaries = QueryM.mkOgmiosRequest(QueryM_Ogmios.queryEraSummariesCall)(function (v) {
      return v.eraSummaries;
  })(Data_Unit.unit);
  exports["getEraSummaries"] = getEraSummaries;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.ProtocolParameters"] = $PS["QueryM.ProtocolParameters"] || {};
  var exports = $PS["QueryM.ProtocolParameters"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getProtocolParameters = QueryM.mkOgmiosRequest(QueryM_Ogmios.queryProtocolParametersCall)(function (v) {
      return v.getProtocolParameters;
  })(Data_Unit.unit);
  exports["getProtocolParameters"] = getProtocolParameters;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.SystemStart"] = $PS["QueryM.SystemStart"] || {};
  var exports = $PS["QueryM.SystemStart"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getSystemStart = QueryM.mkOgmiosRequest(QueryM_Ogmios.querySystemStartCall)(function (v) {
      return v.systemStart;
  })(Data_Unit.unit);
  exports["getSystemStart"] = getSystemStart;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Scripts"] = $PS["Scripts"] || {};
  var exports = $PS["Scripts"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Hashing = $PS["Hashing"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var validatorHashEnterpriseAddress = function (network) {
      return function (valHash) {
          return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.enterpriseAddress({
              network: network,
              paymentCred: Serialization_Address.scriptHashCredential(Data_Newtype.unwrap()(valHash))
          }));
      };
  };
  var typedValidatorEnterpriseAddress = function (network) {
      return function (v) {
          return validatorHashEnterpriseAddress(network)(v.validatorHash);
      };
  };
  var scriptHash = function (dictNewtype) {
      return function (dictNewtype1) {
          var $11 = Data_Newtype.wrap();
          var $12 = Data_Newtype.unwrap();
          return function ($13) {
              return $11(Hashing.plutusScriptHash($12($13)));
          };
      };
  };                                      
  var validatorHash = scriptHash()();
  var nativeScriptHashEnterpriseAddress = function (network) {
      return function (nsHash) {
          return validatorHashEnterpriseAddress(network)(Data_Newtype.wrap()(Data_Newtype.unwrap()(nsHash)));
      };
  };
  var mintingPolicyHash = scriptHash()();
  var scriptCurrencySymbol = function ($14) {
      return Plutus_Types_CurrencySymbol.mpsSymbol(mintingPolicyHash($14));
  };
  exports["mintingPolicyHash"] = mintingPolicyHash;
  exports["scriptCurrencySymbol"] = scriptCurrencySymbol;
  exports["typedValidatorEnterpriseAddress"] = typedValidatorEnterpriseAddress;
  exports["validatorHash"] = validatorHash;
  exports["validatorHashEnterpriseAddress"] = validatorHashEnterpriseAddress;
  exports["nativeScriptHashEnterpriseAddress"] = nativeScriptHashEnterpriseAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Transaction"] = $PS["Transaction"] || {};
  var exports = $PS["Transaction"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Helpers = $PS["Helpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_PlutusScript = $PS["Serialization.PlutusScript"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var ConvertWitnessesError = (function () {
      function ConvertWitnessesError() {

      };
      ConvertWitnessesError.value = new ConvertWitnessesError();
      return ConvertWitnessesError;
  })();
  var ConvertDatumError = (function () {
      function ConvertDatumError() {

      };
      ConvertDatumError.value = new ConvertDatumError();
      return ConvertDatumError;
  })();
  var genericModifyTxError_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return ConvertWitnessesError.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return ConvertDatumError.value;
          };
          throw new Error("Failed pattern match at Transaction (line 48, column 1 - line 48, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ConvertWitnessesError) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof ConvertDatumError) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Transaction (line 48, column 1 - line 48, column 40): " + [ x.constructor.name ]);
      }
  };
  var showModifyTxError = {
      show: Data_Show_Generic.genericShow(genericModifyTxError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ConvertWitnessesError";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ConvertDatumError";
          }
      })))
  };
  var updateTxWithWitnesses = function (v) {
      return function (ws) {
          return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.Right.create(Data_Newtype.over()()(Cardano_Types_Transaction.Transaction)(function (v1) {
              return {
                  witnessSet: Data_Semigroup.append(Cardano_Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(ws),
                  auxiliaryData: v1.auxiliaryData,
                  body: v1.body,
                  isValid: v1.isValid
              };
          })(v)));
      };
  };
  var setScriptDataHash = function (costModels) {
      return function (rs) {
          return function (ds) {
              return function (v) {
                  var v1 = function (v2) {
                      if (Data_Boolean.otherwise) {
                          return function __do() {
                              var scriptDataHash = Data_Functor.map(Effect.functorEffect)((function () {
                                  var $50 = Untagged_Union.asOneOf();
                                  return function ($51) {
                                      return Cardano_Types_Transaction.ScriptDataHash(Serialization.toBytes($50($51)));
                                  };
                              })())(Serialization.hashScriptData(costModels)(rs)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())(ds)))();
                              return Data_Newtype.over()()(Cardano_Types_Transaction.Transaction)(function (v3) {
                                  return {
                                      body: Data_Newtype.over()()(Cardano_Types_Transaction.TxBody)(function (v4) {
                                          return {
                                              scriptDataHash: new Data_Maybe.Just(scriptDataHash),
                                              auxiliaryDataHash: v4.auxiliaryDataHash,
                                              certs: v4.certs,
                                              collateral: v4.collateral,
                                              collateralReturn: v4.collateralReturn,
                                              fee: v4.fee,
                                              inputs: v4.inputs,
                                              mint: v4.mint,
                                              networkId: v4.networkId,
                                              outputs: v4.outputs,
                                              referenceInputs: v4.referenceInputs,
                                              requiredSigners: v4.requiredSigners,
                                              totalCollateral: v4.totalCollateral,
                                              ttl: v4.ttl,
                                              update: v4.update,
                                              validityStartInterval: v4.validityStartInterval,
                                              withdrawals: v4.withdrawals
                                          };
                                      })(v.body),
                                      auxiliaryData: v3.auxiliaryData,
                                      isValid: v3.isValid,
                                      witnessSet: v3.witnessSet
                                  };
                              })(v);
                          };
                      };
                      throw new Error("Failed pattern match at Transaction (line 56, column 1 - line 61, column 24): " + [ costModels.constructor.name, rs.constructor.name, ds.constructor.name, v.constructor.name ]);
                  };
                  var $36 = Data_Foldable["null"](Data_Foldable.foldableMaybe)((Data_Newtype.unwrap()(v.witnessSet)).plutusScripts);
                  if ($36) {
                      var $37 = Data_Foldable["null"](Data_Foldable.foldableArray)(rs);
                      if ($37) {
                          var $38 = Data_Foldable["null"](Data_Foldable.foldableArray)(ds);
                          if ($38) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(v);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  return v1(true);
              };
          };
      };
  };
  var convertWitnessesWith = function (ws) {
      return function (act) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertWitnessSet(ws)))(function (ws$prime) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(act(ws$prime)))(function () {
                  return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.note(ConvertWitnessesError.value)(Deserialization_WitnessSet.convertWitnessSet(ws$prime)));
              });
          });
      };
  };
  var attachRedeemers = function (rs) {
      return function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Serialization_WitnessSet.convertRedeemer)(rs)))(function (rs$prime) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setRedeemers(rs$prime)));
          });
      };
  };
  var attachRedeemer = function (r) {
      var $52 = attachRedeemers(Data_Array.singleton(r));
      return function ($53) {
          return Control_Monad_Except_Trans.runExceptT($52($53));
      };
  };
  var attachPlutusScripts = function (ps) {
      return function (v) {
          var ps$prime = Data_Functor.map(Data_Functor.functorArray)(Serialization_PlutusScript.convertPlutusScript)(ps);
          return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setPlutusScripts(ps$prime)));
      };
  };
  var attachPlutusScript = function (ps) {
      var $54 = attachPlutusScripts(Data_Array.singleton(ps));
      return function ($55) {
          return Control_Monad_Except_Trans.runExceptT($54($55));
      };
  };
  var attachNativeScript = function (ns) {
      return function (tx) {
          return Control_Monad_Except_Trans.runExceptT(updateTxWithWitnesses(tx)(Data_Newtype.over()()(Cardano_Types_Transaction.TransactionWitnessSet)(function (v) {
              return {
                  nativeScripts: new Data_Maybe.Just([ ns ]),
                  bootstraps: v.bootstraps,
                  plutusData: v.plutusData,
                  plutusScripts: v.plutusScripts,
                  redeemers: v.redeemers,
                  vkeys: v.vkeys
              };
          })(Data_Monoid.mempty(Cardano_Types_Transaction.monoidTransactionWitnessS))));
      };
  };
  var attachDatums = function (v) {
      return function (v1) {
          if (v.length === 0) {
              return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(new Data_Either.Right(v1));
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))((function () {
              var $56 = Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect));
              var $57 = Data_Either.note(ConvertDatumError.value);
              var $58 = Data_Newtype.unwrap();
              return function ($59) {
                  return $56($57(Serialization_PlutusData.convertPlutusData($58($59))));
              };
          })())(v))(function (ds) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v1))(convertWitnessesWith(v1.witnessSet)(Serialization_WitnessSet.setPlutusData(ds)));
          });
      };
  };
  var attachDatum = function (d) {
      var $60 = attachDatums(Data_Array.singleton(d));
      return function ($61) {
          return Control_Monad_Except_Trans.runExceptT($60($61));
      };
  };
  exports["attachDatum"] = attachDatum;
  exports["attachRedeemer"] = attachRedeemer;
  exports["attachPlutusScript"] = attachPlutusScript;
  exports["attachNativeScript"] = attachNativeScript;
  exports["setScriptDataHash"] = setScriptDataHash;
  exports["showModifyTxError"] = showModifyTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Interval"] = $PS["Types.Interval"] || {};
  var exports = $PS["Types.Interval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Helpers = $PS["Helpers"];
  var $$Math = $PS["Math"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_BigNum = $PS["Types.BigNum"];                
  var CannotFindSlotInEraSummaries = (function () {
      function CannotFindSlotInEraSummaries(value0) {
          this.value0 = value0;
      };
      CannotFindSlotInEraSummaries.create = function (value0) {
          return new CannotFindSlotInEraSummaries(value0);
      };
      return CannotFindSlotInEraSummaries;
  })();
  var StartingSlotGreaterThanSlot = (function () {
      function StartingSlotGreaterThanSlot(value0) {
          this.value0 = value0;
      };
      StartingSlotGreaterThanSlot.create = function (value0) {
          return new StartingSlotGreaterThanSlot(value0);
      };
      return StartingSlotGreaterThanSlot;
  })();
  var EndTimeLessThanTime = (function () {
      function EndTimeLessThanTime(value0) {
          this.value0 = value0;
      };
      EndTimeLessThanTime.create = function (value0) {
          return new EndTimeLessThanTime(value0);
      };
      return EndTimeLessThanTime;
  })();
  var CannotGetBigIntFromNumber = (function () {
      function CannotGetBigIntFromNumber() {

      };
      CannotGetBigIntFromNumber.value = new CannotGetBigIntFromNumber();
      return CannotGetBigIntFromNumber;
  })();
  var POSIXTime = function (x) {
      return x;
  };
  var NegInf = (function () {
      function NegInf() {

      };
      NegInf.value = new NegInf();
      return NegInf;
  })();
  var Finite = (function () {
      function Finite(value0) {
          this.value0 = value0;
      };
      Finite.create = function (value0) {
          return new Finite(value0);
      };
      return Finite;
  })();
  var PosInf = (function () {
      function PosInf() {

      };
      PosInf.value = new PosInf();
      return PosInf;
  })();
  var LowerBound = (function () {
      function LowerBound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LowerBound.create = function (value0) {
          return function (value1) {
              return new LowerBound(value0, value1);
          };
      };
      return LowerBound;
  })();
  var UpperBound = (function () {
      function UpperBound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpperBound.create = function (value0) {
          return function (value1) {
              return new UpperBound(value0, value1);
          };
      };
      return UpperBound;
  })();
  var CannotFindTimeInEraSummaries = (function () {
      function CannotFindTimeInEraSummaries(value0) {
          this.value0 = value0;
      };
      CannotFindTimeInEraSummaries.create = function (value0) {
          return new CannotFindTimeInEraSummaries(value0);
      };
      return CannotFindTimeInEraSummaries;
  })();
  var PosixTimeBeforeSystemStart = (function () {
      function PosixTimeBeforeSystemStart(value0) {
          this.value0 = value0;
      };
      PosixTimeBeforeSystemStart.create = function (value0) {
          return new PosixTimeBeforeSystemStart(value0);
      };
      return PosixTimeBeforeSystemStart;
  })();
  var StartTimeGreaterThanTime = (function () {
      function StartTimeGreaterThanTime(value0) {
          this.value0 = value0;
      };
      StartTimeGreaterThanTime.create = function (value0) {
          return new StartTimeGreaterThanTime(value0);
      };
      return StartTimeGreaterThanTime;
  })();
  var EndSlotLessThanSlotOrModNonZero = (function () {
      function EndSlotLessThanSlotOrModNonZero(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      EndSlotLessThanSlotOrModNonZero.create = function (value0) {
          return function (value1) {
              return new EndSlotLessThanSlotOrModNonZero(value0, value1);
          };
      };
      return EndSlotLessThanSlotOrModNonZero;
  })();
  var CannotGetBigIntFromNumber$prime = (function () {
      function CannotGetBigIntFromNumber$prime() {

      };
      CannotGetBigIntFromNumber$prime.value = new CannotGetBigIntFromNumber$prime();
      return CannotGetBigIntFromNumber$prime;
  })();
  var CannotGetBigNumFromBigInt$prime = (function () {
      function CannotGetBigNumFromBigInt$prime() {

      };
      CannotGetBigNumFromBigInt$prime.value = new CannotGetBigNumFromBigInt$prime();
      return CannotGetBigNumFromBigInt$prime;
  })();
  var showPOSIXTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("POSIXTime")(v);
      }
  };
  var showModTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("ModTime")(v);
      }
  };
  var showAbsTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("AbsTime")(v);
      }
  };                                   
  var genericUpperBound_ = {
      to: function (x) {
          return new UpperBound(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var genericSlotToPosixTimeErr = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new CannotFindSlotInEraSummaries(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new StartingSlotGreaterThanSlot(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new EndTimeLessThanTime(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return CannotGetBigIntFromNumber.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 504, column 1 - line 504, column 47): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CannotFindSlotInEraSummaries) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof StartingSlotGreaterThanSlot) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof EndTimeLessThanTime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof CannotGetBigIntFromNumber) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at Types.Interval (line 504, column 1 - line 504, column 47): " + [ x.constructor.name ]);
      }
  };
  var showSlotToPosixTimeError = {
      show: Data_Show_Generic.genericShow(genericSlotToPosixTimeErr)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showSlot))({
          reflectSymbol: function () {
              return "CannotFindSlotInEraSummaries";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showSlot))({
          reflectSymbol: function () {
              return "StartingSlotGreaterThanSlot";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showNumber))({
          reflectSymbol: function () {
              return "EndTimeLessThanTime";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetBigIntFromNumber";
          }
      })))))
  };
  var genericPosixTimeToSlotErr = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new CannotFindTimeInEraSummaries(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new PosixTimeBeforeSystemStart(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new StartTimeGreaterThanTime(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new EndSlotLessThanSlotOrModNonZero(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return CannotGetBigIntFromNumber$prime.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
              return CannotGetBigNumFromBigInt$prime.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 741, column 1 - line 741, column 47): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CannotFindTimeInEraSummaries) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof PosixTimeBeforeSystemStart) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof StartTimeGreaterThanTime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof EndSlotLessThanSlotOrModNonZero) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
          };
          if (x instanceof CannotGetBigIntFromNumber$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
          };
          if (x instanceof CannotGetBigNumFromBigInt$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
          };
          throw new Error("Failed pattern match at Types.Interval (line 741, column 1 - line 741, column 47): " + [ x.constructor.name ]);
      }
  };
  var showPosixTimeToSlotError = {
      show: Data_Show_Generic.genericShow(genericPosixTimeToSlotErr)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAbsTime))({
          reflectSymbol: function () {
              return "CannotFindTimeInEraSummaries";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPOSIXTime))({
          reflectSymbol: function () {
              return "PosixTimeBeforeSystemStart";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAbsTime))({
          reflectSymbol: function () {
              return "StartTimeGreaterThanTime";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showSlot))(Data_Show_Generic.genericShowArgsArgument(showModTime)))({
          reflectSymbol: function () {
              return "EndSlotLessThanSlotOrModNonZero";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetBigIntFromNumber'";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetBigNumFromBigInt'";
          }
      })))))))
  };
  var genericLowerBound_ = {
      to: function (x) {
          return new LowerBound(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var genericInterval_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericExtended_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return NegInf.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new Finite(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return PosInf.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 162, column 1 - line 162, column 39): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof NegInf) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof Finite) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof PosInf) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
          };
          throw new Error("Failed pattern match at Types.Interval (line 162, column 1 - line 162, column 39): " + [ x.constructor.name ]);
      }
  };
  var showExtended = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericExtended_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "NegInf";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))({
              reflectSymbol: function () {
                  return "Finite";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "PosInf";
              }
          }))))
      };
  };
  var showLowerBound = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericLowerBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
              reflectSymbol: function () {
                  return "LowerBound";
              }
          }))
      };
  };
  var showUpperBound = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericUpperBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
              reflectSymbol: function () {
                  return "UpperBound";
              }
          }))
      };
  };
  var showInterval = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericInterval_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "from";
              }
          })(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "to";
              }
          })(Data_Show.showRecordFieldsNil)(showUpperBound(dictShow)))(showLowerBound(dictShow)))))({
              reflectSymbol: function () {
                  return "Interval";
              }
          }))
      };
  };                                   
  var eqPOSIXTime = Data_BigInt.eqBigInt;
  var eqExtended = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof NegInf && y instanceof NegInf) {
                      return true;
                  };
                  if (x instanceof Finite && y instanceof Finite) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof PosInf && y instanceof PosInf) {
                      return true;
                  };
                  return false;
              };
          }
      };
  };
  var eqLowerBound = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  return Data_Eq.eq(eqExtended(dictEq))(x.value0)(y.value0) && x.value1 === y.value1;
              };
          }
      };
  };
  var eqUpperBound = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  return Data_Eq.eq(eqExtended(dictEq))(x.value0)(y.value0) && x.value1 === y.value1;
              };
          }
      };
  };
  var eqInterval = function (dictEq) {
      return Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
          reflectSymbol: function () {
              return "to";
          }
      })(eqUpperBound(dictEq)))()({
          reflectSymbol: function () {
              return "from";
          }
      })(eqLowerBound(dictEq)));
  };                                               
  var upperBound = function (a) {
      return new UpperBound(new Finite(a), true);
  };
  var slotFromRelSlot = function (v) {
      return function (v1) {
          var startSlot = Types_BigNum.toBigIntUnsafe(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).slot));
          var slot = Data_Semiring.add(Data_BigInt.semiringBigInt)(startSlot)(v1.value0);
          var endSlot = Data_Maybe.maybe(Data_Semiring.add(Data_BigInt.semiringBigInt)(slot)(Data_Semiring.one(Data_BigInt.semiringBigInt)))((function () {
              var $653 = Data_Newtype.unwrap();
              var $654 = Data_Newtype.unwrap();
              return function ($655) {
                  return Types_BigNum.toBigIntUnsafe($653((function (v2) {
                      return v2.slot;
                  })($654($655))));
              };
          })())(v.end);
          return Control_Bind.bind(Data_Either.bindEither)(Helpers.liftM(Control_Monad_Error_Class.monadErrorEither)(CannotGetBigNumFromBigInt$prime.value)(Types_BigNum.fromBigInt(slot)))(function (bnSlot) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(Data_Ord.lessThan(Data_BigInt.ordBigInt)(slot)(endSlot) || Data_Eq.eq(Data_BigInt.eqBigInt)(slot)(endSlot) && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value1)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new EndSlotLessThanSlotOrModNonZero(Data_Newtype.wrap()(bnSlot), v1.value1))))(function () {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(bnSlot));
              });
          });
      };
  };
  var relTimeFromAbsTime = function (v) {
      return function (v1) {
          var startTime = Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).time) * QueryM_Ogmios.slotLengthFactor;
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(startTime <= Data_BigInt.toNumber(v1))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new StartTimeGreaterThanTime(v1))))(function () {
              var relTime = Data_BigInt.toNumber(v1) - startTime;
              return Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Data_Either.note(CannotGetBigIntFromNumber$prime.value)(Data_BigInt.fromNumber($$Math.trunc(relTime))));
          });
      };
  };
  var relSlotFromSlot = function (v) {
      return function (v1) {
          var startSlot = Types_BigNum.toBigIntUnsafe(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).slot));
          var biSlot = Types_BigNum.toBigIntUnsafe(v1);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(startSlot)(biSlot))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new StartingSlotGreaterThanSlot(v1))))(function () {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(Data_Ring.sub(Data_BigInt.ringBigInt)(biSlot)(startSlot)));
          });
      };
  };
  var mkInterval = function (from$prime) {
      return function (to$prime) {
          return {
              from: from$prime,
              to: to$prime
          };
      };
  };                                                                                             
  var to = function (s) {
      return mkInterval(new LowerBound(NegInf.value, true))(upperBound(s));
  };
  var maxSlot = Data_Newtype.wrap()(Types_BigNum.maxValue);
  var slotRangeToTransactionValidity = function (v) {
      var validityStartInterval = (function () {
          if (v.from.value0 instanceof Finite && v.from.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.from.value0.value0);
          };
          if (v.from.value0 instanceof Finite && !v.from.value1) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)(Types_BigNum.add(v.from.value0.value0)(Types_BigNum.one));
          };
          if (v.from.value0 instanceof NegInf) {
              return Data_Maybe.Nothing.value;
          };
          if (v.from.value0 instanceof PosInf) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(maxSlot);
          };
          throw new Error("Failed pattern match at Types.Interval (line 1000, column 27 - line 1004, column 30): " + [ v.from.value0.constructor.name, v.from.value1.constructor.name ]);
      })();
      var timeToLive = (function () {
          if (v.to.value0 instanceof Finite && v.to.value1) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)(Types_BigNum.add(v.to.value0.value0)(Types_BigNum.one));
          };
          if (v.to.value0 instanceof Finite && !v.to.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.to.value0.value0);
          };
          if (v.to.value0 instanceof NegInf) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Types_BigNum.zero);
          };
          if (v.to.value0 instanceof PosInf) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 1010, column 16 - line 1014, column 25): " + [ v.to.value0.constructor.name, v.to.value1.constructor.name ]);
      })();
      return {
          validityStartInterval: validityStartInterval,
          timeToLive: timeToLive
      };
  };
  var lowerBound = function (a) {
      return new LowerBound(new Finite(a), true);
  };
  var interval = function (s) {
      return function (s$prime) {
          return mkInterval(lowerBound(s))(upperBound(s$prime));
      };
  };                                                                    
  var getSlotLength = function (v) {
      return Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.parameters)).slotLength);
  };
  var relSlotFromRelTime = function (eraSummary) {
      return function (v) {
          var slotLength = getSlotLength(eraSummary);
          var relSlot = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(Data_BigInt.fromNumber($$Math.trunc(Data_BigInt.toNumber(v) / slotLength)));
          var modTime = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(Data_BigInt.fromNumber($$Math.remainder(Data_BigInt.toNumber(v))(slotLength)));
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(relSlot))(modTime);
      };
  };
  var relTimeFromRelSlot = function (eraSummary) {
      return function (v) {
          var slotLength = getSlotLength(eraSummary);
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(Data_BigInt.fromNumber(Data_BigInt.toNumber(v) * slotLength));
      };
  };
  var from = function (s) {
      return mkInterval(lowerBound(s))(new UpperBound(PosInf.value, true));
  };
  var findTimeEraSummary = function (v) {
      return function (v1) {
          var pred = function (v2) {
              var numberAt = Data_BigInt.toNumber(v1);
              return Data_Newtype.unwrap()((Data_Newtype.unwrap()(v2.start)).time) * QueryM_Ogmios.slotLengthFactor <= numberAt && Data_Maybe.maybe(true)((function () {
                  var $656 = Data_Ord.lessThan(Data_Ord.ordNumber)(numberAt);
                  var $657 = Data_Semiring.mul(Data_Semiring.semiringNumber)(QueryM_Ogmios.slotLengthFactor);
                  var $658 = Data_Newtype.unwrap();
                  var $659 = Data_Newtype.unwrap();
                  return function ($660) {
                      return $656($657($658((function (v3) {
                          return v3.time;
                      })($659($660)))));
                  };
              })())(v2.end);
          };
          return Data_Either.note(new CannotFindTimeInEraSummaries(v1))(Data_Array.find(pred)(v));
      };
  };
  var posixTimeToSlot = function (eraSummaries) {
      return function (sysStart) {
          return function (v) {
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Data_JSDate.parse(Data_Newtype.unwrap()(sysStart))))(function (sysStartD) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(CannotGetBigIntFromNumber$prime.value)(Data_BigInt.fromNumber(Data_JSDate.getTime(sysStartD))))(function (sysStartPosix) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(sysStartPosix)(v))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect.monadEffect))(new PosixTimeBeforeSystemStart(v))))(function () {
                          var absTime = Data_Newtype.wrap()(Data_Ring.sub(Data_BigInt.ringBigInt)(v)(sysStartPosix));
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(findTimeEraSummary(eraSummaries)(absTime)))(function (currentEra) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(relTimeFromAbsTime(currentEra)(absTime)))(function (relTime) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(CannotGetBigIntFromNumber$prime.value)(relSlotFromRelTime(currentEra)(relTime)))(function (relSlotMod) {
                                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(slotFromRelSlot(currentEra)(relSlotMod));
                                  });
                              });
                          });
                      });
                  });
              }));
          };
      };
  };
  var posixTimeRangeToSlotRange = function (eraSummaries) {
      return function (sysStart) {
          return function (v) {
              var convertBounds = function (v1) {
                  if (v1 instanceof Finite) {
                      return Data_Functor.mapFlipped(Effect.functorEffect)(posixTimeToSlot(eraSummaries)(sysStart)(v1.value0))(Data_Functor.map(Data_Either.functorEither)(Finite.create));
                  };
                  if (v1 instanceof NegInf) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(NegInf.value));
                  };
                  if (v1 instanceof PosInf) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(PosInf.value));
                  };
                  throw new Error("Failed pattern match at Types.Interval (line 946, column 3 - line 948, column 60): " + [ v1.constructor.name ]);
              };
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Except_Trans.ExceptT(convertBounds(v.from.value0)))(function (s$prime) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Monad_Except_Trans.ExceptT(convertBounds(v.to.value0)))(function (e$prime) {
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.Right.create({
                          from: new LowerBound(s$prime, v.from.value1),
                          to: new UpperBound(e$prime, v.to.value1)
                      }));
                  });
              }));
          };
      };
  };
  var posixTimeRangeToTransactionValidity = function (es) {
      return function (ss) {
          var $661 = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Either.functorEither)(slotRangeToTransactionValidity));
          var $662 = posixTimeRangeToSlotRange(es)(ss);
          return function ($663) {
              return $661($662($663));
          };
      };
  };
  var findSlotEraSummary = function (v) {
      return function (slot) {
          var biSlot = Types_BigNum.toBigIntUnsafe(Data_Newtype.unwrap()(slot));
          var pred = function (v1) {
              return Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_BigNum.toBigIntUnsafe(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v1.start)).slot)))(biSlot) && Data_Maybe.maybe(true)((function () {
                  var $664 = Data_Ord.lessThan(Data_BigInt.ordBigInt)(biSlot);
                  var $665 = Data_Newtype.unwrap();
                  var $666 = Data_Newtype.unwrap();
                  return function ($667) {
                      return $664(Types_BigNum.toBigIntUnsafe($665((function (v2) {
                          return v2.slot;
                      })($666($667)))));
                  };
              })())(v1.end);
          };
          return Data_Either.note(new CannotFindSlotInEraSummaries(slot))(Data_Array.find(pred)(v));
      };
  };
  var absTimeFromRelTime = function (v) {
      return function (v1) {
          var startTime = Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).time) * QueryM_Ogmios.slotLengthFactor;
          var absTime = startTime + Data_BigInt.toNumber(v1);
          var endTime = Data_Maybe.maybe(absTime + 1)((function () {
              var $668 = Data_Semiring.mul(Data_Semiring.semiringNumber)(QueryM_Ogmios.slotLengthFactor);
              var $669 = Data_Newtype.unwrap();
              var $670 = Data_Newtype.unwrap();
              return function ($671) {
                  return $668($669((function (v2) {
                      return v2.time;
                  })($670($671))));
              };
          })())(v.end);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(absTime <= endTime)(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new EndTimeLessThanTime(absTime))))(function () {
              return Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Helpers.liftM(Control_Monad_Error_Class.monadErrorEither)(CannotGetBigIntFromNumber.value)(Data_BigInt.fromNumber(absTime)));
          });
      };
  };
  var slotToPosixTime = function (eraSummaries) {
      return function (sysStart) {
          return function (slot) {
              var _transTime = Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_BigInt.fromInt(1000));
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Data_JSDate.parse(Data_Newtype.unwrap()(sysStart))))(function (sysStartD) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(findSlotEraSummary(eraSummaries)(slot)))(function (currentEra) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(relSlotFromSlot(currentEra)(slot)))(function (relSlot) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(CannotGetBigIntFromNumber.value)(relTimeFromRelSlot(currentEra)(relSlot)))(function (relTime) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(absTimeFromRelTime(currentEra)(relTime)))(function (absTime) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(CannotGetBigIntFromNumber.value)(Data_BigInt.fromNumber(Data_JSDate.getTime(sysStartD))))(function (sysStartPosix) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Newtype.wrap()(Data_Semiring.add(Data_BigInt.semiringBigInt)(sysStartPosix)(Data_Newtype.unwrap()(absTime))));
                                  });
                              });
                          });
                      });
                  });
              }));
          };
      };
  };
  exports["POSIXTime"] = POSIXTime;
  exports["interval"] = interval;
  exports["posixTimeRangeToTransactionValidity"] = posixTimeRangeToTransactionValidity;
  exports["slotToPosixTime"] = slotToPosixTime;
  exports["eqInterval"] = eqInterval;
  exports["showInterval"] = showInterval;
  exports["eqPOSIXTime"] = eqPOSIXTime;
  exports["showPOSIXTime"] = showPOSIXTime;
  exports["showSlotToPosixTimeError"] = showSlotToPosixTimeError;
  exports["showPosixTimeToSlotError"] = showPosixTimeToSlotError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["NativeScripts"] = $PS["NativeScripts"] || {};
  var exports = $PS["NativeScripts"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var showNativeScriptHash = {
      show: function (v) {
          return "(NativeScriptHash " + (Data_Show.show(Serialization_Hash.showScriptHash)(v) + ")");
      }
  };
  var eqNativeScriptHash = Serialization_Hash.eqScriptHash;
  var sublists = function (n) {
      return function (xs) {
          var sublists$prime = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return new Data_List_Types.Cons(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return new Data_List_Types.Cons(Data_List.take(v)(v1), sublists$prime(v)(v1.value1));
                  };
                  throw new Error("Failed pattern match at NativeScripts (line 65, column 3 - line 65, column 46): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_List.take((Data_List.length(xs) - n | 0) + 1 | 0)(sublists$prime(n)(xs));
      };
  };
  var subsetsOfLength = function (n) {
      var $23 = Data_Functor.map(Data_Functor.functorArray)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray));
      var $24 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
      var $25 = sublists(n);
      var $26 = Data_List.fromFoldable(Data_Foldable.foldableArray);
      return function ($27) {
          return $23($24($25($26($27))));
      };
  };
  var emptySetChoice = [ Data_Set.empty ];
  var anyChoice = function (dictOrd) {
      return function (as) {
          return function (bs) {
              return Data_Array.nub(Data_Set.ordSet(dictOrd))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(as)(bs));
          };
      };
  };
  var allChoice = function (dictOrd) {
      return function (as) {
          return function (bs) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Semigroup.append(Data_Set.semigroupSet(dictOrd)))(as))(bs);
          };
      };
  };
  var getMaximumSigners = function (alreadyCounted) {
      var sizes = function (v) {
          if (v instanceof Cardano_Types_NativeScript.ScriptPubkey) {
              if (Data_Set.member(Serialization_Hash.ordEd25519KeyHash)(v.value0)(alreadyCounted)) {
                  return emptySetChoice;
              };
              if (Data_Boolean.otherwise) {
                  return [ Data_Set.singleton(v.value0) ];
              };
          };
          if (v instanceof Cardano_Types_NativeScript.ScriptAll) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(allChoice(Serialization_Hash.ordEd25519KeyHash))(emptySetChoice)(Data_Functor.map(Data_Functor.functorArray)(sizes)(v.value0));
          };
          if (v instanceof Cardano_Types_NativeScript.ScriptAny) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(anyChoice(Serialization_Hash.ordEd25519KeyHash))(emptySetChoice)(Data_Functor.map(Data_Functor.functorArray)(sizes)(v.value0));
          };
          if (v instanceof Cardano_Types_NativeScript.ScriptNOfK) {
              return sizes(Cardano_Types_NativeScript.ScriptAny.create(Data_Functor.map(Data_Functor.functorArray)(Cardano_Types_NativeScript.ScriptAll.create)(subsetsOfLength(v.value0)(v.value1))));
          };
          if (v instanceof Cardano_Types_NativeScript.TimelockStart) {
              return emptySetChoice;
          };
          if (v instanceof Cardano_Types_NativeScript.TimelockExpiry) {
              return emptySetChoice;
          };
          throw new Error("Failed pattern match at NativeScripts (line 80, column 11 - line 91, column 39): " + [ v.constructor.name ]);
      };
      var $30 = Data_Maybe.fromMaybe(0);
      var $31 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Set.size);
      var $32 = Data_Foldable.maximumBy(Data_Foldable.foldableArray)(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(Data_Set.size));
      return function ($33) {
          return $30($31($32(sizes($33))));
      };
  };
  exports["getMaximumSigners"] = getMaximumSigners;
  exports["eqNativeScriptHash"] = eqNativeScriptHash;
  exports["showNativeScriptHash"] = showNativeScriptHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Plutus.Types.TransactionUnspentOutput"] = $PS["Plutus.Types.TransactionUnspentOutput"] || {};
  var exports = $PS["Plutus.Types.TransactionUnspentOutput"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Types_Transaction = $PS["Types.Transaction"];
  var genericTransactionUnspent = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionUnspentOut = {
      show: Data_Show_Generic.genericShow(genericTransactionUnspent)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "input";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "output";
          }
      })(Data_Show.showRecordFieldsNil)(Plutus_Types_Transaction.showTransactionOutputWith))(Types_Transaction.showTransactionInput))))({
          reflectSymbol: function () {
              return "TransactionUnspentOutput";
          }
      }))
  };
  var eqTransactionUnspentOutpu = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "output";
      }
  })(Plutus_Types_Transaction.eqTransactionOutputWithRe))()({
      reflectSymbol: function () {
          return "input";
      }
  })(Types_Transaction.eqTransactionInput));
  exports["eqTransactionUnspentOutpu"] = eqTransactionUnspentOutpu;
  exports["showTransactionUnspentOut"] = showTransactionUnspentOut;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.Redeemer"] = $PS["Types.Redeemer"] || {};
  var exports = $PS["Types.Redeemer"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Unit = $PS["Data.Unit"];
  var ToData = $PS["ToData"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Redeemer = function (x) {
      return x;
  };
  var genericRedeemer_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showRedeemer = {
      show: Data_Show_Generic.genericShow(genericRedeemer_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "Redeemer";
          }
      }))
  };                                               
  var eqRedeemer = Types_PlutusData.eqPlutusData;
  var unitRedeemer = ToData.toData(ToData.toDataUnit)(Data_Unit.unit);
  exports["Redeemer"] = Redeemer;
  exports["unitRedeemer"] = unitRedeemer;
  exports["eqRedeemer"] = eqRedeemer;
  exports["showRedeemer"] = showRedeemer;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.TxConstraints"] = $PS["Types.TxConstraints"] || {};
  var exports = $PS["Types.TxConstraints"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var NativeScripts = $PS["NativeScripts"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Plutus_Types_TransactionUnspentOutput = $PS["Plutus.Types.TransactionUnspentOutput"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var RefInput = (function () {
      function RefInput(value0) {
          this.value0 = value0;
      };
      RefInput.create = function (value0) {
          return new RefInput(value0);
      };
      return RefInput;
  })();
  var SpendInput = (function () {
      function SpendInput(value0) {
          this.value0 = value0;
      };
      SpendInput.create = function (value0) {
          return new SpendInput(value0);
      };
      return SpendInput;
  })();
  var DatumInline = (function () {
      function DatumInline() {

      };
      DatumInline.value = new DatumInline();
      return DatumInline;
  })();
  var DatumWitness = (function () {
      function DatumWitness() {

      };
      DatumWitness.value = new DatumWitness();
      return DatumWitness;
  })();
  var MustIncludeDatum = (function () {
      function MustIncludeDatum(value0) {
          this.value0 = value0;
      };
      MustIncludeDatum.create = function (value0) {
          return new MustIncludeDatum(value0);
      };
      return MustIncludeDatum;
  })();
  var MustValidateIn = (function () {
      function MustValidateIn(value0) {
          this.value0 = value0;
      };
      MustValidateIn.create = function (value0) {
          return new MustValidateIn(value0);
      };
      return MustValidateIn;
  })();
  var MustBeSignedBy = (function () {
      function MustBeSignedBy(value0) {
          this.value0 = value0;
      };
      MustBeSignedBy.create = function (value0) {
          return new MustBeSignedBy(value0);
      };
      return MustBeSignedBy;
  })();
  var MustSpendAtLeast = (function () {
      function MustSpendAtLeast(value0) {
          this.value0 = value0;
      };
      MustSpendAtLeast.create = function (value0) {
          return new MustSpendAtLeast(value0);
      };
      return MustSpendAtLeast;
  })();
  var MustProduceAtLeast = (function () {
      function MustProduceAtLeast(value0) {
          this.value0 = value0;
      };
      MustProduceAtLeast.create = function (value0) {
          return new MustProduceAtLeast(value0);
      };
      return MustProduceAtLeast;
  })();
  var MustSpendPubKeyOutput = (function () {
      function MustSpendPubKeyOutput(value0) {
          this.value0 = value0;
      };
      MustSpendPubKeyOutput.create = function (value0) {
          return new MustSpendPubKeyOutput(value0);
      };
      return MustSpendPubKeyOutput;
  })();
  var MustSpendNativeScriptOutput = (function () {
      function MustSpendNativeScriptOutput(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MustSpendNativeScriptOutput.create = function (value0) {
          return function (value1) {
              return new MustSpendNativeScriptOutput(value0, value1);
          };
      };
      return MustSpendNativeScriptOutput;
  })();
  var MustSpendScriptOutput = (function () {
      function MustSpendScriptOutput(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      MustSpendScriptOutput.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new MustSpendScriptOutput(value0, value1, value2);
              };
          };
      };
      return MustSpendScriptOutput;
  })();
  var MustReferenceOutput = (function () {
      function MustReferenceOutput(value0) {
          this.value0 = value0;
      };
      MustReferenceOutput.create = function (value0) {
          return new MustReferenceOutput(value0);
      };
      return MustReferenceOutput;
  })();
  var MustMintValue = (function () {
      function MustMintValue(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      MustMintValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new MustMintValue(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return MustMintValue;
  })();
  var MustPayToPubKeyAddress = (function () {
      function MustPayToPubKeyAddress(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      MustPayToPubKeyAddress.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new MustPayToPubKeyAddress(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return MustPayToPubKeyAddress;
  })();
  var MustPayToNativeScript = (function () {
      function MustPayToNativeScript(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MustPayToNativeScript.create = function (value0) {
          return function (value1) {
              return new MustPayToNativeScript(value0, value1);
          };
      };
      return MustPayToNativeScript;
  })();
  var MustPayToScript = (function () {
      function MustPayToScript(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      MustPayToScript.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new MustPayToScript(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return MustPayToScript;
  })();
  var MustHashDatum = (function () {
      function MustHashDatum(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MustHashDatum.create = function (value0) {
          return function (value1) {
              return new MustHashDatum(value0, value1);
          };
      };
      return MustHashDatum;
  })();
  var MustSatisfyAnyOf = (function () {
      function MustSatisfyAnyOf(value0) {
          this.value0 = value0;
      };
      MustSatisfyAnyOf.create = function (value0) {
          return new MustSatisfyAnyOf(value0);
      };
      return MustSatisfyAnyOf;
  })();
  var MustNotBeValid = (function () {
      function MustNotBeValid() {

      };
      MustNotBeValid.value = new MustNotBeValid();
      return MustNotBeValid;
  })();
  var TxConstraints = function (x) {
      return x;
  };
  var semigroupTxConstraints = Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "constraints";
      }
  })()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "ownInputs";
      }
  })()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "ownOutputs";
      }
  })()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray));
  var monoidTxConstraints = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "constraints";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "ownInputs";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "ownOutputs";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordNil))));
  var genericTxConstraints_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTxConstraint_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new MustIncludeDatum(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new MustValidateIn(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new MustBeSignedBy(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new MustSpendAtLeast(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new MustProduceAtLeast(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new MustSpendPubKeyOutput(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new MustSpendNativeScriptOutput(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return new MustSpendScriptOutput(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
              return new MustReferenceOutput(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
              return new MustMintValue(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
              return new MustPayToPubKeyAddress(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))) {
              return new MustPayToNativeScript(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))) {
              return new MustPayToScript(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))) {
              return new MustHashDatum(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))) {
              return new MustSatisfyAnyOf(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))))))) {
              return MustNotBeValid.value;
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 127, column 1 - line 127, column 39): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof MustIncludeDatum) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof MustValidateIn) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof MustBeSignedBy) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof MustSpendAtLeast) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof MustProduceAtLeast) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof MustSpendPubKeyOutput) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof MustSpendNativeScriptOutput) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))));
          };
          if (x instanceof MustSpendScriptOutput) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2))))))))));
          };
          if (x instanceof MustReferenceOutput) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))));
          };
          if (x instanceof MustMintValue) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, x.value4))))))))))))));
          };
          if (x instanceof MustPayToPubKeyAddress) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, x.value4)))))))))))))));
          };
          if (x instanceof MustPayToNativeScript) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))))))));
          };
          if (x instanceof MustPayToScript) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, new Data_Generic_Rep.Product(x.value2, new Data_Generic_Rep.Product(x.value3, x.value4)))))))))))))))));
          };
          if (x instanceof MustHashDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))))))))));
          };
          if (x instanceof MustSatisfyAnyOf) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))));
          };
          if (x instanceof MustNotBeValid) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))))))));
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 127, column 1 - line 127, column 39): " + [ x.constructor.name ]);
      }
  };
  var genericOutputConstraint_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showOutputConstraint = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericOutputConstraint_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "datum";
              }
          })(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "value";
              }
          })(Data_Show.showRecordFieldsNil)(Plutus_Types_Value.showValue))(dictShow))))({
              reflectSymbol: function () {
                  return "OutputConstraint";
              }
          }))
      };
  };
  var genericInputWithScriptRef = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new RefInput(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new SpendInput(x.value0);
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 137, column 1 - line 137, column 45): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof RefInput) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof SpendInput) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 137, column 1 - line 137, column 45): " + [ x.constructor.name ]);
      }
  };
  var showInputWithScriptRef = {
      show: Data_Show_Generic.genericShow(genericInputWithScriptRef)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_TransactionUnspentOutput.showTransactionUnspentOut))({
          reflectSymbol: function () {
              return "RefInput";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_TransactionUnspentOutput.showTransactionUnspentOut))({
          reflectSymbol: function () {
              return "SpendInput";
          }
      })))
  };
  var genericInputConstraint_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showInputConstraint = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericInputConstraint_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "redeemer";
              }
          })(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "txOutRef";
              }
          })(Data_Show.showRecordFieldsNil)(Types_Transaction.showTransactionInput))(dictShow))))({
              reflectSymbol: function () {
                  return "InputConstraint";
              }
          }))
      };
  };
  var genericDatumPresence_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return DatumInline.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return DatumWitness.value;
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 153, column 1 - line 153, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof DatumInline) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof DatumWitness) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Types.TxConstraints (line 153, column 1 - line 153, column 40): " + [ x.constructor.name ]);
      }
  };
  var showDatumPresence = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericDatumPresence_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "DatumInline";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "DatumWitness";
              }
          })))(x);
      }
  };
  var showTxConstraint = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericTxConstraint_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum))({
              reflectSymbol: function () {
                  return "MustIncludeDatum";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Interval.showInterval(Types_Interval.showPOSIXTime)))({
              reflectSymbol: function () {
                  return "MustValidateIn";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPaymentPubKeyHash))({
              reflectSymbol: function () {
                  return "MustBeSignedBy";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_Value.showValue))({
              reflectSymbol: function () {
                  return "MustSpendAtLeast";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_Value.showValue))({
              reflectSymbol: function () {
                  return "MustProduceAtLeast";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
              reflectSymbol: function () {
                  return "MustSpendPubKeyOutput";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_NativeScript.showNativeScript)))({
              reflectSymbol: function () {
                  return "MustSpendNativeScriptOutput";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Redeemer.showRedeemer))(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(showInputWithScriptRef)))))({
              reflectSymbol: function () {
                  return "MustSpendScriptOutput";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
              reflectSymbol: function () {
                  return "MustReferenceOutput";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicyHash))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Redeemer.showRedeemer))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_TokenName.showTokenName))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(showInputWithScriptRef)))))))({
              reflectSymbol: function () {
                  return "MustMintValue";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPaymentPubKeyHash))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Types_PubKeyHash.showStakePubKeyHash)))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Data_Tuple.showTuple(Types_Datum.showDatum)(showDatumPresence))))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_Value.showValue))))))({
              reflectSymbol: function () {
                  return "MustPayToPubKeyAddress";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(NativeScripts.showNativeScriptHash))(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_Value.showValue)))({
              reflectSymbol: function () {
                  return "MustPayToNativeScript";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showDatumPresence))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(Data_Show_Generic.genericShowArgsArgument(Plutus_Types_Value.showValue))))))({
              reflectSymbol: function () {
                  return "MustPayToScript";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum)))({
              reflectSymbol: function () {
                  return "MustHashDatum";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Show.showArray(showTxConstraint))))({
              reflectSymbol: function () {
                  return "MustSatisfyAnyOf";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "MustNotBeValid";
              }
          })))))))))))))))))(x);
      }
  };
  var showTxConstraints = function (dictShow) {
      return function (dictShow1) {
          return {
              show: Data_Show_Generic.genericShow(genericTxConstraints_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                  reflectSymbol: function () {
                      return "constraints";
                  }
              })(Data_Show.showRecordFieldsCons({
                  reflectSymbol: function () {
                      return "ownInputs";
                  }
              })(Data_Show.showRecordFieldsCons({
                  reflectSymbol: function () {
                      return "ownOutputs";
                  }
              })(Data_Show.showRecordFieldsNil)(Data_Show.showArray(showOutputConstraint(dictShow1))))(Data_Show.showArray(showInputConstraint(dictShow))))(Data_Show.showArray(showTxConstraint)))))({
                  reflectSymbol: function () {
                      return "TxConstraints";
                  }
              }))
          };
      };
  };
  var eqOutputConstraint = function (dictEq) {
      return Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
          reflectSymbol: function () {
              return "value";
          }
      })(Plutus_Types_Value.eqValue))()({
          reflectSymbol: function () {
              return "datum";
          }
      })(dictEq));
  };
  var eqInputWithScriptRef = {
      eq: function (x) {
          return function (y) {
              if (x instanceof RefInput && y instanceof RefInput) {
                  return Data_Eq.eq(Plutus_Types_TransactionUnspentOutput.eqTransactionUnspentOutpu)(x.value0)(y.value0);
              };
              if (x instanceof SpendInput && y instanceof SpendInput) {
                  return Data_Eq.eq(Plutus_Types_TransactionUnspentOutput.eqTransactionUnspentOutpu)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var eqInputConstraint = function (dictEq) {
      return Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
          reflectSymbol: function () {
              return "txOutRef";
          }
      })(Types_Transaction.eqTransactionInput))()({
          reflectSymbol: function () {
              return "redeemer";
          }
      })(dictEq));
  };
  var eqDatumPresence = {
      eq: function (x) {
          return function (y) {
              if (x instanceof DatumInline && y instanceof DatumInline) {
                  return true;
              };
              if (x instanceof DatumWitness && y instanceof DatumWitness) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqTxConstraint = {
      eq: function (x) {
          return function (y) {
              if (x instanceof MustIncludeDatum && y instanceof MustIncludeDatum) {
                  return Data_Eq.eq(Types_Datum.eqDatum)(x.value0)(y.value0);
              };
              if (x instanceof MustValidateIn && y instanceof MustValidateIn) {
                  return Data_Eq.eq(Types_Interval.eqInterval(Types_Interval.eqPOSIXTime))(x.value0)(y.value0);
              };
              if (x instanceof MustBeSignedBy && y instanceof MustBeSignedBy) {
                  return Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(x.value0)(y.value0);
              };
              if (x instanceof MustSpendAtLeast && y instanceof MustSpendAtLeast) {
                  return Data_Eq.eq(Plutus_Types_Value.eqValue)(x.value0)(y.value0);
              };
              if (x instanceof MustProduceAtLeast && y instanceof MustProduceAtLeast) {
                  return Data_Eq.eq(Plutus_Types_Value.eqValue)(x.value0)(y.value0);
              };
              if (x instanceof MustSpendPubKeyOutput && y instanceof MustSpendPubKeyOutput) {
                  return Data_Eq.eq(Types_Transaction.eqTransactionInput)(x.value0)(y.value0);
              };
              if (x instanceof MustSpendNativeScriptOutput && y instanceof MustSpendNativeScriptOutput) {
                  return Data_Eq.eq(Types_Transaction.eqTransactionInput)(x.value0)(y.value0) && Data_Eq.eq(Cardano_Types_NativeScript.eqNativeScript)(x.value1)(y.value1);
              };
              if (x instanceof MustSpendScriptOutput && y instanceof MustSpendScriptOutput) {
                  return Data_Eq.eq(Types_Transaction.eqTransactionInput)(x.value0)(y.value0) && Data_Eq.eq(Types_Redeemer.eqRedeemer)(x.value1)(y.value1) && Data_Eq.eq(Data_Maybe.eqMaybe(eqInputWithScriptRef))(x.value2)(y.value2);
              };
              if (x instanceof MustReferenceOutput && y instanceof MustReferenceOutput) {
                  return Data_Eq.eq(Types_Transaction.eqTransactionInput)(x.value0)(y.value0);
              };
              if (x instanceof MustMintValue && y instanceof MustMintValue) {
                  return Data_Eq.eq(Types_Scripts.eqMintingPolicyHash)(x.value0)(y.value0) && Data_Eq.eq(Types_Redeemer.eqRedeemer)(x.value1)(y.value1) && Data_Eq.eq(Types_TokenName.eqTokenName)(x.value2)(y.value2) && Data_Eq.eq(Data_BigInt.eqBigInt)(x.value3)(y.value3) && Data_Eq.eq(Data_Maybe.eqMaybe(eqInputWithScriptRef))(x.value4)(y.value4);
              };
              if (x instanceof MustPayToPubKeyAddress && y instanceof MustPayToPubKeyAddress) {
                  return Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(x.value0)(y.value0) && Data_Eq.eq(Data_Maybe.eqMaybe(Types_PubKeyHash.eqStakePubKeyHash))(x.value1)(y.value1) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Tuple.eqTuple(Types_Datum.eqDatum)(eqDatumPresence)))(x.value2)(y.value2) && Data_Eq.eq(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef))(x.value3)(y.value3) && Data_Eq.eq(Plutus_Types_Value.eqValue)(x.value4)(y.value4);
              };
              if (x instanceof MustPayToNativeScript && y instanceof MustPayToNativeScript) {
                  return Data_Eq.eq(NativeScripts.eqNativeScriptHash)(x.value0)(y.value0) && Data_Eq.eq(Plutus_Types_Value.eqValue)(x.value1)(y.value1);
              };
              if (x instanceof MustPayToScript && y instanceof MustPayToScript) {
                  return Data_Eq.eq(Types_Scripts.eqValidatorHash)(x.value0)(y.value0) && Data_Eq.eq(Types_Datum.eqDatum)(x.value1)(y.value1) && Data_Eq.eq(eqDatumPresence)(x.value2)(y.value2) && Data_Eq.eq(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef))(x.value3)(y.value3) && Data_Eq.eq(Plutus_Types_Value.eqValue)(x.value4)(y.value4);
              };
              if (x instanceof MustHashDatum && y instanceof MustHashDatum) {
                  return Data_Eq.eq(Types_Transaction.eqDataHash)(x.value0)(y.value0) && Data_Eq.eq(Types_Datum.eqDatum)(x.value1)(y.value1);
              };
              if (x instanceof MustSatisfyAnyOf && y instanceof MustSatisfyAnyOf) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqArray(eqTxConstraint)))(x.value0)(y.value0);
              };
              if (x instanceof MustNotBeValid && y instanceof MustNotBeValid) {
                  return true;
              };
              return false;
          };
      }
  };
  var eqTxConstraints = function (dictEq) {
      return function (dictEq1) {
          return Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
              reflectSymbol: function () {
                  return "ownOutputs";
              }
          })(Data_Eq.eqArray(eqOutputConstraint(dictEq1))))()({
              reflectSymbol: function () {
                  return "ownInputs";
              }
          })(Data_Eq.eqArray(eqInputConstraint(dictEq))))()({
              reflectSymbol: function () {
                  return "constraints";
              }
          })(Data_Eq.eqArray(eqTxConstraint)));
      };
  };
  var singleton = function (a) {
      return Data_Newtype.over()()(TxConstraints)(function (v) {
          return {
              constraints: Data_Array.singleton(a),
              ownInputs: v.ownInputs,
              ownOutputs: v.ownOutputs
          };
      })(Data_Monoid.mempty(monoidTxConstraints));
  };
  var mustValidateIn = function ($565) {
      return singleton(MustValidateIn.create($565));
  };
  var mustSpendScriptOutput = function (txOutRef) {
      return function (red) {
          return singleton(new MustSpendScriptOutput(txOutRef, red, Data_Maybe.Nothing.value));
      };
  };
  var mustSpendPubKeyOutput = function ($568) {
      return singleton(MustSpendPubKeyOutput.create($568));
  };
  var mustPayToScript = function (vh) {
      return function (dt) {
          return function (dtp) {
              return function (vl) {
                  return Data_Semigroup.append(semigroupTxConstraints)(singleton(new MustPayToScript(vh, dt, dtp, Data_Maybe.Nothing.value, vl)))(Data_Monoid.guard(monoidTxConstraints)(Data_Eq.eq(eqDatumPresence)(dtp)(DatumWitness.value))(singleton(new MustIncludeDatum(dt))));
              };
          };
      };
  };
  var mustPayToPubKeyAddress = function (pkh) {
      return function (skh) {
          var $601 = MustPayToPubKeyAddress.create(pkh)(new Data_Maybe.Just(skh))(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value);
          return function ($602) {
              return singleton($601($602));
          };
      };
  };
  var mustMintCurrencyWithRedeemer = function (mph) {
      return function (red) {
          return function (tn) {
              return function (amount) {
                  return singleton(new MustMintValue(mph, red, tn, amount, Data_Maybe.Nothing.value));
              };
          };
      };
  };
  var mustMintValueWithRedeemer = function (redeemer) {
      var tokenConstraint = function (v) {
          var mintingPolicyHash = Plutus_Types_CurrencySymbol.currencyMPSHash(v.value0);
          return mustMintCurrencyWithRedeemer(mintingPolicyHash)(redeemer)(v.value1.value0)(v.value1.value1);
      };
      var $607 = Data_Array.fold(monoidTxConstraints);
      var $608 = Data_Functor.map(Data_Functor.functorArray)(tokenConstraint);
      return function ($609) {
          return $607($608(Plutus_Types_Value.flattenNonAdaAssets($609)));
      };
  };
  var mustMintValue = mustMintValueWithRedeemer(Types_Redeemer.unitRedeemer);
  var mustIncludeDatum = function ($610) {
      return singleton(MustIncludeDatum.create($610));
  };
  var mustBeSignedBy = function ($613) {
      return singleton(MustBeSignedBy.create($613));
  };
  exports["DatumInline"] = DatumInline;
  exports["DatumWitness"] = DatumWitness;
  exports["RefInput"] = RefInput;
  exports["SpendInput"] = SpendInput;
  exports["MustIncludeDatum"] = MustIncludeDatum;
  exports["MustValidateIn"] = MustValidateIn;
  exports["MustBeSignedBy"] = MustBeSignedBy;
  exports["MustSpendAtLeast"] = MustSpendAtLeast;
  exports["MustProduceAtLeast"] = MustProduceAtLeast;
  exports["MustSpendPubKeyOutput"] = MustSpendPubKeyOutput;
  exports["MustSpendScriptOutput"] = MustSpendScriptOutput;
  exports["MustSpendNativeScriptOutput"] = MustSpendNativeScriptOutput;
  exports["MustReferenceOutput"] = MustReferenceOutput;
  exports["MustMintValue"] = MustMintValue;
  exports["MustPayToPubKeyAddress"] = MustPayToPubKeyAddress;
  exports["MustPayToScript"] = MustPayToScript;
  exports["MustPayToNativeScript"] = MustPayToNativeScript;
  exports["MustHashDatum"] = MustHashDatum;
  exports["MustSatisfyAnyOf"] = MustSatisfyAnyOf;
  exports["MustNotBeValid"] = MustNotBeValid;
  exports["mustBeSignedBy"] = mustBeSignedBy;
  exports["mustIncludeDatum"] = mustIncludeDatum;
  exports["mustMintValue"] = mustMintValue;
  exports["mustMintValueWithRedeemer"] = mustMintValueWithRedeemer;
  exports["mustPayToScript"] = mustPayToScript;
  exports["mustPayToPubKeyAddress"] = mustPayToPubKeyAddress;
  exports["mustSpendPubKeyOutput"] = mustSpendPubKeyOutput;
  exports["mustSpendScriptOutput"] = mustSpendScriptOutput;
  exports["mustValidateIn"] = mustValidateIn;
  exports["eqDatumPresence"] = eqDatumPresence;
  exports["eqTxConstraints"] = eqTxConstraints;
  exports["semigroupTxConstraints"] = semigroupTxConstraints;
  exports["monoidTxConstraints"] = monoidTxConstraints;
  exports["showTxConstraints"] = showTxConstraints;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["FromData"] = $PS["FromData"] || {};
  var exports = $PS["FromData"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var TypeLevel_Nat = $PS["TypeLevel.Nat"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var ArgsWantedButGot = (function () {
      function ArgsWantedButGot(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ArgsWantedButGot.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ArgsWantedButGot(value0, value1, value2);
              };
          };
      };
      return ArgsWantedButGot;
  })();
  var FromDataFailed = (function () {
      function FromDataFailed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FromDataFailed.create = function (value0) {
          return function (value1) {
              return new FromDataFailed(value0, value1);
          };
      };
      return FromDataFailed;
  })();
  var BigIntToIntFailed = (function () {
      function BigIntToIntFailed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BigIntToIntFailed.create = function (value0) {
          return function (value1) {
              return new BigIntToIntFailed(value0, value1);
          };
      };
      return BigIntToIntFailed;
  })();
  var IndexWantedButGot = (function () {
      function IndexWantedButGot(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      IndexWantedButGot.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new IndexWantedButGot(value0, value1, value2);
              };
          };
      };
      return IndexWantedButGot;
  })();
  var WantedConstrGot = (function () {
      function WantedConstrGot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WantedConstrGot.create = function (value0) {
          return function (value1) {
              return new WantedConstrGot(value0, value1);
          };
      };
      return WantedConstrGot;
  })();
  var fromDataUnit = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Constr && (v.value1.length === 0 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
              return new Data_Maybe.Just(Data_Unit.unit);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromDataByteArray = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Bytes) {
              return new Data_Maybe.Just(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromDataBoolean = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Constr && v.value1.length === 0) {
              if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                  return new Data_Maybe.Just(false);
              };
              if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.one(Data_BigInt.semiringBigInt))) {
                  return new Data_Maybe.Just(true);
              };
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromDataBigInt = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Integer) {
              return new Data_Maybe.Just(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromDataArgsRLNilRow = {
      fromDataArgsRec: function (dictIsSymbol) {
          return function (v) {
              return function (v1) {
                  return function (v2) {
                      return function (v3) {
                          if (v3.length === 0) {
                              return new Data_Either.Right({
                                  head: {},
                                  tail: [  ]
                              });
                          };
                          return Data_Either.Left.create(new ArgsWantedButGot(Data_Symbol.reflectSymbol(dictIsSymbol)(v1), 0, v3));
                      };
                  };
              };
          };
      }
  };
  var fromDataArgsNoArguments = {
      fromDataArgs: function (dictIsSymbol) {
          return function (v) {
              return function (v1) {
                  return function (v2) {
                      if (v2.length === 0) {
                          return new Data_Either.Right({
                              head: Data_Generic_Rep.NoArguments.value,
                              tail: [  ]
                          });
                      };
                      return Data_Either.Left.create(new ArgsWantedButGot(Data_Symbol.reflectSymbol(dictIsSymbol)(v1), 0, v2));
                  };
              };
          };
      }
  };
  var noteB = function (v) {
      return function (v1) {
          if (v1) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
          };
          if (!v1) {
              return new Data_Either.Left(v);
          };
          throw new Error("Failed pattern match at FromData (line 72, column 1 - line 72, column 59): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var fromDataWithSchema = function (dict) {
      return dict.fromDataWithSchema;
  };
  var genericFromData = function (dictGeneric) {
      return function (dictFromDataWithSchema) {
          return function (pd) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(Data_Either.hush(fromDataWithSchema(dictFromDataWithSchema)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(pd)));
          };
      };
  };
  var fromDataWithSchemaSum = function (dictFromDataWithSchema) {
      return function (dictFromDataWithSchema1) {
          return {
              fromDataWithSchema: function (v) {
                  return function (v1) {
                      return function (pd) {
                          return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inl.create)(fromDataWithSchema(dictFromDataWithSchema)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(pd)))(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inr.create)(fromDataWithSchema(dictFromDataWithSchema1)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(pd)));
                      };
                  };
              }
          };
      };
  };
  var fromDataArgsRec = function (dict) {
      return dict.fromDataArgsRec;
  };
  var fromDataArgsArgumentRecor = function (dictFromDataArgsRL) {
      return function (dictHasPlutusSchema) {
          return function (dictValidPlutusSchema) {
              return function (dictGetWithLabel) {
                  return {
                      fromDataArgs: function (dictIsSymbol) {
                          return function (v) {
                              return function (v1) {
                                  return function (pdArgs) {
                                      return Control_Bind.bind(Data_Either.bindEither)(fromDataArgsRec(dictFromDataArgsRL)(dictIsSymbol)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(pdArgs))(function (v2) {
                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                              head: v2.head,
                                              tail: v2.tail
                                          });
                                      });
                                  };
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var fromDataArgs = function (dict) {
      return dict.fromDataArgs;
  };
  var fromDataWithSchemaConstru = function (dictIsSymbol) {
      return function (dictHasPlutusSchema) {
          return function (dictValidPlutusSchema) {
              return function (dictGetIndexWithLabel) {
                  return function (dictFromDataArgs) {
                      return function (dictKnownNat) {
                          return {
                              fromDataWithSchema: function (v) {
                                  return function (v1) {
                                      return function (v2) {
                                          if (v2 instanceof Types_PlutusData.Constr) {
                                              var constrName = Data_Symbol.reflectSymbol(dictGetIndexWithLabel.IsSymbol0())(Type_Proxy["Proxy"].value);
                                              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new BigIntToIntFailed(constrName, v2.value0))(Data_BigInt.toInt(v2.value0)))(function (gotIx) {
                                                  return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(TypeLevel_Nat.natVal(dictKnownNat)(Type_Proxy["Proxy"].value)))(function (wantedIx) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(noteB(new IndexWantedButGot(constrName, wantedIx, gotIx))(wantedIx === gotIx))(function () {
                                                          return Control_Bind.bind(Data_Either.bindEither)(fromDataArgs(dictFromDataArgs)(dictGetIndexWithLabel.IsSymbol0())(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(v2.value1))(function (v3) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(noteB(new ArgsWantedButGot(constrName, 0, v3.tail))(Data_Eq.eq(Data_Eq.eqArray(Types_PlutusData.eqPlutusData))(v3.tail)([  ])))(function () {
                                                                  return Control_Applicative.pure(Data_Either.applicativeEither)(v3.head);
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          };
                                          return Data_Either.Left.create(new WantedConstrGot(Data_Symbol.reflectSymbol(dictGetIndexWithLabel.IsSymbol0())(Type_Proxy["Proxy"].value), v2));
                                      };
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var fromData = function (dict) {
      return dict.fromData;
  };
  var fromDataArgsRLCons = function (dictFromData) {
      return function (dictFromDataArgsRL) {
          return function (dictLacks) {
              return function (dictCons) {
                  return function (dictIsSymbol) {
                      return {
                          fromDataArgsRec: function (dictIsSymbol1) {
                              return function (v) {
                                  return function (c) {
                                      return function (v1) {
                                          return function (pdArgs) {
                                              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new ArgsWantedButGot(Data_Symbol.reflectSymbol(dictIsSymbol1)(c), 1, pdArgs))(Data_Array.uncons(pdArgs)))(function (v2) {
                                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new FromDataFailed(Data_Symbol.reflectSymbol(dictIsSymbol1)(c), v2.head))(fromData(dictFromData)(v2.head)))(function (field) {
                                                      return Control_Bind.bind(Data_Either.bindEither)(fromDataArgsRec(dictFromDataArgsRL)(dictIsSymbol1)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(v2.tail))(function (v3) {
                                                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                              head: Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(field)(v3.head),
                                                              tail: v3.tail
                                                          });
                                                      });
                                                  });
                                              });
                                          };
                                      };
                                  };
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  var fromDataMaybe = function (dictFromData) {
      return {
          fromData: function (v) {
              if (v instanceof Types_PlutusData.Constr && (v.value1.length === 1 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($258) {
                      return Data_Maybe.Just.create(Data_Maybe.Just.create($258));
                  })(fromData(dictFromData)(v["value1"][0]));
              };
              if (v instanceof Types_PlutusData.Constr && (v.value1.length === 0 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.one(Data_BigInt.semiringBigInt)))) {
                  return new Data_Maybe.Just(Data_Maybe.Nothing.value);
              };
              return Data_Maybe.Nothing.value;
          }
      };
  };
  exports["fromData"] = fromData;
  exports["genericFromData"] = genericFromData;
  exports["fromDataWithSchemaSum"] = fromDataWithSchemaSum;
  exports["fromDataWithSchemaConstru"] = fromDataWithSchemaConstru;
  exports["fromDataArgsNoArguments"] = fromDataArgsNoArguments;
  exports["fromDataArgsArgumentRecor"] = fromDataArgsArgumentRecor;
  exports["fromDataArgsRLNilRow"] = fromDataArgsRLNilRow;
  exports["fromDataArgsRLCons"] = fromDataArgsRLCons;
  exports["fromDataUnit"] = fromDataUnit;
  exports["fromDataBoolean"] = fromDataBoolean;
  exports["fromDataMaybe"] = fromDataMaybe;
  exports["fromDataBigInt"] = fromDataBigInt;
  exports["fromDataByteArray"] = fromDataByteArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.TypedTxOut"] = $PS["Types.TypedTxOut"] || {};
  var exports = $PS["Types.TypedTxOut"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FromData = $PS["FromData"];
  var Hashing = $PS["Hashing"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Serialization_Address = $PS["Serialization.Address"];
  var ToData = $PS["ToData"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_Transaction = $PS["Types.Transaction"];
  var WrongValidatorAddress = (function () {
      function WrongValidatorAddress(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WrongValidatorAddress.create = function (value0) {
          return function (value1) {
              return new WrongValidatorAddress(value0, value1);
          };
      };
      return WrongValidatorAddress;
  })();
  var ExpectedScriptGotPubkey = (function () {
      function ExpectedScriptGotPubkey() {

      };
      ExpectedScriptGotPubkey.value = new ExpectedScriptGotPubkey();
      return ExpectedScriptGotPubkey;
  })();
  var WrongRedeemerType = (function () {
      function WrongRedeemerType(value0) {
          this.value0 = value0;
      };
      WrongRedeemerType.create = function (value0) {
          return new WrongRedeemerType(value0);
      };
      return WrongRedeemerType;
  })();
  var WrongDatumType = (function () {
      function WrongDatumType(value0) {
          this.value0 = value0;
      };
      WrongDatumType.create = function (value0) {
          return new WrongDatumType(value0);
      };
      return WrongDatumType;
  })();
  var CannotQueryDatum = (function () {
      function CannotQueryDatum(value0) {
          this.value0 = value0;
      };
      CannotQueryDatum.create = function (value0) {
          return new CannotQueryDatum(value0);
      };
      return CannotQueryDatum;
  })();
  var CannotMakeTypedTxOut = (function () {
      function CannotMakeTypedTxOut() {

      };
      CannotMakeTypedTxOut.value = new CannotMakeTypedTxOut();
      return CannotMakeTypedTxOut;
  })();
  var UnknownRef = (function () {
      function UnknownRef() {

      };
      UnknownRef.value = new UnknownRef();
      return UnknownRef;
  })();
  var genericTypeCheckError_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new WrongValidatorAddress(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return ExpectedScriptGotPubkey.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new WrongRedeemerType(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new WrongDatumType(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new CannotQueryDatum(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return CannotMakeTypedTxOut.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
              return UnknownRef.value;
          };
          throw new Error("Failed pattern match at Types.TypedTxOut (line 207, column 1 - line 207, column 41): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof WrongValidatorAddress) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof ExpectedScriptGotPubkey) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof WrongRedeemerType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof WrongDatumType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof CannotQueryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof CannotMakeTypedTxOut) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof UnknownRef) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
          };
          throw new Error("Failed pattern match at Types.TypedTxOut (line 207, column 1 - line 207, column 41): " + [ x.constructor.name ]);
      }
  };
  var showTypeCheckError = {
      show: Data_Show_Generic.genericShow(genericTypeCheckError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress))(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress)))({
          reflectSymbol: function () {
              return "WrongValidatorAddress";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ExpectedScriptGotPubkey";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "WrongRedeemerType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "WrongDatumType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "CannotQueryDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotMakeTypedTxOut";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "UnknownRef";
          }
      }))))))))
  };
  var typedTxOutValue = function (dictDatumType) {
      return function (v) {
          return (Data_Newtype.unwrap()(v.txOut)).amount;
      };
  };
  var typedTxOutTxOut = function (dictDatumType) {
      return function (v) {
          return v.txOut;
      };
  };
  var typedTxOutRefValue = function (dictDatumType) {
      return function (v) {
          return typedTxOutValue()(v.typedTxOut);
      };
  };
  var typedTxOutDatumHash = function (dictDatumType) {
      return function (v) {
          return Types_OutputDatum.outputDatumDataHash((Data_Newtype.unwrap()(v.txOut)).datum);
      };
  };
  var mkTypedTxOut = function (dictDatumType) {
      return function (dictToData) {
          return function (networkId) {
              return function (typedVal) {
                  return function (dt) {
                      return function (amount) {
                          var mkTypedTxOut$prime = function (dat) {
                              return function (txOut) {
                                  return {
                                      txOut: txOut,
                                      data: dat
                                  };
                              };
                          };
                          var mDHash = Hashing.datumHash(Types_Datum.Datum(ToData.toData(dictToData)(dt)));
                          var address = Scripts.typedValidatorEnterpriseAddress(networkId)(typedVal);
                          if (mDHash instanceof Data_Maybe.Nothing) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (mDHash instanceof Data_Maybe.Just) {
                              return Data_Maybe.Just.create(mkTypedTxOut$prime(dt)(Data_Newtype.wrap()({
                                  address: address,
                                  amount: amount,
                                  datum: new Types_OutputDatum.OutputDatumHash(mDHash.value0),
                                  scriptRef: Data_Maybe.Nothing.value
                              })));
                          };
                          throw new Error("Failed pattern match at Types.TypedTxOut (line 178, column 5 - line 189, column 14): " + [ mDHash.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var checkValidatorAddress = function (dictMonad) {
      return function (networkId) {
          return function (typedVal) {
              return function (actualAddr) {
                  return Control_Monad_Except_Trans.runExceptT((function () {
                      var expectedAddr = Scripts.typedValidatorEnterpriseAddress(networkId)(typedVal);
                      return Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Eq.eq(Serialization_Address.eqAddress)(expectedAddr)(actualAddr))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad))(new WrongValidatorAddress(expectedAddr, actualAddr)));
                  })());
              };
          };
      };
  };
  var checkDatum = function (dictMonad) {
      return function (dictDatumType) {
          return function (dictFromData) {
              return function (v) {
                  return function (v1) {
                      return Control_Monad_Except_Trans.runExceptT(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(dictMonad))(new WrongDatumType(v1))(FromData.fromData(dictFromData)(v1)));
                  };
              };
          };
      };
  };
  var typeTxOut = function (dictDatumType) {
      return function (dictIsData) {
          return function (networkId) {
              return function (typedVal) {
                  return function (v) {
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(QueryM.monadQueryMExtendedAff))(ExpectedScriptGotPubkey.value)(Types_OutputDatum.outputDatumDataHash(v.datum)))(function (dHash) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Data_Functor["void"](Control_Monad_Except_Trans.functorExceptT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(checkValidatorAddress(Control_Monad_Except_Trans.monadExceptT(QueryM.monadQueryMExtendedAff))(networkId)(typedVal)(v.address)))(function () {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getDatumByHash(dHash))(Data_Either.note(new CannotQueryDatum(dHash)))))(function (pd) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(checkDatum(QueryM.monadQueryMExtendedAff)()(dictIsData.FromData0())(typedVal)(pd)))(function (dtOut) {
                                      return Control_Monad_Except_Trans.except(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Either.note(CannotMakeTypedTxOut.value)(mkTypedTxOut()(dictIsData.ToData1())(networkId)(typedVal)(dtOut)(v.amount)));
                                  });
                              });
                          });
                      }));
                  };
              };
          };
      };
  };
  var typeTxOutRef = function (dictDatumType) {
      return function (dictIsData) {
          return function (networkId) {
              return function (lookupRef) {
                  return function (typedVal) {
                      return function (txOutRef) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(QueryM.monadQueryMExtendedAff))(UnknownRef.value)(lookupRef(txOutRef)))(function (out) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(typeTxOut()(dictIsData)(networkId)(typedVal)(out)))(function (typedTxOut) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))({
                                      txOutRef: txOutRef,
                                      typedTxOut: typedTxOut
                                  });
                              });
                          }));
                      };
                  };
              };
          };
      };
  };
  exports["mkTypedTxOut"] = mkTypedTxOut;
  exports["typeTxOutRef"] = typeTxOutRef;
  exports["typedTxOutDatumHash"] = typedTxOutDatumHash;
  exports["typedTxOutRefValue"] = typedTxOutRefValue;
  exports["typedTxOutTxOut"] = typedTxOutTxOut;
  exports["showTypeCheckError"] = showTypeCheckError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.TypedValidator"] = $PS["Types.TypedValidator"] || {};
  var exports = $PS["Types.TypedValidator"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Types_Scripts = $PS["Types.Scripts"];
  var genericTypedValidator_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTypedValidator = {
      show: Data_Show_Generic.genericShow(genericTypedValidator_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "forwardingMPS";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "forwardingMPSHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "validator";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "validatorHash";
          }
      })(Data_Show.showRecordFieldsNil)(Types_Scripts.showValidatorHash))(Types_Scripts.showValidator))(Types_Scripts.showMintingPolicyHash))(Types_Scripts.showMintingPolicy))))({
          reflectSymbol: function () {
              return "TypedValidator";
          }
      }))
  };
  var eqTypedValidator = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "validatorHash";
      }
  })(Types_Scripts.eqValidatorHash))()({
      reflectSymbol: function () {
          return "validator";
      }
  })(Types_Scripts.eqValidator))()({
      reflectSymbol: function () {
          return "forwardingMPSHash";
      }
  })(Types_Scripts.eqMintingPolicyHash))()({
      reflectSymbol: function () {
          return "forwardingMPS";
      }
  })(Types_Scripts.eqMintingPolicy));
  exports["eqTypedValidator"] = eqTypedValidator;
  exports["showTypedValidator"] = showTypedValidator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.UnbalancedTransaction"] = $PS["Types.UnbalancedTransaction"] || {};
  var exports = $PS["Types.UnbalancedTransaction"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Helpers = $PS["Helpers"];
  var Types_Transaction = $PS["Types.Transaction"];
  var genericUnbalancedTx_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showUnbalancedTx = {
      show: Data_Show_Generic.genericShow(genericUnbalancedTx_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "transaction";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "utxoIndex";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput)))(Cardano_Types_Transaction.showTransaction))))({
          reflectSymbol: function () {
              return "UnbalancedTx";
          }
      }))
  };
  var genericPaymentPubKey_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPaymentPubKey = {
      show: Data_Show_Generic.genericShow(genericPaymentPubKey_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Transaction.showPublicKey))({
          reflectSymbol: function () {
              return "PaymentPubKey";
          }
      }))
  };                 
  var eqPaymentPubKey = Cardano_Types_Transaction.eqPublicKey;
  var encodeAesonUnbalancedTx = {
      "encodeAeson'": function (v) {
          return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Cardano_Types_Transaction.encodeAesonTransaction)(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonNil)({
              reflectSymbol: function () {
                  return "utxoIndex";
              }
          })())({
              reflectSymbol: function () {
                  return "transaction";
              }
          })())())({
              utxoIndex: Helpers.encodeMap(Types_Transaction.encodeAesonTransactionInp)(Cardano_Types_Transaction.encodeAesonTransactionOut)(v.utxoIndex),
              transaction: v.transaction
          });
      }
  };
  var emptyUnbalancedTx = {
      transaction: Data_Monoid.mempty(Cardano_Types_Transaction.monoidTransaction),
      utxoIndex: Data_Map_Internal.empty
  };
  var _utxoIndex = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.utxoIndex, function (utxoIx) {
              return {
                  transaction: v.transaction,
                  utxoIndex: utxoIx
              };
          });
      })(dictStrong);
  };
  var _transaction = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.transaction, function (tx) {
              return {
                  transaction: tx,
                  utxoIndex: v.utxoIndex
              };
          });
      })(dictStrong);
  };
  exports["_transaction"] = _transaction;
  exports["_utxoIndex"] = _utxoIndex;
  exports["emptyUnbalancedTx"] = emptyUnbalancedTx;
  exports["eqPaymentPubKey"] = eqPaymentPubKey;
  exports["showPaymentPubKey"] = showPaymentPubKey;
  exports["showUnbalancedTx"] = showUnbalancedTx;
  exports["encodeAesonUnbalancedTx"] = encodeAesonUnbalancedTx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.ScriptLookups"] = $PS["Types.ScriptLookups"] || {};
  var exports = $PS["Types.ScriptLookups"];
  var Address = $PS["Address"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Lattice = $PS["Data.Lattice"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Hashing = $PS["Hashing"];
  var Helpers = $PS["Helpers"];
  var Plutus_Conversion = $PS["Plutus.Conversion"];
  var Plutus_Conversion_Value = $PS["Plutus.Conversion.Value"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var QueryM = $PS["QueryM"];
  var QueryM_EraSummaries = $PS["QueryM.EraSummaries"];
  var QueryM_ProtocolParameters = $PS["QueryM.ProtocolParameters"];
  var QueryM_SystemStart = $PS["QueryM.SystemStart"];
  var Scripts = $PS["Scripts"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Transaction = $PS["Transaction"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Types_TypedTxOut = $PS["Types.TypedTxOut"];
  var Types_TypedValidator = $PS["Types.TypedValidator"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];
  var ScriptLookups = function (x) {
      return x;
  };
  var TypeCheckFailed = (function () {
      function TypeCheckFailed(value0) {
          this.value0 = value0;
      };
      TypeCheckFailed.create = function (value0) {
          return new TypeCheckFailed(value0);
      };
      return TypeCheckFailed;
  })();
  var ModifyTx = (function () {
      function ModifyTx(value0) {
          this.value0 = value0;
      };
      ModifyTx.create = function (value0) {
          return new ModifyTx(value0);
      };
      return ModifyTx;
  })();
  var TxOutRefNotFound = (function () {
      function TxOutRefNotFound(value0) {
          this.value0 = value0;
      };
      TxOutRefNotFound.create = function (value0) {
          return new TxOutRefNotFound(value0);
      };
      return TxOutRefNotFound;
  })();
  var TxOutRefWrongType = (function () {
      function TxOutRefWrongType(value0) {
          this.value0 = value0;
      };
      TxOutRefWrongType.create = function (value0) {
          return new TxOutRefWrongType(value0);
      };
      return TxOutRefWrongType;
  })();
  var DatumNotFound = (function () {
      function DatumNotFound(value0) {
          this.value0 = value0;
      };
      DatumNotFound.create = function (value0) {
          return new DatumNotFound(value0);
      };
      return DatumNotFound;
  })();
  var MintingPolicyNotFound = (function () {
      function MintingPolicyNotFound(value0) {
          this.value0 = value0;
      };
      MintingPolicyNotFound.create = function (value0) {
          return new MintingPolicyNotFound(value0);
      };
      return MintingPolicyNotFound;
  })();
  var MintingPolicyHashNotCurrencySymbol = (function () {
      function MintingPolicyHashNotCurrencySymbol(value0) {
          this.value0 = value0;
      };
      MintingPolicyHashNotCurrencySymbol.create = function (value0) {
          return new MintingPolicyHashNotCurrencySymbol(value0);
      };
      return MintingPolicyHashNotCurrencySymbol;
  })();
  var CannotMakeValue = (function () {
      function CannotMakeValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CannotMakeValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CannotMakeValue(value0, value1, value2);
              };
          };
      };
      return CannotMakeValue;
  })();
  var ValidatorHashNotFound = (function () {
      function ValidatorHashNotFound(value0) {
          this.value0 = value0;
      };
      ValidatorHashNotFound.create = function (value0) {
          return new ValidatorHashNotFound(value0);
      };
      return ValidatorHashNotFound;
  })();
  var WrongRefScriptHash = (function () {
      function WrongRefScriptHash(value0) {
          this.value0 = value0;
      };
      WrongRefScriptHash.create = function (value0) {
          return new WrongRefScriptHash(value0);
      };
      return WrongRefScriptHash;
  })();
  var OwnPubKeyAndStakeKeyMissing = (function () {
      function OwnPubKeyAndStakeKeyMissing() {

      };
      OwnPubKeyAndStakeKeyMissing.value = new OwnPubKeyAndStakeKeyMissing();
      return OwnPubKeyAndStakeKeyMissing;
  })();
  var TypedValidatorMissing = (function () {
      function TypedValidatorMissing() {

      };
      TypedValidatorMissing.value = new TypedValidatorMissing();
      return TypedValidatorMissing;
  })();
  var DatumWrongHash = (function () {
      function DatumWrongHash(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DatumWrongHash.create = function (value0) {
          return function (value1) {
              return new DatumWrongHash(value0, value1);
          };
      };
      return DatumWrongHash;
  })();
  var CannotFindDatum = (function () {
      function CannotFindDatum() {

      };
      CannotFindDatum.value = new CannotFindDatum();
      return CannotFindDatum;
  })();
  var CannotQueryDatum = (function () {
      function CannotQueryDatum(value0) {
          this.value0 = value0;
      };
      CannotQueryDatum.create = function (value0) {
          return new CannotQueryDatum(value0);
      };
      return CannotQueryDatum;
  })();
  var CannotHashDatum = (function () {
      function CannotHashDatum(value0) {
          this.value0 = value0;
      };
      CannotHashDatum.create = function (value0) {
          return new CannotHashDatum(value0);
      };
      return CannotHashDatum;
  })();
  var CannotConvertPOSIXTimeRange = (function () {
      function CannotConvertPOSIXTimeRange(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CannotConvertPOSIXTimeRange.create = function (value0) {
          return function (value1) {
              return new CannotConvertPOSIXTimeRange(value0, value1);
          };
      };
      return CannotConvertPOSIXTimeRange;
  })();
  var CannotGetMintingPolicyScriptIndex = (function () {
      function CannotGetMintingPolicyScriptIndex() {

      };
      CannotGetMintingPolicyScriptIndex.value = new CannotGetMintingPolicyScriptIndex();
      return CannotGetMintingPolicyScriptIndex;
  })();
  var CannotGetValidatorHashFromAddress = (function () {
      function CannotGetValidatorHashFromAddress(value0) {
          this.value0 = value0;
      };
      CannotGetValidatorHashFromAddress.create = function (value0) {
          return new CannotGetValidatorHashFromAddress(value0);
      };
      return CannotGetValidatorHashFromAddress;
  })();
  var MkTypedTxOutFailed = (function () {
      function MkTypedTxOutFailed() {

      };
      MkTypedTxOutFailed.value = new MkTypedTxOutFailed();
      return MkTypedTxOutFailed;
  })();
  var TypedTxOutHasNoDatumHash = (function () {
      function TypedTxOutHasNoDatumHash() {

      };
      TypedTxOutHasNoDatumHash.value = new TypedTxOutHasNoDatumHash();
      return TypedTxOutHasNoDatumHash;
  })();
  var CannotHashMintingPolicy = (function () {
      function CannotHashMintingPolicy(value0) {
          this.value0 = value0;
      };
      CannotHashMintingPolicy.create = function (value0) {
          return new CannotHashMintingPolicy(value0);
      };
      return CannotHashMintingPolicy;
  })();
  var CannotHashValidator = (function () {
      function CannotHashValidator(value0) {
          this.value0 = value0;
      };
      CannotHashValidator.create = function (value0) {
          return new CannotHashValidator(value0);
      };
      return CannotHashValidator;
  })();
  var CannotConvertPaymentPubKeyHash = (function () {
      function CannotConvertPaymentPubKeyHash(value0) {
          this.value0 = value0;
      };
      CannotConvertPaymentPubKeyHash.create = function (value0) {
          return new CannotConvertPaymentPubKeyHash(value0);
      };
      return CannotConvertPaymentPubKeyHash;
  })();
  var CannotSatisfyAny = (function () {
      function CannotSatisfyAny() {

      };
      CannotSatisfyAny.value = new CannotSatisfyAny();
      return CannotSatisfyAny;
  })();
  var semigroupValueSpentBalanc = {
      append: function (v) {
          return function (v1) {
              return {
                  required: Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(v.required)(v1.required),
                  provided: Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(v.provided)(v1.provided)
              };
          };
      }
  };
  var semigroupScriptLookups = {
      append: function (v) {
          return function (v1) {
              return {
                  mps: Data_Array.union(Types_Scripts.eqMintingPolicy)(v.mps)(v1.mps),
                  txOutputs: Data_Map_Internal.union(Types_Transaction.ordTransactionInput)(v.txOutputs)(v1.txOutputs),
                  scripts: Data_Array.union(Types_Scripts.eqValidator)(v.scripts)(v1.scripts),
                  datums: Data_Map_Internal.union(Types_Transaction.ordDataHash)(v.datums)(v1.datums),
                  paymentPubKeyHashes: Data_Map_Internal.union(Types_PubKeyHash.ordPaymentPubKeyHash)(v.paymentPubKeyHashes)(v1.paymentPubKeyHashes),
                  typedValidator: Helpers.appendFirstMaybe(v.typedValidator)(v1.typedValidator),
                  ownPaymentPubKeyHash: Helpers.appendFirstMaybe(v.ownPaymentPubKeyHash)(v1.ownPaymentPubKeyHash),
                  ownStakePubKeyHash: Helpers.appendFirstMaybe(v.ownStakePubKeyHash)(v1.ownStakePubKeyHash)
              };
          };
      }
  };
  var monoidScriptLookups = {
      mempty: {
          mps: Data_Monoid.mempty(Data_Monoid.monoidArray),
          txOutputs: Data_Map_Internal.empty,
          scripts: Data_Monoid.mempty(Data_Monoid.monoidArray),
          datums: Data_Map_Internal.empty,
          paymentPubKeyHashes: Data_Map_Internal.empty,
          typedValidator: Data_Maybe.Nothing.value,
          ownPaymentPubKeyHash: Data_Maybe.Nothing.value,
          ownStakePubKeyHash: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupScriptLookups;
      }
  };
  var genericUnattachedUnbalanc = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showUnattachedUnbalancedT = {
      show: Data_Show_Generic.genericShow(genericUnattachedUnbalanc)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "datums";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "redeemersTxIns";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "unbalancedTx";
          }
      })(Data_Show.showRecordFieldsNil)(Types_UnbalancedTransaction.showUnbalancedTx))(Data_Show.showArray(Data_Tuple.showTuple(Cardano_Types_Transaction.showRedeemer)(Data_Maybe.showMaybe(Types_Transaction.showTransactionInput)))))(Data_Show.showArray(Types_Datum.showDatum)))))({
          reflectSymbol: function () {
              return "UnattachedUnbalancedTx";
          }
      }))
  };
  var genericScriptLookups_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showScriptLookups = {
      show: Data_Show_Generic.genericShow(genericScriptLookups_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "datums";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mps";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "ownPaymentPubKeyHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "ownStakePubKeyHash";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "paymentPubKeyHashes";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "scripts";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "txOutputs";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "typedValidator";
          }
      })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Types_TypedValidator.showTypedValidator)))(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith)))(Data_Show.showArray(Types_Scripts.showValidator)))(Data_Map_Internal.showMap(Types_PubKeyHash.showPaymentPubKeyHash)(Types_UnbalancedTransaction.showPaymentPubKey)))(Data_Maybe.showMaybe(Types_PubKeyHash.showStakePubKeyHash)))(Data_Maybe.showMaybe(Types_PubKeyHash.showPaymentPubKeyHash)))(Data_Show.showArray(Types_Scripts.showMintingPolicy)))(Data_Map_Internal.showMap(Types_Transaction.showDataHash)(Types_Datum.showDatum)))))({
          reflectSymbol: function () {
              return "ScriptLookups";
          }
      }))
  };
  var genericMkUnbalancedTxErro = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new TypeCheckFailed(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new ModifyTx(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new TxOutRefNotFound(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new TxOutRefWrongType(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new DatumNotFound(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new MintingPolicyNotFound(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new MintingPolicyHashNotCurrencySymbol(x.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return new CannotMakeValue(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
              return new ValidatorHashNotFound(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
              return new WrongRefScriptHash(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
              return OwnPubKeyAndStakeKeyMissing.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))) {
              return TypedValidatorMissing.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))) {
              return new DatumWrongHash(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))) {
              return CannotFindDatum.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))) {
              return new CannotQueryDatum(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))) {
              return new CannotHashDatum(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))) {
              return new CannotConvertPOSIXTimeRange(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))) {
              return CannotGetMintingPolicyScriptIndex.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))) {
              return new CannotGetValidatorHashFromAddress(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))) {
              return MkTypedTxOutFailed.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))) {
              return TypedTxOutHasNoDatumHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))) {
              return new CannotHashMintingPolicy(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))) {
              return new CannotHashValidator(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))))) {
              return new CannotConvertPaymentPubKeyHash(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))))))))))))))))) {
              return CannotSatisfyAny.value;
          };
          throw new Error("Failed pattern match at Types.ScriptLookups (line 808, column 1 - line 808, column 46): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof TypeCheckFailed) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ModifyTx) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof TxOutRefNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof TxOutRefWrongType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof DatumNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof MintingPolicyNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof MintingPolicyHashNotCurrencySymbol) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
          };
          if (x instanceof CannotMakeValue) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2))))))))));
          };
          if (x instanceof ValidatorHashNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))));
          };
          if (x instanceof WrongRefScriptHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))));
          };
          if (x instanceof OwnPubKeyAndStakeKeyMissing) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
          };
          if (x instanceof TypedValidatorMissing) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))));
          };
          if (x instanceof DatumWrongHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))))))))));
          };
          if (x instanceof CannotFindDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))));
          };
          if (x instanceof CannotQueryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))));
          };
          if (x instanceof CannotHashDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))))));
          };
          if (x instanceof CannotConvertPOSIXTimeRange) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))))))))))))));
          };
          if (x instanceof CannotGetMintingPolicyScriptIndex) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))));
          };
          if (x instanceof CannotGetValidatorHashFromAddress) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))))))));
          };
          if (x instanceof MkTypedTxOutFailed) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))))));
          };
          if (x instanceof TypedTxOutHasNoDatumHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))));
          };
          if (x instanceof CannotHashMintingPolicy) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))))))))))));
          };
          if (x instanceof CannotHashValidator) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))))))))))));
          };
          if (x instanceof CannotConvertPaymentPubKeyHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))))))))))))));
          };
          if (x instanceof CannotSatisfyAny) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))))))))))))))))))))));
          };
          throw new Error("Failed pattern match at Types.ScriptLookups (line 808, column 1 - line 808, column 46): " + [ x.constructor.name ]);
      }
  };
  var showMkUnbalancedTxError = {
      show: Data_Show_Generic.genericShow(genericMkUnbalancedTxErro)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_TypedTxOut.showTypeCheckError))({
          reflectSymbol: function () {
              return "TypeCheckFailed";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Transaction.showModifyTxError))({
          reflectSymbol: function () {
              return "ModifyTx";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
          reflectSymbol: function () {
              return "TxOutRefNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
          reflectSymbol: function () {
              return "TxOutRefWrongType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "DatumNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicyHash))({
          reflectSymbol: function () {
              return "MintingPolicyNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicyHash))({
          reflectSymbol: function () {
              return "MintingPolicyHashNotCurrencySymbol";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showCurrencySymbol))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_TokenName.showTokenName))(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))))({
          reflectSymbol: function () {
              return "CannotMakeValue";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))({
          reflectSymbol: function () {
              return "ValidatorHashNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(Serialization_Hash.showScriptHash)))({
          reflectSymbol: function () {
              return "WrongRefScriptHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "OwnPubKeyAndStakeKeyMissing";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "TypedValidatorMissing";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum)))({
          reflectSymbol: function () {
              return "DatumWrongHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotFindDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "CannotQueryDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum))({
          reflectSymbol: function () {
              return "CannotHashDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Interval.showInterval(Types_Interval.showPOSIXTime)))(Data_Show_Generic.genericShowArgsArgument(Types_Interval.showPosixTimeToSlotError)))({
          reflectSymbol: function () {
              return "CannotConvertPOSIXTimeRange";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetMintingPolicyScriptIndex";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress))({
          reflectSymbol: function () {
              return "CannotGetValidatorHashFromAddress";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "MkTypedTxOutFailed";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "TypedTxOutHasNoDatumHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicy))({
          reflectSymbol: function () {
              return "CannotHashMintingPolicy";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidator))({
          reflectSymbol: function () {
              return "CannotHashValidator";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPaymentPubKeyHash))({
          reflectSymbol: function () {
              return "CannotConvertPaymentPubKeyHash";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotSatisfyAny";
          }
      }))))))))))))))))))))))))))
  };                                        
  var eqScriptLookups = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "typedValidator";
      }
  })(Data_Maybe.eqMaybe(Types_TypedValidator.eqTypedValidator)))()({
      reflectSymbol: function () {
          return "txOutputs";
      }
  })(Data_Map_Internal.eqMap(Types_Transaction.eqTransactionInput)(Plutus_Types_Transaction.eqTransactionOutputWithRe)))()({
      reflectSymbol: function () {
          return "scripts";
      }
  })(Data_Eq.eqArray(Types_Scripts.eqValidator)))()({
      reflectSymbol: function () {
          return "paymentPubKeyHashes";
      }
  })(Data_Map_Internal.eqMap(Types_PubKeyHash.eqPaymentPubKeyHash)(Types_UnbalancedTransaction.eqPaymentPubKey)))()({
      reflectSymbol: function () {
          return "ownStakePubKeyHash";
      }
  })(Data_Maybe.eqMaybe(Types_PubKeyHash.eqStakePubKeyHash)))()({
      reflectSymbol: function () {
          return "ownPaymentPubKeyHash";
      }
  })(Data_Maybe.eqMaybe(Types_PubKeyHash.eqPaymentPubKeyHash)))()({
      reflectSymbol: function () {
          return "mps";
      }
  })(Data_Eq.eqArray(Types_Scripts.eqMintingPolicy)))()({
      reflectSymbol: function () {
          return "datums";
      }
  })(Data_Map_Internal.eqMap(Types_Transaction.eqDataHash)(Types_Datum.eqDatum)));
  var encodeAesonUnattachedUnba = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Types_Datum.encodeAesonDatum))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Aeson.encodeAesonTuple(Cardano_Types_Transaction.encodeAesonRedeemer)(Aeson.encodeAesonMaybe(Types_Transaction.encodeAesonTransactionInp))))(Aeson.gEncodeAesonCons(Types_UnbalancedTransaction.encodeAesonUnbalancedTx)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "unbalancedTx";
      }
  })())({
      reflectSymbol: function () {
          return "redeemersTxIns";
      }
  })())({
      reflectSymbol: function () {
          return "datums";
      }
  })())();
  var validator = function (vl) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              scripts: Data_Array.singleton(vl),
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var unspentOutputs = function (mp) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              txOutputs: mp,
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var requireValue = function (required) {
      return {
          required: required,
          provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
      };
  };
  var provideValue = function (provided) {
      return {
          provided: provided,
          required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
      };
  };
  var ownStakePubKeyHash = function (skh) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              ownStakePubKeyHash: new Data_Maybe.Just(skh),
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var ownPaymentPubKeyHash = function (pkh) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              ownPaymentPubKeyHash: new Data_Maybe.Just(pkh),
              datums: v.datums,
              mps: v.mps,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var missingValueSpent = function (v) {
      var difference = Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(v.required)(Cardano_Types_Value.negation(Cardano_Types_Value.negateValue)(v.provided));
      var v1 = Cardano_Types_Value.split(Cardano_Types_Value.splitValue)(difference);
      return v1.value1;
  };
  var totalMissingValue = function (v) {
      return Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(missingValueSpent(v.valueSpentBalancesInputs))(missingValueSpent(v.valueSpentBalancesOutputs));
  };
  var mintingPolicy = function (pl) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              mps: Data_Array.singleton(pl),
              datums: v.datums,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var lookupValidator = function (vh) {
      return function (osMap) {
          return Data_Either.note(new ValidatorHashNotFound(vh))(Data_Map_Internal.lookup(Types_Scripts.ordValidatorHash)(vh)(osMap));
      };
  };
  var lookupMintingPolicy = function (mph) {
      return function (mpsMap) {
          return Data_Either.note(new MintingPolicyNotFound(mph))(Data_Map_Internal.lookup(Types_Scripts.ordMintingPolicyHash)(mph)(mpsMap));
      };
  };
  var datum = function (dt) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Hashing.datumHash(dt))(function (dh) {
          return Data_Newtype.over()()(ScriptLookups)(function (v) {
              return {
                  datums: Data_Map_Internal.singleton(dh)(dt),
                  mps: v.mps,
                  ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
                  ownStakePubKeyHash: v.ownStakePubKeyHash,
                  paymentPubKeyHashes: v.paymentPubKeyHashes,
                  scripts: v.scripts,
                  txOutputs: v.txOutputs,
                  typedValidator: v.typedValidator
              };
          })(Data_Monoid.mempty(monoidScriptLookups));
      });
  };
  var _valueSpentBalancesOutputs = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "valueSpentBalancesOutputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _valueSpentBalancesInputs = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "valueSpentBalancesInputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _unbalancedTx = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "unbalancedTx";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var attachToCps = function (handler) {
      return function (object) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))((function () {
              var $717 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
              var $718 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
              return function ($719) {
                  return $717($718($719));
              };
          })()))(function (tx) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(QueryM.monadEffectQueryMExtended))(Data_Functor.mapFlipped(Effect.functorEffect)(handler(object)(tx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ModifyTx.create))))(function (newTx) {
                  return Data_Either.either((function () {
                      var $720 = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff));
                      var $721 = Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither);
                      return function ($722) {
                          return $720($721($722));
                      };
                  })())((function () {
                      var $723 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(Data_Either.Right.create);
                      var $724 = Data_Lens_Setter.assign(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))((function () {
                          var $726 = _unbalancedTx(Data_Profunctor_Strong.strongFn);
                          var $727 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                          return function ($728) {
                              return $726($727($728));
                          };
                      })());
                      return function ($725) {
                          return $723($724($725));
                      };
                  })())(newTx);
              });
          });
      };
  };
  var _redeemersTxIns = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "redeemersTxIns";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _mintRedeemers = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "mintRedeemers";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var reindexMintRedeemers = function (mpsHash) {
      return function (redeemer) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Lens_Setter.modifying(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))(_mintRedeemers(Data_Profunctor_Strong.strongFn))(Data_Map_Internal.insert(Types_Scripts.ordMintingPolicyHash)(mpsHash)(redeemer)))(function () {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))(_mintRedeemers(Data_Lens_Internal_Forget.strongForget)))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)))(function (v) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Array.mapWithIndex(function (ix) {
                      return function (v1) {
                          return {
                              tag: v1.value1.tag,
                              index: Data_BigInt.fromInt(ix),
                              data: v1.value1.data,
                              exUnits: v1.value1.exUnits
                          };
                      };
                  })(v));
              });
          });
      };
  };
  var _lookups = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "lookups";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var lookupDatum = function (dh) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $729 = Data_Newtype.unwrap();
          return function ($730) {
              return (function (v) {
                  return v.datums;
              })($729($730));
          };
      })()))(function (otherDt) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Either.note(new DatumNotFound(dh))(Data_Map_Internal.lookup(Types_Transaction.ordDataHash)(dh)(otherDt)));
      });
  };
  var _datums = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "datums";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var addDatum = function (dat) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(attachToCps(Transaction.attachDatum)(dat)))(function () {
          return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(Data_Semigroup.semigroupArray)(_datums(Data_Profunctor_Strong.strongFn))(Data_Array.singleton(dat));
      }));
  };
  var _cpsToTransaction = function (dictStrong) {
      var $731 = _unbalancedTx(dictStrong);
      var $732 = Types_UnbalancedTransaction["_transaction"](dictStrong);
      return function ($733) {
          return $731($732($733));
      };
  };
  var _cpsToTxBody = function (dictStrong) {
      var $734 = _cpsToTransaction(dictStrong);
      var $735 = Cardano_Types_Transaction["_body"](dictStrong);
      return function ($736) {
          return $734($735($736));
      };
  };
  var getNetworkId = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))((function () {
      var $737 = _cpsToTxBody(Data_Lens_Internal_Forget.strongForget);
      var $738 = Cardano_Types_Transaction["_networkId"](Data_Lens_Internal_Forget.strongForget);
      return function ($739) {
          return $737($738($739));
      };
  })()))(Data_Maybe.maybe(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($740) {
      return (function (v) {
          return v.networkId;
      })((function (v) {
          return v.config;
      })($740));
  })))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))));
  var addMissingValueSpent = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))(totalMissingValue))(function (missing) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
          var $597 = Cardano_Types_Value.isZero(missing);
          if ($597) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(new Data_Either.Right(Data_Unit.unit));
          };
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))(Data_Newtype.unwrap()))(function (lookups) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))((function () {
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Nothing && lookups.ownStakePubKeyHash instanceof Data_Maybe.Nothing) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(OwnPubKeyAndStakeKeyMissing.value);
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Just && lookups.ownStakePubKeyHash instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))({
                          address: Types_PubKeyHash.payPubKeyHashBaseAddress(networkId)(lookups.ownPaymentPubKeyHash.value0)(lookups.ownStakePubKeyHash.value0),
                          amount: missing,
                          datum: Types_OutputDatum.NoOutputDatum.value,
                          scriptRef: Data_Maybe.Nothing.value
                      });
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Just && lookups.ownStakePubKeyHash instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))({
                          address: Types_PubKeyHash.payPubKeyHashEnterpriseAddress(networkId)(lookups.ownPaymentPubKeyHash.value0),
                          amount: missing,
                          datum: Types_OutputDatum.NoOutputDatum.value,
                          scriptRef: Data_Maybe.Nothing.value
                      });
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Nothing && lookups.ownStakePubKeyHash instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))({
                          address: Types_PubKeyHash.stakePubKeyHashRewardAddress(networkId)(lookups.ownStakePubKeyHash.value0),
                          amount: missing,
                          datum: Types_OutputDatum.NoOutputDatum.value,
                          scriptRef: Data_Maybe.Nothing.value
                      });
                  };
                  throw new Error("Failed pattern match at Types.ScriptLookups (line 694, column 14 - line 713, column 10): " + [ lookups.ownPaymentPubKeyHash.constructor.name, lookups.ownStakePubKeyHash.constructor.name ]);
              })())(function (txOut) {
                  return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                      var $741 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $742 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                      return function ($743) {
                          return $741($742($743));
                      };
                  })())(Data_Array.cons(txOut));
              });
          }));
      });
  });
  var addOwnInput = function (dictValidatorTypes) {
      return function (dictIsData) {
          return function (dictIsData1) {
              return function (_pd) {
                  return function (v) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))(function (v1) {
                              var cTxOutputs = Data_Functor.map(Data_Map_Internal.functorMap)(Plutus_Conversion.fromPlutusTxOutputWithRefScript(networkId))(v1.txOutputs);
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(TypedValidatorMissing.value)(v1.typedValidator))(function (inst) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Types_TypedTxOut.typeTxOutRef()(dictIsData)(networkId)(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(cTxOutputs))(inst)(v.txOutRef))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(TypeCheckFailed.create)))))(function (typedTxOutRef) {
                                      var value = Types_TypedTxOut.typedTxOutRefValue()(typedTxOutRef);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                                          var $744 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                          var $745 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                          return function ($746) {
                                              return $744($745($746));
                                          };
                                      })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(v.txOutRef)))(function () {
                                          return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provideValue(value));
                                      });
                                  });
                              });
                          }));
                      });
                  };
              };
          };
      };
  };
  var addOwnOutput = function (dictDatumType) {
      return function (dictToData) {
          return function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(TypedValidatorMissing.value)(v1.typedValidator))(function (inst) {
                          var value$prime = Plutus_Conversion_Value.fromPlutusValue(v.value);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Either.note(MkTypedTxOutFailed.value)(Types_TypedTxOut.mkTypedTxOut()(dictToData)(networkId)(inst)(v.datum)(value$prime))))(function (typedTxOut) {
                              var txOut = Types_TypedTxOut.typedTxOutTxOut()(typedTxOut);
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(TypedTxOutHasNoDatumHash.value)(Types_TypedTxOut.typedTxOutDatumHash()(typedTxOut)))(function (dHash) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getDatumByHash(dHash))(Data_Either.note(new CannotQueryDatum(dHash))))))(function (dat) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                                          var $747 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                          var $748 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                                          return function ($749) {
                                              return $747($748($749));
                                          };
                                      })())(Data_Array.cons(txOut)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(addDatum(dat)))(function () {
                                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provideValue(value$prime));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  }));
              });
          };
      };
  };
  var lookupTxOutRef = function (outRef) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $750 = Data_Newtype.unwrap();
          return function ($751) {
              return (function (v) {
                  return v.txOutputs;
              })($750($751));
          };
      })()))(function (txOutputs) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new TxOutRefNotFound(outRef))(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput)(outRef)(txOutputs)))(function (txOut) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff))(getNetworkId))(function (networkId) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Plutus_Conversion.fromPlutusTxOutputWithRefScript(networkId)(txOut));
              });
          });
      }));
  };
  var updateUtxoIndex = Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
      var $752 = Data_Newtype.unwrap();
      return function ($753) {
          return (function (v) {
              return v.txOutputs;
          })($752($753));
      };
  })()))(function (txOutputs) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff))(getNetworkId))(function (networkId) {
          var cTxOutputs = Data_Functor.map(Data_Map_Internal.functorMap)(Plutus_Conversion.fromPlutusTxOutputWithRefScript(networkId))(txOutputs);
          return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
              var $754 = _unbalancedTx(Data_Profunctor_Strong.strongFn);
              var $755 = Types_UnbalancedTransaction["_utxoIndex"](Data_Profunctor_Strong.strongFn);
              return function ($756) {
                  return $754($755($756));
              };
          })())(Data_Function.flip(Data_Map_Internal.union(Types_Transaction.ordTransactionInput))(cTxOutputs));
      });
  }));
  var processScriptRefUnspentOut = function (dictNewtype) {
      return function (scriptHash) {
          var checkScriptRef = function (v) {
              var refScriptHash = (function (v1) {
                  return v1.referenceScript;
              })(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.output)).output));
              var err = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new WrongRefScriptHash(refScriptHash)));
              var $616 = Data_Eq.notEq(Data_Maybe.eqMaybe(Serialization_Hash.eqScriptHash))(new Data_Maybe.Just(Data_Newtype.unwrap()(scriptHash)))(refScriptHash);
              if ($616) {
                  return err;
              };
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(new Data_Either.Right(Data_Unit.unit));
          };
          return function (v) {
              if (v instanceof Types_TxConstraints.SpendInput) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Lens_Setter.modifying(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))((function () {
                      var $757 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $758 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                      return function ($759) {
                          return $757($758($759));
                      };
                  })())(Data_Set.insert(Types_Transaction.ordTransactionInput)((function (v1) {
                      return v1.input;
                  })(Data_Newtype.unwrap()(v.value0)))))(function () {
                      return checkScriptRef(v.value0);
                  });
              };
              if (v instanceof Types_TxConstraints.RefInput) {
                  var refInput = (Data_Newtype.unwrap()(v.value0)).input;
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Data_Lens_Setter.modifying(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))((function () {
                      var $760 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $761 = Cardano_Types_Transaction["_referenceInputs"](Data_Profunctor_Strong.strongFn);
                      return function ($762) {
                          return $760($761($762));
                      };
                  })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(refInput)))(function () {
                      return checkScriptRef(v.value0);
                  });
              };
              throw new Error("Failed pattern match at Types.ScriptLookups (line 864, column 41 - line 871, column 30): " + [ v.constructor.name ]);
          };
      };
  };
  var processConstraint = function (mpsMap) {
      return function (osMap) {
          var outputDatum = function (dat) {
              return function (v) {
                  if (v instanceof Types_TxConstraints.DatumInline) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new Types_OutputDatum.OutputDatum(dat));
                  };
                  if (v instanceof Types_TxConstraints.DatumWitness) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Types_OutputDatum.OutputDatumHash.create)(Control_Monad_Error_Class.liftMaybe(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new CannotHashDatum(dat))(Hashing.datumHash(dat)));
                  };
                  throw new Error("Failed pattern match at Types.ScriptLookups (line 1126, column 21 - line 1129, column 30): " + [ v.constructor.name ]);
              };
          };
          return function (v) {
              if (v instanceof Types_TxConstraints.MustIncludeDatum) {
                  return addDatum(v.value0);
              };
              if (v instanceof Types_TxConstraints.MustValidateIn) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(QueryM_EraSummaries.getEraSummaries))(function (es) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(QueryM_SystemStart.getSystemStart))(function (ss) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(QueryM.monadEffectQueryMExtended))(Data_Functor.mapFlipped(Effect.functorEffect)(Types_Interval.posixTimeRangeToTransactionValidity(es)(ss)(v.value0))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(CannotConvertPOSIXTimeRange.create(v.value0))))))(function (v1) {
                              return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                                  var $763 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                  var $764 = Data_Lens_Iso_Newtype["_Newtype"]()()(Data_Profunctor.profunctorFn);
                                  return function ($765) {
                                      return $763($764($765));
                                  };
                              })())(function (v2) {
                                  var $625 = {};
                                  for (var $626 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $626)) {
                                          $625[$626] = v2[$626];
                                      };
                                  };
                                  $625.ttl = v1.timeToLive;
                                  $625.validityStartInterval = v1.validityStartInterval;
                                  return $625;
                              });
                          }));
                      });
                  });
              };
              if (v instanceof Types_TxConstraints.MustBeSignedBy) {
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(Data_Maybe.semigroupMaybe(Data_Semigroup.semigroupArray))((function () {
                      var $766 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $767 = Cardano_Types_Transaction["_requiredSigners"](Data_Profunctor_Strong.strongFn);
                      return function ($768) {
                          return $766($767($768));
                      };
                  })())(new Data_Maybe.Just([ Data_Newtype.wrap()(Data_Newtype.unwrap()(Data_Newtype.unwrap()(v.value0))) ])));
              };
              if (v instanceof Types_TxConstraints.MustSpendAtLeast) {
                  var value = Plutus_Conversion_Value.fromPlutusValue(v.value0);
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(requireValue(value)));
              };
              if (v instanceof Types_TxConstraints.MustProduceAtLeast) {
                  var value = Plutus_Conversion_Value.fromPlutusValue(v.value0);
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(requireValue(value)));
              };
              if (v instanceof Types_TxConstraints.MustSpendPubKeyOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(lookupTxOutRef(v.value0)))(function (txOut) {
                      if (txOut.datum instanceof Types_OutputDatum.NoOutputDatum) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              var $769 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $770 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                              return function ($771) {
                                  return $769($770($771));
                              };
                          })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(v.value0)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provideValue(txOut.amount));
                          });
                      };
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new TxOutRefWrongType(v.value0));
                  }));
              };
              if (v instanceof Types_TxConstraints.MustSpendScriptOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(lookupTxOutRef(v.value0)))(function (txOut) {
                      if (txOut.datum instanceof Types_OutputDatum.NoOutputDatum) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new TxOutRefWrongType(v.value0));
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new CannotGetValidatorHashFromAddress(txOut.address))(Address.enterpriseAddressValidatorHash(txOut.address)))(function (vHash) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              if (v.value2 instanceof Data_Maybe.Nothing) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap())(lookupValidator(vHash)(osMap))))(function (plutusScript) {
                                      return Control_Monad_Except_Trans.ExceptT(attachToCps(Transaction.attachPlutusScript)(plutusScript));
                                  });
                              };
                              if (v.value2 instanceof Data_Maybe.Just) {
                                  return Control_Monad_Except_Trans.ExceptT(processScriptRefUnspentOut()(vHash)(v.value2.value0));
                              };
                              throw new Error("Failed pattern match at Types.ScriptLookups (line 949, column 13 - line 955, column 80): " + [ v.value2.constructor.name ]);
                          })())(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))((function () {
                                  if (txOut.datum instanceof Types_OutputDatum.OutputDatumHash) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(QueryM.monadQueryMExtendedAff)(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getDatumByHash(txOut.datum.value0))(Data_Either.note(new CannotQueryDatum(txOut.datum.value0)))))(function (mDatumQuery) {
                                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(lookupDatum(txOut.datum.value0))(function (mDatumLookup) {
                                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Control_Alt.alt(Data_Either.altEither)(mDatumQuery)(mDatumLookup));
                                          });
                                      }))(function (dat) {
                                          return Control_Monad_Except_Trans.ExceptT(addDatum(dat));
                                      });
                                  };
                                  if (txOut.datum instanceof Types_OutputDatum.OutputDatum) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Unit.unit);
                                  };
                                  if (txOut.datum instanceof Types_OutputDatum.NoOutputDatum) {
                                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(CannotFindDatum.value);
                                  };
                                  throw new Error("Failed pattern match at Types.ScriptLookups (line 961, column 13 - line 970, column 58): " + [ txOut.datum.constructor.name ]);
                              })())(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                                      var $772 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                      var $773 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                      return function ($774) {
                                          return $772($773($774));
                                      };
                                  })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(v.value0)))(function () {
                                      var redeemer = {
                                          tag: Types_RedeemerTag.Spend.value,
                                          index: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                          data: Data_Newtype.unwrap()(v.value1),
                                          exUnits: Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
                                              reflectSymbol: function () {
                                                  return "mem";
                                              }
                                          })()(Data_Semiring.semiringRecordCons({
                                              reflectSymbol: function () {
                                                  return "steps";
                                              }
                                          })()(Data_Semiring.semiringRecordNil)(Data_BigInt.semiringBigInt))(Data_BigInt.semiringBigInt)))
                                      };
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provideValue(txOut.amount)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(Data_Semigroup.semigroupArray)(_redeemersTxIns(Data_Profunctor_Strong.strongFn))(Data_Array.singleton(new Data_Tuple.Tuple(redeemer, new Data_Maybe.Just(v.value0)))))(function () {
                                              return Control_Monad_Except_Trans.ExceptT(attachToCps(Transaction.attachRedeemer)(redeemer));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  }));
              };
              if (v instanceof Types_TxConstraints.MustSpendNativeScriptOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                      var $775 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $776 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                      return function ($777) {
                          return $775($776($777));
                      };
                  })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(v.value0)))(function () {
                      return Control_Monad_Except_Trans.ExceptT(attachToCps(Transaction.attachNativeScript)(v.value1));
                  }));
              };
              if (v instanceof Types_TxConstraints.MustReferenceOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                      var $778 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $779 = Cardano_Types_Transaction["_referenceInputs"](Data_Profunctor_Strong.strongFn);
                      return function ($780) {
                          return $778($779($780));
                      };
                  })())(Data_Set.insert(Types_Transaction.ordTransactionInput)(v.value0)));
              };
              if (v instanceof Types_TxConstraints.MustMintValue) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))((function () {
                      if (v.value4 instanceof Data_Maybe.Nothing) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap())(lookupMintingPolicy(v.value0)(mpsMap))))(function (plutusScript) {
                              return Control_Monad_Except_Trans.ExceptT(attachToCps(Transaction.attachPlutusScript)(plutusScript));
                          });
                      };
                      if (v.value4 instanceof Data_Maybe.Just) {
                          return Control_Monad_Except_Trans.ExceptT(processScriptRefUnspentOut()(v.value0)(v.value4.value0));
                      };
                      throw new Error("Failed pattern match at Types.ScriptLookups (line 994, column 7 - line 1000, column 76): " + [ v.value4.constructor.name ]);
                  })())(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new MintingPolicyHashNotCurrencySymbol(v.value0))(Cardano_Types_Value.mpsSymbol(v.value0)))(function (cs) {
                          var value = Cardano_Types_Value["mkSingletonValue'"](cs)(v.value2);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              var $656 = Data_Ord.lessThan(Data_BigInt.ordBigInt)(v.value3)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                              if ($656) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new CannotMakeValue(cs, v.value2, v.value3))(value(Data_Ring.negate(Data_BigInt.ringBigInt)(v.value3))))(function (v1) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provideValue(v1)))(function () {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Value.getNonAdaAsset)(value(v.value3)));
                                      });
                                  });
                              };
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(new CannotMakeValue(cs, v.value2, v.value3))(value(v.value3)))(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provideValue(v1)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Value.getNonAdaAsset)(value(v.value3)));
                                  });
                              });
                          })())(function (mintVal) {
                              var redeemer = {
                                  tag: Types_RedeemerTag.Mint.value,
                                  index: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                  data: Data_Newtype.unwrap()(v.value1),
                                  exUnits: Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
                                      reflectSymbol: function () {
                                          return "mem";
                                      }
                                  })()(Data_Semiring.semiringRecordCons({
                                      reflectSymbol: function () {
                                          return "steps";
                                      }
                                  })()(Data_Semiring.semiringRecordNil)(Data_BigInt.semiringBigInt))(Data_BigInt.semiringBigInt)))
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_redeemersTxIns(Data_Profunctor_Strong.strongFn))(Data_Array.filter(function (v1) {
                                  return Data_Eq.notEq(Types_RedeemerTag.eqRedeemerTag)(v1.value0.tag)(Types_RedeemerTag.Mint.value);
                              })))(function () {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff))(reindexMintRedeemers(v.value0)(redeemer)))(function (mintRedeemers) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(Data_Semigroup.semigroupArray)(_redeemersTxIns(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                                          return new Data_Tuple.Tuple(v1, Data_Maybe.Nothing.value);
                                      })(mintRedeemers)))(function () {
                                          return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(Data_Maybe.semigroupMaybe(Cardano_Types_Transaction.semigroupMint))((function () {
                                              var $781 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                              var $782 = Cardano_Types_Transaction["_mint"](Data_Profunctor_Strong.strongFn);
                                              return function ($783) {
                                                  return $781($782($783));
                                              };
                                          })())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(mintVal));
                                      });
                                  });
                              });
                          });
                      });
                  }));
              };
              if (v instanceof Types_TxConstraints.MustPayToPubKeyAddress) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
                      var amount = Plutus_Conversion_Value.fromPlutusValue(v.value4);
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Traversable.traversableMaybe)(v.value2)(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Eq.eq(Types_TxConstraints.eqDatumPresence)(v1.value1)(Types_TxConstraints.DatumWitness.value))(Control_Monad_Except_Trans.ExceptT(addDatum(v1.value0))))(function () {
                              return outputDatum(v1.value0)(v1.value1);
                          });
                      }))(function (datum$prime) {
                          var address = (function () {
                              if (v.value1 instanceof Data_Maybe.Just) {
                                  return Types_PubKeyHash.payPubKeyHashBaseAddress(networkId)(v.value0)(v.value1.value0);
                              };
                              if (v.value1 instanceof Data_Maybe.Nothing) {
                                  return Types_PubKeyHash.payPubKeyHashEnterpriseAddress(networkId)(v.value0);
                              };
                              throw new Error("Failed pattern match at Types.ScriptLookups (line 1046, column 21 - line 1048, column 68): " + [ v.value1.constructor.name ]);
                          })();
                          var txOut = {
                              address: address,
                              amount: amount,
                              datum: Data_Maybe.fromMaybe(Types_OutputDatum.NoOutputDatum.value)(datum$prime),
                              scriptRef: v.value3
                          };
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              var $784 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $785 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                              return function ($786) {
                                  return $784($785($786));
                              };
                          })())(Data_Array.cons(txOut)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provideValue(amount));
                          });
                      }));
                  });
              };
              if (v instanceof Types_TxConstraints.MustPayToScript) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
                      var amount = Plutus_Conversion_Value.fromPlutusValue(v.value4);
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(outputDatum(v.value1)(v.value2))(function (datum$prime) {
                          var txOut = {
                              address: Scripts.validatorHashEnterpriseAddress(networkId)(v.value0),
                              amount: amount,
                              datum: datum$prime,
                              scriptRef: v.value3
                          };
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              var $787 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $788 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                              return function ($789) {
                                  return $787($788($789));
                              };
                          })())(Data_Array.cons(txOut)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provideValue(amount));
                          });
                      }));
                  });
              };
              if (v instanceof Types_TxConstraints.MustPayToNativeScript) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(getNetworkId)(function (networkId) {
                      var amount = Plutus_Conversion_Value.fromPlutusValue(v.value1);
                      return Control_Monad_Except_Trans.runExceptT((function () {
                          var txOut = {
                              address: Scripts.nativeScriptHashEnterpriseAddress(networkId)(v.value0),
                              amount: amount,
                              datum: Types_OutputDatum.NoOutputDatum.value,
                              scriptRef: Data_Maybe.Nothing.value
                          };
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                              var $790 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $791 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                              return function ($792) {
                                  return $790($791($792));
                              };
                          })())(Data_Array.cons(txOut)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provideValue(amount));
                          });
                      })());
                  });
              };
              if (v instanceof Types_TxConstraints.MustHashDatum) {
                  var mdh = Hashing.datumHash(v.value1);
                  var $683 = Data_Eq.eq(Data_Maybe.eqMaybe(Types_Transaction.eqDataHash))(mdh)(new Data_Maybe.Just(v.value0));
                  if ($683) {
                      return addDatum(v.value1);
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new DatumWrongHash(v.value0, v.value1)));
              };
              if (v instanceof Types_TxConstraints.MustSatisfyAnyOf) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(function (cps) {
                      var tryNext = function (v1) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(CannotSatisfyAny.value));
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              return Data_Foldable.foldM(Data_List_Types.foldableList)(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff))(function (v2) {
                                  return function (constr) {
                                      return Control_Monad_Except_Trans.runExceptT(Control_Monad_Except_Trans.ExceptT(Control_Monad_Error_Class.catchError(Control_Monad_State_Trans.monadErrorStateT(QueryM.monadErrorErrorQueryMExte))(processConstraint(mpsMap)(osMap)(constr))(function (v3) {
                                          return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(QueryM.monadQueryMExtendedAff))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff))(cps))(tryNext(v1.value1));
                                      })));
                                  };
                              })(new Data_Either.Right(Data_Unit.unit))(v1.value0);
                          };
                          throw new Error("Failed pattern match at Types.ScriptLookups (line 1101, column 9 - line 1103, column 62): " + [ v1.constructor.name ]);
                      };
                      return tryNext(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(Data_Array.toUnfoldable(Data_List_Types.unfoldableList))(v.value0)));
                  });
              };
              if (v instanceof Types_TxConstraints.MustNotBeValid) {
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.assign(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                      var $793 = _cpsToTransaction(Data_Profunctor_Strong.strongFn);
                      var $794 = Cardano_Types_Transaction["_isValid"](Data_Profunctor_Strong.strongFn);
                      return function ($795) {
                          return $793($794($795));
                      };
                  })())(false));
              };
              throw new Error("Failed pattern match at Types.ScriptLookups (line 897, column 3 - line 1117, column 46): " + [ v.constructor.name ]);
          };
      };
  };
  var _costModels = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "costModels";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var addScriptDataHash = Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_datums(Data_Lens_Internal_Forget.strongForget)))(function (dats) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_costModels(Data_Lens_Internal_Forget.strongForget)))(function (costModels) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
              var $796 = _redeemersTxIns(Data_Lens_Internal_Forget.strongForget);
              var $797 = Data_Lens_Getter.to(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst));
              return function ($798) {
                  return $796($797($798));
              };
          })()))(function (reds) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))((function () {
                  var $799 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
                  var $800 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
                  return function ($801) {
                      return $799($800($801));
                  };
              })()))(function (tx) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(QueryM.monadEffectQueryMExtended))(Data_Functor.mapFlipped(Effect.functorEffect)(Transaction.setScriptDataHash(costModels)(reds)(dats)(tx))(Data_Either.Right.create))))(function (tx$prime) {
                      return Data_Lens_Setter.assign(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_cpsToTransaction(Data_Profunctor_Strong.strongFn))(tx$prime);
                  });
              });
          });
      });
  }));
  var processLookupsAndConstraints = function (dictValidatorTypes) {
      return function (dictIsData) {
          return function (dictIsData1) {
              return function (v) {
                  var foldConstraints = function (handler) {
                      var $802 = Data_Foldable.traverse_(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Foldable.foldableArray)(function ($804) {
                          return Control_Monad_Except_Trans.ExceptT(handler($804));
                      });
                      return function ($803) {
                          return Control_Monad_Except_Trans.runExceptT($802($803));
                      };
                  };
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_lookups(Data_Lens_Internal_Forget.strongForget)))(Data_Newtype.unwrap()))(function (lookups) {
                      var validatorHashes = Data_Functor.map(Data_Functor.functorArray)(Scripts.validatorHash)(lookups.scripts);
                      var osMap = Data_Map_Internal.fromFoldable(Types_Scripts.ordValidatorHash)(Data_Foldable.foldableArray)(Data_Array.zip(validatorHashes)(lookups.scripts));
                      var mpsHashes = Data_Functor.map(Data_Functor.functorArray)(Scripts.mintingPolicyHash)(lookups.mps);
                      var mpsMap = Data_Map_Internal.fromFoldable(Types_Scripts.ordMintingPolicyHash)(Data_Foldable.foldableArray)(Data_Array.zip(mpsHashes)(lookups.mps));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(foldConstraints(processConstraint(mpsMap)(osMap))(v.constraints)))(function () {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(QueryM.functorQueryMExtended(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(QueryM.monadQueryMExtendedAff)))(_mintRedeemers(Data_Lens_Internal_Forget.strongForget)))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)))(function (v1) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff))(Data_Foldable.traverse_(Control_Monad_State_Trans.applicativeStateT(QueryM.monadQueryMExtendedAff))(Data_Foldable.foldableArray)((function () {
                                  var $805 = attachToCps(Transaction.attachRedeemer);
                                  return function ($806) {
                                      return $805(Data_Tuple.snd($806));
                                  };
                              })())(v1)))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(foldConstraints(addOwnInput()(dictIsData)(dictIsData1)(Type_Proxy["Proxy"].value))(v.ownInputs)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(Control_Monad_Except_Trans.ExceptT(foldConstraints(addOwnOutput()(dictIsData.ToData1()))(v.ownOutputs)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(addScriptDataHash)(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(QueryM.monadQueryMExtendedAff)))(addMissingValueSpent)(function () {
                                                  return updateUtxoIndex;
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  }));
              };
          };
      };
  };
  var runConstraintsM = function (dictValidatorTypes) {
      return function (dictIsData) {
          return function (dictIsData1) {
              return function (lookups) {
                  return function (txConstraints) {
                      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM_ProtocolParameters.getProtocolParameters)((function () {
                          var $807 = Data_Newtype.unwrap();
                          return function ($808) {
                              return (function (v) {
                                  return v.costModels;
                              })($807($808));
                          };
                      })()))(function (costModels) {
                          var unpackTuple = function (v) {
                              if (v.value0 instanceof Data_Either.Left) {
                                  return new Data_Either.Left(v.value0.value0);
                              };
                              return new Data_Either.Right(v.value1);
                          };
                          var initCps = {
                              unbalancedTx: Types_UnbalancedTransaction.emptyUnbalancedTx,
                              valueSpentBalancesInputs: {
                                  required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue),
                                  provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
                              },
                              valueSpentBalancesOutputs: {
                                  required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue),
                                  provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
                              },
                              datums: Data_Monoid.mempty(Data_Monoid.monoidArray),
                              redeemersTxIns: Data_Monoid.mempty(Data_Monoid.monoidArray),
                              mintRedeemers: Data_Map_Internal.empty,
                              lookups: lookups,
                              costModels: costModels
                          };
                          return Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(unpackTuple)(Data_Function.flip(Control_Monad_State_Trans.runStateT)(initCps)(processLookupsAndConstraints()(dictIsData)(dictIsData1)(txConstraints)));
                      });
                  };
              };
          };
      };
  };
  var mkUnbalancedTx = function (dictValidatorTypes) {
      return function (dictIsData) {
          return function (dictIsData1) {
              return function (scriptLookups) {
                  return function (txConstraints) {
                      return Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(runConstraintsM()(dictIsData)(dictIsData1)(scriptLookups)(txConstraints))(Data_Functor.map(Data_Either.functorEither)(function (v) {
                          var stripScriptDataHash = function (uTx) {
                              return Data_Lens_Setter.set((function () {
                                  var $809 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                                  var $810 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                                  var $811 = Cardano_Types_Transaction["_scriptDataHash"](Data_Profunctor_Strong.strongFn);
                                  return function ($812) {
                                      return $809($810($811($812)));
                                  };
                              })())(Data_Maybe.Nothing.value)(uTx);
                          };
                          var stripDatumsRedeemers = function (uTx) {
                              return Data_Lens_Setter.over((function () {
                                  var $813 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                                  var $814 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
                                  return function ($815) {
                                      return $813($814($815));
                                  };
                              })())(Data_Newtype.over()()(Cardano_Types_Transaction.TransactionWitnessSet)(function (v1) {
                                  return {
                                      plutusData: Data_Maybe.Nothing.value,
                                      redeemers: Data_Maybe.Nothing.value,
                                      bootstraps: v1.bootstraps,
                                      nativeScripts: v1.nativeScripts,
                                      plutusScripts: v1.plutusScripts,
                                      vkeys: v1.vkeys
                                  };
                              }))(uTx);
                          };
                          var tx = stripDatumsRedeemers(stripScriptDataHash(v.unbalancedTx));
                          return Data_Newtype.wrap()({
                              unbalancedTx: tx,
                              datums: v.datums,
                              redeemersTxIns: v.redeemersTxIns
                          });
                      }));
                  };
              };
          };
      };
  };
  exports["mintingPolicy"] = mintingPolicy;
  exports["mkUnbalancedTx"] = mkUnbalancedTx;
  exports["datum"] = datum;
  exports["validator"] = validator;
  exports["unspentOutputs"] = unspentOutputs;
  exports["eqScriptLookups"] = eqScriptLookups;
  exports["showScriptLookups"] = showScriptLookups;
  exports["semigroupScriptLookups"] = semigroupScriptLookups;
  exports["monoidScriptLookups"] = monoidScriptLookups;
  exports["encodeAesonUnattachedUnba"] = encodeAesonUnattachedUnba;
  exports["showUnattachedUnbalancedT"] = showUnattachedUnbalancedT;
  exports["showMkUnbalancedTxError"] = showMkUnbalancedTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.Error"] = $PS["BalanceTx.Error"] || {};
  var exports = $PS["BalanceTx.Error"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Tuple = $PS["Data.Tuple"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var ReindexRedeemers = $PS["ReindexRedeemers"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Transaction = $PS["Types.Transaction"];
  var CouldNotConvertScriptOutputToTxInput = (function () {
      function CouldNotConvertScriptOutputToTxInput() {

      };
      CouldNotConvertScriptOutputToTxInput.value = new CouldNotConvertScriptOutputToTxInput();
      return CouldNotConvertScriptOutputToTxInput;
  })();
  var CouldNotGetCollateral = (function () {
      function CouldNotGetCollateral() {

      };
      CouldNotGetCollateral.value = new CouldNotGetCollateral();
      return CouldNotGetCollateral;
  })();
  var CouldNotGetUtxos = (function () {
      function CouldNotGetUtxos() {

      };
      CouldNotGetUtxos.value = new CouldNotGetUtxos();
      return CouldNotGetUtxos;
  })();
  var CouldNotGetWalletAddress = (function () {
      function CouldNotGetWalletAddress() {

      };
      CouldNotGetWalletAddress.value = new CouldNotGetWalletAddress();
      return CouldNotGetWalletAddress;
  })();
  var CollateralReturnError = (function () {
      function CollateralReturnError(value0) {
          this.value0 = value0;
      };
      CollateralReturnError.create = function (value0) {
          return new CollateralReturnError(value0);
      };
      return CollateralReturnError;
  })();
  var CollateralReturnMinAdaValueCalcError = (function () {
      function CollateralReturnMinAdaValueCalcError() {

      };
      CollateralReturnMinAdaValueCalcError.value = new CollateralReturnMinAdaValueCalcError();
      return CollateralReturnMinAdaValueCalcError;
  })();
  var ExUnitsEvaluationFailed = (function () {
      function ExUnitsEvaluationFailed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExUnitsEvaluationFailed.create = function (value0) {
          return function (value1) {
              return new ExUnitsEvaluationFailed(value0, value1);
          };
      };
      return ExUnitsEvaluationFailed;
  })();
  var InsufficientTxInputs = (function () {
      function InsufficientTxInputs(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      InsufficientTxInputs.create = function (value0) {
          return function (value1) {
              return new InsufficientTxInputs(value0, value1);
          };
      };
      return InsufficientTxInputs;
  })();
  var ReindexRedeemersError = (function () {
      function ReindexRedeemersError(value0) {
          this.value0 = value0;
      };
      ReindexRedeemersError.create = function (value0) {
          return new ReindexRedeemersError(value0);
      };
      return ReindexRedeemersError;
  })();
  var UtxoLookupFailedFor = (function () {
      function UtxoLookupFailedFor(value0) {
          this.value0 = value0;
      };
      UtxoLookupFailedFor.create = function (value0) {
          return new UtxoLookupFailedFor(value0);
      };
      return UtxoLookupFailedFor;
  })();
  var UtxoMinAdaValueCalculationFailed = (function () {
      function UtxoMinAdaValueCalculationFailed() {

      };
      UtxoMinAdaValueCalculationFailed.value = new UtxoMinAdaValueCalculationFailed();
      return UtxoMinAdaValueCalculationFailed;
  })();
  var genericExpected_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showExpected = {
      show: Data_Show_Generic.genericShow(genericExpected_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showValue))({
          reflectSymbol: function () {
              return "Expected";
          }
      }))
  };
  var genericBalanceTxError_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return CouldNotConvertScriptOutputToTxInput.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return CouldNotGetCollateral.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return CouldNotGetUtxos.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return CouldNotGetWalletAddress.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new CollateralReturnError(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return CollateralReturnMinAdaValueCalcError.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new ExUnitsEvaluationFailed(x.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return new InsufficientTxInputs(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
              return new ReindexRedeemersError(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
              return new UtxoLookupFailedFor(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))))) {
              return UtxoMinAdaValueCalculationFailed.value;
          };
          throw new Error("Failed pattern match at BalanceTx.Error (line 78, column 1 - line 78, column 41): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CouldNotConvertScriptOutputToTxInput) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof CouldNotGetCollateral) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof CouldNotGetUtxos) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof CouldNotGetWalletAddress) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
          };
          if (x instanceof CollateralReturnError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof CollateralReturnMinAdaValueCalcError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof ExUnitsEvaluationFailed) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))));
          };
          if (x instanceof InsufficientTxInputs) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))));
          };
          if (x instanceof ReindexRedeemersError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))));
          };
          if (x instanceof UtxoLookupFailedFor) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))));
          };
          if (x instanceof UtxoMinAdaValueCalculationFailed) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))))))));
          };
          throw new Error("Failed pattern match at BalanceTx.Error (line 78, column 1 - line 78, column 41): " + [ x.constructor.name ]);
      }
  };
  var genericActual_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showActual = {
      show: Data_Show_Generic.genericShow(genericActual_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showValue))({
          reflectSymbol: function () {
              return "Actual";
          }
      }))
  };
  var runPrettyString = function (ary) {
      return Data_String_Common.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(ary));
  };
  var freeze = function (ary) {
      return Data_Functor.map(Data_Functor.functorArray)(Data_Either.either(Data_Either.Right.create)(Data_Either.Right.create))(ary);
  };
  var line = function (s) {
      var lines = Data_Functor.map(Data_Functor.functorArray)(function ($150) {
          return Data_Either.Left.create((function (v) {
              return v + "\x0a";
          })($150));
      })(Data_String_Common.split("\x0a")(s));
      var v = Data_Array.uncons(lines);
      if (v instanceof Data_Maybe.Nothing) {
          return [  ];
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v.value0.head ])(freeze(v.value0.tail));
      };
      throw new Error("Failed pattern match at BalanceTx.Error (line 118, column 3 - line 120, column 51): " + [ v.constructor.name ]);
  };
  var number = function (ary) {
      var biggestPrefix = Data_Int.toStringAs(Data_Int.decimal)(Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Array.filter(Data_Either.isLeft)(ary))) + ". ";
      var width = Data_Int.ceil(Data_Int.toNumber(Data_String_CodePoints.length(biggestPrefix)) / 2.0) * 2 | 0;
      var indentLine = Data_Function.applyN(function (v) {
          return "  " + v;
      })(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(width)(2));
      var numberLine = function (i) {
          return function (l) {
              return Data_String_Utils.padEnd(width)(Data_Int.toStringAs(Data_Int.decimal)(i + 1 | 0) + ". ") + l;
          };
      };
      var go = function (b) {
          return function (a) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(b)([ Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(numberLine(Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(b)))(indentLine)(a) ]);
          };
      };
      return freeze(Data_Foldable.foldl(Data_Foldable.foldableArray)(go)([  ])(ary));
  };
  var bullet = function (ary) {
      return freeze(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(function (v) {
          return "- " + v;
      })(function (v) {
          return "  " + v;
      }))(ary));
  };
  var printTxEvaluationFailure = function (v) {
      return function (e) {
          var printRedeemerPointer = function (ptr) {
              return line(Data_Show.show(Types_RedeemerTag.showRedeemerTag)(ptr.redeemerTag) + (":" + Data_BigInt.toString(Types_Natural.toBigInt(ptr.redeemerIndex))));
          };
          var lookupRedeemerPointer = function (ptr) {
              return Data_Function.flip(Data_Foldable.find(Data_Foldable.foldableArray))(v.redeemersTxIns)(function (v1) {
                  return Data_Eq.eq(Types_RedeemerTag.eqRedeemerTag)(v1.value0.tag)(ptr.redeemerTag) && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value0.index)(Types_Natural.toBigInt(ptr.redeemerIndex));
              });
          };
          var printRedeemerDetails = function (ptr) {
              var mbRedeemerTxIn = lookupRedeemerPointer(ptr);
              var mbTxIn = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(mbRedeemerTxIn)(Data_Tuple.snd))(function (txIn) {
                  return "Input: " + Data_Show.show(Types_Transaction.showTransactionInput)(txIn);
              });
              var mbData = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(mbRedeemerTxIn)(function (v1) {
                  return "Redeemer: " + Data_Show.show(Types_PlutusData.showPlutusData)(v1.value0.data);
              });
              return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(line)(Data_Array.catMaybes([ mbData, mbTxIn ]));
          };
          var printRedeemer = function (ptr) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(printRedeemerPointer(ptr))(bullet(printRedeemerDetails(ptr)));
          };
          var printScriptFailure = function (v1) {
              if (v1 instanceof QueryM_Ogmios.ExtraRedeemers) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Extra redeemers:"))(bullet(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(printRedeemer)(v1.value0)));
              };
              if (v1 instanceof QueryM_Ogmios.MissingRequiredDatums) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Supplied with datums:"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bullet(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(line))(v1.value0.provided)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("But missing required datums:"))(bullet(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(line)(v1.value0.missing)))));
              };
              if (v1 instanceof QueryM_Ogmios.MissingRequiredScripts) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Supplied with scripts:"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bullet(Data_FoldableWithIndex.foldMapWithIndex(Data_Map_Internal.foldableWithIndexMap)(Data_Monoid.monoidArray)(function (ptr) {
                      return function (scr) {
                          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(printRedeemer(ptr))(line("Script: " + scr));
                      };
                  })(v1.value0.resolved)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("But missing required scripts:"))(bullet(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(line)(v1.value0.missing)))));
              };
              if (v1 instanceof QueryM_Ogmios.ValidatorFailed) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line(v1.value0.error))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Trace:"))(number(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(line)(v1.value0.traces))));
              };
              if (v1 instanceof QueryM_Ogmios.UnknownInputReferencedByRedeemer) {
                  return line("Unknown input referenced by redeemer: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function () {
                          return "index";
                      }
                  })(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function () {
                          return "txId";
                      }
                  })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt)))(v1.value0));
              };
              if (v1 instanceof QueryM_Ogmios.NonScriptInputReferencedByRedeemer) {
                  return line("Non script input referenced by redeemer: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function () {
                          return "index";
                      }
                  })(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function () {
                          return "txId";
                      }
                  })(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt)))(v1.value0));
              };
              if (v1 instanceof QueryM_Ogmios.IllFormedExecutionBudget && v1.value0 instanceof Data_Maybe.Nothing) {
                  return line("Ill formed execution budget: Execution budget missing");
              };
              if (v1 instanceof QueryM_Ogmios.IllFormedExecutionBudget && v1.value0 instanceof Data_Maybe.Just) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Ill formed execution budget:"))(bullet(Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Memory: " + Data_BigInt.toString(Types_Natural.toBigInt(v1.value0.value0.memory))))(line("Steps: " + Data_BigInt.toString(Types_Natural.toBigInt(v1.value0.value0.steps))))));
              };
              if (v1 instanceof QueryM_Ogmios.NoCostModelForLanguage) {
                  return line("No cost model for language \"" + (v1.value0 + "\""));
              };
              throw new Error("Failed pattern match at BalanceTx.Error (line 187, column 24 - line 220, column 60): " + [ v1.constructor.name ]);
          };
          var printScriptFailures = function (ptr) {
              return function (sfs) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(printRedeemer(ptr))(bullet(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(printScriptFailure)(sfs)));
              };
          };
          return runPrettyString((function () {
              if (e instanceof QueryM_Ogmios.UnparsedError) {
                  return line("Unknown error: " + e.value0);
              };
              if (e instanceof QueryM_Ogmios.ScriptFailures) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(line("Script failures:"))(bullet(Data_FoldableWithIndex.foldMapWithIndex(Data_Map_Internal.foldableWithIndexMap)(Data_Monoid.monoidArray)(printScriptFailures)(e.value0)));
              };
              throw new Error("Failed pattern match at BalanceTx.Error (line 151, column 21 - line 154, column 48): " + [ e.constructor.name ]);
          })());
      };
  };
  var showBalanceTxError = {
      show: function (v) {
          if (v instanceof ExUnitsEvaluationFailed) {
              return "ExUnitsEvaluationFailed: " + printTxEvaluationFailure(v.value0)(v.value1);
          };
          return Data_Show_Generic.genericShow(genericBalanceTxError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "CouldNotConvertScriptOutputToTxInput";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "CouldNotGetCollateral";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "CouldNotGetUtxos";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "CouldNotGetWalletAddress";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
              reflectSymbol: function () {
                  return "CollateralReturnError";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "CollateralReturnMinAdaValueCalcError";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_ScriptLookups.showUnattachedUnbalancedT))(Data_Show_Generic.genericShowArgsArgument(QueryM_Ogmios.showTxEvaluationFailure)))({
              reflectSymbol: function () {
                  return "ExUnitsEvaluationFailed";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExpected))(Data_Show_Generic.genericShowArgsArgument(showActual)))({
              reflectSymbol: function () {
                  return "InsufficientTxInputs";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(ReindexRedeemers.showReindexErrors))({
              reflectSymbol: function () {
                  return "ReindexRedeemersError";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
              reflectSymbol: function () {
                  return "UtxoLookupFailedFor";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "UtxoMinAdaValueCalculationFailed";
              }
          }))))))))))))(v);
      }
  };
  exports["CouldNotConvertScriptOutputToTxInput"] = CouldNotConvertScriptOutputToTxInput;
  exports["CouldNotGetCollateral"] = CouldNotGetCollateral;
  exports["CouldNotGetUtxos"] = CouldNotGetUtxos;
  exports["CouldNotGetWalletAddress"] = CouldNotGetWalletAddress;
  exports["CollateralReturnError"] = CollateralReturnError;
  exports["CollateralReturnMinAdaValueCalcError"] = CollateralReturnMinAdaValueCalcError;
  exports["ExUnitsEvaluationFailed"] = ExUnitsEvaluationFailed;
  exports["InsufficientTxInputs"] = InsufficientTxInputs;
  exports["ReindexRedeemersError"] = ReindexRedeemersError;
  exports["UtxoLookupFailedFor"] = UtxoLookupFailedFor;
  exports["UtxoMinAdaValueCalculationFailed"] = UtxoMinAdaValueCalculationFailed;
  exports["showBalanceTxError"] = showBalanceTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord.Max"] = $PS["Data.Ord.Max"] || {};
  var exports = $PS["Data.Ord.Max"];
  var Data_Ord = $PS["Data.Ord"];
  var semigroupMax = function (dictOrd) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Ord.max(dictOrd)(v)(v1);
              };
          }
      };
  };
  exports["semigroupMax"] = semigroupMax;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.Collateral"] = $PS["BalanceTx.Collateral"] || {};
  var exports = $PS["BalanceTx.Collateral"];
  var BalanceTx_Collateral_Select = $PS["BalanceTx.Collateral.Select"];
  var BalanceTx_Error = $PS["BalanceTx.Error"];
  var BalanceTx_UtxoMinAda = $PS["BalanceTx.UtxoMinAda"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ord_Max = $PS["Data.Ord.Max"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var QueryM = $PS["QueryM"];
  var Types_BigNum = $PS["Types.BigNum"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];                
  var nonAdaAsset = (function () {
      var $13 = Data_Newtype.unwrap();
      var $14 = Data_Newtype.unwrap();
      return function ($15) {
          return Cardano_Types_Value.getNonAdaAsset((function (v) {
              return v.amount;
          })($13((function (v) {
              return v.output;
          })($14($15)))));
      };
  })();
  var addTxCollateral = function (collateral) {
      return function (transaction) {
          return Data_Lens_Setter.setJust((function () {
              var $16 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
              var $17 = Cardano_Types_Transaction["_collateral"](Data_Profunctor_Strong.strongFn);
              return function ($18) {
                  return $16($17($18));
              };
          })())(Data_Functor.map(Data_Functor.functorArray)((function () {
              var $19 = Data_Newtype.unwrap();
              return function ($20) {
                  return (function (v) {
                      return v.input;
                  })($19($20));
              };
          })())(collateral))(transaction);
      };
  };
  var adaValue = (function () {
      var $21 = Data_Newtype.unwrap();
      var $22 = Data_Newtype.unwrap();
      return function ($23) {
          return Cardano_Types_Value["valueToCoin'"]((function (v) {
              return v.amount;
          })($21((function (v) {
              return v.output;
          })($22($23)))));
      };
  })();
  var adaValue$prime = function (init) {
      var $24 = Data_Semiring.add(Data_BigInt.semiringBigInt)(init);
      return function ($25) {
          return $24(adaValue($25));
      };
  };
  var addTxCollateralReturn = function (collateral) {
      return function (transaction) {
          return function (ownAddress) {
              var setTxCollateralReturn = function (collAdaValue) {
                  return function (collNonAdaAsset) {
                      var maxBigNumAdaValue = Data_Newtype.wrap()(Types_BigNum.toBigIntUnsafe(Types_BigNum.maxValue));
                      var collReturnOutputRec = {
                          address: ownAddress,
                          amount: Cardano_Types_Value.mkValue(maxBigNumAdaValue)(collNonAdaAsset),
                          datum: Types_OutputDatum.NoOutputDatum.value,
                          scriptRef: Data_Maybe.Nothing.value
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(Control_Monad_Reader_Class.asks(Control_Monad_Except_Trans.monadAskExceptT(QueryM.monadAskQueryEnvQueryMExt))(function ($26) {
                          return (function (v) {
                              return v.pparams;
                          })((function (v) {
                              return v.runtime;
                          })($26));
                      }))((function () {
                          var $27 = Data_Newtype.unwrap();
                          return function ($28) {
                              return (function (v) {
                                  return v.coinsPerUtxoUnit;
                              })($27($28));
                          };
                      })()))(function (coinsPerUtxoUnit) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(BalanceTx_UtxoMinAda.utxoMinAdaValue(coinsPerUtxoUnit)(Data_Newtype.wrap()(collReturnOutputRec))))(Data_Either.note(BalanceTx_Error.CollateralReturnMinAdaValueCalcError.value))))(function (minAdaValue) {
                              var collReturnAda = Data_Newtype.unwrap()(Data_Semigroup.append(Data_Ord_Max.semigroupMax(Data_BigInt.ordBigInt))(Data_Ring.sub(Data_BigInt.ringBigInt)(collAdaValue)(BalanceTx_Collateral_Select.minRequiredCollateral))(minAdaValue));
                              var collReturnOutput = Data_Newtype.wrap()({
                                  amount: Cardano_Types_Value.mkValue(Data_Newtype.wrap()(collReturnAda))(collNonAdaAsset),
                                  address: collReturnOutputRec.address,
                                  datum: collReturnOutputRec.datum,
                                  scriptRef: collReturnOutputRec.scriptRef
                              });
                              var totalCollateral = Data_Ring.sub(Data_BigInt.ringBigInt)(collAdaValue)(collReturnAda);
                              return Control_Monad_Except_Trans.except(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))((function () {
                                  var v = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(totalCollateral)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                                  if (v) {
                                      return Data_Either.Right.create(Data_Lens_Setter.setJust((function () {
                                          var $29 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                                          var $30 = Cardano_Types_Transaction["_totalCollateral"](Data_Profunctor_Strong.strongFn);
                                          return function ($31) {
                                              return $29($30($31));
                                          };
                                      })())(Data_Newtype.wrap()(totalCollateral))(Data_Lens_Setter.setJust((function () {
                                          var $32 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                                          var $33 = Cardano_Types_Transaction["_collateralReturn"](Data_Profunctor_Strong.strongFn);
                                          return function ($34) {
                                              return $32($33($34));
                                          };
                                      })())(collReturnOutput)(transaction)));
                                  };
                                  if (!v) {
                                      return Data_Either.Left.create(new BalanceTx_Error.CollateralReturnError("Negative totalCollateral after covering min-utxo-ada requirement."));
                                  };
                                  throw new Error("Failed pattern match at BalanceTx.Collateral (line 118, column 7 - line 126, column 80): " + [ v.constructor.name ]);
                              })());
                          });
                      });
                  };
              };
              var collNonAdaAsset = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Cardano_Types_Value.monoidNonAdaAsset)(nonAdaAsset)(collateral);
              var collAdaValue = Data_Foldable.foldl(Data_Foldable.foldableArray)(adaValue$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(collateral);
              var v = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(collAdaValue)(BalanceTx_Collateral_Select.minRequiredCollateral) && Data_Eq.eq(Cardano_Types_Value.eqNonAdaAsset)(collNonAdaAsset)(Data_Monoid.mempty(Cardano_Types_Value.monoidNonAdaAsset));
              if (v) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(transaction);
              };
              if (!v) {
                  return setTxCollateralReturn(collAdaValue)(collNonAdaAsset);
              };
              throw new Error("Failed pattern match at BalanceTx.Collateral (line 71, column 5 - line 75, column 59): " + [ v.constructor.name ]);
          };
      };
  };
  exports["addTxCollateral"] = addTxCollateral;
  exports["addTxCollateralReturn"] = addTxCollateralReturn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.Helpers"] = $PS["BalanceTx.Helpers"] || {};
  var exports = $PS["BalanceTx.Helpers"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];                
  var _unbalancedTx = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.unbalancedTx, function (ubTx) {
              return {
                  unbalancedTx: ubTx,
                  datums: v.datums,
                  redeemersTxIns: v.redeemersTxIns
              };
          });
      })(dictStrong);
  };
  var _transaction$prime = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (unattachedTx) {
          return new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(unattachedTx)((function () {
              var $12 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
              var $13 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
              return function ($14) {
                  return $12($13($14));
              };
          })()), function (tx) {
              return Data_Lens_Setter.over(_unbalancedTx(Data_Profunctor_Strong.strongFn))(Data_Lens_Setter.set(Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn))(tx))(unattachedTx);
          });
      })(dictStrong);
  };
  var _redeemersTxIns = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.redeemersTxIns, function (rdmrs) {
              return {
                  unbalancedTx: v.unbalancedTx,
                  datums: v.datums,
                  redeemersTxIns: rdmrs
              };
          });
      })(dictStrong);
  };
  var _body$prime = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (unattachedTx) {
          return new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(unattachedTx)((function () {
              var $15 = _transaction$prime(Data_Lens_Internal_Forget.strongForget);
              var $16 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
              return function ($17) {
                  return $15($16($17));
              };
          })()), function (txBody) {
              return Data_Lens_Setter.over(_transaction$prime(Data_Profunctor_Strong.strongFn))(Data_Lens_Setter.set(Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn))(txBody))(unattachedTx);
          });
      })(dictStrong);
  };
  exports["_body'"] = _body$prime;
  exports["_redeemersTxIns"] = _redeemersTxIns;
  exports["_transaction'"] = _transaction$prime;
  exports["_unbalancedTx"] = _unbalancedTx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.Types"] = $PS["BalanceTx.Types"] || {};
  var exports = $PS["BalanceTx.Types"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];                
  var PrebalancedTransaction = function (x) {
      return x;
  };
  var FinalizedTransaction = function (x) {
      return x;
  };
  var genericPrebalancedTransac = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPrebalancedTransactio = {
      show: Data_Show_Generic.genericShow(genericPrebalancedTransac)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ScriptLookups.showUnattachedUnbalancedT))({
          reflectSymbol: function () {
              return "PrebalancedTransaction";
          }
      }))
  };
  var genericFinalizedTransacti = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showFinalizedTransaction = {
      show: Data_Show_Generic.genericShow(genericFinalizedTransacti)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Transaction.showTransaction))({
          reflectSymbol: function () {
              return "FinalizedTransaction";
          }
      }))
  };
  exports["FinalizedTransaction"] = FinalizedTransaction;
  exports["PrebalancedTransaction"] = PrebalancedTransaction;
  exports["showFinalizedTransaction"] = showFinalizedTransaction;
  exports["showPrebalancedTransactio"] = showPrebalancedTransactio;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var right = function (dict) {
      return dict.right;
  };
  var choiceFn = {
      left: function (v) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Data_Either.Left.create(v(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      right: Data_Functor.map(Data_Either.functorEither),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  exports["right"] = right;
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.AffineTraversal"] = $PS["Data.Lens.AffineTraversal"] || {};
  var exports = $PS["Data.Lens.AffineTraversal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var affineTraversal$prime = function (to) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(to)(function (v) {
                      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(v.value0)(v.value1);
                  })(Data_Profunctor_Strong.second(dictStrong)(Data_Profunctor_Choice.right(dictChoice)(pab)));
              };
          };
      };
  };
  var affineTraversal = function (set) {
      return function (pre) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return affineTraversal$prime(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(set)(pre))(dictStrong)(dictChoice);
              };
          };
      };
  };
  exports["affineTraversal"] = affineTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_AffineTraversal = $PS["Data.Lens.AffineTraversal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var ix = function (dict) {
      return dict.ix;
  };
  var indexArray = {
      ix: function (n) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (s) {
                      return function (b) {
                          return Data_Maybe.fromMaybe(s)(Data_Array.updateAt(n)(b)(s));
                      };
                  };
                  var pre = function (s) {
                      return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Array.index(s)(n));
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      }
  };
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["TxOutput"] = $PS["TxOutput"] || {};
  var exports = $PS["TxOutput"];
  var Address = $PS["Address"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Deserialization_PlutusData = $PS["Deserialization.PlutusData"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];          
  var txOutRefToTransactionInput = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Types_ByteArray.hexToByteArray(v.txId))(Data_Newtype.wrap()))(function (transactionId) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
              transactionId: transactionId,
              index: v.index
          }));
      });
  };
  var toOutputDatum = function (d) {
      return function (dh) {
          return Data_Maybe.fromMaybe(Types_OutputDatum.NoOutputDatum.value)(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Types_OutputDatum.OutputDatum.create)(d))(Data_Functor.map(Data_Maybe.functorMaybe)(Types_OutputDatum.OutputDatumHash.create)(dh)));
      };
  };
  var ogmiosDatumToDatum = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Types_ByteArray.hexToByteArray)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesPlutusData))((function () {
      var $57 = Data_Functor.map(Data_Maybe.functorMaybe)(Types_Datum.Datum);
      return function ($58) {
          return $57(Deserialization_PlutusData.convertPlutusData($58));
      };
  })()));
  var ogmiosDatumHashToDatumHash = function (str) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Types_ByteArray.hexToByteArray(str))(Data_Newtype.wrap());
  };
  var ogmiosTxOutToTransactionOutput = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Address.ogmiosAddressToAddress(v.address))(function (address$prime) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Maybe.applicativeMaybe)(ogmiosDatumHashToDatumHash)(v.datumHash))(function (dh) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Maybe.applicativeMaybe)(ogmiosDatumToDatum)(Control_Apply.applySecond(Data_Maybe.applyMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(Data_Maybe.isNothing(v.datumHash)))(v.datum)))(function (d) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                      address: address$prime,
                      amount: v.value,
                      datum: toOutputDatum(d)(dh),
                      scriptRef: v.script
                  }));
              });
          });
      });
  };
  exports["ogmiosTxOutToTransactionOutput"] = ogmiosTxOutToTransactionOutput;
  exports["txOutRefToTransactionInput"] = txOutRefToTransactionInput;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.Utxos"] = $PS["QueryM.Utxos"] || {};
  var exports = $PS["QueryM.Utxos"];
  var Address = $PS["Address"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var TxOutput = $PS["TxOutput"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_UsedTxOuts = $PS["Types.UsedTxOuts"];
  var Wallet = $PS["Wallet"];                
  var withTxRefsCache = (function () {
      var $66 = Data_Newtype.wrap();
      var $67 = Control_Monad_Reader_Trans.withReaderT(function ($69) {
          return (function (v) {
              return v.usedTxOuts;
          })((function (v) {
              return v.runtime;
          })($69));
      });
      return function ($68) {
          return $66($67($68));
      };
  })();
  var getUtxo = function (ref) {
      var convertUtxos = function (v) {
          var out$prime = Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(TxOutput.txOutRefToTransactionInput)(TxOutput.ogmiosTxOutToTransactionOutput));
          var out = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.mapFlipped(Data_Functor.functorArray)(out$prime)(Data_Bitraversable.bisequence(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)));
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray))(out);
      };
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(QueryM.mkOgmiosRequest(QueryM_Ogmios.queryUtxoCall)(function (v) {
          return v.utxo;
      })(ref))(function (res) {
          return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Control_Bind.bind(Data_Maybe.bindMaybe)(convertUtxos(res))(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput)(ref)));
      });
  };
  var filterLockedUtxos = function (utxos) {
      return withTxRefsCache(Data_Function.flip(Helpers.filterMapWithKeyM(Types_Transaction.ordTransactionInput)(Control_Monad_Reader_Trans.monadReaderT(Effect_Aff.monadAff)))(utxos)(function (k) {
          return function (v) {
              return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect_Aff.functorAff))(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Types_UsedTxOuts.isTxOutRefUsed(Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff))(Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff))(Data_Newtype.unwrap()(k)));
          };
      }));
  };
  var utxosAt = function (address) {
      return mkUtxoQuery(QueryM.mkOgmiosRequest(QueryM_Ogmios.queryUtxosAtCall)(function (v) {
          return v.utxosAt;
      })(Address.addressToOgmiosAddress(address)));
  };
  var mkUtxoQuery = function (query) {
      var allUtxosAt = (function () {
          var convertUtxos = function (v) {
              var out$prime = Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(TxOutput.txOutRefToTransactionInput)(TxOutput.ogmiosTxOutToTransactionOutput));
              var out = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.mapFlipped(Data_Functor.functorArray)(out$prime)(Data_Bitraversable.bisequence(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)));
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray))(out);
          };
          return Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(convertUtxos)(query);
      })();
      var cip30UtxosAt = Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(getWalletCollateral)(Data_Maybe.maybe(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Effect_Exception["throw"]("CIP-30 wallet missing collateral")))(function (collateralUtxos) {
          return Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(allUtxosAt)(function (utxos$prime) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (collateralUtxo) {
                  return function (utxoAcc) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Types_Transaction.ordTransactionInput)((Data_Newtype.unwrap()(collateralUtxo)).input))(utxoAcc);
                  };
              })(utxos$prime)(collateralUtxos);
          });
      }));
      var utxosAtByWallet = function (v) {
          if (v instanceof Wallet.Nami) {
              return cip30UtxosAt;
          };
          if (v instanceof Wallet.Gero) {
              return cip30UtxosAt;
          };
          if (v instanceof Wallet.Flint) {
              return cip30UtxosAt;
          };
          if (v instanceof Wallet.Eternl) {
              return cip30UtxosAt;
          };
          if (v instanceof Wallet.Lode) {
              return cip30UtxosAt;
          };
          if (v instanceof Wallet.KeyWallet) {
              return allUtxosAt;
          };
          throw new Error("Failed pattern match at QueryM.Utxos (line 96, column 21 - line 102, column 30): " + [ v.constructor.name ]);
      };
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($70) {
          return (function (v) {
              return v.wallet;
          })((function (v) {
              return v.runtime;
          })($70));
      }))(Data_Maybe.maybe(allUtxosAt)(utxosAtByWallet));
  };
  var getWalletCollateral = Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($71) {
      return (function (v) {
          return v.wallet;
      })((function (v) {
          return v.runtime;
      })($71));
  }))(Data_Maybe.maybe(Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Maybe.Nothing.value))(function (v) {
      if (v instanceof Wallet.Nami) {
          return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          }));
      };
      if (v instanceof Wallet.Gero) {
          return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          }));
      };
      if (v instanceof Wallet.Flint) {
          return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          }));
      };
      if (v instanceof Wallet.Lode) {
          return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          }));
      };
      if (v instanceof Wallet.Eternl) {
          return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          }));
      };
      if (v instanceof Wallet.KeyWallet) {
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($72) {
              return (function (v1) {
                  return v1.networkId;
              })((function (v1) {
                  return v1.config;
              })($72));
          }))(function (networkId) {
              return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)((Data_Newtype.unwrap()(v.value0)).address(networkId)))(function (addr) {
                  return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(utxosAt(addr))(Data_Maybe.fromMaybe(Data_Map_Internal.empty)))(filterLockedUtxos))(function (utxos) {
                      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(Data_Functor.mapFlipped(Data_Functor.functorFn)(function ($73) {
                          return (function (v1) {
                              return v1.pparams;
                          })((function (v1) {
                              return v1.runtime;
                          })($73));
                      })(Data_Newtype.unwrap())))(function (pparams) {
                          var maxCollateralInputs = Data_UInt.toInt(pparams.maxCollateralInputs);
                          return Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)((Data_Newtype.unwrap()(v.value0)).selectCollateral(pparams.coinsPerUtxoUnit)(maxCollateralInputs)(utxos));
                      });
                  });
              });
          });
      };
      throw new Error("Failed pattern match at QueryM.Utxos (line 201, column 5 - line 219, column 16): " + [ v.constructor.name ]);
  })))(function (mbCollateralUTxOs) {
      return Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Foldable.for_(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Foldable.foldableMaybe)(mbCollateralUTxOs)(function (collateralUTxOs) {
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($74) {
              return (function (v) {
                  return v.pparams;
              })((function (v) {
                  return v.runtime;
              })($74));
          }))(function (pparams) {
              var tooManyCollateralUTxOs = Data_Ord.greaterThan(Data_UInt.uintOrd)(Data_UInt.fromInt(Data_Array.length(collateralUTxOs)))((Data_Newtype.unwrap()(pparams)).maxCollateralInputs);
              return Control_Applicative.when(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(tooManyCollateralUTxOs)(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Effect_Exception["throw"]("Wallet returned too many UTxOs as collateral. This is likely a bug in the wallet.")));
          });
      }))(function () {
          return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(mbCollateralUTxOs);
      });
  });   
  var getWalletUtxos = (function () {
      var toUtxoMap = (function () {
          var $86 = Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray);
          var $87 = Data_Functor.map(Data_Functor.functorArray)((function () {
              var $89 = Data_Newtype.unwrap();
              return function ($90) {
                  return (function (v) {
                      return new Data_Tuple.Tuple(v.input, v.output);
                  })($89($90));
              };
          })());
          return function ($88) {
              return $86($87($88));
          };
      })();
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($91) {
          return (function (v) {
              return v.wallet;
          })((function (v) {
              return v.runtime;
          })($91));
      }))((function () {
          var $92 = Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Control_Bind.join(Data_Maybe.bindMaybe));
          var $93 = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(function (v) {
              if (v instanceof Wallet.Nami) {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Data_Functor.mapFlipped(Effect_Aff.functorAff)(v.value0.getUtxos(v.value0.connection))(Data_Functor.map(Data_Maybe.functorMaybe)(toUtxoMap)));
              };
              if (v instanceof Wallet.Gero) {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Data_Functor.mapFlipped(Effect_Aff.functorAff)(v.value0.getUtxos(v.value0.connection))(Data_Functor.map(Data_Maybe.functorMaybe)(toUtxoMap)));
              };
              if (v instanceof Wallet.Flint) {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Data_Functor.mapFlipped(Effect_Aff.functorAff)(v.value0.getUtxos(v.value0.connection))(Data_Functor.map(Data_Maybe.functorMaybe)(toUtxoMap)));
              };
              if (v instanceof Wallet.Eternl) {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Data_Functor.mapFlipped(Effect_Aff.functorAff)(v.value0.getUtxos(v.value0.connection))(Data_Functor.map(Data_Maybe.functorMaybe)(toUtxoMap)));
              };
              if (v instanceof Wallet.Lode) {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Data_Functor.mapFlipped(Effect_Aff.functorAff)(v.value0.getUtxos(v.value0.connection))(Data_Functor.map(Data_Maybe.functorMaybe)(toUtxoMap)));
              };
              if (v instanceof Wallet.KeyWallet) {
                  return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getWalletAddresses)(function (v1) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(v1)(Data_Array.head);
                  }))(function (mbAddress) {
                      return Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Control_Bind.join(Data_Maybe.bindMaybe))(Data_Traversable["for"](QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Traversable.traversableMaybe)(mbAddress)(utxosAt));
                  });
              };
              throw new Error("Failed pattern match at QueryM.Utxos (line 182, column 59 - line 192, column 39): " + [ v.constructor.name ]);
          });
          return function ($94) {
              return $92($93($94));
          };
      })());
  })();
  exports["filterLockedUtxos"] = filterLockedUtxos;
  exports["getUtxo"] = getUtxo;
  exports["utxosAt"] = utxosAt;
  exports["getWalletCollateral"] = getWalletCollateral;
  exports["getWalletUtxos"] = getWalletUtxos;
})(PS);
(function(exports) {
  /* global BROWSER_RUNTIME */

  let lib;
  if (typeof BROWSER_RUNTIME != "undefined" && BROWSER_RUNTIME) {
    lib = require("@emurgo/cardano-serialization-lib-browser");
  } else {
    lib = require("@emurgo/cardano-serialization-lib-nodejs");
  }

  exports._minFee = maybe => tx => txFeeFixed => txFeePerByte => {
    try {
      const linearFee = lib.LinearFee.new(txFeePerByte, txFeeFixed);
      return maybe.just(lib.min_fee(tx, linearFee));
    } catch (_) {
      return maybe.nothing;
    }
  };

  exports._minScriptFee = exUnitPrices => tx =>
    lib.min_script_fee(tx, exUnitPrices);
})(PS["Serialization.MinFee"] = PS["Serialization.MinFee"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Serialization.MinFee"] = $PS["Serialization.MinFee"] || {};
  var exports = $PS["Serialization.MinFee"];
  var $foreign = $PS["Serialization.MinFee"];
  var Cardano_Types_NativeScript = $PS["Cardano.Types.NativeScript"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var NativeScripts = $PS["NativeScripts"];
  var Serialization = $PS["Serialization"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_BigNum = $PS["Types.BigNum"];                
  var fakeVkeywitness = new Data_Tuple.Tuple("ed25519_pk1p9sf9wz3t46u9ghht44203gerxt82kzqaqw74fqrmwjmdy8sjxmqknzq8j", "ed25519_sig1mr6pm5kanam2wkmae70jx7fjkzepghefj0lmnczu6fra6auf2urgrte5axxhunw4x34l3l8tj9c0t4le39tj8lpjdgxmqnujw07tkzs9m6t6x");
  var addFakeSignatures = function (selfSigners) {
      return function (tx) {
          var requiredSigners = (function () {
              var $13 = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Serialization_Hash.ordEd25519KeyHash);
              var $14 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
              var $15 = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray));
              var $16 = Data_Newtype.unwrap();
              return function ($17) {
                  return $13($14($15((function (v) {
                      return v.requiredSigners;
                  })($16((function (v) {
                      return v.body;
                  })($17))))));
              };
          })()(Data_Newtype.unwrap()(tx));
          var nsPossibleSigners = NativeScripts.getMaximumSigners(requiredSigners)(new Cardano_Types_NativeScript.ScriptAll((function () {
              var $18 = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray));
              var $19 = Data_Newtype.unwrap();
              return function ($20) {
                  return $18((function (v) {
                      return v.nativeScripts;
                  })($19((function (v) {
                      return v.witnessSet;
                  })($20))));
              };
          })()(Data_Newtype.unwrap()(tx))));
          var nSelfSigners = (function () {
              var n = Data_Set.size(selfSigners);
              var $9 = n === 0;
              if ($9) {
                  return 1;
              };
              return n;
          })();
          var nRequiredSigners = (function () {
              var $21 = Data_Maybe.fromMaybe(0);
              var $22 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                  var $25 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
                  return function ($26) {
                      return Data_Array.length($25($26));
                  };
              })());
              var $23 = Data_Newtype.unwrap();
              return function ($24) {
                  return $21($22((function (v) {
                      return v.requiredSigners;
                  })($23((function (v) {
                      return v.body;
                  })($24)))));
              };
          })()(Data_Newtype.unwrap()(tx));
          return Data_Lens_Setter.set((function () {
              var $27 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
              var $28 = Cardano_Types_Transaction["_vkeys"](Data_Profunctor_Strong.strongFn);
              return function ($29) {
                  return $27($28($29));
              };
          })())(new Data_Maybe.Just(Data_Array.replicate((nRequiredSigners + nsPossibleSigners | 0) + nSelfSigners | 0)(fakeVkeywitness)))(tx);
      };
  };
  var calculateMinFeeCsl = function (dictMonadEffect) {
      return function (dictMonadThrow) {
          return function (v) {
              return function (selfSigners) {
                  return function (txNoSigs) {
                      var tx = addFakeSignatures(selfSigners)(txNoSigs);
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Serialization.convertTransaction(tx)))(function (cslTx) {
                          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Error_Class.liftMaybe(dictMonadThrow)(Effect_Exception.error("Unable to calculate min_fee"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt)($foreign["_minFee"](FfiHelpers.maybeFfiHelper)(cslTx)(Types_BigNum.fromUInt(v.txFeeFixed))(Types_BigNum.fromUInt(v.txFeePerByte)))))(function (minFee) {
                              return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Serialization.convertExUnitPrices(v.prices)))(function (exUnitPricesCsl) {
                                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Error_Class.liftMaybe(dictMonadThrow)(Effect_Exception.error("Unable to calculate min_script_fee"))(Types_BigNum.toBigInt($foreign["_minScriptFee"](exUnitPricesCsl)(cslTx))))(function (minScriptFee) {
                                      return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Newtype.wrap()(Data_Semiring.add(Data_BigInt.semiringBigInt)(minFee)(minScriptFee)));
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  exports["calculateMinFeeCsl"] = calculateMinFeeCsl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.MinFee"] = $PS["QueryM.MinFee"] || {};
  var exports = $PS["QueryM.MinFee"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var QueryM_ProtocolParameters = $PS["QueryM.ProtocolParameters"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_MinFee = $PS["Serialization.MinFee"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var getSelfSigners = function (tx) {
      var toUtxoMap = (function () {
          var $15 = Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray);
          var $16 = Data_Functor.map(Data_Functor.functorArray)((function () {
              var $18 = Data_Newtype.unwrap();
              return function ($19) {
                  return (function (v) {
                      return new Data_Tuple.Tuple(v.input, v.output);
                  })($18($19));
              };
          })());
          return function ($17) {
              return $15($16($17));
          };
      })();
      var setFor = function (dictMonad) {
          return function (dictOrd) {
              return function (dictOrd1) {
                  return function (txIns) {
                      return function (f) {
                          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Set.fromFoldable(Data_Foldable.foldableArray)(dictOrd1))(Data_Traversable["for"](dictMonad.Applicative0())(Data_Traversable.traversableArray)(Data_Array.fromFoldable(Data_Set.foldableSet)(txIns))(f));
                      };
                  };
              };
          };
      };
      var txInputs = Data_Lens_Getter.viewOn(tx)((function () {
          var $20 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
          var $21 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
          return function ($22) {
              return $20($21($22));
          };
      })());
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(setFor(QueryM.monadQueryMExtendedAff)(Types_Transaction.ordTransactionInput)(Serialization_Address.ordAddress)(txInputs)(function (txInput) {
          return Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Couldn't get tx output for " + Data_Show.show(Types_Transaction.showTransactionInput)(txInput)))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $23 = Data_Newtype.unwrap();
              return function ($24) {
                  return (function (v) {
                      return v.address;
                  })($23($24));
              };
          })()))(QueryM_Utxos.getUtxo(txInput)));
      }))(function (v) {
          var txCollats = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Types_Transaction.ordTransactionInput)(Data_Maybe.fromMaybe([  ])(Data_Lens_Getter.viewOn(tx)((function () {
              var $25 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
              var $26 = Cardano_Types_Transaction["_collateral"](Data_Lens_Internal_Forget.strongForget);
              return function ($27) {
                  return $25($26($27));
              };
          })())));
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Data_Maybe.maybe(Data_Map_Internal.empty)(toUtxoMap))(QueryM_Utxos.getWalletCollateral))(function (walletCollats) {
              return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(setFor(QueryM.monadQueryMExtendedAff)(Types_Transaction.ordTransactionInput)(Serialization_Address.ordAddress)(txCollats)(function (txCollat) {
                  return Helpers.liftM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Couldn't get tx output for " + Data_Show.show(Types_Transaction.showTransactionInput)(txCollat)))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $28 = Data_Newtype.unwrap();
                      return function ($29) {
                          return (function (v1) {
                              return v1.address;
                          })($28($29));
                      };
                  })())(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput)(txCollat)(walletCollats)));
              }))(function (v1) {
                  return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Serialization_Address.ordAddress))(Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not get own addresses"))(QueryM.getWalletAddresses)))(function (v2) {
                      var txOwnAddrs = Data_Set.intersection(Serialization_Address.ordAddress)(v2)(Data_Set.union(Serialization_Address.ordAddress)(v)(v1));
                      return setFor(QueryM.monadQueryMExtendedAff)(Serialization_Address.ordAddress)(Serialization_Hash.ordEd25519KeyHash)(txOwnAddrs)((function () {
                          var $30 = Helpers.liftM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not convert address to key hash"));
                          var $31 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred)(Serialization_Address.stakeCredentialToKeyHash);
                          return function ($32) {
                              return $30($31($32));
                          };
                      })());
                  });
              });
          });
      });
  };
  var calculateMinFee = function (tx) {
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(getSelfSigners(tx))(function (selfSigners) {
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(QueryM_ProtocolParameters.getProtocolParameters)(function (pparams) {
              return Serialization_MinFee.calculateMinFeeCsl(QueryM.monadEffectQueryMExtended)(QueryM.monadThrowErrorQueryMExte)(pparams)(selfSigners)(tx);
          });
      });
  };
  exports["calculateMinFee"] = calculateMinFee;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx.ExUnitsAndMinFee"] = $PS["BalanceTx.ExUnitsAndMinFee"] || {};
  var exports = $PS["BalanceTx.ExUnitsAndMinFee"];
  var BalanceTx_Error = $PS["BalanceTx.Error"];
  var BalanceTx_Helpers = $PS["BalanceTx.Helpers"];
  var BalanceTx_Types = $PS["BalanceTx.Types"];
  var Cardano_Types_ScriptRef = $PS["Cardano.Types.ScriptRef"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var QueryM = $PS["QueryM"];
  var QueryM_MinFee = $PS["QueryM.MinFee"];
  var ReindexRedeemers = $PS["ReindexRedeemers"];
  var Serialization = $PS["Serialization"];
  var Transaction = $PS["Transaction"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var setRdmrsExecutionUnits = function (rs) {
      return function (v) {
          var v1 = Data_Array.uncons(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
          if (v1 instanceof Data_Maybe.Nothing) {
              return rs;
          };
          if (v1 instanceof Data_Maybe.Just) {
              var xsWrapped = Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "redeemerTag";
                  }
              })(Types_RedeemerTag.ordRedeemerTag))()({
                  reflectSymbol: function () {
                      return "redeemerIndex";
                  }
              })(Types_Natural.ordNatural)))(Data_Foldable.foldableArray)(v1.value0.tail);
              var ixMaybe = Data_Function.flip(Data_Array.findIndex)(rs)(function (v2) {
                  return Data_Eq.eq(Types_RedeemerTag.eqRedeemerTag)(v2.value0.tag)(v1.value0.head.value0.redeemerTag) && Data_Eq.eq(Data_BigInt.eqBigInt)(v2.value0.index)(Types_Natural.toBigInt(v1.value0.head.value0.redeemerIndex));
              });
              return Data_Maybe.maybe(setRdmrsExecutionUnits(rs)(xsWrapped))(function (ix) {
                  return Data_Function.flip(setRdmrsExecutionUnits)(xsWrapped)(Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(ix)(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn))(function (v2) {
                      var steps = Types_Natural.toBigInt(v1.value0.head.value1.steps);
                      var mem = Types_Natural.toBigInt(v1.value0.head.value1.memory);
                      return new Data_Tuple.Tuple({
                          tag: v2.value0.tag,
                          index: v2.value0.index,
                          data: v2.value0.data,
                          exUnits: {
                              mem: mem,
                              steps: steps
                          }
                      }, v2.value1);
                  })(rs));
              })(ixMaybe);
          };
          throw new Error("Failed pattern match at BalanceTx.ExUnitsAndMinFee (line 176, column 3 - line 192, column 70): " + [ v1.constructor.name ]);
      };
  };
  var updateTxExecutionUnits = function (unattachedTx) {
      return function (rdmrPtrExUnitsList) {
          return Data_Lens_Setter.over(BalanceTx_Helpers["_redeemersTxIns"](Data_Profunctor_Strong.strongFn))(Data_Function.flip(setRdmrsExecutionUnits)(rdmrPtrExUnitsList))(unattachedTx);
      };
  };
  var reindexRedeemers = function (v) {
      var inputs = Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Lens_Getter.viewOn(v)((function () {
          var $44 = BalanceTx_Helpers["_body'"](Data_Lens_Internal_Forget.strongForget);
          var $45 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
          return function ($46) {
              return $44($45($46));
          };
      })()));
      return Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(ReindexRedeemers["reindexSpentScriptRedeemers'"](inputs)(v.redeemersTxIns))(Data_Functor.map(Data_Either.functorEither)(function (redeemersTxInsReindexed) {
          return Data_Lens_Setter.set(BalanceTx_Helpers["_redeemersTxIns"](Data_Profunctor_Strong.strongFn))(redeemersTxInsReindexed)(v);
      }));
  };
  var reattachDatumsAndRedeemers = function (v) {
      var transaction = Data_Lens_Getter.viewOn(v.unbalancedTx)(Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget));
      return Data_Lens_Setter.setJust((function () {
          var $47 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
          var $48 = Cardano_Types_Transaction["_redeemers"](Data_Profunctor_Strong.strongFn);
          return function ($49) {
              return $47($48($49));
          };
      })())(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(v.redeemersTxIns))(Data_Lens_Setter.setJust((function () {
          var $50 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
          var $51 = Cardano_Types_Transaction["_plutusData"](Data_Profunctor_Strong.strongFn);
          return function ($52) {
              return $50($51($52));
          };
      })())(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())(v.datums))(transaction));
  };
  var finalizeTransaction = function (reindexedUnattachedTxWithExUnits) {
      return function (utxos) {
          var getPlutusScript = function (v) {
              return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Cardano_Types_ScriptRef.getPlutusScript)(v.scriptRef);
          };
          var getRefPlutusScripts = function (v) {
              var spendAndRefInputs = Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Semigroup.append(Data_Set.semigroupSet(Types_Transaction.ordTransactionInput))(v.inputs)(v.referenceInputs));
              return Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                  var $53 = Data_Functor.map(Data_Functor.functorArray)(getPlutusScript);
                  return function ($54) {
                      return Data_Array.catMaybes($53($54));
                  };
              })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos))(spendAndRefInputs)));
          };
          var txBody = Data_Lens_Getter.viewOn(reindexedUnattachedTxWithExUnits)(BalanceTx_Helpers["_body'"](Data_Lens_Internal_Forget.strongForget));
          var attachedTxWithExUnits = reattachDatumsAndRedeemers(reindexedUnattachedTxWithExUnits);
          var ws = Data_Newtype.unwrap()(Data_Lens_Getter.viewOn(attachedTxWithExUnits)(Cardano_Types_Transaction["_witnessSet"](Data_Lens_Internal_Forget.strongForget)));
          var datums = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.wrap())(Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(ws.plutusData));
          var redeemers = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(ws.redeemers);
          var scripts = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray))(ws.plutusScripts))(getRefPlutusScripts(txBody));
          var languages = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Set.monoidSet(Types_Scripts.ordLanguage))((function () {
              var $55 = Data_Newtype.unwrap();
              return function ($56) {
                  return Data_Set.singleton(Data_Tuple.snd($55($56)));
              };
          })())(scripts);
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(Data_Functor.mapFlipped(Data_Functor.functorFn)(function ($57) {
              return (function (v) {
                  return v.pparams;
              })((function (v) {
                  return v.runtime;
              })($57));
          })((function () {
              var $58 = Data_Newtype.wrap();
              var $59 = Data_Map_Internal.filterKeys(Types_Scripts.ordLanguage)(Data_Function.flip(Data_Set.member(Types_Scripts.ordLanguage))(languages));
              var $60 = Data_Newtype.unwrap();
              var $61 = Data_Newtype.unwrap();
              return function ($62) {
                  return $58($59($60((function (v) {
                      return v.costModels;
                  })($61($62)))));
              };
          })())))(function (costModels) {
              return Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Data_Functor.map(Effect.functorEffect)(BalanceTx_Types.FinalizedTransaction)(Transaction.setScriptDataHash(costModels)(redeemers)(datums)(attachedTxWithExUnits)));
          });
      };
  };
  var evalTxExecutionUnits = function (tx) {
      return function (unattachedTx) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(QueryM.monadEffectQueryMExtended))(Data_Functor.map(Effect.functorEffect)((function () {
              var $63 = Data_Newtype.wrap();
              var $64 = Untagged_Union.asOneOf();
              return function ($65) {
                  return $63(Serialization.toBytes($64($65)));
              };
          })())(Serialization.convertTransaction(tx))))(function (txBytes) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(Data_Newtype.unwrap())(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(QueryM.evaluateTxOgmios(txBytes))))(function (eResult) {
                  if (eResult instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(eResult.value0);
                  };
                  if (eResult instanceof Data_Either.Left && Data_Lens_Getter.viewOn(tx)(Cardano_Types_Transaction["_isValid"](Data_Lens_Internal_Forget.strongForget))) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(QueryM.monadQueryMExtendedAff))(new BalanceTx_Error.ExUnitsEvaluationFailed(unattachedTx, eResult.value0));
                  };
                  if (eResult instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(Data_Newtype.wrap()(Data_Map_Internal.empty));
                  };
                  throw new Error("Failed pattern match at BalanceTx.ExUnitsAndMinFee (line 74, column 3 - line 78, column 38): " + [ eResult.constructor.name ]);
              });
          });
      };
  };
  var evalExUnitsAndMinFee = function (v) {
      return function (allUtxos) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(reindexRedeemers(v))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(BalanceTx_Error.ReindexRedeemersError.create))))(function (reindexedUnattachedTx) {
              var attachedTx = reattachDatumsAndRedeemers(reindexedUnattachedTx);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(evalTxExecutionUnits(attachedTx)(reindexedUnattachedTx))(function (rdmrPtrExUnitsList) {
                  var reindexedUnattachedTxWithExUnits = updateTxExecutionUnits(reindexedUnattachedTx)(rdmrPtrExUnitsList);
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(finalizeTransaction(reindexedUnattachedTxWithExUnits)(allUtxos)))(function (v1) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM_MinFee.calculateMinFee(v1))((function () {
                          var $66 = Control_Applicative.pure(Data_Either.applicativeEither);
                          var $67 = Data_Newtype.unwrap();
                          return function ($68) {
                              return $66($67($68));
                          };
                      })())))(function (minFee) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(new Data_Tuple.Tuple(reindexedUnattachedTxWithExUnits, minFee));
                      });
                  });
              });
          });
      };
  };
  exports["evalExUnitsAndMinFee"] = evalExUnitsAndMinFee;
  exports["finalizeTransaction"] = finalizeTransaction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Logger.Class"] = $PS["Control.Monad.Logger.Class"] || {};
  var exports = $PS["Control.Monad.Logger.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Effect_Class = $PS["Effect.Class"];                
  var log = function (dict) {
      return dict.log;
  };
  var log$prime = function (dictMonadLogger) {
      return function (level) {
          return function (tags) {
              return function (message) {
                  return Control_Bind.bind(((dictMonadLogger.MonadEffect0()).Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadLogger.MonadEffect0())(Data_JSDate.now))((function () {
                      var $23 = log(dictMonadLogger);
                      return function ($24) {
                          return $23((function (v) {
                              return {
                                  level: level,
                                  message: message,
                                  tags: tags,
                                  timestamp: v
                              };
                          })($24));
                      };
                  })());
              };
          };
      };
  };
  var trace = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Trace.value);
  };
  var warn = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Warn.value);
  };
  var monadLoggerExceptT = function (dictMonadLogger) {
      return {
          log: (function () {
              var $28 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadLogger.MonadEffect0()).Monad0());
              var $29 = log(dictMonadLogger);
              return function ($30) {
                  return $28($29($30));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadLogger.MonadEffect0());
          }
      };
  };
  var info = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Info.value);
  };
  var debug = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Debug.value);
  };
  exports["trace"] = trace;
  exports["debug"] = debug;
  exports["info"] = info;
  exports["warn"] = warn;
  exports["monadLoggerExceptT"] = monadLoggerExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BalanceTx"] = $PS["BalanceTx"] || {};
  var exports = $PS["BalanceTx"];
  var BalanceTx_Collateral = $PS["BalanceTx.Collateral"];
  var BalanceTx_Error = $PS["BalanceTx.Error"];
  var BalanceTx_ExUnitsAndMinFee = $PS["BalanceTx.ExUnitsAndMinFee"];
  var BalanceTx_Helpers = $PS["BalanceTx.Helpers"];
  var BalanceTx_Types = $PS["BalanceTx.Types"];
  var BalanceTx_UtxoMinAda = $PS["BalanceTx.UtxoMinAda"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Logger_Class = $PS["Control.Monad.Logger.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Log_Tag = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var QueryM = $PS["QueryM"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];
  var Wallet = $PS["Wallet"];                
  var setTransactionMinFee = function (minFee) {
      return Data_Lens_Setter.set((function () {
          var $50 = BalanceTx_Helpers["_body'"](Data_Profunctor_Strong.strongFn);
          var $51 = Cardano_Types_Transaction["_fee"](Data_Profunctor_Strong.strongFn);
          return function ($52) {
              return $50($51($52));
          };
      })())(minFee);
  };
  var posValue = function (value) {
      return Cardano_Types_Value.mkValue(Cardano_Types_Value.Coin(Data_Ord.max(Data_BigInt.ordBigInt)(Cardano_Types_Value["valueToCoin'"](value))(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(Cardano_Types_Value.posNonAdaAsset(Cardano_Types_Value.getNonAdaAsset(value)));
  };
  var mintValue = function (txBody) {
      return Data_Maybe.maybe(Data_Monoid.mempty(Cardano_Types_Value.monoidValue))((function () {
          var $53 = Cardano_Types_Value.mkValue(Data_Monoid.mempty(Cardano_Types_Value.monoidCoin));
          var $54 = Data_Newtype.unwrap();
          return function ($55) {
              return $53($54($55));
          };
      })())(Data_Lens_Getter.viewOn(txBody)(Cardano_Types_Transaction["_mint"](Data_Lens_Internal_Forget.strongForget)));
  };
  var minFeeValue = function (txBody) {
      return Cardano_Types_Value.mkValue(Data_Lens_Getter.viewOn(txBody)(Cardano_Types_Transaction["_fee"](Data_Lens_Internal_Forget.strongForget)))(Data_Monoid.mempty(Cardano_Types_Value.monoidNonAdaAsset));
  };
  var getPublicKeyTransactionInput = function (v) {
      return Data_Either.note(BalanceTx_Error.CouldNotConvertScriptOutputToTxInput.value)(Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred((function (v1) {
          return v1.address;
      })(Data_Newtype.unwrap()(v.value1))))(function (paymentCred) {
          return Serialization_Address.withStakeCredential({
              onKeyHash: Data_Function["const"](Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0)),
              onScriptHash: Data_Function["const"](Data_Maybe.Nothing.value)
          })(paymentCred);
      }));
  };
  var getAmount = (function () {
      var $56 = Data_Newtype.unwrap();
      return function ($57) {
          return (function (v) {
              return v.amount;
          })($56($57));
      };
  })();
  var getInputValue = function (utxos) {
      return function (v) {
          return Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos))(Data_Array.fromFoldable(Data_Set.foldableSet)((function (v1) {
              return v1.inputs;
          })(v))));
      };
  };
  var logTx = function (dictMonadEffect) {
      return function (dictMonadLogger) {
          return function (msg) {
              return function (utxos) {
                  return function (v) {
                      return Data_Foldable.traverse_((dictMonadEffect.Monad0()).Applicative0())(Data_Foldable.foldableArray)(Control_Monad_Logger_Class.trace(dictMonadLogger)(Data_Log_Tag.tag(msg)(Data_Monoid.mempty(Data_Monoid.monoidString))))([ "Input Value: " + Data_Show.show(Cardano_Types_Value.showValue)(getInputValue(utxos)(v.body)), "Output Value: " + Data_Show.show(Cardano_Types_Value.showValue)(Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(v.body.outputs)), "Fees: " + Data_Show.show(Cardano_Types_Value.showCoin)(v.body.fee) ]);
                  };
              };
          };
      };
  };
  var totalOutputValue = function (txBody) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Cardano_Types_Value.monoidValue)(getAmount)(Data_Lens_Getter.viewOn(txBody)(Cardano_Types_Transaction["_outputs"](Data_Lens_Internal_Forget.strongForget)));
  };
  var collectTransactionInputs = function (originalTxIns) {
      return function (utxos) {
          return function (value) {
              var utxosToTransactionInput = (function () {
                  var $58 = Data_Array.mapMaybe(function ($61) {
                      return Data_Either.hush(getPublicKeyTransactionInput($61));
                  });
                  var $59 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
                  return function ($60) {
                      return $58($59($60));
                  };
              })();
              var isSufficient = function (txIns$prime) {
                  return function (txInsValue) {
                      return !Data_Array["null"](txIns$prime) && Cardano_Types_Value.geq(txInsValue)(value);
                  };
              };
              var getTxInsValue = function (utxos$prime) {
                  var $62 = Data_Functor.map(Data_Either.functorEither)(Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount));
                  var $63 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function (x) {
                      return Data_Either.note(new BalanceTx_Error.UtxoLookupFailedFor(x))(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput)(x)(utxos$prime));
                  });
                  return function ($64) {
                      return $62($63($64));
                  };
              };
              var updatedInputs = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (newTxIns) {
                  return function (txIn) {
                      return Control_Bind.bind(Data_Either.bindEither)(newTxIns)(function (txIns) {
                          return Control_Bind.bind(Data_Either.bindEither)(getTxInsValue(utxos)(txIns))(function (txInsValue) {
                              var v = Data_Array.elem(Types_Transaction.eqTransactionInput)(txIn)(txIns) || isSufficient(txIns)(txInsValue);
                              if (v) {
                                  return newTxIns;
                              };
                              if (!v) {
                                  return Data_Either.Right.create(Data_Array.insert(Types_Transaction.ordTransactionInput)(txIn)(txIns));
                              };
                              throw new Error("Failed pattern match at BalanceTx (line 386, column 11 - line 389, column 46): " + [ v.constructor.name ]);
                          });
                      });
                  };
              })(Data_Either.Right.create(Data_Array.fromFoldable(Data_Set.foldableSet)(originalTxIns)))(utxosToTransactionInput(utxos));
              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(updatedInputs)(getTxInsValue(utxos)))(function (txInsValue) {
                  return Control_Bind.bind(Data_Either.bindEither)(updatedInputs)(function (updatedInputs$prime) {
                      var v = isSufficient(updatedInputs$prime)(txInsValue);
                      if (v) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Set.fromFoldable(Data_Foldable.foldableArray)(Types_Transaction.ordTransactionInput)(updatedInputs$prime));
                      };
                      if (!v) {
                          return Data_Either.Left.create(new BalanceTx_Error.InsufficientTxInputs(value, txInsValue));
                      };
                      throw new Error("Failed pattern match at BalanceTx (line 374, column 3 - line 378, column 71): " + [ v.constructor.name ]);
                  });
              });
          };
      };
  };
  var buildTransactionChangeOutput = function (changeAddress) {
      return function (utxos) {
          return function (tx) {
              var txBody = Data_Lens_Getter.viewOn(tx)(BalanceTx_Helpers["_body'"](Data_Lens_Internal_Forget.strongForget));
              var totalInputValue = getInputValue(utxos)(txBody);
              var changeValue = posValue(Cardano_Types_Value.minus(Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(totalInputValue)(mintValue(txBody)))(Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(totalOutputValue(txBody))(minFeeValue(txBody))));
              return {
                  address: changeAddress,
                  amount: changeValue,
                  datum: Types_OutputDatum.NoOutputDatum.value,
                  scriptRef: Data_Maybe.Nothing.value
              };
          };
      };
  };
  var addTransactionChangeOutput = function (changeAddress) {
      return function (utxos) {
          return function (unbalancedTx) {
              return BalanceTx_Types.PrebalancedTransaction(Data_Lens_Setter.over((function () {
                  var $65 = BalanceTx_Helpers["_body'"](Data_Profunctor_Strong.strongFn);
                  var $66 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                  return function ($67) {
                      return $65($66($67));
                  };
              })())(Data_Array.cons(buildTransactionChangeOutput(changeAddress)(utxos)(unbalancedTx)))(unbalancedTx));
          };
      };
  };
  var addLovelacesToTransactionOutput = function (coinsPerUtxoUnit) {
      return function (txOutput) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Data_Functor.mapFlipped(Effect.functorEffect)(BalanceTx_UtxoMinAda.utxoMinAdaValue(coinsPerUtxoUnit)(txOutput))(Data_Either.note(BalanceTx_Error.UtxoMinAdaValueCalculationFailed.value)))))(function (txOutputMinAda) {
              var txOutputRec = Data_Newtype.unwrap()(txOutput);
              var newCoin = Cardano_Types_Value.Coin(Data_Ord.max(Data_BigInt.ordBigInt)(Cardano_Types_Value["valueToCoin'"](txOutputRec.amount))(txOutputMinAda));
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(Data_Newtype.wrap()((function () {
                  var $38 = {};
                  for (var $39 in txOutputRec) {
                      if ({}.hasOwnProperty.call(txOutputRec, $39)) {
                          $38[$39] = txOutputRec[$39];
                      };
                  };
                  $38.amount = Cardano_Types_Value.mkValue(newCoin)(Cardano_Types_Value.getNonAdaAsset(txOutputRec.amount));
                  return $38;
              })()));
          });
      };
  };
  var addLovelacesToTransactionOutputs = function (unbalancedTx) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)((function () {
          var $68 = Data_Newtype.unwrap();
          return function ($69) {
              return (function (v) {
                  return v.coinsPerUtxoUnit;
              })($68((function (v) {
                  return v.pparams;
              })((function (v) {
                  return v.runtime;
              })($69))));
          };
      })())))(function (coinsPerUtxoUnit) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(QueryM.functorQueryMExtended(Effect_Aff.functorAff)))(function (txOutputs) {
              return Data_Lens_Setter.set((function () {
                  var $70 = BalanceTx_Helpers["_body'"](Data_Profunctor_Strong.strongFn);
                  var $71 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                  return function ($72) {
                      return $70($71($72));
                  };
              })())(txOutputs)(unbalancedTx);
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(addLovelacesToTransactionOutput(coinsPerUtxoUnit))(Data_Lens_Getter.viewOn(unbalancedTx)((function () {
              var $73 = BalanceTx_Helpers["_body'"](Data_Lens_Internal_Forget.strongForget);
              var $74 = Cardano_Types_Transaction["_outputs"](Data_Lens_Internal_Forget.strongForget);
              return function ($75) {
                  return $73($74($75));
              };
          })())));
      });
  };
  var addTransactionInputs = function (changeAddress) {
      return function (utxos) {
          return function (unbalancedTx) {
              var txBody = Data_Lens_Getter.viewOn(unbalancedTx)(BalanceTx_Helpers["_body'"](Data_Lens_Internal_Forget.strongForget));
              var txInputs = Data_Lens_Getter.viewOn(txBody)(Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget));
              var nonMintedValue = Cardano_Types_Value.minus(totalOutputValue(txBody))(mintValue(txBody));
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)((function () {
                  var $76 = Data_Newtype.unwrap();
                  return function ($77) {
                      return (function (v) {
                          return v.coinsPerUtxoUnit;
                      })($76((function (v) {
                          return v.pparams;
                      })((function (v) {
                          return v.runtime;
                      })($77))));
                  };
              })())))(function (coinsPerUtxoUnit) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(addLovelacesToTransactionOutput(coinsPerUtxoUnit)(buildTransactionChangeOutput(changeAddress)(utxos)(unbalancedTx)))(function (txChangeOutput) {
                      var changeValue = (Data_Newtype.unwrap()(txChangeOutput)).amount;
                      var requiredInputValue = Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(nonMintedValue)(Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(minFeeValue(txBody))(changeValue));
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.except(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(collectTransactionInputs(txInputs)(utxos)(requiredInputValue)))(function (newTxInputs) {
                          var v = Data_Eq.eq(Data_Set.eqSet(Types_Transaction.eqTransactionInput))(newTxInputs)(txInputs);
                          if (v) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(unbalancedTx);
                          };
                          if (!v) {
                              return addTransactionInputs(changeAddress)(utxos)(Data_Lens_Setter.over((function () {
                                  var $78 = BalanceTx_Helpers["_body'"](Data_Profunctor_Strong.strongFn);
                                  var $79 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                  return function ($80) {
                                      return $78($79($80));
                                  };
                              })())(Data_Set.union(Types_Transaction.ordTransactionInput)(newTxInputs))(unbalancedTx));
                          };
                          throw new Error("Failed pattern match at BalanceTx (line 359, column 3 - line 364, column 69): " + [ v.constructor.name ]);
                      });
                  });
              });
          };
      };
  };
  var runBalancer = function (utxos) {
      return function (changeAddress) {
          var mainLoop = function (iteration) {
              return function (minFee) {
                  return function (unbalancedTx) {
                      var traceMainLoop = function (dictShow) {
                          return function (meta) {
                              return function (message) {
                                  return function (object) {
                                      var tagMessage = "mainLoop (iteration " + (Data_Show.show(Data_Show.showInt)(iteration) + ("): " + meta));
                                      return Control_Monad_Logger_Class.trace(Control_Monad_Logger_Class.monadLoggerExceptT(QueryM.monadLoggerQueryMExtended))(Data_Log_Tag.tag(tagMessage)("^"))(message + (": " + Data_Show.show(dictShow)(object)));
                                  };
                              };
                          };
                      };
                      var unbalancedTxWithMinFee = setTransactionMinFee(minFee)(unbalancedTx);
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(addTransactionInputs(changeAddress)(utxos)(unbalancedTxWithMinFee))(function (unbalancedTxWithInputs) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(traceMainLoop(Types_ScriptLookups.showUnattachedUnbalancedT)("added transaction inputs")("unbalancedTxWithInputs")(unbalancedTxWithInputs))(function () {
                              var prebalancedTx = addTransactionChangeOutput(changeAddress)(utxos)(unbalancedTxWithInputs);
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(traceMainLoop(BalanceTx_Types.showPrebalancedTransactio)("added transaction change output")("prebalancedTx")(prebalancedTx))(function () {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(BalanceTx_ExUnitsAndMinFee.evalExUnitsAndMinFee(prebalancedTx)(utxos))(function (v) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(traceMainLoop(Types_ScriptLookups.showUnattachedUnbalancedT)("calculated ex units and min fee")("balancedTx")(v.value0))(function () {
                                          var v1 = Data_Eq.eq(Data_BigInt.eqBigInt)(v.value1)(minFee);
                                          if (v1) {
                                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(BalanceTx_ExUnitsAndMinFee.finalizeTransaction(v.value0)(utxos)))(function (finalizedTransaction) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(traceMainLoop(BalanceTx_Types.showFinalizedTransaction)("finalized transaction")("finalizedTransaction")(finalizedTransaction))(function () {
                                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(finalizedTransaction);
                                                  });
                                              });
                                          };
                                          if (!v1) {
                                              return mainLoop(iteration + 1 | 0)(v.value1)(unbalancedTxWithInputs);
                                          };
                                          throw new Error("Failed pattern match at BalanceTx (line 221, column 5 - line 230, column 68): " + [ v1.constructor.name ]);
                                      });
                                  });
                              });
                          });
                      });
                  };
              };
          };
          var $81 = Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(mainLoop(1)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(addLovelacesToTransactionOutputs);
          return function ($82) {
              return Control_Monad_Except_Trans.runExceptT($81($82));
          };
      };
  };
  var balanceTxWithAddress = function (ownAddrs) {
      return function (unbalancedTx) {
          var unbalancedTxWithNetworkId = (function () {
              var transaction = Data_Lens_Getter.viewOn(unbalancedTx)(BalanceTx_Helpers["_transaction'"](Data_Lens_Internal_Forget.strongForget));
              return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Maybe.maybe(Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($83) {
                  return (function (v) {
                      return v.networkId;
                  })((function (v) {
                      return v.config;
                  })($83));
              }))(Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff)))(Data_Lens_Getter.viewOn(transaction)((function () {
                  var $84 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
                  var $85 = Cardano_Types_Transaction["_networkId"](Data_Lens_Internal_Forget.strongForget);
                  return function ($86) {
                      return $84($85($86));
                  };
              })())))(function (networkId) {
                  return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Lens_Setter.setJust((function () {
                      var $87 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                      var $88 = Cardano_Types_Transaction["_networkId"](Data_Profunctor_Strong.strongFn);
                      return function ($89) {
                          return $87($88($89));
                      };
                  })())(networkId)(transaction));
              });
          })();
          var setTransactionCollateral = function (changeAddr) {
              return function (transaction) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Data_Either.note(BalanceTx_Error.CouldNotGetCollateral.value))(QueryM_Utxos.getWalletCollateral)))(function (collateral) {
                      var collaterisedTx = BalanceTx_Collateral.addTxCollateral(collateral)(transaction);
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Reader_Class.asks(Control_Monad_Except_Trans.monadAskExceptT(QueryM.monadAskQueryEnvQueryMExt))((function () {
                          var $90 = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(function ($92) {
                              return (function (v) {
                                  return v.wallet;
                              })((function (v) {
                                  return v.runtime;
                              })($92));
                          })(Wallet.cip30Wallet);
                          return function ($91) {
                              return Data_Maybe.isJust($90($91));
                          };
                      })()))(function (isCip30) {
                          if (isCip30) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(QueryM.monadQueryMExtendedAff))(collaterisedTx);
                          };
                          return BalanceTx_Collateral.addTxCollateralReturn(collateral)(collaterisedTx)(changeAddr);
                      });
                  });
              };
          };
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Error_Class.liftMaybe(Control_Monad_Except_Trans.monadThrowExceptT(QueryM.monadQueryMExtendedAff))(BalanceTx_Error.CouldNotGetWalletAddress.value)(Data_Array.head(ownAddrs)))(function (changeAddr) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(QueryM_Utxos.utxosAt)(ownAddrs))((function () {
                  var $93 = Data_Functor.map(Data_Either.functorEither)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Map_Internal.union(Types_Transaction.ordTransactionInput))(Data_Map_Internal.empty));
                  var $94 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Either.note(BalanceTx_Error.CouldNotGetUtxos.value));
                  return function ($95) {
                      return $93($94($95));
                  };
              })())))(function (utxos) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))((function () {
                      var v = Data_Array["null"](Data_Lens_Getter.viewOn(unbalancedTx)(BalanceTx_Helpers["_redeemersTxIns"](Data_Lens_Internal_Forget.strongForget)));
                      if (v) {
                          return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(unbalancedTxWithNetworkId);
                      };
                      if (!v) {
                          return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(setTransactionCollateral(changeAddr))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(unbalancedTxWithNetworkId));
                      };
                      throw new Error("Failed pattern match at BalanceTx (line 133, column 5 - line 138, column 79): " + [ v.constructor.name ]);
                  })())(function (unbalancedCollTx) {
                      var allUtxos = Data_Map_Internal.union(Types_Transaction.ordTransactionInput)(utxos)(Data_Lens_Getter.viewOn(unbalancedTx)((function () {
                          var $96 = BalanceTx_Helpers["_unbalancedTx"](Data_Lens_Internal_Forget.strongForget);
                          var $97 = Types_UnbalancedTransaction["_utxoIndex"](Data_Lens_Internal_Forget.strongForget);
                          return function ($98) {
                              return $96($97($98));
                          };
                      })()));
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(QueryM.monadQueryMExtendedAff)(QueryM_Utxos.filterLockedUtxos(allUtxos)))(function (availableUtxos) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(QueryM.monadQueryMExtendedAff))(logTx(Control_Monad_Except_Trans.monadEffectExceptT(QueryM.monadEffectQueryMExtended))(Control_Monad_Logger_Class.monadLoggerExceptT(QueryM.monadLoggerQueryMExtended))("unbalancedCollTx")(availableUtxos)(unbalancedCollTx))(function () {
                              return Control_Monad_Except_Trans.ExceptT(runBalancer(availableUtxos)(changeAddr)(Data_Lens_Setter.set(BalanceTx_Helpers["_transaction'"](Data_Profunctor_Strong.strongFn))(unbalancedCollTx)(unbalancedTx)));
                          });
                      });
                  });
              });
          }));
      };
  };
  exports["balanceTxWithAddress"] = balanceTxWithAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.Logging"] = $PS["QueryM.Logging"] || {};
  var exports = $PS["QueryM.Logging"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var QueryM = $PS["QueryM"];                
  var setupLogs = function (logLevel) {
      return function (customLogger) {
          return function __do() {
              var logsRef = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref["new"](Data_List_Types.Nil.value))();
              var logger = QueryM.mkLogger(logLevel)(customLogger);
              var printLogs = function __do() {
                  var logs = Data_Functor.map(Effect.functorEffect)(Data_List.reverse)(Effect_Ref.read(logsRef))();
                  Effect_Ref.write(Data_List_Types.Nil.value)(logsRef)();
                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(logs)(function (logEntry) {
                      return logger(logEntry.level)(logEntry.message);
                  })();
              };
              var addLogEntry = function (msg) {
                  return Effect_Ref.modify_(Data_List_Types.Cons.create(msg))(logsRef);
              };
              var suppressedLogger = QueryM.mkLogger(logLevel)(Data_Maybe.Just.create((function () {
                  var $0 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                  return function ($1) {
                      return $0(addLogEntry($1));
                  };
              })()));
              return {
                  addLogEntry: addLogEntry,
                  logger: logger,
                  printLogs: printLogs,
                  suppressedLogger: suppressedLogger
              };
          };
      };
  };
  exports["setupLogs"] = setupLogs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Monad"] = $PS["Contract.Monad"] || {};
  var exports = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var QueryM = $PS["QueryM"];
  var QueryM_Logging = $PS["QueryM.Logging"];
  var ContractEnv = function (x) {
      return x;
  };
  var Contract = function (x) {
      return x;
  };
  var monadThrowErrorContract = QueryM.monadThrowErrorQueryMExte;
  var monadLoggerContract = QueryM.monadLoggerQueryMExtended;
  var monadErrorErrorContract = QueryM.monadErrorErrorQueryMExte;
  var monadEffectContract = QueryM.monadEffectQueryMExtended;
  var monadContract = QueryM.monadQueryMExtendedAff;
  var monadAskContractEnvContra = {
      ask: Contract(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(ContractEnv)(Control_Monad_Reader_Class.ask(QueryM.monadAskQueryEnvQueryMExt))),
      Monad0: function () {
          return monadContract;
      }
  };
  var monadAffContract = QueryM.monadAffQueryMExtendedAff;                        
  var functorContract = QueryM.functorQueryMExtended(Effect_Aff.functorAff);
  var bindContract = QueryM.bindQueryMExtended(Effect_Aff.bindAff);
  var applicativeContract = QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff);
  var wrapContract = (function () {
      var $75 = Data_Newtype.wrap();
      return function ($76) {
          return $75(QueryM.liftQueryM($76));
      };
  })();
  var withContractEnv = function (v) {
      return function (action) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(QueryM_Logging.setupLogs(v.logLevel)(v.customLogger)))(function (v1) {
              var config = {
                  ctlServerConfig: v.ctlServerConfig,
                  ogmiosConfig: v.ogmiosConfig,
                  datumCacheConfig: v.datumCacheConfig,
                  networkId: v.networkId,
                  logLevel: v.logLevel,
                  walletSpec: v.walletSpec,
                  customLogger: (function () {
                      if (v.suppressLogs) {
                          return Data_Maybe.Just.create((function () {
                              var $77 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                              return function ($78) {
                                  return $77(v1.addLogEntry($78));
                              };
                          })());
                      };
                      return v.customLogger;
                  })(),
                  suppressLogs: v.suppressLogs
              };
              return QueryM.withQueryRuntime(config)(function (runtime) {
                  var contractEnv = Data_Newtype.wrap()({
                      runtime: runtime,
                      config: config,
                      extraConfig: v.extraConfig
                  });
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(action(contractEnv)))(function (res) {
                      if (res instanceof Data_Either.Left) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                              Control_Applicative.when(Effect.applicativeEffect)(v.suppressLogs)(v1.printLogs)();
                              return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(res.value0)();
                          });
                      };
                      if (res instanceof Data_Either.Right) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(res.value0);
                      };
                      throw new Error("Failed pattern match at Contract.Monad (line 372, column 5 - line 376, column 34): " + [ res.constructor.name ]);
                  });
              });
          });
      };
  };
  var throwContractError = function (dictShow) {
      var $79 = Effect_Class.liftEffect(monadEffectContract);
      var $80 = Data_Show.show(dictShow);
      return function ($81) {
          return $79(Effect_Exception["throw"]($80($81)));
      };
  };
  var runContractInEnv = function (env) {
      return function (contract) {
          return Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(Data_Newtype.unwrap()(env))(Data_Newtype.unwrap()(Data_Newtype.unwrap()(contract)));
      };
  };
  var runContract = function (params) {
      return function (contract) {
          return withContractEnv(params)(function (config) {
              return runContractInEnv(config)(contract);
          });
      };
  };
  var liftContractM = function (str) {
      return Data_Maybe.maybe(Effect_Class.liftEffect(monadEffectContract)(Effect_Exception["throw"](str)))(Control_Applicative.pure(applicativeContract));
  };
  var liftedM = function (str) {
      return function (cm) {
          return Control_Bind.bind(bindContract)(cm)(liftContractM(str));
      };
  };
  var liftContractE$prime = function (str) {
      var $82 = liftContractM(str);
      return function ($83) {
          return $82(Data_Either.hush($83));
      };
  };
  var liftedE$prime = function (str) {
      return function (em) {
          return Control_Bind.bind(bindContract)(em)(liftContractE$prime(str));
      };
  };
  var liftContractE = function (dictShow) {
      return Data_Either.either(throwContractError(dictShow))(Control_Applicative.pure(applicativeContract));
  };
  var liftedE = function (dictShow) {
      return Control_Bind.bindFlipped(bindContract)(liftContractE(dictShow));
  };
  exports["liftContractE"] = liftContractE;
  exports["liftContractM"] = liftContractM;
  exports["liftedE"] = liftedE;
  exports["liftedE'"] = liftedE$prime;
  exports["liftedM"] = liftedM;
  exports["runContract"] = runContract;
  exports["throwContractError"] = throwContractError;
  exports["wrapContract"] = wrapContract;
  exports["functorContract"] = functorContract;
  exports["applicativeContract"] = applicativeContract;
  exports["bindContract"] = bindContract;
  exports["monadContract"] = monadContract;
  exports["monadEffectContract"] = monadEffectContract;
  exports["monadAffContract"] = monadAffContract;
  exports["monadThrowErrorContract"] = monadThrowErrorContract;
  exports["monadErrorErrorContract"] = monadErrorErrorContract;
  exports["monadLoggerContract"] = monadLoggerContract;
  exports["monadAskContractEnvContra"] = monadAskContractEnvContra;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.NetworkId"] = $PS["QueryM.NetworkId"] || {};
  var exports = $PS["QueryM.NetworkId"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var QueryM = $PS["QueryM"];                
  var getNetworkId = Control_Monad_Reader_Class.asks(QueryM.monadAskQueryEnvQueryMExt)(function ($2) {
      return (function (v) {
          return v.networkId;
      })((function (v) {
          return v.config;
      })($2));
  });
  exports["getNetworkId"] = getNetworkId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Address"] = $PS["Contract.Address"] || {};
  var exports = $PS["Contract.Address"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var QueryM = $PS["QueryM"];
  var QueryM_NetworkId = $PS["QueryM.NetworkId"];
  var Serialization_Address = $PS["Serialization.Address"];
  var ownStakePubKeyHash = Contract_Monad.wrapContract(QueryM.ownStakePubKeyHash);
  var ownPaymentPubKeyHash = Contract_Monad.wrapContract(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.ownPaymentPubKeyHashes)(function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
  }));
  var getWalletAddress = Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM.getWalletAddresses)(function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Array.head);
  })))(function (mbAddr) {
      return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mbAddr)((function () {
          var $28 = Contract_Monad.liftedM("getWalletAddress: failed to deserialize address");
          var $29 = Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff));
          return function ($30) {
              return $28(Contract_Monad.wrapContract($29(Plutus_Conversion_Address.toPlutusAddress($30))));
          };
      })());
  });
  var getNetworkId = Contract_Monad.wrapContract(QueryM_NetworkId.getNetworkId);
  var addressWithNetworkTagToBech32 = function ($37) {
      return Serialization_Address.addressBech32(Plutus_Conversion_Address.fromPlutusAddressWithNetworkTag($37));
  };
  var addressToBech32 = function (address) {
      return Control_Bind.bind(Contract_Monad.bindContract)(getNetworkId)(function (networkId) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(addressWithNetworkTagToBech32({
              address: address,
              networkId: networkId
          }));
      });
  };
  exports["getNetworkId"] = getNetworkId;
  exports["addressToBech32"] = addressToBech32;
  exports["getWalletAddress"] = getWalletAddress;
  exports["ownPaymentPubKeyHash"] = ownPaymentPubKeyHash;
  exports["ownStakePubKeyHash"] = ownStakePubKeyHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Chain"] = $PS["Contract.Chain"] || {};
  var exports = $PS["Contract.Chain"];
  var Contract_Monad = $PS["Contract.Monad"];
  var QueryM = $PS["QueryM"];
  var getTip = Contract_Monad.wrapContract(QueryM.getChainTip);
  exports["getTip"] = getTip;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Log"] = $PS["Contract.Log"] || {};
  var exports = $PS["Contract.Log"];
  var Aeson = $PS["Aeson"];
  var Control_Monad_Logger_Class = $PS["Control.Monad.Logger.Class"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];                
  var logWarn$prime = function (dictMonadLogger) {
      return Control_Monad_Logger_Class.warn(dictMonadLogger)(Data_Map_Internal.empty);
  };
  var logInfo$prime = function (dictMonadLogger) {
      return Control_Monad_Logger_Class.info(dictMonadLogger)(Data_Map_Internal.empty);
  };
  var logInfo = function (dictMonadLogger) {
      return Control_Monad_Logger_Class.info(dictMonadLogger);
  };
  var logDebug$prime = function (dictMonadLogger) {
      return Control_Monad_Logger_Class.debug(dictMonadLogger)(Data_Map_Internal.empty);
  };
  var logAeson = function (dictMonadLogger) {
      return function (dictEncodeAeson) {
          return function (logger) {
              var $22 = Aeson.encodeAeson(dictEncodeAeson);
              return function ($23) {
                  return logger(Aeson.stringifyAeson($22($23)));
              };
          };
      };
  };
  var logAesonInfo = function (dictMonadLogger) {
      return function (dictEncodeAeson) {
          return logAeson(dictMonadLogger)(dictEncodeAeson)(logInfo$prime(dictMonadLogger));
      };
  };
  exports["logDebug'"] = logDebug$prime;
  exports["logInfo"] = logInfo;
  exports["logInfo'"] = logInfo$prime;
  exports["logWarn'"] = logWarn$prime;
  exports["logAesonInfo"] = logAesonInfo;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Prelude"] = $PS["Contract.Prelude"] || {};
  var exports = $PS["Contract.Prelude"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var mconcat = function (dictFoldable) {
      return function (dictMonoid) {
          return Data_Foldable.foldr(dictFoldable)(Data_Semigroup.append(dictMonoid.Semigroup0()))(Data_Monoid.mempty(dictMonoid));
      };
  };
  exports["mconcat"] = mconcat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.ScriptLookups"] = $PS["Contract.ScriptLookups"] || {};
  var exports = $PS["Contract.ScriptLookups"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];                
  var mkUnbalancedTx = function (dictValidatorTypes) {
      return function (dictIsData) {
          return function (dictIsData1) {
              return function (lookups) {
                  var $6 = Types_ScriptLookups.mkUnbalancedTx()(dictIsData)(dictIsData1)(lookups);
                  return function ($7) {
                      return Contract_Monad.wrapContract($6($7));
                  };
              };
          };
      };
  };
  exports["mkUnbalancedTx"] = mkUnbalancedTx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Time"] = $PS["Contract.Time"] || {};
  var exports = $PS["Contract.Time"];
  var Contract_Monad = $PS["Contract.Monad"];
  var QueryM_EraSummaries = $PS["QueryM.EraSummaries"];
  var QueryM_SystemStart = $PS["QueryM.SystemStart"];        
  var getSystemStart = Contract_Monad.wrapContract(QueryM_SystemStart.getSystemStart);
  var getEraSummaries = Contract_Monad.wrapContract(QueryM_EraSummaries.getEraSummaries);
  exports["getEraSummaries"] = getEraSummaries;
  exports["getSystemStart"] = getSystemStart;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Seconds = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };                            
  var durationSeconds = {
      fromDuration: Data_Newtype.over()()(Seconds)(function (v) {
          return v * 1000.0;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function (v) {
          return v / 1000.0;
      })
  };
  exports["fromDuration"] = fromDuration;
  exports["Seconds"] = Seconds;
  exports["durationSeconds"] = durationSeconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.AwaitTxConfirmed"] = $PS["QueryM.AwaitTxConfirmed"] || {};
  var exports = $PS["QueryM.AwaitTxConfirmed"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var QueryM = $PS["QueryM"];
  var QueryM_DatumCacheWsp = $PS["QueryM.DatumCacheWsp"];
  var awaitTxConfirmedWithTimeout = function (timeoutSeconds) {
      return function (txHash) {
          var timeout = Data_Time_Duration.fromDuration(Data_Time_Duration.durationSeconds)(timeoutSeconds);
          var waitAndFail = Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Effect_Aff.delay(timeout)))(function () {
              return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(false);
          });
          var delayTime = Data_Newtype.wrap()(1000.0);
          var findTx = Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))((function () {
              var $12 = Data_Newtype.unwrap();
              return function ($13) {
                  return Data_Maybe.isJust($12($13));
              };
          })())(QueryM.mkDatumCacheRequest(QueryM_DatumCacheWsp.getTxByHash)(function (v) {
              return v.getTxByHash;
          })(txHash)))(function (isTxFound) {
              if (isTxFound) {
                  return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(true);
              };
              return Control_Apply.applySecond(QueryM.applyQueryMExtended(Effect_Aff.applyAff))(Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Effect_Aff.delay(delayTime)))(findTx);
          });
          var $7 = Data_Newtype.unwrap()(timeoutSeconds) === Data_Number.infinity;
          if ($7) {
              return Data_Functor["void"](QueryM.functorQueryMExtended(Effect_Aff.functorAff))(findTx);
          };
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Parallel.parOneOf(QueryM.parallelQueryMExtendedPar)(QueryM.alternativeQueryMExtended(Effect_Aff.alternativeParAff))(Data_Foldable.foldableArray)(Data_Functor.functorArray)([ findTx, waitAndFail ]))(function (txFound) {
              if (txFound) {
                  return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Unit.unit);
              };
              return Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Effect_Exception["throw"]("awaitTxConfirmedWithTimeout: timeout exceeded, Transaction not confirmed"));
          });
      };
  };
  exports["awaitTxConfirmedWithTimeout"] = awaitTxConfirmedWithTimeout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["QueryM.Sign"] = $PS["QueryM.Sign"] || {};
  var exports = $PS["QueryM.Sign"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Wallet = $PS["Wallet"];                
  var walletWaitForInputs = function (txInputs) {
      return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not get addresses"))(QueryM.getWalletAddresses))(function (ownAddrs) {
          return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.map(QueryM.functorQueryMExtended(Effect_Aff.functorAff))((function () {
              var $9 = Data_Map_Internal.filter(Types_Transaction.ordTransactionInput)((function () {
                  var $12 = Data_Function.flip(Data_Array.elem(Serialization_Address.eqAddress))(ownAddrs);
                  var $13 = Data_Newtype.unwrap();
                  return function ($14) {
                      return $12((function (v) {
                          return v.address;
                      })($13($14)));
                  };
              })());
              var $10 = Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray);
              return function ($11) {
                  return $9($10($11));
              };
          })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(function (txInput) {
              return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Helpers.liftedM(QueryM.monadErrorErrorQueryMExte)(Effect_Exception.error("Could not get utxo"))(QueryM_Utxos.getUtxo(txInput)))(function (utxo) {
                  return Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(new Data_Tuple.Tuple(txInput, utxo));
              });
          })(txInputs)))(function (ownInputUtxos) {
              var go = function (attempts) {
                  return Control_Bind.bind(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Data_Functor.mapFlipped(QueryM.functorQueryMExtended(Effect_Aff.functorAff))(QueryM_Utxos.getWalletUtxos)(Data_Maybe.fromMaybe(Data_Map_Internal.empty)))(function (walletUtxos) {
                      return Control_Applicative.unless(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(Data_Map_Internal.isSubmap(Types_Transaction.ordTransactionInput)(Cardano_Types_Transaction.eqTransactionOutput)(ownInputUtxos)(walletUtxos))(Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Control_Applicative.when(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff))(attempts === 0)(Effect_Class.liftEffect(QueryM.monadEffectQueryMExtended)(Effect_Exception["throw"]("walletWaitForInputs: timeout while waiting for wallet" + (" UTxO set and CTL query layer UTxO set to synchronize. UTxOs" + (" from Ogmios: " + (Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(ownInputUtxos) + (", UTxOs from wallet: " + (Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(walletUtxos) + (", UTxOs that didn't appear in the wallet: " + Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Cardano_Types_Transaction.showTransactionOutput))(Data_Map_Internal.difference(Types_Transaction.ordTransactionInput)(ownInputUtxos)(walletUtxos))))))))))))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Effect_Aff.delay(Data_Newtype.wrap()(1000.0))))(function () {
                              return go(attempts - 1 | 0);
                          });
                      }));
                  });
              };
              return go(150);
          });
      });
  };
  var signTransaction = function (tx) {
      return QueryM.withMWallet(function (v) {
          if (v instanceof Wallet.Nami) {
              return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTx)(tx);
              }));
          };
          if (v instanceof Wallet.Gero) {
              return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTx)(tx);
              }));
          };
          if (v instanceof Wallet.Flint) {
              return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTx)(tx);
              }));
          };
          if (v instanceof Wallet.Eternl) {
              var txInputs = Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Lens_Getter.viewOn(tx)((function () {
                  var $15 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
                  var $16 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
                  return function ($17) {
                      return $15($16($17));
                  };
              })()));
              return Control_Bind.discard(Control_Bind.discardUnit)(QueryM.bindQueryMExtended(Effect_Aff.bindAff))(walletWaitForInputs(txInputs))(function () {
                  return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                      return Data_Function.flip(nw.signTx)(tx);
                  }));
              });
          };
          if (v instanceof Wallet.Lode) {
              return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(QueryM.callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTx)(tx);
              }));
          };
          if (v instanceof Wallet.KeyWallet) {
              return Effect_Aff_Class.liftAff(QueryM.monadAffQueryMExtendedAff)(Control_Bind.bind(Effect_Aff.bindAff)((Data_Newtype.unwrap()(v.value0)).signTx(tx))(function (witnessSet) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(Data_Lens_Setter.appendOver(Cardano_Types_Transaction.semigroupTransactionWitne)(Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn))(witnessSet)(tx)));
              }));
          };
          throw new Error("Failed pattern match at QueryM.Sign (line 29, column 34 - line 42, column 50): " + [ v.constructor.name ]);
      });
  };
  exports["signTransaction"] = signTransaction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Transaction"] = $PS["Contract.Transaction"] || {};
  var exports = $PS["Contract.Transaction"];
  var Aeson = $PS["Aeson"];
  var BalanceTx = $PS["BalanceTx"];
  var BalanceTx_Error = $PS["BalanceTx.Error"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Hashing = $PS["Hashing"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var QueryM = $PS["QueryM"];
  var QueryM_AwaitTxConfirmed = $PS["QueryM.AwaitTxConfirmed"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var QueryM_Sign = $PS["QueryM.Sign"];
  var Serialization = $PS["Serialization"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_UsedTxOuts = $PS["Types.UsedTxOuts"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var BalancedSignedTransaction = function (x) {
      return x;
  };                                                                               
  var withUsedTxouts = function (f) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
          var $33 = Data_Newtype.unwrap();
          return function ($34) {
              return (function (v) {
                  return v.usedTxOuts;
              })((function (v) {
                  return v.runtime;
              })($33($34)));
          };
      })()))(Control_Monad_Reader_Trans.runReaderT(f));
  };
  var submitE = function (tx) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Serialization.convertTransaction(Data_Newtype.unwrap()(tx))))(function (cslTx) {
          var txHash = Hashing.transactionHash(cslTx);
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logDebug'"](Contract_Monad.monadLoggerContract)("Pre-calculated tx hash: " + Data_Show.show(Types_Transaction.showTransactionHash)(txHash)))(function () {
              var txCborBytes = Data_Newtype.wrap()(Serialization.toBytes(Untagged_Union.asOneOf()(cslTx)));
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM.submitTxOgmios(Data_Newtype.unwrap()(txHash))(txCborBytes)))(function (result) {
                  return Control_Applicative.pure(Contract_Monad.applicativeContract)((function () {
                      if (result instanceof QueryM_Ogmios.SubmitTxSuccess) {
                          return Data_Either.Right.create(Data_Newtype.wrap()(result.value0));
                      };
                      if (result instanceof QueryM_Ogmios.SubmitFail) {
                          return new Data_Either.Left(result.value0);
                      };
                      throw new Error("Failed pattern match at Contract.Transaction (line 296, column 10 - line 298, column 33): " + [ result.constructor.name ]);
                  })());
              });
          });
      });
  };
  var submit = function (tx) {
      return Control_Bind.bind(Contract_Monad.bindContract)(submitE(tx))(function (result) {
          if (result instanceof Data_Either.Right) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(result.value0);
          };
          if (result instanceof Data_Either.Left) {
              return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("`submit` call failed. Error from Ogmios: " + Data_Show.show(Data_Show.showArray(Aeson.showAeson))(result.value0)));
          };
          throw new Error("Failed pattern match at Contract.Transaction (line 278, column 3 - line 281, column 63): " + [ result.constructor.name ]);
      });
  };
  var signTransaction = function ($40) {
      return Contract_Monad.wrapContract(QueryM_Sign.signTransaction($40));
  };
  var signTransaction$prime = (function () {
      var $41 = Data_Functor.map(Contract_Monad.functorContract)(Data_Functor.map(Data_Maybe.functorMaybe)(BalancedSignedTransaction));
      var $42 = Data_Newtype.unwrap();
      return function ($43) {
          return $41(signTransaction($42($43)));
      };
  })();
  var balanceTxsWithAddresses = function (dictTraversable) {
      return function (ownAddrs) {
          return function (unbalancedTxs) {
              var uutxToTx = (function () {
                  var $63 = Data_Newtype.unwrap();
                  var $64 = Data_Newtype.unwrap();
                  return function ($65) {
                      return (function (v) {
                          return v.transaction;
                      })($63((function (v) {
                          return v.unbalancedTx;
                      })($64($65))));
                  };
              })();
              var unlockAllOnError = function (f) {
                  return Control_Monad_Error_Class.catchError(Contract_Monad.monadErrorErrorContract)(f)(function (e) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Data_Foldable.for_(Contract_Monad.applicativeContract)(dictTraversable.Foldable1())(unbalancedTxs)((function () {
                          var $66 = Types_UsedTxOuts.unlockTransactionInputs(Control_Monad_Reader_Trans.monadAskReaderT(Contract_Monad.monadContract))(Control_Monad_Reader_Trans.monadEffectReader(Contract_Monad.monadEffectContract));
                          return function ($67) {
                              return withUsedTxouts($66(uutxToTx($67)));
                          };
                      })()))(function () {
                          return Control_Monad_Error_Class.throwError(Contract_Monad.monadThrowErrorContract)(e);
                      });
                  });
              };
              var balanceAndLock = function (unbalancedTx) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
                      var $68 = Data_Newtype.unwrap();
                      return function ($69) {
                          return (function (v) {
                              return v.networkId;
                          })((function (v) {
                              return v.config;
                          })($68($69)));
                      };
                  })()))(function (networkId) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(BalanceTx_Error.showBalanceTxError)(Contract_Monad.wrapContract(BalanceTx.balanceTxWithAddress(Data_Functor.map(Data_Functor.functorArray)(Plutus_Conversion_Address.fromPlutusAddress(networkId))(ownAddrs))(unbalancedTx))))(function (balancedTx) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Data_Functor["void"](Contract_Monad.functorContract)(withUsedTxouts(Types_UsedTxOuts.lockTransactionInputs(Control_Monad_Reader_Trans.monadAskReaderT(Contract_Monad.monadContract))(Control_Monad_Reader_Trans.monadErrorReaderT(Contract_Monad.monadErrorErrorContract))(Control_Monad_Reader_Trans.monadEffectReader(Contract_Monad.monadEffectContract))(Data_Newtype.unwrap()(balancedTx)))))(function () {
                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(balancedTx);
                          });
                      });
                  });
              };
              return unlockAllOnError(Data_Traversable.traverse(dictTraversable)(Contract_Monad.applicativeContract)(balanceAndLock)(unbalancedTxs));
          };
      };
  };
  var balanceTxs = function (dictTraversable) {
      return function (unbalancedTxs) {
          var walletAddresses = Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM.getWalletAddresses))(function (mbAddrs) {
              return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mbAddrs)(function (addrs) {
                  return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(addrs)((function () {
                      var $70 = Contract_Monad.liftedM("getWalletAddress: failed to deserialize address");
                      var $71 = Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff));
                      return function ($72) {
                          return $70(Contract_Monad.wrapContract($71(Plutus_Conversion_Address.toPlutusAddress($72))));
                      };
                  })());
              });
          });
          return Control_Bind.bind(Contract_Monad.bindContract)(walletAddresses)(function (mbOwnAddrs) {
              if (mbOwnAddrs instanceof Data_Maybe.Nothing) {
                  return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Failed to get own Address"));
              };
              if (mbOwnAddrs instanceof Data_Maybe.Just) {
                  return balanceTxsWithAddresses(dictTraversable)(mbOwnAddrs.value0)(unbalancedTxs);
              };
              throw new Error("Failed pattern match at Contract.Transaction (line 484, column 3 - line 488, column 53): " + [ mbOwnAddrs.constructor.name ]);
          });
      };
  };                                                                                                                                              
  var balanceTxWithAddress = function (ownAddresses) {
      return function (tx) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
              var $73 = Data_Newtype.unwrap();
              return function ($74) {
                  return (function (v) {
                      return v.networkId;
                  })((function (v) {
                      return v.config;
                  })($73($74)));
              };
          })()))(function (networkId) {
              return Contract_Monad.wrapContract(BalanceTx.balanceTxWithAddress(Data_Functor.map(Data_Functor.functorArray)(Plutus_Conversion_Address.fromPlutusAddress(networkId))(ownAddresses))(tx));
          });
      };
  };                           
  var balanceAndSignTxs = function (txs) {
      return Control_Bind.bind(Contract_Monad.bindContract)(balanceTxs(Data_Traversable.traversableArray)(txs))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)((function () {
          var $80 = Contract_Monad.liftedM("error signing a transaction");
          return function ($81) {
              return $80(signTransaction$prime($81));
          };
      })()));
  };
  var internalBalanceAndSignTx = function (tx) {
      return Control_Bind.bind(Contract_Monad.bindContract)(balanceAndSignTxs([ tx ]))(function (v) {
          if (v.length === 1) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(v[0]);
          };
          return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Unexpected internal error during transaction signing"));
      });
  };   
  var balanceAndSignTx = function (dictWarn) {
      return function (tx) {
          return Data_Functor.map(Contract_Monad.functorContract)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(internalBalanceAndSignTx(tx));
      };
  };
  var awaitTxConfirmedWithTimeout = function (timeout) {
      var $87 = QueryM_AwaitTxConfirmed.awaitTxConfirmedWithTimeout(timeout);
      var $88 = Data_Newtype.unwrap();
      return function ($89) {
          return Contract_Monad.wrapContract($87($88($89)));
      };
  };
  exports["awaitTxConfirmedWithTimeout"] = awaitTxConfirmedWithTimeout;
  exports["balanceAndSignTx"] = balanceAndSignTx;
  exports["submit"] = submit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var getField = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["IsData"] = $PS["IsData"] || {};
  var exports = $PS["IsData"];
  var isData = function (dictFromData) {
      return function (dictToData) {
          return {
              FromData0: function () {
                  return dictFromData;
              },
              ToData1: function () {
                  return dictToData;
              }
          };
      };
  };
  exports["isData"] = isData;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["TypeLevel.RowList.Unordered.Indexed"] = $PS["TypeLevel.RowList.Unordered.Indexed"] || {};
  var exports = $PS["TypeLevel.RowList.Unordered.Indexed"];
  var getIndexWithLabelConsI = function (dictGetIndexWithLabel) {
      return function (dictAllUniqueLabelsI) {
          return function (dictUniqueIndices) {
              return function (dictIsSymbol) {
                  return function (dictKnownNat) {
                      return {
                          IsSymbol0: dictGetIndexWithLabel.IsSymbol0
                      };
                  };
              };
          };
      };
  };
  var getIndexWithLabelConsI1 = function (dictAllUniqueLabelsI) {
      return function (dictUniqueIndices) {
          return function (dictIsSymbol) {
              return function (dictKnownNat) {
                  return {
                      IsSymbol0: function () {
                          return dictIsSymbol;
                      }
                  };
              };
          };
      };
  };
  exports["getIndexWithLabelConsI1"] = getIndexWithLabelConsI1;
  exports["getIndexWithLabelConsI"] = getIndexWithLabelConsI;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types"] = $PS["Types"] || {};
  var exports = $PS["Types"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semiring = $PS["Data.Semiring"];
  var FromData = $PS["FromData"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var ToData = $PS["ToData"];
  var TypeLevel_Nat = $PS["TypeLevel.Nat"];
  var TypeLevel_RowList_Unordered_Indexed = $PS["TypeLevel.RowList.Unordered.Indexed"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var Bonded = (function () {
      function Bonded() {

      };
      Bonded.value = new Bonded();
      return Bonded;
  })();
  var Unbonded = (function () {
      function Unbonded() {

      };
      Unbonded.value = new Unbonded();
      return Unbonded;
  })();
  var MintHead = (function () {
      function MintHead(value0) {
          this.value0 = value0;
      };
      MintHead.create = function (value0) {
          return new MintHead(value0);
      };
      return MintHead;
  })();
  var MintInBetween = (function () {
      function MintInBetween(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MintInBetween.create = function (value0) {
          return function (value1) {
              return new MintInBetween(value0, value1);
          };
      };
      return MintInBetween;
  })();
  var MintEnd = (function () {
      function MintEnd(value0) {
          this.value0 = value0;
      };
      MintEnd.create = function (value0) {
          return new MintEnd(value0);
      };
      return MintEnd;
  })();
  var Entry = function (x) {
      return x;
  };
  var BurnHead = (function () {
      function BurnHead(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BurnHead.create = function (value0) {
          return function (value1) {
              return new BurnHead(value0, value1);
          };
      };
      return BurnHead;
  })();
  var BurnOther = (function () {
      function BurnOther(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BurnOther.create = function (value0) {
          return function (value1) {
              return new BurnOther(value0, value1);
          };
      };
      return BurnOther;
  })();
  var BurnSingle = (function () {
      function BurnSingle(value0) {
          this.value0 = value0;
      };
      BurnSingle.create = function (value0) {
          return new BurnSingle(value0);
      };
      return BurnSingle;
  })();
  var ListInsert = (function () {
      function ListInsert(value0) {
          this.value0 = value0;
      };
      ListInsert.create = function (value0) {
          return new ListInsert(value0);
      };
      return ListInsert;
  })();
  var ListRemove = (function () {
      function ListRemove(value0) {
          this.value0 = value0;
      };
      ListRemove.create = function (value0) {
          return new ListRemove(value0);
      };
      return ListRemove;
  })();
  var StateDatum = (function () {
      function StateDatum(value0) {
          this.value0 = value0;
      };
      StateDatum.create = function (value0) {
          return new StateDatum(value0);
      };
      return StateDatum;
  })();
  var EntryDatum = (function () {
      function EntryDatum(value0) {
          this.value0 = value0;
      };
      EntryDatum.create = function (value0) {
          return new EntryDatum(value0);
      };
      return EntryDatum;
  })();
  var AssetDatum = (function () {
      function AssetDatum() {

      };
      AssetDatum.value = new AssetDatum();
      return AssetDatum;
  })();
  var AdminAct = (function () {
      function AdminAct() {

      };
      AdminAct.value = new AdminAct();
      return AdminAct;
  })();
  var StakeAct = (function () {
      function StakeAct(value0) {
          this.value0 = value0;
      };
      StakeAct.create = function (value0) {
          return new StakeAct(value0);
      };
      return StakeAct;
  })();
  var WithdrawAct = (function () {
      function WithdrawAct(value0) {
          this.value0 = value0;
      };
      WithdrawAct.create = function (value0) {
          return new WithdrawAct(value0);
      };
      return WithdrawAct;
  })();
  var CloseAct = (function () {
      function CloseAct() {

      };
      CloseAct.value = new CloseAct();
      return CloseAct;
  })();
  var genericMintingAction_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new MintHead(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new MintInBetween(x.value0.value0.value0, x.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new MintEnd(x.value0.value0);
          };
          throw new Error("Failed pattern match at Types (line 272, column 1 - line 272, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof MintHead) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof MintInBetween) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
          };
          if (x instanceof MintEnd) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at Types (line 272, column 1 - line 272, column 40): " + [ x.constructor.name ]);
      }
  };
  var toDataMintingAction = {
      toData: ToData.genericToData(genericMintingAction_)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "MintHead";
          }
      })(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "MintHead";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "MintHead";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "MintInBetween";
          }
      })(ToData.toDataArgsProduct(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "MintInBetween";
          }
      }))(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "MintInBetween";
          }
      })))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "MintInBetween";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "MintInBetween";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "MintEnd";
          }
      })(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "MintEnd";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "MintEnd";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "MintEnd";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "MintEnd";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  var genericListAction_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ListInsert(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new ListRemove(x.value0);
          };
          throw new Error("Failed pattern match at Types (line 375, column 1 - line 375, column 37): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ListInsert) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ListRemove) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at Types (line 375, column 1 - line 375, column 37): " + [ x.constructor.name ]);
      }
  };
  var genericEntry_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var toDataEntry = {
      toData: ToData.genericToData(genericEntry_)(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "Entry";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "Entry";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperCons(ToData.toDataByteArray)(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(ToData.toDataByteArray))(ToData.toDataArgsRLHelperCons(Types_Rational.toDataRational)(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "staked";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()()({
          reflectSymbol: function () {
              return "rewards";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))()()()({
          reflectSymbol: function () {
              return "next";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))))()()()({
          reflectSymbol: function () {
              return "newDeposit";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
          reflectSymbol: function () {
              return "key";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "deposited";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "Entry";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))
  };
  var genericBurningAction_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new BurnHead(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new BurnOther(x.value0.value0.value0, x.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new BurnSingle(x.value0.value0);
          };
          throw new Error("Failed pattern match at Types (line 301, column 1 - line 301, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof BurnHead) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof BurnOther) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
          };
          if (x instanceof BurnSingle) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at Types (line 301, column 1 - line 301, column 40): " + [ x.constructor.name ]);
      }
  };
  var toDataBurningAction = {
      toData: ToData.genericToData(genericBurningAction_)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "BurnHead";
          }
      })(ToData.toDataArgsProduct(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "BurnHead";
          }
      }))(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "BurnHead";
          }
      })))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "BurnHead";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "BurnOther";
          }
      })(ToData.toDataArgsProduct(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "BurnOther";
          }
      }))(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "BurnOther";
          }
      })))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "BurnOther";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "BurnOther";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "BurnSingle";
          }
      })(ToData.toDataArgsArgument(Types_Transaction.toDataTransactionInput)({
          reflectSymbol: function () {
              return "BurnSingle";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "BurnSingle";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "BurnSingle";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "BurnSingle";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  var toDataListAction = {
      toData: ToData.genericToData(genericListAction_)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "ListInsert";
          }
      })(ToData.toDataArgsArgument(toDataMintingAction)({
          reflectSymbol: function () {
              return "ListInsert";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "ListInsert";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "ListRemove";
          }
      })(ToData.toDataArgsArgument(toDataBurningAction)({
          reflectSymbol: function () {
              return "ListRemove";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "ListRemove";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "ListRemove";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))
  };
  var genericBondedStakingDatum = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new StateDatum(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new EntryDatum(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return AssetDatum.value;
          };
          throw new Error("Failed pattern match at Types (line 186, column 1 - line 186, column 45): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof StateDatum) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof EntryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof AssetDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
          };
          throw new Error("Failed pattern match at Types (line 186, column 1 - line 186, column 45): " + [ x.constructor.name ]);
      }
  };
  var toDataBondedStakingDatum = {
      toData: ToData.genericToData(genericBondedStakingDatum)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(ToData.toDataByteArray))(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "maybeEntryName";
          }
      })({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(toDataEntry)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "entry";
          }
      })({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(ToData.toDataArgsNoArguments({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  var genericBondedStakingActio = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return AdminAct.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new StakeAct(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new WithdrawAct(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return CloseAct.value;
          };
          throw new Error("Failed pattern match at Types (line 258, column 1 - line 258, column 46): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof AdminAct) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof StakeAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof WithdrawAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof CloseAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at Types (line 258, column 1 - line 258, column 46): " + [ x.constructor.name ]);
      }
  };
  var toDataBondedStakingAction = {
      toData: ToData.genericToData(genericBondedStakingActio)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })(ToData.toDataArgsNoArguments({
          reflectSymbol: function () {
              return "AdminAct";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(toDataMintingAction))(ToData.toDataArgsRLHelperCons(Types_Natural.toDataNatural)(ToData.toDataArgsRLHelperCons(Types_PubKeyHash.toDataPaymentPubKeyHash)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "stakeHolder";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
          reflectSymbol: function () {
              return "stakeAmount";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "mintingAction";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(toDataBurningAction)(ToData.toDataArgsRLHelperCons(Types_PubKeyHash.toDataPaymentPubKeyHash)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "stakeHolder";
          }
      })({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "burningAction";
          }
      })({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(ToData.toDataArgsNoArguments({
          reflectSymbol: function () {
              return "CloseAct";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))))
  };
  var genericAssetClass_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var toDataAssetClass = {
      toData: ToData.genericToData(genericAssetClass_)(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "AssetClass";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "AssetClass";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(ToData.toDataArgsRLHelperCons(Types_TokenName.toDataTokenName)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "tokenName";
          }
      })({
          reflectSymbol: function () {
              return "AssetClass";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
          reflectSymbol: function () {
              return "currencySymbol";
          }
      })({
          reflectSymbol: function () {
              return "AssetClass";
          }
      })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AssetClass";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))
  };
  var toDataBondedPoolParams = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(Types_Natural.toDataNatural)(v.iterations), ToData.toData(ToData.toDataBigInt)(v.start), ToData.toData(ToData.toDataBigInt)(v.end), ToData.toData(ToData.toDataBigInt)(v.userLength), ToData.toData(ToData.toDataBigInt)(v.bondingLength), ToData.toData(Types_Rational.toDataRational)(v.interest), ToData.toData(Types_Natural.toDataNatural)(v.minStake), ToData.toData(Types_Natural.toDataNatural)(v.maxStake), ToData.toData(Types_PubKeyHash.toDataPaymentPubKeyHash)(v.admin), ToData.toData(toDataAssetClass)(v.bondedAssetClass), ToData.toData(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(v.nftCs), ToData.toData(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(v.assocListCs) ]);
      }
  };
  var fromDataEntry = {
      fromData: FromData.genericFromData(genericEntry_)(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "Entry";
          }
      })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(FromData.fromDataByteArray)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(Types_Rational.fromDataRational)(FromData.fromDataArgsRLCons(FromData.fromDataMaybe(FromData.fromDataByteArray))(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "next";
          }
      }))()()({
          reflectSymbol: function () {
              return "rewards";
          }
      }))()()({
          reflectSymbol: function () {
              return "staked";
          }
      }))()()({
          reflectSymbol: function () {
              return "deposited";
          }
      }))()()({
          reflectSymbol: function () {
              return "newDeposit";
          }
      }))()()({
          reflectSymbol: function () {
              return "key";
          }
      }))()()())(TypeLevel_Nat.knownNatZ))
  };
  var fromDataBondedStakingDatu = {
      fromData: FromData.genericFromData(genericBondedStakingDatum)(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(FromData.fromDataMaybe(FromData.fromDataByteArray))(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "maybeEntryName";
          }
      }))()()())(TypeLevel_Nat.knownNatZ))(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(fromDataEntry)(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "entry";
          }
      }))()()())(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(FromData.fromDataArgsNoArguments)(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  exports["AdminAct"] = AdminAct;
  exports["StakeAct"] = StakeAct;
  exports["WithdrawAct"] = WithdrawAct;
  exports["CloseAct"] = CloseAct;
  exports["StateDatum"] = StateDatum;
  exports["EntryDatum"] = EntryDatum;
  exports["AssetDatum"] = AssetDatum;
  exports["BurnHead"] = BurnHead;
  exports["BurnOther"] = BurnOther;
  exports["BurnSingle"] = BurnSingle;
  exports["Entry"] = Entry;
  exports["ListInsert"] = ListInsert;
  exports["ListRemove"] = ListRemove;
  exports["MintHead"] = MintHead;
  exports["MintInBetween"] = MintInBetween;
  exports["MintEnd"] = MintEnd;
  exports["Bonded"] = Bonded;
  exports["Unbonded"] = Unbonded;
  exports["toDataAssetClass"] = toDataAssetClass;
  exports["toDataBondedPoolParams"] = toDataBondedPoolParams;
  exports["fromDataBondedStakingDatu"] = fromDataBondedStakingDatu;
  exports["toDataBondedStakingDatum"] = toDataBondedStakingDatum;
  exports["toDataBondedStakingAction"] = toDataBondedStakingAction;
  exports["toDataMintingAction"] = toDataMintingAction;
  exports["toDataBurningAction"] = toDataBurningAction;
  exports["toDataListAction"] = toDataListAction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Utils"] = $PS["Utils"] || {};
  var exports = $PS["Utils"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Chain = $PS["Contract.Chain"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Time = $PS["Contract.Time"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Log_Tag = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FromData = $PS["FromData"];
  var Hashing = $PS["Hashing"];
  var Helpers = $PS["Helpers"];
  var IsData = $PS["IsData"];
  var $$Math = $PS["Math"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Record = $PS["Record"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Chain = $PS["Types.Chain"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_OutputDatum = $PS["Types.OutputDatum"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];                
  var toIntUnsafe = (function () {
      var $120 = Data_Maybe.fromMaybe(0);
      return function ($121) {
          return $120(Data_BigInt.toInt(Types_Natural.toBigInt($121)));
      };
  })();
  var splitByLength = function (size) {
      return function (array) {
          if (size === 0 || Data_Foldable["null"](Data_Foldable.foldableArray)(array)) {
              return [  ];
          };
          if (Data_Boolean.otherwise) {
              var sublistCount = (function () {
                  var $30 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size) === 0;
                  if ($30) {
                      return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size) - 1 | 0;
                  };
                  return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Array.length(array))(size);
              })();
              return Data_Functor.map(Data_Functor.functorArray)(function (i) {
                  return Data_Array.slice(i * size | 0)((i * size | 0) + size | 0)(array);
              })(Data_Array.range(0)(sublistCount));
          };
          throw new Error("Failed pattern match at Utils (line 477, column 1 - line 477, column 71): " + [ size.constructor.name, array.constructor.name ]);
      };
  };
  var roundUp = function (r) {
      var n = Types_Rational.numerator(r);
      var d = Types_Rational.denominator(r);
      var $31 = Data_Eq.eq(Data_BigInt.eqBigInt)(d)(Data_Semiring.one(Data_BigInt.semiringBigInt));
      if ($31) {
          return n;
      };
      return Data_BigInt.quot(Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(n)(d))(Data_BigInt.rem(n)(d)))(d);
  };
  var mustPayToScript = function (vh) {
      return function (dat) {
          return Types_TxConstraints.mustPayToScript(vh)(dat)(Types_TxConstraints.DatumWitness.value);
      };
  };
  var mkRatUnsafe = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Semiring.zero(Types_Rational.semiringRational);
      };
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Utils (line 253, column 1 - line 253, column 42): " + [ v.constructor.name ]);
  };
  var mkBondedPoolParams = function (admin) {
      return function (nftCs) {
          return function (assocListCs) {
              return function (v) {
                  return {
                      iterations: v.iterations,
                      start: v.start,
                      end: v.end,
                      userLength: v.userLength,
                      bondingLength: v.bondingLength,
                      interest: v.interest,
                      minStake: v.minStake,
                      maxStake: v.maxStake,
                      admin: admin,
                      bondedAssetClass: v.bondedAssetClass,
                      nftCs: nftCs,
                      assocListCs: assocListCs
                  };
              };
          };
      };
  };
  var mkAssetUtxosConstraints = function (utxos) {
      return function (redeemer) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)(function (v) {
              return Types_TxConstraints.mustSpendScriptOutput(v.value0)(redeemer);
          })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos));
      };
  };
  var logInfo_ = function (dictShow) {
      return function (k) {
          var $123 = Data_Function.flip(Contract_Log.logInfo(Contract_Monad.monadLoggerContract))(Data_Monoid.mempty(Data_Monoid.monoidString));
          var $124 = Data_Log_Tag.tag(k);
          var $125 = Data_Show.show(dictShow);
          return function ($126) {
              return $123($124($125($126)));
          };
      };
  };
  var repeatUntilConfirmed = function (dictLacks) {
      return function (dictLacks1) {
          return function (timeout) {
              return function (maxTrials) {
                  return function (contract) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(contract)(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction built successfully"))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Transaction.submit(v.signedTx))(function (txHash) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction submitted. Waiting for confirmation"))(function () {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class["try"](Contract_Monad.monadErrorErrorContract)(Contract_Transaction.awaitTxConfirmedWithTimeout(timeout)(txHash)))(function (confirmation) {
                                          if (confirmation instanceof Data_Either.Left) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: timeout reached, the transaction was not confirmed"))(function () {
                                                  var $43 = maxTrials === 0;
                                                  if ($43) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: no more trials remaining, throwing exception..."))(function () {
                                                          return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Failed to submit transaction"));
                                                      });
                                                  };
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: running transaction again, " + (Data_Show.show(Data_Show.showInt)(maxTrials) + " trials remaining")))(function () {
                                                      return repeatUntilConfirmed()()(timeout)(maxTrials - 1 | 0)(contract);
                                                  });
                                              });
                                          };
                                          if (confirmation instanceof Data_Either.Right) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("repeatUntilConfirmed: transaction confirmed!"))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(logInfo_(Types_Transaction.showTransactionHash)("TX Hash")(txHash))(function () {
                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Record.insert({
                                                          reflectSymbol: function () {
                                                              return "txId";
                                                          }
                                                      })()()(Data_Symbol.SProxy.value)(Types_ByteArray.byteArrayToHex(Data_Newtype.unwrap()(txHash)))(Record["delete"]({
                                                          reflectSymbol: function () {
                                                              return "signedTx";
                                                          }
                                                      })()()(Data_Symbol.SProxy.value)(v)));
                                                  });
                                              });
                                          };
                                          throw new Error("Failed pattern match at Utils (line 552, column 3 - line 570, column 54): " + [ confirmation.constructor.name ]);
                                      });
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var submitTransaction = function (baseConstraints) {
      return function (baseLookups) {
          return function (updateList) {
              return function (timeout) {
                  return function (maxAttempts) {
                      var lookupList = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(updateList);
                      var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(baseLookups)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)(lookupList));
                      var constraintList = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(updateList);
                      var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(baseConstraints)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)(constraintList));
                      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class["try"](Contract_Monad.monadErrorErrorContract)(repeatUntilConfirmed()()(timeout)(maxAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(lookups)(constraints)))(function (unattachedBalancedTx) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("submitTransaction: Cannot balance, reindex redeemers, /attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                      signedTx: signedTx
                                  });
                              });
                          });
                      }))))(function (result) {
                          if (result instanceof Data_Either.Left) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(logInfo_(Effect_Exception.showError)("submitTransaction:")(result.value0))(function () {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(updateList);
                              });
                          };
                          if (result instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Contract_Monad.applicativeContract)([  ]);
                          };
                          throw new Error("Failed pattern match at Utils (line 525, column 5 - line 530, column 16): " + [ result.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  var jsonReader = function (field) {
      return Data_Argonaut_Core.caseJsonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)(field))(function (hex) {
              var v = Types_ByteArray.hexToByteArray(hex);
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Could not convert to bytes"));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Types_Scripts.plutusV1Script(v.value0));
              };
              throw new Error("Failed pattern match at Utils (line 162, column 5 - line 164, column 48): " + [ v.constructor.name ]);
          });
      });
  };
  var hashPkh = (function () {
      var $127 = Control_Applicative.pure(Effect_Aff.applicativeAff);
      var $128 = Data_Newtype.unwrap();
      var $129 = Data_Newtype.unwrap();
      var $130 = Data_Newtype.unwrap();
      return function ($131) {
          return $127(Hashing.blake2b256Hash($128(Serialization_Hash.ed25519KeyHashToBytes($129($130($131))))));
      };
  })();
  var getUtxoWithNFT = function (utxoM) {
      return function (cs) {
          return function (tn) {
              var hasNFT = function (v) {
                  var txOutput = Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.value1)).output);
                  return Data_Eq.eq(Data_BigInt.eqBigInt)(Plutus_Types_Value.valueOf(txOutput.amount)(cs)(tn))(Data_Semiring.one(Data_BigInt.semiringBigInt));
              };
              var utxos = Data_Array.filter(hasNFT)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxoM));
              var $55 = Data_Array.length(utxos) > 1;
              if ($55) {
                  return Data_Maybe.Nothing.value;
              };
              return Data_Array.head(utxos);
          };
      };
  };
  var getUtxoDatumHash = (function () {
      var $132 = Data_Newtype.unwrap();
      var $133 = Data_Newtype.unwrap();
      return function ($134) {
          return (function (v) {
              if (v instanceof Types_OutputDatum.OutputDatumHash) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0);
              };
              return Data_Maybe.Nothing.value;
          })((function (v) {
              return v.datum;
          })($132((function (v) {
              return v.output;
          })($133($134)))));
      };
  })();
  var getAssetsToConsume = function (v) {
      return function (withdrawAmt) {
          return function (assetUtxos) {
              var go = function (arr) {
                  return function (toConsume) {
                      return function (sum) {
                          if (Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(sum)(withdrawAmt)) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(toConsume, Data_Ring.sub(Data_BigInt.ringBigInt)(sum)(withdrawAmt)));
                          };
                          if (Data_Foldable["null"](Data_Foldable.foldableArray)(arr)) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(arr))(function (v1) {
                                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.tail(arr))(function (arr$prime) {
                                      var toConsume$prime = Data_Map_Internal.insert(Types_Transaction.ordTransactionInput)(v1.value0)(v1.value1)(toConsume);
                                      var assetCount = Plutus_Types_Value.valueOf((Data_Newtype.unwrap()((Data_Newtype.unwrap()(v1.value1)).output)).amount)(v.currencySymbol)(v.tokenName);
                                      var sum$prime = Data_Semiring.add(Data_BigInt.semiringBigInt)(sum)(assetCount);
                                      return go(arr$prime)(toConsume$prime)(sum$prime);
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Utils (line 200, column 3 - line 204, column 33): " + [ arr.constructor.name, toConsume.constructor.name, sum.constructor.name ]);
                      };
                  };
              };
              var assetList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(assetUtxos);
              return go(assetList)(Data_Map_Internal.empty)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
          };
      };
  };
  var findRemoveOtherElem = function (assocList) {
      return function (hashedKey) {
          var v = Data_Array.partition((function () {
              var $135 = Data_Ord.lessThan(Types_ByteArray.ordByteArray)(hashedKey);
              return function ($136) {
                  return $135(Data_Tuple.fst($136));
              };
          })())(assocList);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(v.yes))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(v.no))(function (v2) {
                  var $70 = Data_Eq.notEq(Types_ByteArray.eqByteArray)(v2.value0)(hashedKey);
                  if ($70) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Maybe.Just.create(new Data_Tuple.Tuple({
                      firstInput: v1.value1.value0,
                      secondInput: v2.value1.value0
                  }, new Data_Tuple.Tuple({
                      firstOutput: v1.value1.value1,
                      secondOutput: v2.value1.value1
                  }, {
                      firstKey: v1.value0,
                      secondKey: v2.value0
                  })));
              });
          });
      };
  };
  var findInsertUpdateElem = function (assocList) {
      return function (hashedKey) {
          var v = Data_Array.partition((function () {
              var $137 = Data_Ord.greaterThanOrEq(Types_ByteArray.ordByteArray)(hashedKey);
              return function ($138) {
                  return $137(Data_Tuple.fst($138));
              };
          })())(assocList);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.last(v.yes))(function (v1) {
              var $83 = Data_Array.length(v.no) === 0;
              if ($83) {
                  var mintingAction = (function () {
                      var $84 = Data_Eq.eq(Types_ByteArray.eqByteArray)(v1.value0)(hashedKey);
                      if ($84) {
                          return Data_Maybe.Nothing.value;
                      };
                      return Data_Maybe.Just.create(new Types.MintEnd(v1.value1.value0));
                  })();
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(mintingAction, new Data_Tuple.Tuple({
                      firstInput: v1.value1.value0,
                      secondInput: Data_Maybe.Nothing.value
                  }, new Data_Tuple.Tuple({
                      firstOutput: v1.value1.value1,
                      secondOutput: Data_Maybe.Nothing.value
                  }, {
                      firstKey: v1.value0,
                      secondKey: Data_Maybe.Nothing.value
                  }))));
              };
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(v.no))(function (v2) {
                  var mintingAction = (function () {
                      var $86 = Data_Eq.eq(Types_ByteArray.eqByteArray)(v1.value0)(hashedKey);
                      if ($86) {
                          return Data_Maybe.Nothing.value;
                      };
                      return Data_Maybe.Just.create(new Types.MintInBetween(v1.value1.value0, v2.value1.value0));
                  })();
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(mintingAction, new Data_Tuple.Tuple({
                      firstInput: v1.value1.value0,
                      secondInput: new Data_Maybe.Just(v2.value1.value0)
                  }, new Data_Tuple.Tuple({
                      firstOutput: v1.value1.value1,
                      secondOutput: new Data_Maybe.Just(v2.value1.value1)
                  }, {
                      firstKey: v1.value0,
                      secondKey: new Data_Maybe.Just(v2.value0)
                  }))));
              });
          });
      };
  };
  var currentTime = Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Chain.getTip)(function (v) {
      if (v instanceof Types_Chain.Tip) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(v.value0);
      };
      if (v instanceof Types_Chain.TipAtGenesis) {
          return Contract_Monad.throwContractError(Data_Show.showString)("currentTime: node returned TipAtGenesis");
      };
      throw new Error("Failed pattern match at Utils (line 436, column 35 - line 438, column 81): " + [ v.constructor.name ]);
  }))(function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getEraSummaries)(function (es) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getSystemStart)(function (ss) {
              return Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
                  var $139 = Helpers.liftEither(Contract_Monad.monadErrorErrorContract);
                  var $140 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)((function () {
                      var $142 = Data_Show.show(Types_Interval.showSlotToPosixTimeError);
                      return function ($143) {
                          return Effect_Exception.error($142($143));
                      };
                  })());
                  return function ($141) {
                      return $139($140($141));
                  };
              })())(Effect_Class.liftEffect(Contract_Monad.monadEffectContract))(Types_Interval.slotToPosixTime(es)(ss)(v.slot));
          });
      });
  });
  var currentRoundedTime = Control_Bind.bind(Contract_Monad.bindContract)(currentTime)(function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("currentRoundedTime: could not convert Number to BigInt"))(Data_BigInt.fromNumber($$Math.ceil(Data_BigInt.toNumber(v) / 1000.0) * 1000.0)))(function (t$prime) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(t$prime);
      });
  });
  var compareBytes = function (v) {
      return function (v1) {
          return Data_Ord.compare(Types_ByteArray.ordByteArray)(v.value0)(v1.value0);
      };
  };
  var mkOnchainAssocList = function (assocListCs) {
      return function (utxos) {
          var getAssocListUtxos = function (v) {
              var val = Plutus_Types_Value.flattenNonAdaAssets((Data_Newtype.unwrap()(v.value1.output)).amount);
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(val))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(Data_Array.length(val) === 1 && (Data_Eq.eq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v1.value0)(assocListCs) && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value1.value1)(Data_Semiring.one(Data_BigInt.semiringBigInt)))))(function () {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Types_TokenName.getTokenName(v1.value1.value0), v));
                  });
              });
          };
          return Data_Array.sortBy(compareBytes)(Data_Array.mapMaybe(getAssocListUtxos)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos)));
      };
  };
  var bigIntRange = function (lim) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (acc) {
          var $119 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(acc)(lim);
          if ($119) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(acc, Data_Semiring.add(Data_BigInt.semiringBigInt)(acc)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
      })(Data_Semiring.zero(Data_BigInt.semiringBigInt));
  };
  var big = Data_BigInt.fromInt;
  var addressFromBech32 = function (str) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("addressFromBech32: unable to read address")(Serialization_Address.addressFromBech32(str)))(function (cslAddress) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("addressFromBech32: unable to convert to plutus address")(Plutus_Conversion_Address.toPlutusAddress(cslAddress)))(function (address) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Eq.notEq(Serialization_Address.eqNetworkId)(networkId)(Serialization_Address.addressNetworkId(cslAddress)))(Control_Monad_Error_Class.throwError(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("addressFromBech32: address has wrong NetworkId"))))(function () {
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(address);
                  });
              });
          });
      });
  };
  exports["big"] = big;
  exports["bigIntRange"] = bigIntRange;
  exports["currentRoundedTime"] = currentRoundedTime;
  exports["findInsertUpdateElem"] = findInsertUpdateElem;
  exports["findRemoveOtherElem"] = findRemoveOtherElem;
  exports["getAssetsToConsume"] = getAssetsToConsume;
  exports["getUtxoWithNFT"] = getUtxoWithNFT;
  exports["hashPkh"] = hashPkh;
  exports["jsonReader"] = jsonReader;
  exports["logInfo_"] = logInfo_;
  exports["mkAssetUtxosConstraints"] = mkAssetUtxosConstraints;
  exports["mkBondedPoolParams"] = mkBondedPoolParams;
  exports["mkOnchainAssocList"] = mkOnchainAssocList;
  exports["mkRatUnsafe"] = mkRatUnsafe;
  exports["roundUp"] = roundUp;
  exports["splitByLength"] = splitByLength;
  exports["submitTransaction"] = submitTransaction;
  exports["toIntUnsafe"] = toIntUnsafe;
  exports["repeatUntilConfirmed"] = repeatUntilConfirmed;
  exports["mustPayToScript"] = mustPayToScript;
  exports["getUtxoDatumHash"] = getUtxoDatumHash;
  exports["addressFromBech32"] = addressFromBech32;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["BondedStaking.TimeUtils"] = $PS["BondedStaking.TimeUtils"] || {};
  var exports = $PS["BondedStaking.TimeUtils"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Utils = $PS["Utils"];
  var getWithdrawingTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getWithdrawingTime: pool already closed")))(function () {
              var $27 = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength));
              if ($27) {
                  return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                      currTime: v1,
                      range: Types_Interval.interval(Types_Interval.POSIXTime(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Types_Interval.POSIXTime(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(Utils.big(1000))))
                  });
              };
              var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
              var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                  var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength))(Utils.big(1000)));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                  });
              });
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondingTime: this is not a bonding period")(Data_Array.head(possibleRanges)))(function (v2) {
                  return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                      currTime: v1,
                      range: Types_Interval.interval(v2.value0)(v2.value1)
                  });
              });
          });
      });
  };
  var getStakingTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getStakingTime: pool already closed")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Contract_Monad.throwContractError(Data_Show.showString)("getStakingTime: pool in withdrawing only period")))(function () {
                  var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
                  var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                      var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength))(Utils.big(1000)));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                      });
                  });
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getStakingTime: this is not a staking period")(Data_Array.head(possibleRanges)))(function (v2) {
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                          currTime: v1,
                          range: Types_Interval.interval(v2.value0)(v2.value1)
                      });
                  });
              });
          });
      });
  };
  var getClosingTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.lessThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getClosingTime: pool can't close yet")))(function () {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                  currTime: v1,
                  range: Types_Interval.interval(v.end)(Types_Interval.POSIXTime(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.end)(Data_BigInt.fromInt(3600000))))
              });
          });
      });
  };
  var getBondingTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getBondingTime: pool already closed")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Contract_Monad.throwContractError(Data_Show.showString)("getBondingTime: pool in withdrawing only period")))(function () {
                  var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
                  var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                      var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(n)(Data_Semiring.one(Data_BigInt.semiringBigInt)))(cycleLength)))(Utils.big(1000)));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                      });
                  });
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondingTime: this is not a bonding period")(Data_Array.head(possibleRanges)))(function (v2) {
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                          currTime: v1,
                          range: Types_Interval.interval(v2.value0)(v2.value1)
                      });
                  });
              });
          });
      });
  };
  exports["getBondingTime"] = getBondingTime;
  exports["getStakingTime"] = getStakingTime;
  exports["getWithdrawingTime"] = getWithdrawingTime;
  exports["getClosingTime"] = getClosingTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.PlutusData"] = $PS["Contract.PlutusData"] || {};
  var exports = $PS["Contract.PlutusData"];
  var Contract_Monad = $PS["Contract.Monad"];
  var QueryM = $PS["QueryM"];
  var getDatumByHash = function ($1) {
      return Contract_Monad.wrapContract(QueryM.getDatumByHash($1));
  };
  exports["getDatumByHash"] = getDatumByHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Utxos"] = $PS["Contract.Utxos"] || {};
  var exports = $PS["Contract.Utxos"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Plutus_Conversion = $PS["Plutus.Conversion"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];                
  var utxosAt = function (address) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
          var $2 = Data_Newtype.unwrap();
          return function ($3) {
              return (function (v) {
                  return v.networkId;
              })((function (v) {
                  return v.config;
              })($2($3)));
          };
      })()))(function (networkId) {
          var cardanoAddr = Plutus_Conversion_Address.fromPlutusAddress(networkId)(address);
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM_Utxos.utxosAt(cardanoAddr)))(function (mCardanoUtxos) {
              return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mCardanoUtxos)((function () {
                  var $4 = Contract_Monad.liftContractM("utxosAt: unable to deserialize utxos");
                  return function ($5) {
                      return $4(Plutus_Conversion.toPlutusUtxoMap($5));
                  };
              })());
          });
      });
  };
  exports["utxosAt"] = utxosAt;
})(PS);
(function(exports) {
  exports._bondedPoolValidator = {
	  script: "590c6b01000032323232323232323232323232323232323232323232323232323232323232323232323222223333222232323232323232323232323232323232323232323232323232533303f3370e90030010a99981f999999802099999991111128008a5114a029405280a5014a02666666444444a00229405288a5014a02940528099999991111128008a5014a029445280a5014a02666666444444a00229405280a5014a22940528099999991111128008a5014a029405280a5114a02666666444444a00229405280a5014a02940528899299982019919191801119801001000918011198010010009129998220008a50153330433375e608400200629444c008c104004dd49bae303f303e32303f3024001303d01e3758607e607c0022930a99821a4811f7472616e73616374696f6e206e6f74207369676e65642062792061646d696e00163022303c303e019153304249013970626f6e646564506f6f6c56616c696461746f723a2077726f6e6720706572696f6420666f722050636c6f73654163742072656465656d657200161498c10c008c10c004dd500c1991191919191919191919192999823991929981b1981c1824001182400089981c98241823800982418238011822806982219ba548000cc104cdd2a40006608266e95200004333041042043330413374a90001982099ba548008cc104dd4002821998209820250043043122222250061533304733223002222223232323253303f325333053001100113305603b0013371266e04c8c8c94ccc154cdc3a400400426eb4c15000454cc16010458c164008c164004dd51828801191919299982a99b87480080084dd6982a0008a9982c0208b182c801182c8009baa30510033370200c00e2a6607e64a6660a600220022660ac0780026600a4a6608066e252000002133710004002266e252000001153303f325333053001100113305603d0013371266e00cdc000499b8200100800732323253330553370e900100109bad305400115330580411630590023059001375460a2006264a6660a600220022660ac07c00266e24c8c8c94ccc154cdc3a400400426eb4c15000454cc16010458c164008c164004dd5182880119b803370001266e08004020018cdc219b8132323253330543370e900100109bad305300115330570401630580023058001375460a000401000e609a609e609c0046098609c002609600c46666600200c0049000002111801004806091111128028a99982399911801111111919191929981f992999829800880089982b01d80099b8933702646464a6660aa66e1d20020021375a60a80022a660b00822c60b200460b20026ea8c144008c8c8c94ccc154cdc3a400400426eb4c15000454cc16010458c164008c164004dd5182880199b81006007153303f325333053001100113305603c001330052533040337129000001099b8800200113371290000008a9981f992999829800880089982b01e80099b893370066e00024cdc1000804003991919299982a99b87480080084dd6982a0008a9982c0208b182c801182c8009baa30510031325333053001100113305603e00133712646464a6660aa66e1d20020021375a60a80022a660b00822c60b200460b20026ea8c144008cdc019b800093370400201000c66e10cdc0991919299982a19b87480080084dd698298008a9982b8200b182c001182c0009baa3050002008007304d304f304e002304c304e001304b00623333300100600200400222300200900c1222222500315333047323253303633038304800230480011330393048304700130483047002304500d30443374a90001982099ba548000cc104cdd2a4004660826ea0cdc000299b820060010433304130404a20866608266e952000330413374a9001198209ba80040433304130404a00860862444444a0042a66608e6464a6606c66070609000460900022660726090608e0026090608e004608a01a608866e952000330413374a90001982099ba548008cc104dd4002021998209820251043330413374a90001982099ba54801010ccc10410810c10c4888889400454cc12924013b746865207472616e73616374696f6e27732072616e676520646f6573206e6f742062656c6f6e6720746f20616e792076616c696420706572696f640016337000040026eb4c110c10c014dd698218021bad3042004375a60820086eb4c100010c0f8004c0f4004c0f0004c0e8004c0e8038064c0e0004c0dc004c0d8004c0d4004c0d0004c0cc004c0c8004c0c4004c0c0004c0bc004c0b4038c0b4004c0b0004c0ac004c0a8004c0a4004c0a0004c09c004c098004c090c098004c08c004c8c8c8c80214ccc094cdc3a4000004264646464646464646464646464646464646464646464646464646464646464646464649329998240008a4c2a660940922c60880066eb8004c10c004c10400cdd70009820000981f001181f000981e0019bae001303b0013039003375a0026070002606c0066eb4004c0d4004c0cc008c0cc004c0c400cdd6800981800098170019bad001302d001302b003375a002605400260500066eb4004c09c004c09400cdd680098120008a998140148b181480118148009baa0043232323200753330253370e9000001099191924ca6660500022930a998150148b181200118120008a99981299b87480080084c8c8c9265333028001149854cc0a80a458c090008c09000454ccc094cdc3a40080042649329998130008a4c2a6605004e2c2a660500522c605200460520026ea800cc8c8c8c80194ccc094cdc3a40000042649329998130008a4c2a6605004e2c2a66604a66e1d200200213232323232323232324994ccc0b8004526153303002f16302a002302a0013028003375c002604e002604a0066eb4004c09000454ccc094cdc3a400800426464646464649329998158008a4c2a6605a0582c604e004604e002604a0066eb8004c09000454ccc094cdc3a400c0042649329998130008a4c2a6605004e2c2a660500522c605200460520026ea80080048c070c0080048c06cc0080048c068c0080048c064c0080048c060c0600052412d70706572696f646963436f6e7461696e733a207472616e73616374696f6e2072616e676520746f6f20776964650049012a70706572696f646963436f6e7461696e733a206379636c65206e6f742077697468696e20626f756e64730049013470706572696f646963436f6e7461696e733a207472616e73616374696f6e2072616e67652073746172747320746f6f20736f6f6e0049013270706572696f646963436f6e7461696e733a207472616e73616374696f6e2072616e676520656e647320746f6f206c6174650049013170706572696f646963436f6e7461696e733a2072656365697665642061206e6f6e2d66696e69746520696e74657276616c002233301500200100314a0446464a66602a66e1ccc028c050008c050005200014a22a66602a66e1ccc028c050008c0500052002153300630093014301300213008300930143013001153330153370e660146028004602800290020a50153301800d163011002301000222323253330143370e660126026004602600290000a51153330143370e660126026004602600290010a99802980418099809000898039804180998090010a99980a19b873300930130023013001480105280a9980b8060b18080011807801111998088010018008a512533300e00114a029448cdc398099baa00148008894ccc034cc00c008004520001533300d330040020011480085200422323232533300f3370e90000010991919299980919b87480000085280a513016002301600137540082a66601e66e1d2002002132323253330123370e90000010a50153330123370e90020010a511337106eb4c044010dd69808800980b001180b0009baa00413232324a0602c004602c0026ea8010c04c008c04c004dd500111191919299980719b87480000084c8c8c928980a801180a8009baa0041533300e3370e90010010991919299980899b87480000085280a99980899b87480080084cdc49bad3010004375a60200022944c054008c054004dd50020991919299980899b87480100085288a50301500230150013754008602400460240026ea800924012f504f72646572696e673a20756e6578706563746564206572726f72207768656e206d61746368696e672076616c75650023374a666010002900124000008ae8130103d87a80004bd70118049baa0015744ae855cd2ab9f491186c697374206973206c6f6e676572207468616e207a65726f00573892013f7265616368656420656e64206f662073756d207768696c65207374696c6c206e6f7420686176696e6720666f756e642074686520636f6e7374727563746f72005573caae75",
  };
  exports._unbondedPoolValidator = {
	  script: "",
  };
})(PS["Scripts.PoolValidator"] = PS["Scripts.PoolValidator"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Contract.Scripts"] = $PS["Contract.Scripts"] || {};
  var exports = $PS["Contract.Scripts"];
  var Contract_Monad = $PS["Contract.Monad"];
  var QueryM = $PS["QueryM"];                                            
  var applyArgs = function (dictNewtype) {
      return function (dictDecodeAeson) {
          return function (a) {
              var $4 = QueryM.applyArgs()(dictDecodeAeson)(a);
              return function ($5) {
                  return Contract_Monad.wrapContract($4($5));
              };
          };
      };
  };
  exports["applyArgs"] = applyArgs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.Types"] = $PS["UnbondedStaking.Types"] || {};
  var exports = $PS["UnbondedStaking.Types"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semiring = $PS["Data.Semiring"];
  var FromData = $PS["FromData"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var ToData = $PS["ToData"];
  var TypeLevel_Nat = $PS["TypeLevel.Nat"];
  var TypeLevel_RowList_Unordered_Indexed = $PS["TypeLevel.RowList.Unordered.Indexed"];
  var Types = $PS["Types"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];                
  var AdminAct = (function () {
      function AdminAct(value0) {
          this.value0 = value0;
      };
      AdminAct.create = function (value0) {
          return new AdminAct(value0);
      };
      return AdminAct;
  })();
  var StakeAct = (function () {
      function StakeAct(value0) {
          this.value0 = value0;
      };
      StakeAct.create = function (value0) {
          return new StakeAct(value0);
      };
      return StakeAct;
  })();
  var WithdrawAct = (function () {
      function WithdrawAct(value0) {
          this.value0 = value0;
      };
      WithdrawAct.create = function (value0) {
          return new WithdrawAct(value0);
      };
      return WithdrawAct;
  })();
  var CloseAct = (function () {
      function CloseAct() {

      };
      CloseAct.value = new CloseAct();
      return CloseAct;
  })();
  var Entry = function (x) {
      return x;
  };
  var StateDatum = (function () {
      function StateDatum(value0) {
          this.value0 = value0;
      };
      StateDatum.create = function (value0) {
          return new StateDatum(value0);
      };
      return StateDatum;
  })();
  var EntryDatum = (function () {
      function EntryDatum(value0) {
          this.value0 = value0;
      };
      EntryDatum.create = function (value0) {
          return new EntryDatum(value0);
      };
      return EntryDatum;
  })();
  var AssetDatum = (function () {
      function AssetDatum() {

      };
      AssetDatum.value = new AssetDatum();
      return AssetDatum;
  })();
  var toDataUnbondedPoolParams = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ ToData.toData(ToData.toDataBigInt)(v.start), ToData.toData(ToData.toDataBigInt)(v.userLength), ToData.toData(ToData.toDataBigInt)(v.adminLength), ToData.toData(ToData.toDataBigInt)(v.bondingLength), ToData.toData(ToData.toDataBigInt)(v.interestLength), ToData.toData(Types_Natural.toDataNatural)(v.increments), ToData.toData(Types_Rational.toDataRational)(v.interest), ToData.toData(Types_Natural.toDataNatural)(v.minStake), ToData.toData(Types_Natural.toDataNatural)(v.maxStake), ToData.toData(Types_PubKeyHash.toDataPaymentPubKeyHash)(v.admin), ToData.toData(Types.toDataAssetClass)(v.unbondedAssetClass), ToData.toData(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(v.nftCs), ToData.toData(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(v.assocListCs) ]);
      }
  };                                   
  var genericUnbondedStakingDat = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new StateDatum(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new EntryDatum(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return AssetDatum.value;
          };
          throw new Error("Failed pattern match at UnbondedStaking.Types (line 145, column 1 - line 145, column 47): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof StateDatum) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof EntryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof AssetDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
          };
          throw new Error("Failed pattern match at UnbondedStaking.Types (line 145, column 1 - line 145, column 47): " + [ x.constructor.name ]);
      }
  };
  var genericUnbondedStakingAct = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new AdminAct(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new StakeAct(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new WithdrawAct(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return CloseAct.value;
          };
          throw new Error("Failed pattern match at UnbondedStaking.Types (line 225, column 1 - line 225, column 48): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof AdminAct) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof StakeAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof WithdrawAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof CloseAct) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at UnbondedStaking.Types (line 225, column 1 - line 225, column 48): " + [ x.constructor.name ]);
      }
  };
  var toDataUnbondedStakingActi = {
      toData: ToData.genericToData(genericUnbondedStakingAct)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(Types_Natural.toDataNatural)(ToData.toDataArgsRLHelperCons(Types_Natural.toDataNatural)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "totalRewards";
          }
      })({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "totalDeposited";
          }
      })({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AdminAct";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(Types.toDataMintingAction))(ToData.toDataArgsRLHelperCons(Types_Natural.toDataNatural)(ToData.toDataArgsRLHelperCons(Types_PubKeyHash.toDataPaymentPubKeyHash)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "stakeHolder";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
          reflectSymbol: function () {
              return "stakeAmount";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "mintingAction";
          }
      })({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "StakeAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(Types.toDataBurningAction)(ToData.toDataArgsRLHelperCons(Types_PubKeyHash.toDataPaymentPubKeyHash)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "stakeHolder";
          }
      })({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "burningAction";
          }
      })({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "WithdrawAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(ToData.toDataArgsNoArguments({
          reflectSymbol: function () {
              return "CloseAct";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()({
          reflectSymbol: function () {
              return "CloseAct";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))))
  };
  var genericEntry_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var toDataEntry = {
      toData: ToData.genericToData(genericEntry_)(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "Entry";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "Entry";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperCons(ToData.toDataByteArray)(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(ToData.toDataByteArray))(ToData.toDataArgsRLHelperCons(ToData.toDataBoolean)(ToData.toDataArgsRLHelperCons(Types_Rational.toDataRational)(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperCons(ToData.toDataBigInt)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "totalRewards";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))()()()({
          reflectSymbol: function () {
              return "totalDeposited";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))))()()()({
          reflectSymbol: function () {
              return "rewards";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()()()({
          reflectSymbol: function () {
              return "open";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))))()()()({
          reflectSymbol: function () {
              return "next";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))))))()()()({
          reflectSymbol: function () {
              return "newDeposit";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()()({
          reflectSymbol: function () {
              return "key";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatZ))()()()({
          reflectSymbol: function () {
              return "deposited";
          }
      })({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "Entry";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))
  };
  var toDataUnbondedStakingDatu = {
      toData: ToData.genericToData(genericUnbondedStakingDat)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(ToData.toDataByteArray))(ToData.toDataArgsRLHelperCons(ToData.toDataBoolean)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "open";
          }
      })({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
          reflectSymbol: function () {
              return "maybeEntryName";
          }
      })({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(toDataEntry)(ToData.toDataArgsRLHelperNilRow)()()()({
          reflectSymbol: function () {
              return "entry";
          }
      })({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(ToData.toDataWithSchemaConstruct({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(ToData.toDataArgsNoArguments({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  var fromDataEntry = {
      fromData: FromData.genericFromData(genericEntry_)(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "Entry";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "Entry";
          }
      })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(FromData.fromDataByteArray)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(Types_Rational.fromDataRational)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(FromData.fromDataBigInt)(FromData.fromDataArgsRLCons(FromData.fromDataBoolean)(FromData.fromDataArgsRLCons(FromData.fromDataMaybe(FromData.fromDataByteArray))(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "next";
          }
      }))()()({
          reflectSymbol: function () {
              return "open";
          }
      }))()()({
          reflectSymbol: function () {
              return "totalDeposited";
          }
      }))()()({
          reflectSymbol: function () {
              return "totalRewards";
          }
      }))()()({
          reflectSymbol: function () {
              return "rewards";
          }
      }))()()({
          reflectSymbol: function () {
              return "newDeposit";
          }
      }))()()({
          reflectSymbol: function () {
              return "deposited";
          }
      }))()()({
          reflectSymbol: function () {
              return "key";
          }
      }))()()())(TypeLevel_Nat.knownNatZ))
  };
  var fromDataUnbondedStakingDa = {
      fromData: FromData.genericFromData(genericUnbondedStakingDat)(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "StateDatum";
          }
      })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(FromData.fromDataMaybe(FromData.fromDataByteArray))(FromData.fromDataArgsRLCons(FromData.fromDataBoolean)(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "open";
          }
      }))()()({
          reflectSymbol: function () {
              return "maybeEntryName";
          }
      }))()()())(TypeLevel_Nat.knownNatZ))(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
          reflectSymbol: function () {
              return "EntryDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(fromDataEntry)(FromData.fromDataArgsRLNilRow)()()({
          reflectSymbol: function () {
              return "entry";
          }
      }))()()())(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataWithSchemaConstru({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))()()({
          reflectSymbol: function () {
              return "AssetDatum";
          }
      })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))(FromData.fromDataArgsNoArguments)(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))))
  };
  exports["Entry"] = Entry;
  exports["AdminAct"] = AdminAct;
  exports["StakeAct"] = StakeAct;
  exports["WithdrawAct"] = WithdrawAct;
  exports["CloseAct"] = CloseAct;
  exports["StateDatum"] = StateDatum;
  exports["EntryDatum"] = EntryDatum;
  exports["AssetDatum"] = AssetDatum;
  exports["toDataUnbondedPoolParams"] = toDataUnbondedPoolParams;
  exports["fromDataUnbondedStakingDa"] = fromDataUnbondedStakingDa;
  exports["toDataUnbondedStakingDatu"] = toDataUnbondedStakingDatu;
  exports["toDataUnbondedStakingActi"] = toDataUnbondedStakingActi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Scripts.PoolValidator"] = $PS["Scripts.PoolValidator"] || {};
  var exports = $PS["Scripts.PoolValidator"];
  var $foreign = $PS["Scripts.PoolValidator"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Scripts = $PS["Contract.Scripts"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Scripts = $PS["Types.Scripts"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var Utils = $PS["Utils"];                
  var unbondedPoolValidator = Utils.jsonReader("script")($foreign["_unbondedPoolValidator"]);
  var mkValidator = function (dictToData) {
      return function (ps) {
          return function (params) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Data_Argonaut_Decode_Error.showJsonDecodeError)(Control_Applicative.pure(Contract_Monad.applicativeContract)(ps)))(function (unappliedScript) {
                  return Contract_Scripts.applyArgs()(Types_Scripts.decodeAesonValidator)(unappliedScript)([ ToData.toData(dictToData)(params) ]);
              });
          };
      };
  };
  var mkUnbondedPoolValidator = mkValidator(UnbondedStaking_Types.toDataUnbondedPoolParams)(unbondedPoolValidator);
  var bondedPoolValidator = Utils.jsonReader("script")($foreign["_bondedPoolValidator"]);
  var mkBondedPoolValidator = mkValidator(Types.toDataBondedPoolParams)(bondedPoolValidator);
  exports["mkBondedPoolValidator"] = mkBondedPoolValidator;
  exports["mkUnbondedPoolValidator"] = mkUnbondedPoolValidator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Settings"] = $PS["Settings"] || {};
  var exports = $PS["Settings"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_TokenName = $PS["Types.TokenName"];
  var unbondedStakingTokenName = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("UnbondedStakingToken"));
  var submissionAttempts = 5;                                                                                                                                                                          
  var confirmationTimeout = Data_Time_Duration.Seconds(Data_Int.toNumber(120));
  var bondedStakingTokenName = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii("BondedStakingToken"));
  exports["bondedStakingTokenName"] = bondedStakingTokenName;
  exports["unbondedStakingTokenName"] = unbondedStakingTokenName;
  exports["confirmationTimeout"] = confirmationTimeout;
  exports["submissionAttempts"] = submissionAttempts;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["ClosePool"] = $PS["ClosePool"] || {};
  var exports = $PS["ClosePool"];
  var BondedStaking_TimeUtils = $PS["BondedStaking.TimeUtils"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var FromData = $PS["FromData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Scripts = $PS["Scripts"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Utils = $PS["Utils"];                
  var createUtxoConstraint = function (v) {
      var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(Types.CloseAct.value));
      return new Data_Tuple.Tuple(Types_TxConstraints.mustSpendScriptOutput(v.value0)(valRedeemer), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups));
  };
  var closeBondedPoolContract = function (v) {
      return function (batchSize) {
          return function (closeList) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(userPkh)(v.admin))(Contract_Monad.throwContractError(Data_Show.showString)("closeBondedPoolContract: Admin is not current user")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("closeBondedPoolContract: Admin PaymentPubKeyHash")(v.admin))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("closeBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                  var valHash = Scripts.validatorHash(validator);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("closeBondedPoolContract: validatorHash")(valHash))(function () {
                                      var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("closeBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("closeBondedPoolContract: Pool's UTXOs")(bondedPoolUtxos))(function () {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("closeBondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("closeBondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                              var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(v2));
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("closeBondedPoolContract: Getting withdrawing range..."))(function () {
                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getClosingTime(v))(function (v3) {
                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("closeBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("closeBondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                      var allConstraints = Data_Functor.map(Data_Functor.functorArray)(createUtxoConstraint)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(bondedPoolUtxos));
                                                                                                      var $14 = Data_Foldable["null"](Data_Foldable.foldableArray)(closeList);
                                                                                                      if ($14) {
                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(allConstraints);
                                                                                                      };
                                                                                                      return Contract_Monad.liftContractM("depositBondedPoolContract: Failed to create updateList")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.index(allConstraints))(closeList));
                                                                                                  })())(function (spendList) {
                                                                                                      var lookups = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup ]);
                                                                                                      var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustIncludeDatum(bondedStateDatum))(Types_TxConstraints.mustValidateIn(v3.range)));
                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                          var $15 = Data_Eq.eq(Types_Natural.eqNatural)(batchSize)(Data_Semiring.zero(Types_Natural.semiringNatural));
                                                                                                          if ($15) {
                                                                                                              return Utils.submitTransaction(constraints)(lookups)(spendList)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                          };
                                                                                                          var updateBatches = Utils.splitByLength(Utils.toIntUnsafe(batchSize))(spendList);
                                                                                                          return Data_Functor.map(Contract_Monad.functorContract)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidArray))(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(updateBatches)(function (txBatch) {
                                                                                                              return Utils.submitTransaction(constraints)(lookups)(txBatch)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                          }));
                                                                                                      })())(function (failedDeposits) {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("closeBondedPoolContract: Finished updating pool entries. /Entries with failed updates")(failedDeposits))(function () {
                                                                                                              return Contract_Monad.liftContractM("depositUnbondedPoolContract: Failed to create /failedDepositsIndicies list")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Array.elemIndex(Data_Tuple.eqTuple(Types_TxConstraints.eqTxConstraints(Data_Eq.eqUnit)(Data_Eq.eqUnit))(Types_ScriptLookups.eqScriptLookups)))(spendList))(failedDeposits));
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["closeBondedPoolContract"] = closeBondedPoolContract;
})(PS);
(function(exports) {
  exports._bondedListNFT = {
	  script: "5905e201000032323232323232323232323232323232323232323232323222223333222232323232323253330213370e90010010a99981099991119998091b8f003371e004466e1c004cdc0a40009001000991919299981219b87480000084dd718138008b181380118138009baa30243023006372864a6660460022c2a6660446028604800226eb8c09400458dd61812180a18118021bab3024004132323253330243370e90010010a99981219b873233301e222533302900210011337006600660540040029001000a4000664603c44a6660500022030264a6660506008002266ae80004c00cc0a80084c00cc0a8008c0a80048c94ccc0994cc06ccdd798148009814801899baf3029001302930280031533302633223333016371e0044944dc3a4004002646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd5981518149813000981498140008a511614a060480026eb0c09c0212004153330243301823253301b53301b3375e605200260520062a6603666ebcc0a4004c0a4c0a000c528099980e807991919299981499b87480000084dd718160008b181600118160009baa3029302800b32375660546052604c0026052605000260480026eb0c09c0205261616153330243370e90020010a9998121980c11929980da9980d99baf3029001302900314a0266603a01e646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd59815181498130009814981400098120009bac302700814985854ccc090cc0608c94cc06d4cc06ccdd7981480098148018a9980d99baf30290013029302800314a0266603a01e646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd59815181498130009814981400098120009bac3027008149858c09c008c09c004dd518120008b0a99981099991119998091b8f003371e00464466e24004009200200132323253330243370e900000109bae3027001163027002302700137546048604600c6e50c94ccc08c0045854ccc088c050c0900044dd718128008b1bac302430143023004375660480082646464a66604866e1d2002002153330243301823253301b53301b3375e605200260520062a6603666ebcc0a4004c0a4c0a000c528099980e807991919299981499b87480000084dd718160008b181600118160009baa3029302800b32375660546052604c0026052605000260480026eb0c09c02052616153330243301823253301b53301b3375e6052002605200629404ccc07403cc8c8c94ccc0a4cdc3a400000426eb8c0b000458c0b0008c0b0004dd518149814005991bab302a302930260013029302800130240013758604e0102930b181380118138009baa30240011630240023024001375400a6036603e0026036603e0026034002646eb8014dd7002191bae004375c0066464646400ca66603466e1d200000213232324994ccc07400452616301d002301d0011533301a3370e9001001099191924ca66603a0022930b180e801180e8008b180e801180e8009baa002001222233300f222533301a00214a0266010600260380046600660360040020024a66602e600a6eb8c0700044ccc0408894ccc06c0085280998049800980e80119801980e0010009bab301b001253330185330123005375c603a002260086eb4c0700045288a5014a044602066ebcc00c008c00c0048cdd2999808800a4004900000125eb815d1918081806000918031129998080008a511533009300330120011300230110012233300d00200300114a244466660084a6600e660120020082660120020064944928800911119980291129998080010a5015330093001301200213300330110020010012533300d3005375c6024002266600c444a666022004294054cc028c004c04c0084cc00cc048008004dd598088009299980729980418029bae301300113004375a602400229445280a502323002233002002001230022330020020012233300800200100314a044600666e3c00800494ccc0100045280a51230053005001230063754002ae6955cfaba25742aae7955ce9",
  };
  exports._unbondedListNFT = {
	  script: "5905e201000032323232323232323232323232323232323232323232323222223333222232323232323253330213370e90010010a99981099991119998091b8f003371e004466e1c004cdc0a40009001000991919299981219b87480000084dd718138008b181380118138009baa30243023006372864a6660460022c2a6660446028604800226eb8c09400458dd61812180a18118021bab3024004132323253330243370e90010010a99981219b873233301e222533302900210011337006600660540040029001000a4000664603c44a6660500022030264a6660506008002266ae80004c00cc0a80084c00cc0a8008c0a80048c94ccc0994cc06ccdd798148009814801899baf3029001302930280031533302633223333016371e0044944dc3a4004002646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd5981518149813000981498140008a511614a060480026eb0c09c0212004153330243301823253301b53301b3375e605200260520062a6603666ebcc0a4004c0a4c0a000c528099980e807991919299981499b87480000084dd718160008b181600118160009baa3029302800b32375660546052604c0026052605000260480026eb0c09c0205261616153330243370e90020010a9998121980c11929980da9980d99baf3029001302900314a0266603a01e646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd59815181498130009814981400098120009bac302700814985854ccc090cc0608c94cc06d4cc06ccdd7981480098148018a9980d99baf30290013029302800314a0266603a01e646464a66605266e1d20000021375c60580022c605800460580026ea8c0a4c0a002cc8dd59815181498130009814981400098120009bac3027008149858c09c008c09c004dd518120008b0a99981099991119998091b8f003371e00464466e24004009200200132323253330243370e900000109bae3027001163027002302700137546048604600c6e50c94ccc08c0045854ccc088c050c0900044dd718128008b1bac302430143023004375660480082646464a66604866e1d2002002153330243301823253301b53301b3375e605200260520062a6603666ebcc0a4004c0a4c0a000c528099980e807991919299981499b87480000084dd718160008b181600118160009baa3029302800b32375660546052604c0026052605000260480026eb0c09c02052616153330243301823253301b53301b3375e6052002605200629404ccc07403cc8c8c94ccc0a4cdc3a400000426eb8c0b000458c0b0008c0b0004dd518149814005991bab302a302930260013029302800130240013758604e0102930b181380118138009baa30240011630240023024001375400a6036603e0026036603e0026034002646eb8014dd7002191bae004375c0066464646400ca66603466e1d200000213232324994ccc07400452616301d002301d0011533301a3370e9001001099191924ca66603a0022930b180e801180e8008b180e801180e8009baa002001222233300f222533301a00214a0266010600260380046600660360040020024a66602e600a6eb8c0700044ccc0408894ccc06c0085280998049800980e80119801980e0010009bab301b001253330185330123005375c603a002260086eb4c0700045288a5014a044602066ebcc00c008c00c0048cdd2999808800a4004900000125eb815d1918081806000918031129998080008a511533009300330120011300230110012233300d00200300114a244466660084a6600e660120020082660120020064944928800911119980291129998080010a5015330093001301200213300330110020010012533300d3005375c6024002266600c444a666022004294054cc028c004c04c0084cc00cc048008004dd598088009299980729980418029bae301300113004375a602400229445280a502323002233002002001230022330020020012233300800200100314a044600666e3c00800494ccc0100045280a51230053005001230063754002ae6955cfaba25742aae7955ce9",
  };
})(PS["Scripts.ListNFT"] = PS["Scripts.ListNFT"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Scripts.ListNFT"] = $PS["Scripts.ListNFT"] || {};
  var exports = $PS["Scripts.ListNFT"];
  var $foreign = $PS["Scripts.ListNFT"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Scripts = $PS["Contract.Scripts"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Utils = $PS["Utils"];                
  var listNFTPolicy = function (v) {
      if (v instanceof Types.Bonded) {
          return Utils.jsonReader("script")($foreign["_bondedListNFT"]);
      };
      if (v instanceof Types.Unbonded) {
          return Utils.jsonReader("script")($foreign["_unbondedListNFT"]);
      };
      throw new Error("Failed pattern match at Scripts.ListNFT (line 23, column 1 - line 23, column 68): " + [ v.constructor.name ]);
  };
  var mkListNFTPolicy = function (st) {
      return function (nftCs) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractE(Data_Argonaut_Decode_Error.showJsonDecodeError)(listNFTPolicy(st)))(function (unappliedScript) {
              return Contract_Scripts.applyArgs()(Types_Scripts.decodeAesonMintingPolicy)(unappliedScript)([ ToData.toData(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(nftCs) ]);
          });
      };
  };
  exports["mkListNFTPolicy"] = mkListNFTPolicy;
})(PS);
(function(exports) {
  exports._bondedStateNFT = {
	  script: "5901b40100003232323232323232323232323232222333222323232533301253300f332300b22533301600114a02a664466602e0042944004c00cc0600044c008c05c0048cdd7803980b18090009bac3015002133322233332222333011222533301d00214a026602a6002603e00466006603c0040020024a666034600a6eb8c07c0044ccc0488894ccc07800852809980b1800981000119801980f8010009bab301e0012533301b5330183005375c6040002260086eb4c07c0045288a5014a06e3c00cdc780119119b8900100248008004c8c8c94ccc054cdc3a400000426eb8c06000458c060008c060004dd5180a980a001a44112426f6e6465645374616b696e67546f6b656e003756602a0022930b19180a180a000980980098079809800980700099191919003a99980799b87480000084c8c8c8c8c8c9265333015001149858c05400cdd6800980a000980900118090008b180900118090009baa0034980048c8c0088cc0080080048c0088cc00800800488c00ccdd798020011802000929998038008a5014a2466e94ccc0180052002480000092f5c04466600a00400200629408c018dd5000ab9a5573eae895d0aab9e5573b",
  };
  exports._unbondedStateNFT = {
	  script: "5901b60100003232323232323232323232323232222333222323232533301253300f332300b22533301600114a02a664466602e0042944004c00cc0600044c008c05c0048cdd7803980b18090009bac3015002133322233332222333011222533301d00214a026602a6002603e00466006603c0040020024a666034600a6eb8c07c0044ccc0488894ccc07800852809980b1800981000119801980f8010009bab301e0012533301b5330183005375c6040002260086eb4c07c0045288a5014a06e3c00cdc780119119b8900100248008004c8c8c94ccc054cdc3a400000426eb8c06000458c060008c060004dd5180a980a001a44114556e626f6e6465645374616b696e67546f6b656e003756602a0022930b19180a180a000980980098079809800980700099191919003a99980799b87480000084c8c8c8c8c8c9265333015001149858c05400cdd6800980a000980900118090008b180900118090009baa0034980048c8c0088cc0080080048c0088cc00800800488c00ccdd798020011802000929998038008a5014a2466e94ccc0180052002480000092f5c04466600a00400200629408c018dd5000ab9a5573eae895d0aab9e5573b",
  };
})(PS["Scripts.StateNFT"] = PS["Scripts.StateNFT"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Scripts.StateNFT"] = $PS["Scripts.StateNFT"] || {};
  var exports = $PS["Scripts.StateNFT"];
  var $foreign = $PS["Scripts.StateNFT"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Scripts = $PS["Contract.Scripts"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Utils = $PS["Utils"];                
  var nftPolicy = function (v) {
      if (v instanceof Types.Bonded) {
          return Utils.jsonReader("script")($foreign["_bondedStateNFT"]);
      };
      if (v instanceof Types.Unbonded) {
          return Utils.jsonReader("script")($foreign["_unbondedStateNFT"]);
      };
      throw new Error("Failed pattern match at Scripts.StateNFT (line 23, column 1 - line 23, column 64): " + [ v.constructor.name ]);
  };
  var mkStateNFTPolicy = function (st) {
      return function (txInput) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Data_Argonaut_Decode_Error.showJsonDecodeError)(Control_Applicative.pure(Contract_Monad.applicativeContract)(nftPolicy(st))))(function (unappliedScript) {
              return Contract_Scripts.applyArgs()(Types_Scripts.decodeAesonMintingPolicy)(unappliedScript)([ ToData.toData(Types_Transaction.toDataTransactionInput)(txInput) ]);
          });
      };
  };
  exports["mkStateNFTPolicy"] = mkStateNFTPolicy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["CreatePool"] = $PS["CreatePool"] || {};
  var exports = $PS["CreatePool"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Scripts_StateNFT = $PS["Scripts.StateNFT"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Utils = $PS["Utils"];                
  var getBondedPoolsContract = function (addrStr) {
      return function (ibp) {
          var getValue = (function () {
              var $7 = Data_Newtype.unwrap();
              var $8 = Data_Newtype.unwrap();
              return function ($9) {
                  return (function (v) {
                      return v.amount;
                  })($7((function (v) {
                      return v.output;
                  })($8($9))));
              };
          })();
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getBondedPoolsContract) Could not get pool UTxOs")(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Utxos.utxosAt)(Utils.addressFromBech32(addrStr))))(function (poolUtxos) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("(getBondedPoolContract) UTxOs at pool address: ")(Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))(poolUtxos)))(function () {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("(getBondedPoolsContract) Could not get bonded staking token name"))(Settings.bondedStakingTokenName))(function (stateTokenTn) {
                      var getStateTokenCs = (function () {
                          var $10 = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst);
                          var $11 = Data_Array.filter(function ($13) {
                              return (function (v) {
                                  return Data_Eq.eq(Types_TokenName.eqTokenName)(v)(stateTokenTn);
                              })(Data_Tuple.fst(Data_Tuple.snd($13)));
                          });
                          return function ($12) {
                              return Data_Array.head($10($11(Plutus_Types_Value.flattenValue($12))));
                          };
                      })();
                      var addListTokenCs = function (stateNftCs) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(stateNftCs)))(function (listPolicy) {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("Could not obtain currency symbol from list policy"))(Scripts.scriptCurrencySymbol(listPolicy)))(function (listNftCs) {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(stateNftCs, listNftCs));
                              });
                          });
                      };
                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(addListTokenCs)(Data_Array.mapMaybe(function ($14) {
                          return getStateTokenCs(getValue($14));
                      })(Data_Array.fromFoldable(Data_Map_Internal.foldableMap)(poolUtxos))))(function (symbols) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Array.length(symbols) > 1)(Contract_Log["logWarn'"](Contract_Monad.monadLoggerContract)("(getBondedPoolsContract) More than one pool with the given address")))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getBondedPoolsContract) Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                                      return Utils.mkBondedPoolParams(adminPkh)(v.value0)(v.value1)(ibp);
                                  })(symbols));
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var createBondedPoolContract = function (ibp) {
      return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createBondedPoolContract: Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("createBondedPoolContract: Admin PaymentPubKeyHash")(adminPkh))(function () {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createBondedPoolContract: Admin Address"))(Contract_Address.addressToBech32(adminAddr)))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createBondedPoolContract: Could not get head UTXO")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Array.head(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(adminUtxos)))))(function (txOutRef) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("createBondedPoolContract: Admin Utxos")(adminUtxos))(function () {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_StateNFT.mkStateNFTPolicy(Types.Bonded.value)(txOutRef)))(function (statePolicy) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createBondedPoolContract: Cannot get CurrencySymbol from state NFT")(Scripts.scriptCurrencySymbol(statePolicy)))(function (stateNftCs) {
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(stateNftCs)))(function (listPolicy) {
                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createBondedPoolContract: Cannot get CurrencySymbol from state NFT")(Scripts.scriptCurrencySymbol(listPolicy)))(function (assocListCs) {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                      var bondedPoolParams = Utils.mkBondedPoolParams(adminPkh)(stateNftCs)(assocListCs)(ibp);
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("createBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(bondedPoolParams)))(function (validator) {
                                                          var valHash = Scripts.validatorHash(validator);
                                                          var mintValue = Plutus_Types_Value.singleton(stateNftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.addressToBech32(Plutus_Types_Address.scriptHashAddress(valHash)))(function (address) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createBondedPoolContract: BondedPool Validator's address")(address))(function () {
                                                                  var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(statePolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(adminUtxos) ]);
                                                                  var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                      maybeEntryName: Data_Maybe.Nothing.value
                                                                  })));
                                                                  var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(bondedStateDatum)(mintValue), Types_TxConstraints.mustMintValue(mintValue), Types_TxConstraints.mustSpendPubKeyOutput(txOutRef) ]);
                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(lookup)(constraints)))(function (unattachedUnbalancedTx) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedUnbalancedTx))(function () {
                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createBondedPoolContract: Cannot balance, reindex redeemers, attach /datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedUnbalancedTx)))(function (signedTx) {
                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                  signedTx: signedTx,
                                                                                  bondedPoolParams: bondedPoolParams,
                                                                                  address: address
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["createBondedPoolContract"] = createBondedPoolContract;
  exports["getBondedPoolsContract"] = getBondedPoolsContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["DepositPool"] = $PS["DepositPool"] || {};
  var exports = $PS["DepositPool"];
  var BondedStaking_TimeUtils = $PS["BondedStaking.TimeUtils"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var FromData = $PS["FromData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Scripts = $PS["Scripts"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Utils = $PS["Utils"];                
  var calculateRewards = function (interest) {
      return function (deposited) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Eq.eq(Data_BigInt.eqBigInt)(deposited)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(Contract_Monad.throwContractError(Data_Show.showString)("calculateRewards: totalDeposited is zero")))(function () {
              var recentRewards = Data_Semiring.mul(Types_Rational.semiringRational)(interest)(Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(deposited)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.lessThan(Types_Rational.ordRational)(recentRewards)(Data_Semiring.zero(Types_Rational.semiringRational)))(Contract_Monad.throwContractError(Data_Show.showString)("calculateRewards: invalid rewards amount")))(function () {
                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(recentRewards);
              });
          });
      };
  };
  var mkEntryUpdateList = function (v) {
      return function (valHash) {
          return function (v1) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v1.value1.value1)))(function (dHash) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("mkEntryUpdateList: datum hash")(dHash))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("mkEntryUpdateList: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(listDatum))))(function (v2) {
                              if (v2 instanceof Types.EntryDatum) {
                                  var e = Data_Newtype.unwrap()(v2.value0.entry);
                                  return Control_Bind.bind(Contract_Monad.bindContract)(calculateRewards(v.interest)(e.deposited))(function (calculatedRewards) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create token name for user")(Types_TokenName.mkTokenName(e.key)))(function (assocListTn) {
                                          var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(Types.AdminAct.value));
                                          var recentRewards = Utils.roundUp(calculatedRewards);
                                          var updatedDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(recentRewards);
                                          var newRewards = Data_Semiring.add(Types_Rational.semiringRational)(e.rewards)(Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(recentRewards)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
                                          var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                          var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                              entry: Types.Entry({
                                                  key: e.key,
                                                  newDeposit: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                  deposited: updatedDeposited,
                                                  staked: updatedDeposited,
                                                  rewards: newRewards,
                                                  next: e.next
                                              })
                                          })));
                                          var assetParams = Data_Newtype.unwrap()(v.bondedAssetClass);
                                          var assetDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(Types.AssetDatum.value));
                                          var depositValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(recentRewards);
                                          var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(depositValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v1.value1.value0)(valRedeemer) ]);
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, entryDatumLookup));
                                          });
                                      });
                                  });
                              };
                              return Contract_Monad.throwContractError(Data_Show.showString)("mkEntryUpdateList: Datum not Entry constructor");
                          });
                      });
                  });
              });
          };
      };
  };
  var depositBondedPoolContract = function (v) {
      return function (batchSize) {
          return function (depositList) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(userPkh)(v.admin))(Contract_Monad.throwContractError(Data_Show.showString)("depositBondedPoolContract: Admin is not current user")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("depositBondedPoolContract: Admin PaymentPubKeyHash")(userPkh))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("depositBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                          var valHash = Scripts.validatorHash(validator);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("depositBondedPoolContract: validatorHash")(valHash))(function () {
                                              var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("depositBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("depositBondedPoolContract: Pool UTXOs")(bondedPoolUtxos))(function () {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("depositBondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositBondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("depositBondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositBondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("depositBondedPoolContract: Getting bonding range..."))(function () {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getBondingTime(v))(function (v3) {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("depositBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("depositBondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                      if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Just) {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("depositBondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ... }"))(function () {
                                                                                                              var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.validator(validator))(Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.unspentOutputs(adminUtxos))(Types_ScriptLookups.unspentOutputs(bondedPoolUtxos)));
                                                                                                              var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Types_TxConstraints.mustValidateIn(v3.range));
                                                                                                              var assocList = Utils.mkOnchainAssocList(v.assocListCs)(bondedPoolUtxos);
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(mkEntryUpdateList(v)(valHash))(assocList))(function (allConstraints) {
                                                                                                                  var $29 = Data_Foldable["null"](Data_Foldable.foldableArray)(depositList);
                                                                                                                  if ($29) {
                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(allConstraints);
                                                                                                                  };
                                                                                                                  return Contract_Monad.liftContractM("depositBondedPoolContract: Failed to create updateList")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.index(allConstraints))(depositList));
                                                                                                              }))(function (updateList) {
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                      var $30 = Data_Eq.eq(Types_Natural.eqNatural)(batchSize)(Data_Semiring.zero(Types_Natural.semiringNatural));
                                                                                                                      if ($30) {
                                                                                                                          return Utils.submitTransaction(constraints)(lookups)(updateList)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                                      };
                                                                                                                      var updateBatches = Utils.splitByLength(Utils.toIntUnsafe(batchSize))(updateList);
                                                                                                                      return Data_Functor.map(Contract_Monad.functorContract)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidArray))(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(updateBatches)(function (txBatch) {
                                                                                                                          return Utils.submitTransaction(constraints)(lookups)(txBatch)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                                      }));
                                                                                                                  })())(function (failedDeposits) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("depositBondedPoolContract: Finished updating pool entries. /Entries with failed updates")(failedDeposits))(function () {
                                                                                                                          return Contract_Monad.liftContractM("depositUnbondedPoolContract: Failed to create /failedDepositsIndicies list")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Array.elemIndex(Data_Tuple.eqTuple(Types_TxConstraints.eqTxConstraints(Data_Eq.eqUnit)(Data_Eq.eqUnit))(Types_ScriptLookups.eqScriptLookups)))(updateList))(failedDeposits));
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      };
                                                                                                      if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Nothing) {
                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("depositBondedPoolContract: There are no users in the pool to deposit rewards for");
                                                                                                      };
                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("depositBondedPoolContract: Datum incorrect type");
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["depositBondedPoolContract"] = depositBondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Types.NatRatio"] = $PS["Types.NatRatio"] || {};
  var exports = $PS["Types.NatRatio"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_Rational = $PS["Types.Rational"];                
  var NatRatio = function (x) {
      return x;
  };                                         
  var toRational = function (v) {
      return v;
  };
  var fromNaturals = function (n) {
      return function (d) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(NatRatio)(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(Types_Natural.toBigInt(n))(Types_Natural.toBigInt(d)));
      };
  };
  exports["fromNaturals"] = fromNaturals;
  exports["toRational"] = toRational;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.Utils"] = $PS["UnbondedStaking.Utils"] || {};
  var exports = $PS["UnbondedStaking.Utils"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Rational = $PS["Types.Rational"];
  var Utils = $PS["Utils"];                
  var mkUnbondedPoolParams = function (admin) {
      return function (nftCs) {
          return function (assocListCs) {
              return function (v) {
                  return {
                      start: v.start,
                      userLength: v.userLength,
                      adminLength: v.adminLength,
                      bondingLength: v.bondingLength,
                      interestLength: v.interestLength,
                      increments: v.increments,
                      interest: v.interest,
                      minStake: v.minStake,
                      maxStake: v.maxStake,
                      admin: admin,
                      unbondedAssetClass: v.unbondedAssetClass,
                      nftCs: nftCs,
                      assocListCs: assocListCs
                  };
              };
          };
      };
  };
  var isWithinPeriod = function (currTime) {
      return function (cycleLength) {
          return function (start) {
              return function (end) {
                  var currentIteration = Data_Maybe.fromMaybe(0)(Data_BigInt.toInt(Data_BigInt.quot(start)(cycleLength)));
                  var upperBound = 1 + currentIteration | 0;
                  var possibleRanges = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                      return new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(cycleLength)(Utils.big(i - 1 | 0)))(start), Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(cycleLength)(Utils.big(i - 1 | 0)))(end));
                  })(Data_Array.range(1)(upperBound));
                  var periods = Data_Array.takeWhile(function (v) {
                      return Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(currTime)(v.value0);
                  })(possibleRanges);
                  var currentPeriod = Data_Array.filter(function (v) {
                      return Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v.value0)(currTime) && Data_Ord.lessThan(Data_BigInt.ordBigInt)(currTime)(v.value1);
                  })(periods);
                  var $23 = Data_Foldable["null"](Data_Foldable.foldableArray)(currentPeriod);
                  if ($23) {
                      return Data_Maybe.Nothing.value;
                  };
                  return Data_Array.head(currentPeriod);
              };
          };
      };
  };
  var getUserTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          var userEnd = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength))(Utils.big(1000));
          var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.userLength)(v.adminLength))(v.bondingLength);
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getUserTime: this is not a user period")(isWithinPeriod(v1)(cycleLength)(v.start)(userEnd)))(function (v2) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                  currTime: v1,
                  range: Types_Interval.interval(v2.value0)(v2.value1)
              });
          });
      });
  };
  var getBondingTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          var userEnd = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength))(Utils.big(1000));
          var getPeriod = function (user) {
              return function (bonding) {
                  var v2 = new Data_Tuple.Tuple(user, bonding);
                  if (v2.value1 instanceof Data_Maybe.Nothing) {
                      return v2.value0;
                  };
                  if (v2.value0 instanceof Data_Maybe.Nothing) {
                      return v2.value1;
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
          var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.userLength)(v.adminLength))(v.bondingLength);
          var userPeriod = isWithinPeriod(v1)(cycleLength)(v.start)(userEnd);
          var bondingStart = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength))(v.adminLength);
          var bondingEnd = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(bondingStart)(v.bondingLength))(Utils.big(1000));
          var bondingPeriod = isWithinPeriod(v1)(cycleLength)(bondingStart)(bondingEnd);
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getUserTime: this is not a user/bonding period")(getPeriod(userPeriod)(bondingPeriod)))(function (v2) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                  currTime: v1,
                  range: Types_Interval.interval(v2.value0)(v2.value1)
              });
          });
      });
  };
  var getAdminTime = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
          var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.userLength)(v.adminLength))(v.bondingLength);
          var adminStart = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(v.userLength);
          var adminEnd = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(adminStart)(v.adminLength))(Utils.big(1000));
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAdminTime: this is not a admin period")(isWithinPeriod(v1)(cycleLength)(adminStart)(adminEnd)))(function (v2) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                  currTime: v1,
                  range: Types_Interval.interval(v2.value0)(v2.value1)
              });
          });
      });
  };
  var calculateRewards = function (rewards) {
      return function (totalRewards) {
          return function (deposited) {
              return function (newDeposit) {
                  return function (totalDeposited) {
                      var $46 = Data_Eq.eq(Data_BigInt.eqBigInt)(totalDeposited)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                      if ($46) {
                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Semiring.zero(Types_Rational.semiringRational));
                      };
                      var rhs = Data_Semiring.add(Types_Rational.semiringRational)(rewards)(Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(deposited)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
                      var rhs$prime = Data_Ring.sub(Types_Rational.ringRational)(rhs)(Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(newDeposit)(Data_Semiring.one(Data_BigInt.semiringBigInt))));
                      var lhs = Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(totalRewards)(totalDeposited));
                      var f = Data_Semiring.mul(Types_Rational.semiringRational)(rhs$prime)(lhs);
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.lessThan(Types_Rational.ordRational)(f)(Data_Semiring.zero(Types_Rational.semiringRational)))(Contract_Monad.throwContractError(Data_Show.showString)("calculateRewards: invalid rewards amount")))(function () {
                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Semiring.add(Types_Rational.semiringRational)(rewards)(f));
                      });
                  };
              };
          };
      };
  };
  exports["calculateRewards"] = calculateRewards;
  exports["getAdminTime"] = getAdminTime;
  exports["getBondingTime"] = getBondingTime;
  exports["getUserTime"] = getUserTime;
  exports["mkUnbondedPoolParams"] = mkUnbondedPoolParams;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.ClosePool"] = $PS["UnbondedStaking.ClosePool"] || {};
  var exports = $PS["UnbondedStaking.ClosePool"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var FromData = $PS["FromData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Scripts = $PS["Scripts"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var UnbondedStaking_Utils = $PS["UnbondedStaking.Utils"];
  var Utils = $PS["Utils"];                
  var mkEntryUpdateList = function (v) {
      return function (valHash) {
          return function (v1) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v1.value1.value1)))(function (dHash) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("mkEntryUpdateList: datum hash")(dHash))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("mkEntryUpdateList: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(listDatum))))(function (v2) {
                              if (v2 instanceof UnbondedStaking_Types.EntryDatum) {
                                  var e = Data_Newtype.unwrap()(v2.value0.entry);
                                  return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.calculateRewards(e.rewards)(e.totalRewards)(e.deposited)(e.newDeposit)(e.totalDeposited))(function (calculatedRewards) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create token name for user")(Types_TokenName.mkTokenName(e.key)))(function (assocListTn) {
                                          var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(UnbondedStaking_Types.CloseAct.value));
                                          var updatedRewards = Utils.roundUp(calculatedRewards);
                                          var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                          var entryDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                              entry: UnbondedStaking_Types.Entry({
                                                  key: e.key,
                                                  deposited: e.deposited,
                                                  newDeposit: e.newDeposit,
                                                  rewards: Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(updatedRewards)(Data_Semiring.one(Data_BigInt.semiringBigInt))),
                                                  totalRewards: e.totalRewards,
                                                  totalDeposited: e.totalDeposited,
                                                  open: false,
                                                  next: e.next
                                              })
                                          })));
                                          var assetParams = Data_Newtype.unwrap()(v.unbondedAssetClass);
                                          var assetDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(UnbondedStaking_Types.AssetDatum.value));
                                          var depositValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(updatedRewards);
                                          var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(depositValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v1.value1.value0)(valRedeemer) ]);
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, entryDatumLookup));
                                          });
                                      });
                                  });
                              };
                              return Contract_Monad.throwContractError(Data_Show.showString)("mkEntryUpdateList: Datum not Entry constructor");
                          });
                      });
                  });
              });
          };
      };
  };
  var closeUnbondedPoolContract = function (v) {
      return function (batchSize) {
          return function (depositList) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeUnbondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(userPkh)(v.admin))(Contract_Monad.throwContractError(Data_Show.showString)("closeUnbondedPoolContract: Admin is not current user")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("closeUnbondedPoolContract: Admin PaymentPubKeyHash")(userPkh))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("closeUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(v)))(function (validator) {
                                          var valHash = Scripts.validatorHash(validator);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("closeUnbondedPoolContract: validatorHash")(valHash))(function () {
                                              var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("closeUnbondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeUnbondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (unbondedPoolUtxos) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("closeUnbondedPoolContract: Pool UTXOs")(unbondedPoolUtxos))(function () {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("closeUnbondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("closeUnbondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeUnbondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("closeUnbondedPoolContract: Getting admin range..."))(function () {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.getAdminTime(v))(function (v3) {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("closeUnbondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("closeUnbondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Just && v2.value0.open)) {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("closeUnbondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ..., open: true }"))(function () {
                                                                                                              var assocList = Utils.mkOnchainAssocList(v.assocListCs)(unbondedPoolUtxos);
                                                                                                              var redeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(UnbondedStaking_Types.CloseAct.value));
                                                                                                              var stateDatumConstraintsLookups = new Data_Tuple.Tuple(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustIncludeDatum(poolDatum))(Types_TxConstraints.mustSpendScriptOutput(v1.value0)(redeemer)), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups));
                                                                                                              var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.validator(validator))(Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.unspentOutputs(adminUtxos))(Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos)));
                                                                                                              var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustIncludeDatum(poolDatum))(Types_TxConstraints.mustValidateIn(v3.range)));
                                                                                                              var submitBatch = function (txBatch) {
                                                                                                                  return Utils.submitTransaction(constraints)(lookups)(txBatch)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                              };
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                  var $28 = Data_Foldable["null"](Data_Foldable.foldableArray)(depositList);
                                                                                                                  if ($28) {
                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(mkEntryUpdateList(v)(valHash))(assocList))(function (updateList$prime) {
                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Array.cons(stateDatumConstraintsLookups)(updateList$prime));
                                                                                                                      });
                                                                                                                  };
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(mkEntryUpdateList(v)(valHash))(assocList))(function (constraintsLookupsList) {
                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Failed to create updateList'")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.index(constraintsLookupsList))(depositList)))(function (updateList$prime) {
                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Array.cons(stateDatumConstraintsLookups)(updateList$prime));
                                                                                                                      });
                                                                                                                  });
                                                                                                              })())(function (updateList) {
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                      var $29 = Data_Eq.eq(Types_Natural.eqNatural)(batchSize)(Data_Semiring.zero(Types_Natural.semiringNatural));
                                                                                                                      if ($29) {
                                                                                                                          return submitBatch(updateList);
                                                                                                                      };
                                                                                                                      var updateBatches = Utils.splitByLength(Utils.toIntUnsafe(batchSize))(updateList);
                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(submitBatch)(updateBatches))(function (failedDeposits$prime) {
                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(failedDeposits$prime));
                                                                                                                      });
                                                                                                                  })())(function (failedDeposits) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("closeUnbondedPoolContract: Closed pool and finished updating /pool entries. Entries with failed updates")(failedDeposits))(function () {
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeUnbondedPoolContract: Failed to create /failedDepositsIndicies list")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Array.elemIndex(Data_Tuple.eqTuple(Types_TxConstraints.eqTxConstraints(Data_Eq.eqUnit)(Data_Eq.eqUnit))(Types_ScriptLookups.eqScriptLookups)))(updateList))(failedDeposits)))(function (failedDepositsIndicies) {
                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(failedDepositsIndicies);
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      };
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Nothing && v2.value0.open)) {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("closeUnbondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Nothing, open: true }"))(function () {
                                                                                                              var redeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(UnbondedStaking_Types.CloseAct.value));
                                                                                                              var lookups = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos) ]);
                                                                                                              var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)((function () {
                                                                                                                  var $48 = Data_Function.flip(Types_TxConstraints.mustSpendScriptOutput)(redeemer);
                                                                                                                  return function ($49) {
                                                                                                                      return $48(Data_Tuple.fst($49));
                                                                                                                  };
                                                                                                              })())(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(unbondedPoolUtxos)))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustIncludeDatum(poolDatum))(Types_TxConstraints.mustValidateIn(v3.range))));
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Utils.submitTransaction(constraints)(lookups)([  ])(Settings.confirmationTimeout)(Settings.submissionAttempts))(function (failedDeposits) {
                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("closeUnbondedPoolContract: Pool closed. Failed updates")(failedDeposits))(function () {
                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)((function () {
                                                                                                                          var $34 = Data_Foldable["null"](Data_Foldable.foldableArray)(failedDeposits);
                                                                                                                          if ($34) {
                                                                                                                              return [  ];
                                                                                                                          };
                                                                                                                          return [ 0 ];
                                                                                                                      })());
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      };
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && !v2.value0.open) {
                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("closeUnbondedPoolContract: Pool is already closed");
                                                                                                      };
                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("closeUnbondedPoolContract: Datum incorrect type");
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["closeUnbondedPoolContract"] = closeUnbondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.CreatePool"] = $PS["UnbondedStaking.CreatePool"] || {};
  var exports = $PS["UnbondedStaking.CreatePool"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Scripts_StateNFT = $PS["Scripts.StateNFT"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var UnbondedStaking_Utils = $PS["UnbondedStaking.Utils"];
  var Utils = $PS["Utils"];                
  var getUnbondedPoolsContract = function (addrStr) {
      return function (ibp) {
          var getValue = (function () {
              var $7 = Data_Newtype.unwrap();
              var $8 = Data_Newtype.unwrap();
              return function ($9) {
                  return (function (v) {
                      return v.amount;
                  })($7((function (v) {
                      return v.output;
                  })($8($9))));
              };
          })();
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getUnbondedPoolsContract) Could not get pool UTxOs")(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Utxos.utxosAt)(Utils.addressFromBech32(addrStr))))(function (poolUtxos) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("(getUnbondedPoolContract) UTxOs at pool address: ")(Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))(poolUtxos)))(function () {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("(getUnbondedPoolsContract) Could not get bonded staking token name"))(Settings.unbondedStakingTokenName))(function (stateTokenTn) {
                      var getStateTokenCs = (function () {
                          var $10 = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst);
                          var $11 = Data_Array.filter(function ($13) {
                              return (function (v) {
                                  return Data_Eq.eq(Types_TokenName.eqTokenName)(v)(stateTokenTn);
                              })(Data_Tuple.fst(Data_Tuple.snd($13)));
                          });
                          return function ($12) {
                              return Data_Array.head($10($11(Plutus_Types_Value.flattenValue($12))));
                          };
                      })();
                      var addListTokenCs = function (stateNftCs) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(stateNftCs)))(function (listPolicy) {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("Could not obtain currency symbol from list policy"))(Scripts.scriptCurrencySymbol(listPolicy)))(function (listNftCs) {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(stateNftCs, listNftCs));
                              });
                          });
                      };
                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(addListTokenCs)(Data_Array.mapMaybe(function ($14) {
                          return getStateTokenCs(getValue($14));
                      })(Data_Array.fromFoldable(Data_Map_Internal.foldableMap)(poolUtxos))))(function (symbols) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Array.length(symbols) > 1)(Contract_Log["logWarn'"](Contract_Monad.monadLoggerContract)("(getUnbondedPoolsContract) More than one pool with the given address")))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getUnbondedPoolsContract) Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                                      return UnbondedStaking_Utils.mkUnbondedPoolParams(adminPkh)(v.value0)(v.value1)(ibp);
                                  })(symbols));
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var createUnbondedPoolContract = function (iup) {
      return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("createUnbondedPoolContract: Admin PaymentPubKeyHash")(adminPkh))(function () {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createUnbondedPoolContract: User Address"))(Contract_Address.addressToBech32(adminAddr)))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Could not get head UTXO")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Array.head(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(adminUtxos)))))(function (txOutRef) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("createUnbondedPoolContract: Admin Utxos")(adminUtxos))(function () {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_StateNFT.mkStateNFTPolicy(Types.Unbonded.value)(txOutRef)))(function (statePolicy) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot get CurrencySymbol from /state NFT")(Scripts.scriptCurrencySymbol(statePolicy)))(function (stateNftCs) {
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(stateNftCs)))(function (listPolicy) {
                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot get CurrencySymbol from /state NFT")(Scripts.scriptCurrencySymbol(listPolicy)))(function (assocListCs) {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                      var unbondedPoolParams = UnbondedStaking_Utils.mkUnbondedPoolParams(adminPkh)(stateNftCs)(assocListCs)(iup);
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("createUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(unbondedPoolParams)))(function (validator) {
                                                          var valHash = Scripts.validatorHash(validator);
                                                          var mintValue = Plutus_Types_Value.singleton(stateNftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.addressToBech32(Plutus_Types_Address.scriptHashAddress(valHash)))(function (address) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createUnbondedPoolContract: UnbondedPool Validator's address")(address))(function () {
                                                                  var unbondedStateDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                      maybeEntryName: Data_Maybe.Nothing.value,
                                                                      open: true
                                                                  })));
                                                                  var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(statePolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(adminUtxos) ]);
                                                                  var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(unbondedStateDatum)(mintValue), Types_TxConstraints.mustMintValue(mintValue), Types_TxConstraints.mustSpendPubKeyOutput(txOutRef) ]);
                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(lookup)(constraints)))(function (unattachedBalancedTx) {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot balance, reindex redeemers, attach /datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                              signedTx: signedTx,
                                                                              unbondedPoolParams: unbondedPoolParams,
                                                                              address: address
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["createUnbondedPoolContract"] = createUnbondedPoolContract;
  exports["getUnbondedPoolsContract"] = getUnbondedPoolsContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.DepositPool"] = $PS["UnbondedStaking.DepositPool"] || {};
  var exports = $PS["UnbondedStaking.DepositPool"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var FromData = $PS["FromData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Scripts = $PS["Scripts"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var UnbondedStaking_Utils = $PS["UnbondedStaking.Utils"];
  var Utils = $PS["Utils"];                
  var mkEntryUpdateList = function (v) {
      return function (valHash) {
          return function (v1) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v1.value1.value1)))(function (dHash) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("mkEntryUpdateList: datum hash")(dHash))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("mkEntryUpdateList: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(listDatum))))(function (v2) {
                              if (v2 instanceof UnbondedStaking_Types.EntryDatum) {
                                  var e = Data_Newtype.unwrap()(v2.value0.entry);
                                  return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.calculateRewards(e.rewards)(e.totalRewards)(e.deposited)(e.newDeposit)(e.totalDeposited))(function (calculatedRewards) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create token name for user")(Types_TokenName.mkTokenName(e.key)))(function (assocListTn) {
                                          var updatedRewards = Utils.roundUp(calculatedRewards);
                                          var updatedTotalDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(updatedRewards);
                                          var incrementsRat = Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(Types_Natural.toBigInt(v.increments))(Data_Semiring.one(Data_BigInt.semiringBigInt)));
                                          var updatedTotalRewards = Data_Semiring.mul(Data_BigInt.semiringBigInt)(updatedTotalDeposited)(Utils.roundUp(Data_Semiring.mul(Types_Rational.semiringRational)(v.interest)(incrementsRat)));
                                          var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.AdminAct({
                                              totalRewards: Types_Natural["fromBigInt'"](updatedTotalRewards),
                                              totalDeposited: Types_Natural["fromBigInt'"](updatedTotalDeposited)
                                          })));
                                          var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                          var entryDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                              entry: UnbondedStaking_Types.Entry({
                                                  key: e.key,
                                                  deposited: e.deposited,
                                                  newDeposit: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                  rewards: Utils.mkRatUnsafe(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(updatedRewards)(Data_Semiring.one(Data_BigInt.semiringBigInt))),
                                                  totalRewards: updatedTotalRewards,
                                                  totalDeposited: updatedTotalDeposited,
                                                  open: e.open,
                                                  next: e.next
                                              })
                                          })));
                                          var assetParams = Data_Newtype.unwrap()(v.unbondedAssetClass);
                                          var assetDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(UnbondedStaking_Types.AssetDatum.value));
                                          var depositValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(updatedRewards);
                                          var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(depositValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v1.value1.value0)(valRedeemer) ]);
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("mkEntryUpdateList: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, entryDatumLookup));
                                          });
                                      });
                                  });
                              };
                              return Contract_Monad.throwContractError(Data_Show.showString)("mkEntryUpdateList: Datum not Entry constructor");
                          });
                      });
                  });
              });
          };
      };
  };
  var depositUnbondedPoolContract = function (v) {
      return function (batchSize) {
          return function (depositList) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(userPkh)(v.admin))(Contract_Monad.throwContractError(Data_Show.showString)("depositUnbondedPoolContract: Admin is not current user")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("depositUnbondedPoolContract: Admin PaymentPubKeyHash")(userPkh))(function () {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("depositUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(v)))(function (validator) {
                                          var valHash = Scripts.validatorHash(validator);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("depositUnbondedPoolContract: validatorHash")(valHash))(function () {
                                              var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("depositUnbondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (unbondedPoolUtxos) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("depositUnbondedPoolContract: Pool UTXOs")(unbondedPoolUtxos))(function () {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositUnbondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("depositUnbondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositUnbondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("depositUnbondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("depositUnbondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositUnbondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("depositUnbondedPoolContract: Getting admin range..."))(function () {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.getAdminTime(v))(function (v3) {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("depositUnbondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("depositUnbondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Just && v2.value0.open)) {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("depositUnbondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ..., open: true }"))(function () {
                                                                                                              var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.validator(validator))(Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos))(Types_ScriptLookups.unspentOutputs(adminUtxos)));
                                                                                                              var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Types_TxConstraints.mustValidateIn(v3.range));
                                                                                                              var submitBatch = function (txBatch) {
                                                                                                                  return Utils.submitTransaction(constraints)(lookups)(txBatch)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                              };
                                                                                                              var assocList = Utils.mkOnchainAssocList(v.assocListCs)(unbondedPoolUtxos);
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                  var $30 = Data_Foldable["null"](Data_Foldable.foldableArray)(depositList);
                                                                                                                  if ($30) {
                                                                                                                      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(mkEntryUpdateList(v)(valHash))(assocList);
                                                                                                                  };
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(mkEntryUpdateList(v)(valHash))(assocList))(function (constraintsLookupsList) {
                                                                                                                      return Contract_Monad.liftContractM("depositUnbondedPoolContract: Failed to create updateList'")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.index(constraintsLookupsList))(depositList));
                                                                                                                  });
                                                                                                              })())(function (updateList) {
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                      var $31 = Data_Eq.eq(Types_Natural.eqNatural)(batchSize)(Data_Semiring.zero(Types_Natural.semiringNatural));
                                                                                                                      if ($31) {
                                                                                                                          return submitBatch(updateList);
                                                                                                                      };
                                                                                                                      var updateBatches = Utils.splitByLength(Utils.toIntUnsafe(batchSize))(updateList);
                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(submitBatch)(updateBatches))(function (failedDeposits$prime) {
                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(failedDeposits$prime));
                                                                                                                      });
                                                                                                                  })())(function (failedDeposits) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("depositUnbondedPoolContract: Finished updating pool entries. /Entries with failed updates")(failedDeposits))(function () {
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("depositUnbondedPoolContract: Failed to create /failedDepositsIndicies list")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Array.elemIndex(Data_Tuple.eqTuple(Types_TxConstraints.eqTxConstraints(Data_Eq.eqUnit)(Data_Eq.eqUnit))(Types_ScriptLookups.eqScriptLookups)))(updateList))(failedDeposits)))(function (failedDepositsIndicies) {
                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(failedDepositsIndicies);
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      };
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Nothing && v2.value0.open)) {
                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("depositUnbondedPoolContract: There are no users in the pool to deposit rewards for");
                                                                                                      };
                                                                                                      if (v2 instanceof UnbondedStaking_Types.StateDatum && !v2.value0.open) {
                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("depositUnbondedPoolContract: Cannot deposit to a closed pool");
                                                                                                      };
                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("depositUnbondedPoolContract: Datum incorrect type");
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["depositUnbondedPoolContract"] = depositUnbondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.UserStake"] = $PS["UnbondedStaking.UserStake"] || {};
  var exports = $PS["UnbondedStaking.UserStake"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var UnbondedStaking_Utils = $PS["UnbondedStaking.Utils"];
  var Utils = $PS["Utils"];                
  var userStakeUnbondedPoolContract = function (v) {
      return function (amt) {
          return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userStakeUnbondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userStakeUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(v)))(function (validator) {
                                  var valHash = Scripts.validatorHash(validator);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userStakeUnbondedPoolContract: validatorHash")(valHash))(function () {
                                      var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userStakeUnbondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (unbondedPoolUtxos) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userStakeUnbondedPoolContract: Pool UTXOs")(unbondedPoolUtxos))(function () {
                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("userStakeUnbondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeUnbondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                              var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                              var assetParams = Data_Newtype.unwrap()(v.unbondedAssetClass);
                                                                              var assetDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(UnbondedStaking_Types.AssetDatum.value));
                                                                              var amtBigInt = Types_Natural.toBigInt(amt);
                                                                              var stakeValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(amtBigInt);
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(v.nftCs)))(function (listPolicy) {
                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                          var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: Getting user time range..."))(function () {
                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.getUserTime(v))(function (v3) {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userStakeUnbondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userStakeUnbondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                              if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Nothing && v2.value0.open)) {
                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Nothing, open: true }"))(function () {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                          var unbondedStateDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                                                                              maybeEntryName: new Data_Maybe.Just(hashedUserPkh),
                                                                                                                              open: true
                                                                                                                          })));
                                                                                                                          var mh = new Types.MintHead(v1.value0);
                                                                                                                          var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                          var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.StakeAct({
                                                                                                                              stakeAmount: amt,
                                                                                                                              stakeHolder: userPkh,
                                                                                                                              mintingAction: new Data_Maybe.Just(mh)
                                                                                                                          })));
                                                                                                                          var entryDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                              entry: {
                                                                                                                                  key: hashedUserPkh,
                                                                                                                                  deposited: amtBigInt,
                                                                                                                                  newDeposit: amtBigInt,
                                                                                                                                  rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                  totalRewards: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                  totalDeposited: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                  open: true,
                                                                                                                                  next: Data_Maybe.Nothing.value
                                                                                                                              }
                                                                                                                          })));
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(unbondedStateDatum)))(function (unbondedStateDatumLookup) {
                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                  var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos), unbondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                  var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(unbondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustValidateIn(v3.range) ]);
                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              };
                                                                                                              if (v2 instanceof UnbondedStaking_Types.StateDatum && (v2.value0.maybeEntryName instanceof Data_Maybe.Just && v2.value0.open)) {
                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ..., open: true }"))(function () {
                                                                                                                      var assocList = Utils.mkOnchainAssocList(v.assocListCs)(unbondedPoolUtxos);
                                                                                                                      var v4 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(v2.value0.maybeEntryName.value0);
                                                                                                                      if (v4 instanceof Data_Ordering.LT) {
                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: Compare LT"))(function () {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                  var unbondedStateDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                                                                                      maybeEntryName: new Data_Maybe.Just(hashedUserPkh),
                                                                                                                                      open: true
                                                                                                                                  })));
                                                                                                                                  var mh = new Types.MintHead(v1.value0);
                                                                                                                                  var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.StakeAct({
                                                                                                                                      stakeAmount: amt,
                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                      mintingAction: new Data_Maybe.Just(mh)
                                                                                                                                  })));
                                                                                                                                  var entryDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                      entry: {
                                                                                                                                          key: hashedUserPkh,
                                                                                                                                          deposited: amtBigInt,
                                                                                                                                          newDeposit: amtBigInt,
                                                                                                                                          rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                          totalRewards: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                          totalDeposited: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                          open: true,
                                                                                                                                          next: new Data_Maybe.Just(v2.value0.maybeEntryName.value0)
                                                                                                                                      }
                                                                                                                                  })));
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(unbondedStateDatum)))(function (unbondedStateDatumLookup) {
                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                          var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos), unbondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                          var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(unbondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustValidateIn(v3.range) ]);
                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          });
                                                                                                                      };
                                                                                                                      if (v4 instanceof Data_Ordering.EQ) {
                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: Compare EQ"))(function () {
                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot extract head from Assoc. List - this should be impossible")(Data_Array.head(assocList)))(function (assocElem) {
                                                                                                                                  var v5 = Data_Tuple.snd(assocElem);
                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.StakeAct({
                                                                                                                                      stakeAmount: amt,
                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                      mintingAction: Data_Maybe.Nothing.value
                                                                                                                                  })));
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1)))(function (dHash) {
                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeUnbondedPoolContract: ")(dHash))(function () {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(listDatum))))(function (v6) {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                      if (v6 instanceof UnbondedStaking_Types.EntryDatum) {
                                                                                                                                                          var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                          var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                  entry: UnbondedStaking_Types.Entry({
                                                                                                                                                                      key: e.key,
                                                                                                                                                                      deposited: updateDeposited,
                                                                                                                                                                      newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                      rewards: e.rewards,
                                                                                                                                                                      totalRewards: e.totalRewards,
                                                                                                                                                                      totalDeposited: e.totalDeposited,
                                                                                                                                                                      open: e.open,
                                                                                                                                                                      next: e.next
                                                                                                                                                                  })
                                                                                                                                                              }))));
                                                                                                                                                          });
                                                                                                                                                      };
                                                                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Datum not Entry constructor");
                                                                                                                                                  })())(function (entryDatum) {
                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                          var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos), entryDatumLookup ]);
                                                                                                                                                          var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v5.value0)(valRedeemer), Types_TxConstraints.mustValidateIn(v3.range) ]);
                                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          });
                                                                                                                      };
                                                                                                                      if (v4 instanceof Data_Ordering.GT) {
                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeUnbondedPoolContract: Compare GT"))(function () {
                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot get position in Assoc. List")(Utils.findInsertUpdateElem(assocList)(hashedUserPkh)))(function (v5) {
                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.StakeAct({
                                                                                                                                      stakeAmount: amt,
                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                      mintingAction: v5.value0
                                                                                                                                  })));
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.firstOutput)))(function (dHash) {
                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeUnbondedPoolContract: ")(dHash))(function () {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get Entry's  datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (firstListDatum) {
                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot extract Assoc. List datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(firstListDatum))))(function (v6) {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                      if (v6 instanceof UnbondedStaking_Types.EntryDatum) {
                                                                                                                                                          var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                              var $37 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                              if ($37) {
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                      entry: UnbondedStaking_Types.Entry({
                                                                                                                                                                          key: e.key,
                                                                                                                                                                          deposited: e.deposited,
                                                                                                                                                                          newDeposit: e.newDeposit,
                                                                                                                                                                          rewards: e.rewards,
                                                                                                                                                                          totalRewards: e.totalRewards,
                                                                                                                                                                          totalDeposited: e.totalDeposited,
                                                                                                                                                                          open: e.open,
                                                                                                                                                                          next: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                                                                      })
                                                                                                                                                                  }))));
                                                                                                                                                              };
                                                                                                                                                              var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                      entry: UnbondedStaking_Types.Entry({
                                                                                                                                                                          key: e.key,
                                                                                                                                                                          deposited: updateDeposited,
                                                                                                                                                                          newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                          rewards: e.rewards,
                                                                                                                                                                          totalRewards: e.totalRewards,
                                                                                                                                                                          totalDeposited: e.totalDeposited,
                                                                                                                                                                          open: e.open,
                                                                                                                                                                          next: e.next
                                                                                                                                                                      })
                                                                                                                                                                  }))));
                                                                                                                                                              });
                                                                                                                                                          })())(function (firstEntryDatum) {
                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(firstEntryDatum)))(function (firstEntryDatumLookup) {
                                                                                                                                                                  var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(firstEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.firstInput)(valRedeemer) ]);
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, firstEntryDatumLookup));
                                                                                                                                                              });
                                                                                                                                                          });
                                                                                                                                                      };
                                                                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Datum not Entry constructor");
                                                                                                                                                  })())(function (v7) {
                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                          var $41 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                          if ($41) {
                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not get minting action")(v5.value0))(function (ma) {
                                                                                                                                                                      var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(ma)));
                                                                                                                                                                      var entryDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                          entry: {
                                                                                                                                                                              key: hashedUserPkh,
                                                                                                                                                                              deposited: amtBigInt,
                                                                                                                                                                              newDeposit: amtBigInt,
                                                                                                                                                                              rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                                                              totalRewards: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                                                              totalDeposited: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                                                              open: true,
                                                                                                                                                                              next: v5.value1.value1.value1.secondKey
                                                                                                                                                                          }
                                                                                                                                                                      })));
                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                                          var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), entryDatumLookup ]);
                                                                                                                                                                          var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue) ]);
                                                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                      });
                                                                                                                                                                  });
                                                                                                                                                              });
                                                                                                                                                          };
                                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                      })())(function (v8) {
                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                              if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Nothing && v5.value1.value0.secondInput instanceof Data_Maybe.Nothing) {
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                              };
                                                                                                                                                              if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Just && v5.value1.value0.secondInput instanceof Data_Maybe.Just) {
                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.secondOutput.value0)))(function (dh) {
                                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeUnbondedPoolContract: ")(dh))(function () {
                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dh)))(function (secondListDatum) {
                                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(secondListDatum))))(function (v9) {
                                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                                      if (v9 instanceof UnbondedStaking_Types.EntryDatum) {
                                                                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                                              entry: v9.value0.entry
                                                                                                                                                                                          }))));
                                                                                                                                                                                      };
                                                                                                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Datum not Entry constructor");
                                                                                                                                                                                  })())(function (lastEntryDatum) {
                                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(lastEntryDatum)))(function (lastEntryDatumLookup) {
                                                                                                                                                                                          var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), lastEntryDatumLookup ]);
                                                                                                                                                                                          var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(lastEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.secondInput.value0)(valRedeemer) ]);
                                                                                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                                      });
                                                                                                                                                                                  });
                                                                                                                                                                              });
                                                                                                                                                                          });
                                                                                                                                                                      });
                                                                                                                                                                  });
                                                                                                                                                              };
                                                                                                                                                              return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Datum notEntry constructor");
                                                                                                                                                          })())(function (v9) {
                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ v7.value0, v8.value0, v9.value0, Types_TxConstraints.mustBeSignedBy(userPkh) ]), Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos), v7.value1, v8.value1, v9.value1 ])));
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          });
                                                                                                                      };
                                                                                                                      throw new Error("Failed pattern match at UnbondedStaking.UserStake (line 246, column 7 - line 578, column 18): " + [ v4.constructor.name ]);
                                                                                                                  });
                                                                                                              };
                                                                                                              if (v2 instanceof UnbondedStaking_Types.StateDatum && !v2.value0.open) {
                                                                                                                  return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Cannot deposit to a closed pool");
                                                                                                              };
                                                                                                              return Contract_Monad.throwContractError(Data_Show.showString)("userStakeUnbondedPoolContract: Datum incorrect type");
                                                                                                          })())(function (v4) {
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(v4.value1)(v4.value0)))(function (unattachedBalancedTx) {
                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_ScriptLookups.showUnattachedUnbalancedT)("userStakeUnbondedPoolContract: unAttachedUnbalancedTx")(unattachedBalancedTx))(function () {
                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeUnbondedPoolContract: Cannot balance, reindex redeemers, attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                          return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                              signedTx: signedTx
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          }));
      };
  };
  exports["userStakeUnbondedPoolContract"] = userStakeUnbondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnbondedStaking.UserWithdraw"] = $PS["UnbondedStaking.UserWithdraw"] || {};
  var exports = $PS["UnbondedStaking.UserWithdraw"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var UnbondedStaking_Types = $PS["UnbondedStaking.Types"];
  var UnbondedStaking_Utils = $PS["UnbondedStaking.Utils"];
  var Utils = $PS["Utils"];                
  var getUnbondedDatum = Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
      var $64 = Contract_Monad.liftContractM("getUnbondedDatum: could not parse datum as unbonded staking datum");
      var $65 = FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa);
      var $66 = Data_Newtype.unwrap();
      return function ($67) {
          return $64($65($66($67)));
      };
  })())(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getUnbondedDatum: could not get datum"))(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_PlutusData.getDatumByHash)((function () {
      var $68 = Contract_Monad.liftContractM("getUnbondedDatum: could not get datum hash");
      return function ($69) {
          return $68(Utils.getUtxoDatumHash($69));
      };
  })())));
  var getUnbondedAssetUtxos = function (utxos) {
      var utxoAssocList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos);
      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Array.catMaybes)(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(utxoAssocList)(function (v) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum hash")(Utils.getUtxoDatumHash(v.value1)))(function (datumHash) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum"))(Contract_PlutusData.getDatumByHash(datumHash)))(function (datum) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not parse datum as a bonded staking datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(datum))))(function (v1) {
                      if (v1 instanceof UnbondedStaking_Types.AssetDatum) {
                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Maybe.Just(v));
                      };
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value);
                  });
              });
          });
      })))(function (assetUtxos) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray)(assetUtxos));
      });
  };
  var getStateDatumFromOutput = function (txOut) {
      return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedDatum(txOut))(function (unbondedDatum) {
          if (unbondedDatum instanceof UnbondedStaking_Types.StateDatum) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(unbondedDatum.value0.maybeEntryName, unbondedDatum.value0.open));
          };
          return Contract_Monad.throwContractError(Data_Show.showString)("getStateDatumFromOutput: datum is not of State type");
      });
  };
  var getEntryDatumFromOutput = function (txOut) {
      return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedDatum(txOut))(function (unbondedDatum) {
          if (unbondedDatum instanceof UnbondedStaking_Types.EntryDatum) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(unbondedDatum.value0.entry);
          };
          return Contract_Monad.throwContractError(Data_Show.showString)("getEntryDatumFromOutput: datum is not of Entry type");
      });
  };
  var userWithdrawUnbondedPoolContract = function (v) {
      return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userWithdrawUnbondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawnUnbondedPoolContract: Cannot get user's staking pub key hash")(Contract_Address.ownStakePubKeyHash))(function (userStakingPubKeyHash) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userWithdrawUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(v)))(function (validator) {
                                      var valHash = Scripts.validatorHash(validator);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userWithdrawUnbondedPoolContract: validatorHash")(valHash))(function () {
                                          var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userWithdrawUnbondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (unbondedPoolUtxos) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawUnbondedPoolContract: Pool UTxOs")(unbondedPoolUtxos))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting unbonded assets in the pool..."))(function () {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedAssetUtxos(unbondedPoolUtxos))(function (unbondedAssetUtxos) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawnUnbondedPoolContract: Bonded Asset UTxOs")(unbondedAssetUtxos))(function () {
                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(v.nftCs)))(function (listPolicy) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting user range..."))(function () {
                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.getBondingTime(v))(function (v1) {
                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userWithdrawUnbondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v1.currTime)))(function () {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userWithdrawUnbondedPoolContract: TX Range")(v1.range))(function () {
                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get assocList utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.assocListCs)(assocListTn)))(function (v2) {
                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v2.value1)))(function (userEntry) {
                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "deposited";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "key";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "newDeposit";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "next";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "open";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "rewards";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "totalDeposited";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                      reflectSymbol: function () {
                                                                                                          return "totalRewards";
                                                                                                      }
                                                                                                  })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(userEntry))(function () {
                                                                                                      var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(userEntry.rewards))(Types_Rational.denominator(userEntry.rewards));
                                                                                                      var withdrawnAmt = Data_Semiring.add(Data_BigInt.semiringBigInt)(userEntry.deposited)(rewardsRounded);
                                                                                                      var mintEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                      var burnEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Ring.negate(Data_BigInt.ringBigInt)(Data_Semiring.one(Data_BigInt.semiringBigInt)));
                                                                                                      var assocList = Utils.mkOnchainAssocList(v.assocListCs)(unbondedPoolUtxos);
                                                                                                      var assetParams = Data_Newtype.unwrap()(v.unbondedAssetClass);
                                                                                                      var assetDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(UnbondedStaking_Types.AssetDatum.value));
                                                                                                      var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(withdrawnAmt);
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawUnbondedPoolContract: rewards")(userEntry.rewards))(function () {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: rewardsRounded")(rewardsRounded))(function () {
                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: withdrawnAmt")(withdrawnAmt))(function () {
                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Value.showValue)("userWithdrawUnbondedPoolContract: withdrawnVal")(withdrawnVal))(function () {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawUnbondedPoolContract: rewards")(userEntry.rewards))(function () {
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.unbondedAssetClass)(withdrawnAmt)(unbondedAssetUtxos)))(function (v3) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: withdrawChange")(v3.value1))(function () {
                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawUnbondedPoolContract: consumedAssetUtxos")(v3.value0))(function () {
                                                                                                                                      var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.unbondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.unbondedAssetClass)).tokenName)(v3.value1);
                                                                                                                                      var baseLookups = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos) ]);
                                                                                                                                      var baseConstraints = (function () {
                                                                                                                                          var $29 = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v3.value1)(Data_BigInt.fromInt(0));
                                                                                                                                          if ($29) {
                                                                                                                                              return Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v1.range) ]);
                                                                                                                                          };
                                                                                                                                          return Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v1.range) ]);
                                                                                                                                      })();
                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                          if (!userEntry.open) {
                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Pool closed withdrawal"))(function () {
                                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                                      burningAction: new Types.BurnSingle(v2.value0)
                                                                                                                                                  })));
                                                                                                                                                  var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnSingle(v2.value0))));
                                                                                                                                                  var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v2.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue) ]);
                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                              });
                                                                                                                                          };
                                                                                                                                          if (userEntry.open) {
                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.nftCs)(tokenName)))(function (v4) {
                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting head entry of the pool..."))(function () {
                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(getStateDatumFromOutput(v4.value1))(function (v5) {
                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Maybe.showMaybe(Types_ByteArray.showByteArray))("userWithdrawUnbondedPoolContract: Head entry of the pool")(v5.value0))(function () {
                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                      if (v5.value0 instanceof Data_Maybe.Nothing) {
                                                                                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawUnbondedPoolContract: no entries in the pool, expected at least one");
                                                                                                                                                                      };
                                                                                                                                                                      if (v5.value0 instanceof Data_Maybe.Just) {
                                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Found the head entry successfully"))(function () {
                                                                                                                                                                              var v6 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(v5.value0.value0);
                                                                                                                                                                              if (v6 instanceof Data_Ordering.LT) {
                                                                                                                                                                                  return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawUnbondedPoolContract: entry key < head key (non existent)");
                                                                                                                                                                              };
                                                                                                                                                                              if (v6 instanceof Data_Ordering.EQ) {
                                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Compare EQ"))(function () {
                                                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of entry toconsume (head)..."))(function () {
                                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v2.value1)))(function (oldHeadEntry) {
                                                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "deposited";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "key";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "newDeposit";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "next";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "open";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "rewards";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "totalDeposited";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                      return "totalRewards";
                                                                                                                                                                                                  }
                                                                                                                                                                                              })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(oldHeadEntry))(function () {
                                                                                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                                                                                      burningAction: new Types.BurnHead(v4.value0, v2.value0)
                                                                                                                                                                                                  })));
                                                                                                                                                                                                  var newState = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                                                                                                                                                      maybeEntryName: oldHeadEntry.next,
                                                                                                                                                                                                      open: v5.value1
                                                                                                                                                                                                  })));
                                                                                                                                                                                                  var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnHead(v4.value0, v2.value0))));
                                                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(newState)))(function (stateDatumLookup) {
                                                                                                                                                                                                      var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                                                                                                                      var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v4.value0)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v2.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(newState)(stateTokenValue) ]);
                                                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, stateDatumLookup));
                                                                                                                                                                                                  });
                                                                                                                                                                                              });
                                                                                                                                                                                          });
                                                                                                                                                                                      });
                                                                                                                                                                                  });
                                                                                                                                                                              };
                                                                                                                                                                              if (v6 instanceof Data_Ordering.GT) {
                                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Compare GT"))(function () {
                                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get position in Assoc. List")(Utils.findRemoveOtherElem(assocList)(hashedUserPkh)))(function (v7) {
                                                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of previousentry..."))(function () {
                                                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v7.value1.value0.firstOutput)))(function (prevEntry) {
                                                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "deposited";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "key";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "newDeposit";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "next";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "open";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "rewards";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "totalDeposited";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                      reflectSymbol: function () {
                                                                                                                                                                                                          return "totalRewards";
                                                                                                                                                                                                      }
                                                                                                                                                                                                  })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(prevEntry))(function () {
                                                                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of entry to burn..."))(function () {
                                                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v7.value1.value0.secondOutput)))(function (burnEntry) {
                                                                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "deposited";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "key";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "newDeposit";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "next";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "open";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "rewards";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "totalDeposited";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                                                                                      return "totalRewards";
                                                                                                                                                                                                                  }
                                                                                                                                                                                                              })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(burnEntry))(function () {
                                                                                                                                                                                                                  var prevEntryUpdated = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                                                                      entry: UnbondedStaking_Types.Entry({
                                                                                                                                                                                                                          key: prevEntry.key,
                                                                                                                                                                                                                          deposited: prevEntry.deposited,
                                                                                                                                                                                                                          newDeposit: prevEntry.newDeposit,
                                                                                                                                                                                                                          rewards: prevEntry.rewards,
                                                                                                                                                                                                                          totalRewards: prevEntry.totalRewards,
                                                                                                                                                                                                                          totalDeposited: prevEntry.totalDeposited,
                                                                                                                                                                                                                          open: prevEntry.open,
                                                                                                                                                                                                                          next: burnEntry.next
                                                                                                                                                                                                                      })
                                                                                                                                                                                                                  })));
                                                                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create updated prev  entry datum lookup")(Types_ScriptLookups.datum(prevEntryUpdated)))(function (prevEntryDatumLookup) {
                                                                                                                                                                                                                      var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                                                                                          stakeHolder: userPkh,
                                                                                                                                                                                                                          burningAction: new Types.BurnOther(v7.value0.firstInput, v7.value0.secondInput)
                                                                                                                                                                                                                      })));
                                                                                                                                                                                                                      var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnOther(v7.value0.firstInput, v7.value0.secondInput))));
                                                                                                                                                                                                                      var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v7.value0.firstInput)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v7.value0.secondInput)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(prevEntryUpdated)(mintEntryValue) ]);
                                                                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, prevEntryDatumLookup));
                                                                                                                                                                                                                  });
                                                                                                                                                                                                              });
                                                                                                                                                                                                          });
                                                                                                                                                                                                      });
                                                                                                                                                                                                  });
                                                                                                                                                                                              });
                                                                                                                                                                                          });
                                                                                                                                                                                      });
                                                                                                                                                                                  });
                                                                                                                                                                              };
                                                                                                                                                                              throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 285, column 11 - line 405, column 57): " + [ v6.constructor.name ]);
                                                                                                                                                                          });
                                                                                                                                                                      };
                                                                                                                                                                      throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 278, column 33 - line 405, column 57): " + [ v5.value0.constructor.name ]);
                                                                                                                                                                  })())(function (v6) {
                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(v6.value0, v6.value1));
                                                                                                                                                                  });
                                                                                                                                                              });
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          };
                                                                                                                                          throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 243, column 29 - line 406, column 36): " + [ userEntry.open.constructor.name ]);
                                                                                                                                      })())(function (v4) {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(baseLookups)(v4.value1))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(baseConstraints)(v4.value0))))(function (unattachedBalancedTx) {
                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_ScriptLookups.showUnattachedUnbalancedT)("userWithdrawUnbondedPoolContract: unAttachedUnbalancedTx")(unattachedBalancedTx))(function () {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot balance, reindex redeemers,  attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                                          signedTx: signedTx
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["userWithdrawUnbondedPoolContract"] = userWithdrawUnbondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UserStake"] = $PS["UserStake"] || {};
  var exports = $PS["UserStake"];
  var BondedStaking_TimeUtils = $PS["BondedStaking.TimeUtils"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Utils = $PS["Utils"];                
  var userStakeBondedPoolContract = function (v) {
      return function (amt) {
          return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userStakeBondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Address.showAddress)("userStakeBondedPoolContract: User Address")(userAddr))(function () {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userStakeBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                      var valHash = Scripts.validatorHash(validator);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userStakeBondedPoolContract: validatorHash")(valHash))(function () {
                                          var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userStakeBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userStakeBondedPoolContract: Pool UTXOs")(bondedPoolUtxos))(function () {
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("userStakeBondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                                                                                      var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                      var assetParams = Data_Newtype.unwrap()(v.bondedAssetClass);
                                                                                      var assetDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(Types.AssetDatum.value));
                                                                                      var amtBigInt = Types_Natural.toBigInt(amt);
                                                                                      var stakeValue = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(amtBigInt);
                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(v.nftCs)))(function (listPolicy) {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                              var entryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Getting staking range..."))(function () {
                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getStakingTime(v))(function (v3) {
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userStakeBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userStakeBondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                  if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Nothing) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Nothing }"))(function () {
                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                              var mh = new Types.MintHead(v1.value0);
                                                                                                                              var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                              var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                  stakeAmount: amt,
                                                                                                                                  stakeHolder: userPkh,
                                                                                                                                  mintingAction: new Data_Maybe.Just(mh)
                                                                                                                              })));
                                                                                                                              var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                  entry: {
                                                                                                                                      key: hashedUserPkh,
                                                                                                                                      newDeposit: amtBigInt,
                                                                                                                                      deposited: amtBigInt,
                                                                                                                                      staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                      rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                      next: Data_Maybe.Nothing.value
                                                                                                                                  }
                                                                                                                              })));
                                                                                                                              var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                  maybeEntryName: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                              })));
                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                      var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                      var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(bondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustValidateIn(v3.range) ]);
                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  };
                                                                                                                  if (v2 instanceof Types.StateDatum && v2.value0.maybeEntryName instanceof Data_Maybe.Just) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: STAKE TYPE - StateDatum is StateDatum { maybeEntryName: Just ... }"))(function () {
                                                                                                                          var assocList = Utils.mkOnchainAssocList(v.assocListCs)(bondedPoolUtxos);
                                                                                                                          var v4 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(v2.value0.maybeEntryName.value0);
                                                                                                                          if (v4 instanceof Data_Ordering.LT) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare LT"))(function () {
                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                      var mh = new Types.MintHead(v1.value0);
                                                                                                                                      var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(mh)));
                                                                                                                                      var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                          stakeAmount: amt,
                                                                                                                                          stakeHolder: userPkh,
                                                                                                                                          mintingAction: new Data_Maybe.Just(mh)
                                                                                                                                      })));
                                                                                                                                      var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                          entry: {
                                                                                                                                              key: hashedUserPkh,
                                                                                                                                              newDeposit: amtBigInt,
                                                                                                                                              deposited: amtBigInt,
                                                                                                                                              staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                              rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                              next: new Data_Maybe.Just(v2.value0.maybeEntryName.value0)
                                                                                                                                          }
                                                                                                                                      })));
                                                                                                                                      var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                          maybeEntryName: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                                      })));
                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create entry datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                              var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup, entryDatumLookup ]);
                                                                                                                                              var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(bondedStateDatum)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer) ]);
                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          };
                                                                                                                          if (v4 instanceof Data_Ordering.EQ) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare EQ"))(function () {
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract head from Assoc. List - this should be impossible")(Data_Array.head(assocList)))(function (assocElem) {
                                                                                                                                      var v5 = Data_Tuple.snd(assocElem);
                                                                                                                                      var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                          stakeAmount: amt,
                                                                                                                                          stakeHolder: userPkh,
                                                                                                                                          mintingAction: Data_Maybe.Nothing.value
                                                                                                                                      })));
                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1)))(function (dHash) {
                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dHash))(function () {
                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (listDatum) {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(listDatum))))(function (v6) {
                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                          if (v6 instanceof Types.EntryDatum) {
                                                                                                                                                              var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                              var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                      entry: Types.Entry({
                                                                                                                                                                          key: e.key,
                                                                                                                                                                          newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                          deposited: updateDeposited,
                                                                                                                                                                          staked: e.staked,
                                                                                                                                                                          rewards: e.rewards,
                                                                                                                                                                          next: e.next
                                                                                                                                                                      })
                                                                                                                                                                  }))));
                                                                                                                                                              });
                                                                                                                                                          };
                                                                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                      })())(function (entryDatum) {
                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                              var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), entryDatumLookup ]);
                                                                                                                                                              var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(assetDatum)(stakeValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue), Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v5.value0)(valRedeemer) ]);
                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          };
                                                                                                                          if (v4 instanceof Data_Ordering.GT) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userStakeBondedPoolContract: Compare GT"))(function () {
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot get position in Assoc. List")(Utils.findInsertUpdateElem(assocList)(hashedUserPkh)))(function (v5) {
                                                                                                                                      var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.StakeAct({
                                                                                                                                          stakeAmount: amt,
                                                                                                                                          stakeHolder: userPkh,
                                                                                                                                          mintingAction: v5.value0
                                                                                                                                      })));
                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.firstOutput)))(function (dHash) {
                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dHash))(function () {
                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's  datum")(Contract_PlutusData.getDatumByHash(dHash)))(function (firstListDatum) {
                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract Assoc. List datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(firstListDatum))))(function (v6) {
                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                          if (v6 instanceof Types.EntryDatum) {
                                                                                                                                                              var e = Data_Newtype.unwrap()(v6.value0.entry);
                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                  var $36 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                                  if ($36) {
                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                          entry: Types.Entry({
                                                                                                                                                                              key: e.key,
                                                                                                                                                                              newDeposit: e.newDeposit,
                                                                                                                                                                              deposited: e.deposited,
                                                                                                                                                                              staked: e.staked,
                                                                                                                                                                              rewards: e.rewards,
                                                                                                                                                                              next: new Data_Maybe.Just(hashedUserPkh)
                                                                                                                                                                          })
                                                                                                                                                                      }))));
                                                                                                                                                                  };
                                                                                                                                                                  var updateDeposited = Data_Semiring.add(Data_BigInt.semiringBigInt)(e.deposited)(amtBigInt);
                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Types_Natural.toBigInt(v.minStake))(updateDeposited) && Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(updateDeposited)(Types_Natural.toBigInt(v.maxStake)))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                          entry: Types.Entry({
                                                                                                                                                                              key: e.key,
                                                                                                                                                                              newDeposit: Data_Semiring.add(Data_BigInt.semiringBigInt)(e.newDeposit)(amtBigInt),
                                                                                                                                                                              deposited: updateDeposited,
                                                                                                                                                                              staked: e.staked,
                                                                                                                                                                              rewards: e.rewards,
                                                                                                                                                                              next: e.next
                                                                                                                                                                          })
                                                                                                                                                                      }))));
                                                                                                                                                                  });
                                                                                                                                                              })())(function (firstEntryDatum) {
                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(firstEntryDatum)))(function (firstEntryDatumLookup) {
                                                                                                                                                                      var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(firstEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.firstInput)(valRedeemer) ]);
                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, firstEntryDatumLookup));
                                                                                                                                                                  });
                                                                                                                                                              });
                                                                                                                                                          };
                                                                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                      })())(function (v7) {
                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                              var $40 = Data_Maybe.isJust(v5.value0);
                                                                                                                                                              if ($40) {
                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(v.minStake)(amt) && Data_Ord.lessThanOrEq(Types_Natural.ordNatural)(amt)(v.maxStake))(Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Stake amount outside of min/max range")))(function () {
                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get minting action")(v5.value0))(function (ma) {
                                                                                                                                                                          var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(new Types.ListInsert(ma)));
                                                                                                                                                                          var entryDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                              entry: {
                                                                                                                                                                                  key: hashedUserPkh,
                                                                                                                                                                                  newDeposit: amtBigInt,
                                                                                                                                                                                  deposited: amtBigInt,
                                                                                                                                                                                  staked: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                                                                                                                                                  rewards: Data_Semiring.zero(Types_Rational.semiringRational),
                                                                                                                                                                                  next: v5.value1.value1.value1.secondKey
                                                                                                                                                                              }
                                                                                                                                                                          })));
                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(entryDatum)))(function (entryDatumLookup) {
                                                                                                                                                                              var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), entryDatumLookup ]);
                                                                                                                                                                              var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(entryValue), Utils.mustPayToScript(valHash)(entryDatum)(entryValue) ]);
                                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                          });
                                                                                                                                                                      });
                                                                                                                                                                  });
                                                                                                                                                              };
                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                          })())(function (v8) {
                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                  if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Nothing && v5.value1.value0.secondInput instanceof Data_Maybe.Nothing) {
                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Data_Monoid.mempty(Types_TxConstraints.monoidTxConstraints), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                                                  };
                                                                                                                                                                  if (v5.value1.value1.value0.secondOutput instanceof Data_Maybe.Just && v5.value1.value0.secondInput instanceof Data_Maybe.Just) {
                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not get Entry Datum Hash")(Utils.getUtxoDatumHash(v5.value1.value1.value0.secondOutput.value0)))(function (dh) {
                                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("userStakeBondedPoolContract: ")(dh))(function () {
                                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot get Entry's datum")(Contract_PlutusData.getDatumByHash(dh)))(function (secondListDatum) {
                                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(secondListDatum))))(function (v9) {
                                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                                          if (v9 instanceof Types.EntryDatum) {
                                                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                                                  entry: v9.value0.entry
                                                                                                                                                                                              }))));
                                                                                                                                                                                          };
                                                                                                                                                                                          return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum not Entry constructor");
                                                                                                                                                                                      })())(function (lastEntryDatum) {
                                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userStakeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(lastEntryDatum)))(function (lastEntryDatumLookup) {
                                                                                                                                                                                              var lu = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(listPolicy), lastEntryDatumLookup ]);
                                                                                                                                                                                              var constr = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(lastEntryDatum)(entryValue), Types_TxConstraints.mustSpendScriptOutput(v5.value1.value0.secondInput.value0)(valRedeemer) ]);
                                                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constr, lu));
                                                                                                                                                                                          });
                                                                                                                                                                                      });
                                                                                                                                                                                  });
                                                                                                                                                                              });
                                                                                                                                                                          });
                                                                                                                                                                      });
                                                                                                                                                                  };
                                                                                                                                                                  return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum notEntry constructor");
                                                                                                                                                              })())(function (v9) {
                                                                                                                                                                  return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ v7.value0, v8.value0, v9.value0, Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustValidateIn(v3.range) ]), Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), v7.value1, v8.value1, v9.value1 ])));
                                                                                                                                                              });
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          };
                                                                                                                          throw new Error("Failed pattern match at UserStake (line 246, column 7 - line 572, column 18): " + [ v4.constructor.name ]);
                                                                                                                      });
                                                                                                                  };
                                                                                                                  return Contract_Monad.throwContractError(Data_Show.showString)("userStakeBondedPoolContract: Datum incorrect type");
                                                                                                              })())(function (v4) {
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(v4.value1)(v4.value0)))(function (unattachedBalancedTx) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userStakeBondedPoolContract: Cannot balance, reindex redeemers, attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                  signedTx: signedTx
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          }));
      };
  };
  exports["userStakeBondedPoolContract"] = userStakeBondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UserWithdraw"] = $PS["UserWithdraw"] || {};
  var exports = $PS["UserWithdraw"];
  var BondedStaking_TimeUtils = $PS["BondedStaking.TimeUtils"];
  var Contract_Address = $PS["Contract.Address"];
  var Contract_Log = $PS["Contract.Log"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_PlutusData = $PS["Contract.PlutusData"];
  var Contract_Prelude = $PS["Contract.Prelude"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var FromData = $PS["FromData"];
  var IsData = $PS["IsData"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_Transaction = $PS["Plutus.Types.Transaction"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Scripts_ListNFT = $PS["Scripts.ListNFT"];
  var Scripts_PoolValidator = $PS["Scripts.PoolValidator"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Settings = $PS["Settings"];
  var ToData = $PS["ToData"];
  var Types = $PS["Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_Redeemer = $PS["Types.Redeemer"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Utils = $PS["Utils"];                
  var getBondedDatum = Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
      var $59 = Contract_Monad.liftContractM("getBondedDatum: could not parse datum as bonded staking datum");
      var $60 = FromData.fromData(Types.fromDataBondedStakingDatu);
      var $61 = Data_Newtype.unwrap();
      return function ($62) {
          return $59($60($61($62)));
      };
  })())(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondedDatum: could not get datum"))(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_PlutusData.getDatumByHash)((function () {
      var $63 = Contract_Monad.liftContractM("getBondedDatum: could not get datum hash");
      return function ($64) {
          return $63(Utils.getUtxoDatumHash($64));
      };
  })())));
  var getEntryDatumFromOutput = function (txOut) {
      return Control_Bind.bind(Contract_Monad.bindContract)(getBondedDatum(txOut))(function (bondedDatum) {
          if (bondedDatum instanceof Types.EntryDatum) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(bondedDatum.value0.entry);
          };
          return Contract_Monad.throwContractError(Data_Show.showString)("getEntryDatumFromOutput: datum is not of Entry type");
      });
  };
  var getStateDatumFromOutput = function (txOut) {
      return Control_Bind.bind(Contract_Monad.bindContract)(getBondedDatum(txOut))(function (bondedDatum) {
          if (bondedDatum instanceof Types.StateDatum) {
              return Control_Applicative.pure(Contract_Monad.applicativeContract)(bondedDatum.value0.maybeEntryName);
          };
          return Contract_Monad.throwContractError(Data_Show.showString)("getStateDatumFromOutput: datum is not of State type");
      });
  };
  var getBondedAssetUtxos = function (utxos) {
      var utxoAssocList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos);
      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Array.catMaybes)(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(utxoAssocList)(function (v) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum hash")(Utils.getUtxoDatumHash(v.value1)))(function (datumHash) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum"))(Contract_PlutusData.getDatumByHash(datumHash)))(function (datum) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not parse datum as a bonded staking datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(datum))))(function (v1) {
                      if (v1 instanceof Types.AssetDatum) {
                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Maybe.Just(v));
                      };
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value);
                  });
              });
          });
      })))(function (assetUtxos) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray)(assetUtxos));
      });
  };
  var userWithdrawBondedPoolContract = function (v) {
      return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userWithdrawBondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawnBondedPoolContract: Cannot get user's staking pub key hash")(Contract_Address.ownStakePubKeyHash))(function (userStakingPubKeyHash) {
                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userWithdrawBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                      var valHash = Scripts.validatorHash(validator);
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userWithdrawBondedPoolContract: validatorHash")(valHash))(function () {
                                          var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userWithdrawBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: Pool UTxOs")(bondedPoolUtxos))(function () {
                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting head entry of the pool..."))(function () {
                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(getStateDatumFromOutput(v1.value1))(function (headEntry) {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Maybe.showMaybe(Types_ByteArray.showByteArray))("userWithdrawBondedPoolContract: Head entry of the pool")(headEntry))(function () {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting bonded assets in the pool..."))(function () {
                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(getBondedAssetUtxos(bondedPoolUtxos))(function (bondedAssetUtxos) {
                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawnBondedPoolContract: Bonded Asset UTxOs")(bondedAssetUtxos))(function () {
                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(v.nftCs)))(function (listPolicy) {
                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting withdrawing range..."))(function () {
                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getWithdrawingTime(v))(function (v2) {
                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userWithdrawBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v2.currTime)))(function () {
                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userWithdrawBondedPoolContract: TX Range")(v2.range))(function () {
                                                                                                              var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                              var mintEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                              var burnEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Ring.negate(Data_BigInt.ringBigInt)(Data_Semiring.one(Data_BigInt.semiringBigInt)));
                                                                                                              var assocList = Utils.mkOnchainAssocList(v.assocListCs)(bondedPoolUtxos);
                                                                                                              var assetParams = Data_Newtype.unwrap()(v.bondedAssetClass);
                                                                                                              var assetDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(Types.AssetDatum.value));
                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                  if (headEntry instanceof Data_Maybe.Nothing) {
                                                                                                                      return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawBondedPoolContract: no entries in the pool, expected at least one");
                                                                                                                  };
                                                                                                                  if (headEntry instanceof Data_Maybe.Just) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Found the head entry successfully"))(function () {
                                                                                                                          var v3 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(headEntry.value0);
                                                                                                                          if (v3 instanceof Data_Ordering.LT) {
                                                                                                                              return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawBondedPoolContract: entry key < head key (non existent)");
                                                                                                                          };
                                                                                                                          if (v3 instanceof Data_Ordering.EQ) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Compare EQ"))(function () {
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot extract head from Assoc. List - this should be impossible")(Data_Array.head(assocList)))(function (v4) {
                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of entry toconsume (head)..."))(function () {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value1)))(function (oldHeadEntry) {
                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "deposited";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "key";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "newDeposit";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "next";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "rewards";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "staked";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(oldHeadEntry))(function () {
                                                                                                                                                  var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(oldHeadEntry.deposited);
                                                                                                                                                  var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(oldHeadEntry.rewards))(Types_Rational.denominator(oldHeadEntry.rewards));
                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawBondedPoolContract: rewards")(oldHeadEntry.rewards))(function () {
                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: rewardsRounded")(rewardsRounded))(function () {
                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawnAmt")(oldHeadEntry.deposited))(function () {
                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Value.showValue)("userWithdrawBondedPoolContract: withdrawnVal")(withdrawnVal))(function () {
                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawBondedPoolContract: rewards")(oldHeadEntry.rewards))(function () {
                                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.bondedAssetClass)(oldHeadEntry.deposited)(bondedAssetUtxos)))(function (v5) {
                                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawChange")(v5.value1))(function () {
                                                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: consumedAssetUtxos")(v5.value0))(function () {
                                                                                                                                                                                  var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.WithdrawAct({
                                                                                                                                                                                      stakeHolder: userPkh,
                                                                                                                                                                                      burningAction: new Types.BurnHead(v1.value0, v4.value1.value0)
                                                                                                                                                                                  })));
                                                                                                                                                                                  var newState = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                                                                      maybeEntryName: oldHeadEntry.next
                                                                                                                                                                                  })));
                                                                                                                                                                                  var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnHead(v1.value0, v4.value1.value0))));
                                                                                                                                                                                  var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.bondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.bondedAssetClass)).tokenName)(v5.value1);
                                                                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(newState)))(function (stateDatumLookup) {
                                                                                                                                                                                      var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), stateDatumLookup ]);
                                                                                                                                                                                      var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v4.value1.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v5.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(newState)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v2.range) ]);
                                                                                                                                                                                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                                                  });
                                                                                                                                                                              });
                                                                                                                                                                          });
                                                                                                                                                                      });
                                                                                                                                                                  });
                                                                                                                                                              });
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          };
                                                                                                                          if (v3 instanceof Data_Ordering.GT) {
                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Compare GT"))(function () {
                                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get position in Assoc. List")(Utils.findRemoveOtherElem(assocList)(hashedUserPkh)))(function (v4) {
                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of previousentry..."))(function () {
                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value0.firstOutput)))(function (prevEntry) {
                                                                                                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "deposited";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "key";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "newDeposit";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "next";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "rewards";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsCons({
                                                                                                                                                  reflectSymbol: function () {
                                                                                                                                                      return "staked";
                                                                                                                                                  }
                                                                                                                                              })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(prevEntry))(function () {
                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of entry to burn..."))(function () {
                                                                                                                                                      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value0.secondOutput)))(function (burnEntry) {
                                                                                                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "deposited";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "key";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "newDeposit";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "next";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "rewards";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsCons({
                                                                                                                                                              reflectSymbol: function () {
                                                                                                                                                                  return "staked";
                                                                                                                                                              }
                                                                                                                                                          })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(burnEntry))(function () {
                                                                                                                                                              var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(burnEntry.rewards))(Types_Rational.denominator(burnEntry.rewards));
                                                                                                                                                              var withdrawnAmt = Data_Semiring.add(Data_BigInt.semiringBigInt)(burnEntry.staked)(rewardsRounded);
                                                                                                                                                              var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(withdrawnAmt);
                                                                                                                                                              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.bondedAssetClass)(withdrawnAmt)(bondedAssetUtxos)))(function (v5) {
                                                                                                                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawChange")(v5.value1))(function () {
                                                                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: consumedAssetUtxos")(v5.value0))(function () {
                                                                                                                                                                          var prevEntryUpdated = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                              entry: Types.Entry({
                                                                                                                                                                                  key: prevEntry.key,
                                                                                                                                                                                  newDeposit: prevEntry.newDeposit,
                                                                                                                                                                                  deposited: prevEntry.deposited,
                                                                                                                                                                                  staked: prevEntry.staked,
                                                                                                                                                                                  rewards: prevEntry.rewards,
                                                                                                                                                                                  next: burnEntry.next
                                                                                                                                                                              })
                                                                                                                                                                          })));
                                                                                                                                                                          var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.bondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.bondedAssetClass)).tokenName)(v5.value1);
                                                                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create updated prev  entry datum lookup")(Types_ScriptLookups.datum(prevEntryUpdated)))(function (prevEntryDatumLookup) {
                                                                                                                                                                              var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.WithdrawAct({
                                                                                                                                                                                  stakeHolder: userPkh,
                                                                                                                                                                                  burningAction: new Types.BurnOther(v4.value0.firstInput, v4.value0.secondInput)
                                                                                                                                                                              })));
                                                                                                                                                                              var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnOther(v4.value0.firstInput, v4.value0.secondInput))));
                                                                                                                                                                              var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), prevEntryDatumLookup ]);
                                                                                                                                                                              var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v4.value0.firstInput)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v4.value0.secondInput)(valRedeemer), Utils.mkAssetUtxosConstraints(v5.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(prevEntryUpdated)(mintEntryValue), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v2.range) ]);
                                                                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                                          });
                                                                                                                                                                      });
                                                                                                                                                                  });
                                                                                                                                                              });
                                                                                                                                                          });
                                                                                                                                                      });
                                                                                                                                                  });
                                                                                                                                              });
                                                                                                                                          });
                                                                                                                                      });
                                                                                                                                  });
                                                                                                                              });
                                                                                                                          };
                                                                                                                          throw new Error("Failed pattern match at UserWithdraw (line 189, column 7 - line 415, column 39): " + [ v3.constructor.name ]);
                                                                                                                      });
                                                                                                                  };
                                                                                                                  throw new Error("Failed pattern match at UserWithdraw (line 182, column 28 - line 415, column 39): " + [ headEntry.constructor.name ]);
                                                                                                              })())(function (v3) {
                                                                                                                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(v3.value1)(v3.value0)))(function (unattachedBalancedTx) {
                                                                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                                                                                                                          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot balance, reindex redeemers, attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                              return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                  signedTx: signedTx
                                                                                                                              });
                                                                                                                          });
                                                                                                                      });
                                                                                                                  });
                                                                                                              });
                                                                                                          });
                                                                                                      });
                                                                                                  });
                                                                                              });
                                                                                          });
                                                                                      });
                                                                                  });
                                                                              });
                                                                          });
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["userWithdrawBondedPoolContract"] = userWithdrawBondedPoolContract;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["SdkApi"] = $PS["SdkApi"] || {};
  var exports = $PS["SdkApi"];
  var ClosePool = $PS["ClosePool"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Promise = $PS["Control.Promise"];
  var CreatePool = $PS["CreatePool"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_UInt = $PS["Data.UInt"];
  var DepositPool = $PS["DepositPool"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_NatRatio = $PS["Types.NatRatio"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var Types_TokenName = $PS["Types.TokenName"];
  var UnbondedStaking_ClosePool = $PS["UnbondedStaking.ClosePool"];
  var UnbondedStaking_CreatePool = $PS["UnbondedStaking.CreatePool"];
  var UnbondedStaking_DepositPool = $PS["UnbondedStaking.DepositPool"];
  var UnbondedStaking_UserStake = $PS["UnbondedStaking.UserStake"];
  var UnbondedStaking_UserWithdraw = $PS["UnbondedStaking.UserWithdraw"];
  var UserStake = $PS["UserStake"];
  var UserWithdraw = $PS["UserWithdraw"];
  var Utils = $PS["Utils"];
  var Wallet_Spec = $PS["Wallet.Spec"];                
  var toSdkInterest = function (i) {
      return {
          numerator: Types_Rational.numerator(i),
          denominator: Types_Rational.denominator(i)
      };
  };
  var toSdkCurrencySymbol = function ($41) {
      return Types_ByteArray.byteArrayToHex(Plutus_Types_CurrencySymbol.getCurrencySymbol($41));
  };
  var toSdkAssetClass = function (v) {
      var tokenNameAscii = (function (dictPartial) {
          var $42 = Data_Maybe.fromJust();
          var $43 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_CodeUnits.fromCharArray);
          var $44 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Char.fromCharCode);
          return function ($45) {
              return $42($43($44(Types_ByteArray.byteArrayToIntArray(Types_TokenName.getTokenName($45)))));
          };
      })();
      return {
          currencySymbol: Types_ByteArray.byteArrayToHex(Plutus_Types_CurrencySymbol.getCurrencySymbol(v.currencySymbol)),
          tokenName: tokenNameAscii(v.tokenName)
      };
  };
  var toSdkAdmin = (function () {
      var $46 = Data_Newtype.unwrap();
      var $47 = Data_Newtype.unwrap();
      return function ($48) {
          return Types_RawBytes.rawBytesToHex(Serialization_Hash.ed25519KeyHashToBytes($46($47($48))));
      };
  })();
  var toUnbondedPoolArgs = function (v) {
      return {
          start: v.start,
          userLength: v.userLength,
          adminLength: v.adminLength,
          bondingLength: v.bondingLength,
          interestLength: v.interestLength,
          increments: Types_Natural.toBigInt(v.increments),
          interest: toSdkInterest(v.interest),
          minStake: Types_Natural.toBigInt(v.minStake),
          maxStake: Types_Natural.toBigInt(v.maxStake),
          admin: toSdkAdmin(v.admin),
          unbondedAssetClass: toSdkAssetClass(v.unbondedAssetClass),
          nftCs: toSdkCurrencySymbol(v.nftCs),
          assocListCs: toSdkCurrencySymbol(v.assocListCs)
      };
  };
  var toBondedPoolArgs = function (v) {
      return {
          iterations: Types_Natural.toBigInt(v.iterations),
          start: v.start,
          end: v.end,
          userLength: v.userLength,
          bondingLength: v.bondingLength,
          interest: toSdkInterest(v.interest),
          minStake: Types_Natural.toBigInt(v.minStake),
          maxStake: Types_Natural.toBigInt(v.maxStake),
          bondedAssetClass: toSdkAssetClass(v.bondedAssetClass),
          admin: toSdkAdmin(v.admin),
          nftCs: toSdkCurrencySymbol(v.nftCs),
          assocListCs: toSdkCurrencySymbol(v.assocListCs)
      };
  };
  var fromSdkWalletSpec = function (v) {
      if (v === "Nami") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToNami.value);
      };
      if (v === "Gero") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToGero.value);
      };
      if (v === "Flint") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToFlint.value);
      };
      if (v === "Lode") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToLode.value);
      };
      if (v === "Eternl") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Wallet_Spec.ConnectToEternl.value);
      };
      return Data_Either.Left.create(Effect_Exception.error("Invalid `WalletSpec`: " + v));
  };
  var fromSdkPath = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var fromSdkServerConfig = function (serviceName) {
      return function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Effect_Exception.error("invalid " + (serviceName + " port number")))(Data_UInt["fromNumber'"](v.port)))(function (port) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  port: port,
                  host: v.host,
                  path: fromSdkPath(v.path),
                  secure: v.secure
              });
          });
      };
  };
  var fromSdkNat = function (context) {
      return function (name) {
          return function (bint) {
              var msg = context + (": Could not convert " + (name + " to `Natural`"));
              return Data_Either.note(Effect_Exception.error(msg))(Types_Natural.fromBigInt(bint));
          };
      };
  };
  var fromSdkLogLevel = function (v) {
      if (v === "Trace") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Trace.value);
      };
      if (v === "Debug") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Debug.value);
      };
      if (v === "Info") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Info.value);
      };
      if (v === "Warn") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level.Warn.value);
      };
      if (v === "Error") {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Log_Level["Error"].value);
      };
      return Data_Either.Left.create(Effect_Exception.error("Invalid `LogLevel`: " + v));
  };
  var fromSdkInterest = function (context) {
      return function (v) {
          var msg = context + ": invalid `Rational`";
          return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat(context)("interest numerator")(v.numerator))(function (interestNum) {
              return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat(context)("interest denominator")(v.denominator))(function (interestDen) {
                  return Data_Either.note(Effect_Exception.error(msg))(Data_Functor.map(Data_Maybe.functorMaybe)(Types_NatRatio.toRational)(Types_NatRatio.fromNaturals(interestNum)(interestDen)));
              });
          });
      };
  };
  var fromSdkAdmin = function (context) {
      return function (admin) {
          var msg = context + ": invalid admin";
          return Data_Either.note(Effect_Exception.error(msg))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $49 = Data_Newtype.wrap();
              var $50 = Data_Newtype.wrap();
              return function ($51) {
                  return $49($50($51));
              };
          })())(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Serialization_Hash.ed25519KeyHashFromBytes)(Types_RawBytes.hexToRawBytes(admin))));
      };
  };
  var errorWithMsg = function (context) {
      return function (name) {
          return Effect_Exception.error(context + (": invalid " + name));
      };
  };
  var fromSdkCurrencySymbol = function (context) {
      return function (currencySymbol) {
          return Data_Either.note(errorWithMsg(context)("`CurrencySymbol`"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Plutus_Types_CurrencySymbol.mkCurrencySymbol)(Types_ByteArray.hexToByteArray(currencySymbol)));
      };
  };
  var fromSdkTokenName = function (context) {
      return function (tokenName) {
          return Data_Either.note(errorWithMsg(context)("`TokenName`"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.byteArrayFromAscii(tokenName)));
      };
  };
  var fromSdkAssetClass = function (context) {
      return function (v) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return function (v2) {
                  return {
                      currencySymbol: v1,
                      tokenName: v2
                  };
              };
          })(fromSdkCurrencySymbol(context)(v.currencySymbol)))(fromSdkTokenName(context)(v.tokenName)));
      };
  };
  var fromBondedPoolArgs = function (bpa) {
      var fromSdkNat$prime = function (name) {
          return fromSdkNat("fromBondedPoolArgs")(name);
      };
      return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("iterations")(bpa.iterations))(function (iterations) {
          return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromBondedPoolArgs")(bpa.interest))(function (interest) {
              return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(bpa.minStake))(function (minStake) {
                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(bpa.maxStake))(function (maxStake) {
                      return Control_Bind.bind(Data_Either.bindEither)(fromSdkAdmin("fromBondedPoolArgs")(bpa.admin))(function (admin) {
                          return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromBondedPoolArgs")(bpa.bondedAssetClass))(function (bondedAssetClass) {
                              return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromBondedPoolArgs")(bpa.nftCs))(function (nftCs) {
                                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromBondedPoolArgs")(bpa.assocListCs))(function (assocListCs) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                          iterations: iterations,
                                          start: bpa.start,
                                          end: bpa.end,
                                          userLength: bpa.userLength,
                                          bondingLength: bpa.bondingLength,
                                          interest: interest,
                                          minStake: minStake,
                                          maxStake: maxStake,
                                          admin: admin,
                                          bondedAssetClass: bondedAssetClass,
                                          nftCs: nftCs,
                                          assocListCs: assocListCs
                                      }));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var fromInitialBondedArgs = function (iba) {
      var fromSdkNat$prime = function (name) {
          return fromSdkNat("fromInitialBondedArgs")(name);
      };
      return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("iteration")(iba.iterations))(function (iterations) {
          return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromInitialBondedArgs")(iba.interest))(function (interest) {
              return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(iba.minStake))(function (minStake) {
                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(iba.maxStake))(function (maxStake) {
                      return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromInitialBondedArgs")(iba.bondedAssetClass))(function (bondedAssetClass) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                              iterations: iterations,
                              start: iba.start,
                              end: iba.end,
                              userLength: iba.userLength,
                              bondingLength: iba.bondingLength,
                              interest: interest,
                              minStake: minStake,
                              maxStake: maxStake,
                              bondedAssetClass: bondedAssetClass
                          }));
                      });
                  });
              });
          });
      });
  };
  var fromInitialUnbondedArgs = function (iba) {
      var fromSdkNat$prime = function (name) {
          return fromSdkNat("fromInitialUnbondedArgs")(name);
      };
      return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromInitialUnbondedArgs")(iba.interest))(function (interest) {
          return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("increments")(iba.increments))(function (increments) {
              return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(iba.minStake))(function (minStake) {
                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(iba.maxStake))(function (maxStake) {
                      return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromInitialUnbondedArgs")(iba.unbondedAssetClass))(function (unbondedAssetClass) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                              start: iba.start,
                              userLength: iba.userLength,
                              adminLength: iba.adminLength,
                              bondingLength: iba.bondingLength,
                              interestLength: iba.interestLength,
                              interest: interest,
                              increments: increments,
                              minStake: minStake,
                              maxStake: maxStake,
                              unbondedAssetClass: unbondedAssetClass
                          }));
                      });
                  });
              });
          });
      });
  };
  var fromUnbondedPoolArgs = function (upa) {
      var fromSdkNat$prime = function (name) {
          return fromSdkNat("fromUnbondedPoolArgs")(name);
      };
      return Control_Bind.bind(Data_Either.bindEither)(fromSdkInterest("fromUnbondedPoolArgs")(upa.interest))(function (interest) {
          return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("minStake")(upa.minStake))(function (minStake) {
              return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("maxStake")(upa.maxStake))(function (maxStake) {
                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkNat$prime("increments")(upa.increments))(function (increments) {
                      return Control_Bind.bind(Data_Either.bindEither)(fromSdkAdmin("fromUnbondedPoolArgs")(upa.admin))(function (admin) {
                          return Control_Bind.bind(Data_Either.bindEither)(fromSdkAssetClass("fromUnbondedPoolArgs")(upa.unbondedAssetClass))(function (unbondedAssetClass) {
                              return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromUnbondedPoolArgs")(upa.nftCs))(function (nftCs) {
                                  return Control_Bind.bind(Data_Either.bindEither)(fromSdkCurrencySymbol("fromUnbondedPoolArgs")(upa.assocListCs))(function (assocListCs) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                                          start: upa.start,
                                          userLength: upa.userLength,
                                          adminLength: upa.adminLength,
                                          bondingLength: upa.bondingLength,
                                          interestLength: upa.interestLength,
                                          increments: increments,
                                          interest: interest,
                                          minStake: minStake,
                                          maxStake: maxStake,
                                          admin: admin,
                                          unbondedAssetClass: unbondedAssetClass,
                                          nftCs: nftCs,
                                          assocListCs: assocListCs
                                      }));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var callWithArgs = function (f) {
      return function (contract) {
          return function (cfg) {
              return function (args) {
                  return Control_Promise.fromAff(Control_Bind.bindFlipped(Effect_Aff.bindAff)((function () {
                      var $52 = Contract_Monad.runContract(cfg);
                      return function ($53) {
                          return $52(contract($53));
                      };
                  })())(Helpers.liftEither(Effect_Aff.monadErrorAff)(f(args))));
              };
          };
      };
  };
  var callWithBondedPoolArgs = function (contract) {
      return function (cfg) {
          return callWithArgs(fromBondedPoolArgs)(contract)(cfg);
      };
  };
  var callWithUnbondedPoolArgs = function (contract) {
      return function (cfg) {
          return callWithArgs(fromUnbondedPoolArgs)(contract)(cfg);
      };
  };
  var callUserWithdrawUnbondedPool = callWithUnbondedPoolArgs(UnbondedStaking_UserWithdraw.userWithdrawUnbondedPoolContract);
  var callUserWithdrawBondedPool = callWithBondedPoolArgs(UserWithdraw.userWithdrawBondedPoolContract);
  var callUserStakeUnbondedPool = function (cfg) {
      return function (upa) {
          return function (bi) {
              return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callUserStakeUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                      return UnbondedStaking_UserStake.userStakeUnbondedPoolContract(upp)(nat);
                  });
              })));
          };
      };
  };
  var callUserStakeBondedPool = function (cfg) {
      return function (bpa) {
          return function (bi) {
              return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (bpp) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callUserStakeBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                      return UserStake.userStakeBondedPoolContract(bpp)(nat);
                  });
              })));
          };
      };
  };
  var callGetUnbondedPools = function (cfg) {
      return function (addrStr) {
          return function (iba) {
              return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialUnbondedArgs(iba)))(function (ibp) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(UnbondedStaking_CreatePool.getUnbondedPoolsContract(addrStr)(ibp)))(function (ubpps) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(toUnbondedPoolArgs)(ubpps));
                  });
              }));
          };
      };
  };
  var callGetNodeTime = function (cfg) {
      return Control_Promise.fromAff(Contract_Monad.runContract({
          ogmiosConfig: cfg.ogmiosConfig,
          datumCacheConfig: cfg.datumCacheConfig,
          ctlServerConfig: cfg.ctlServerConfig,
          networkId: cfg.networkId,
          logLevel: cfg.logLevel,
          walletSpec: Data_Maybe.Nothing.value,
          customLogger: cfg.customLogger,
          suppressLogs: cfg.suppressLogs,
          extraConfig: cfg.extraConfig
      })(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(Utils.currentRoundedTime)));
  };
  var callGetBondedPools = function (cfg) {
      return function (addrStr) {
          return function (iba) {
              return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialBondedArgs(iba)))(function (ibp) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(CreatePool.getBondedPoolsContract(addrStr)(ibp)))(function (bpps) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(toBondedPoolArgs)(bpps));
                  });
              }));
          };
      };
  };
  var callDepositUnbondedPool = function (cfg) {
      return function (upa) {
          return function (bi) {
              return function (arr) {
                  return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callDepositUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                          return UnbondedStaking_DepositPool.depositUnbondedPoolContract(upp)(nat)(arr);
                      });
                  })));
              };
          };
      };
  };
  var callDepositBondedPool = function (cfg) {
      return function (bpa) {
          return function (bi) {
              return function (arr) {
                  return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (upp) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callDepositBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                          return DepositPool.depositBondedPoolContract(upp)(nat)(arr);
                      });
                  })));
              };
          };
      };
  };
  var callCreateUnbondedPool = function (cfg) {
      return function (iba) {
          return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialUnbondedArgs(iba)))(function (iup) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(UnbondedStaking_CreatePool.createUnbondedPoolContract(iup)))(function (v) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      args: toUnbondedPoolArgs(v.unbondedPoolParams),
                      address: v.address,
                      txId: v.txId
                  });
              });
          }));
      };
  };
  var callCreateBondedPool = function (cfg) {
      return function (iba) {
          return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromInitialBondedArgs(iba)))(function (ibp) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Contract_Monad.runContract(cfg)(CreatePool.createBondedPoolContract(ibp)))(function (v) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      args: toBondedPoolArgs(v.bondedPoolParams),
                      address: v.address,
                      txId: v.txId
                  });
              });
          }));
      };
  };
  var callCloseUnbondedPool = function (cfg) {
      return function (upa) {
          return function (bi) {
              return function (arr) {
                  return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromUnbondedPoolArgs(upa)))(function (upp) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callCloseUnbondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                          return UnbondedStaking_ClosePool.closeUnbondedPoolContract(upp)(nat)(arr);
                      });
                  })));
              };
          };
      };
  };
  var callCloseBondedPool = function (cfg) {
      return function (bpa) {
          return function (bi) {
              return function (arr) {
                  return Control_Promise.fromAff(Contract_Monad.runContract(cfg)(Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftEither(Contract_Monad.monadErrorErrorContract)(fromBondedPoolArgs(bpa)))(function (upp) {
                      return Control_Bind.bind(Contract_Monad.bindContract)(Helpers.liftM(Contract_Monad.monadErrorErrorContract)(Effect_Exception.error("callCloseBondedPool: Invalid natural number"))(Types_Natural.fromBigInt(bi)))(function (nat) {
                          return ClosePool.closeBondedPoolContract(upp)(nat)(arr);
                      });
                  })));
              };
          };
      };
  };
  var buildContractConfig = function (cfg) {
      var errorWithContext = function (msg) {
          return Effect_Exception.error("buildContractConfig: " + msg);
      };
      return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ctl-server")(cfg.ctlServerConfig))))(function (ctlServerConfig) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ogmios")(cfg.ogmiosConfig)))(function (ogmiosConfig) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkServerConfig("ogmios-datum-cache")(cfg.datumCacheConfig)))(function (datumCacheConfig) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(errorWithContext("invalid `NetworkId`"))(Data_Int.fromNumber(cfg.networkId)))(function (networkIdInt) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftM(Effect_Aff.monadErrorAff)(errorWithContext("invalid `NetworkId`"))(Serialization_Address.intToNetworkId(networkIdInt)))(function (networkId) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkLogLevel(cfg.logLevel)))(function (logLevel) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Helpers.liftEither(Effect_Aff.monadErrorAff)(fromSdkWalletSpec(cfg.walletSpec))))(function (walletSpec) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                                      ogmiosConfig: ogmiosConfig,
                                      datumCacheConfig: datumCacheConfig,
                                      ctlServerConfig: ctlServerConfig,
                                      logLevel: logLevel,
                                      networkId: networkId,
                                      walletSpec: walletSpec,
                                      customLogger: Data_Maybe.Nothing.value,
                                      suppressLogs: false,
                                      extraConfig: {}
                                  });
                              });
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["buildContractConfig"] = buildContractConfig;
  exports["callGetNodeTime"] = callGetNodeTime;
  exports["callCloseBondedPool"] = callCloseBondedPool;
  exports["callCreateBondedPool"] = callCreateBondedPool;
  exports["callGetBondedPools"] = callGetBondedPools;
  exports["callDepositBondedPool"] = callDepositBondedPool;
  exports["callUserStakeBondedPool"] = callUserStakeBondedPool;
  exports["callUserWithdrawBondedPool"] = callUserWithdrawBondedPool;
  exports["callCloseUnbondedPool"] = callCloseUnbondedPool;
  exports["callCreateUnbondedPool"] = callCreateUnbondedPool;
  exports["callGetUnbondedPools"] = callGetUnbondedPools;
  exports["callDepositUnbondedPool"] = callDepositUnbondedPool;
  exports["callUserStakeUnbondedPool"] = callUserStakeUnbondedPool;
  exports["callUserWithdrawUnbondedPool"] = callUserWithdrawUnbondedPool;
})(PS);
module.exports = PS["SdkApi"];
