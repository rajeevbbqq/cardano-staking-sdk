// Generated by purs version 0.14.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var UnsafeMakeNatural = function (x) {
    return x;
};
var natToInt = function (v) {
    return v;
};
var showNatural = {
    show: (function () {
        var $5 = Data_Show.show(Data_Show.showInt);
        return function ($6) {
            return $5(natToInt($6));
        };
    })()
};
var intToNat = function (v) {
    if (v >= 0) {
        return v;
    };
    return 0;
};
var unaryViaInt = function (f) {
    return function (x) {
        return intToNat(f(natToInt(x)));
    };
};
var eqNatural = {
    eq: function (l) {
        return function (r) {
            return natToInt(l) === natToInt(r);
        };
    }
};
var ordNatural = {
    compare: function (l) {
        return function (r) {
            return Data_Ord.compare(Data_Ord.ordInt)(natToInt(l))(natToInt(r));
        };
    },
    Eq0: function () {
        return eqNatural;
    }
};
var binaryViaInt = function (f) {
    return function (l) {
        return function (r) {
            return intToNat(f(natToInt(l))(natToInt(r)));
        };
    };
};
var minus = binaryViaInt(Data_Ring.sub(Data_Ring.ringInt));
var semiringNatural = {
    one: intToNat(1),
    mul: binaryViaInt(Data_Semiring.mul(Data_Semiring.semiringInt)),
    zero: intToNat(0),
    add: binaryViaInt(Data_Semiring.add(Data_Semiring.semiringInt))
};
var enumNatural = {
    succ: function (n) {
        return new Data_Maybe.Just(Data_Semiring.add(semiringNatural)(n)(Data_Semiring.one(semiringNatural)));
    },
    pred: function (n) {
        var $4 = Data_Eq.eq(eqNatural)(n)(Data_Semiring.zero(semiringNatural));
        if ($4) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(minus(n)(Data_Semiring.one(semiringNatural)));
    },
    Ord0: function () {
        return ordNatural;
    }
};
module.exports = {
    intToNat: intToNat,
    natToInt: natToInt,
    minus: minus,
    eqNatural: eqNatural,
    ordNatural: ordNatural,
    enumNatural: enumNatural,
    showNatural: showNatural,
    semiringNatural: semiringNatural
};
