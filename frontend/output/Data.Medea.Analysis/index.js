// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_AcyclicAdjacencyMap = require("../Data.AcyclicAdjacencyMap/index.js");
var Data_AdjacencyMap = require("../Data.AdjacencyMap/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_HashMap = require("../Data.HashMap/index.js");
var Data_Hashable = require("../Data.Hashable/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map = require("../Data.Map/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Medea_JSONType = require("../Data.Medea.JSONType/index.js");
var Data_Medea_Parser_Primitive = require("../Data.Medea.Parser.Primitive/index.js");
var Data_Medea_Parser_Spec_Object = require("../Data.Medea.Parser.Spec.Object/index.js");
var Data_Medea_Parser_Spec_Property = require("../Data.Medea.Parser.Spec.Property/index.js");
var Data_Medea_Parser_Spec_Schema = require("../Data.Medea.Parser.Spec.Schema/index.js");
var Data_Medea_Parser_Spec_String = require("../Data.Medea.Parser.Spec.String/index.js");
var Data_Natural = require("../Data.Natural/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var AnyNode = (function () {
    function AnyNode() {

    };
    AnyNode.value = new AnyNode();
    return AnyNode;
})();
var PrimitiveNode = (function () {
    function PrimitiveNode(value0) {
        this.value0 = value0;
    };
    PrimitiveNode.create = function (value0) {
        return new PrimitiveNode(value0);
    };
    return PrimitiveNode;
})();
var CustomNode = (function () {
    function CustomNode(value0) {
        this.value0 = value0;
    };
    CustomNode.create = function (value0) {
        return new CustomNode(value0);
    };
    return CustomNode;
})();
var ListType = (function () {
    function ListType(value0) {
        this.value0 = value0;
    };
    ListType.create = function (value0) {
        return new ListType(value0);
    };
    return ListType;
})();
var TupleType = (function () {
    function TupleType(value0) {
        this.value0 = value0;
    };
    TupleType.create = function (value0) {
        return new TupleType(value0);
    };
    return TupleType;
})();
var CompiledSchema = (function () {
    function CompiledSchema(value0) {
        this.value0 = value0;
    };
    CompiledSchema.create = function (value0) {
        return new CompiledSchema(value0);
    };
    return CompiledSchema;
})();
var DuplicateSchemaName = (function () {
    function DuplicateSchemaName(value0) {
        this.value0 = value0;
    };
    DuplicateSchemaName.create = function (value0) {
        return new DuplicateSchemaName(value0);
    };
    return DuplicateSchemaName;
})();
var NoStartSchema = (function () {
    function NoStartSchema() {

    };
    NoStartSchema.value = new NoStartSchema();
    return NoStartSchema;
})();
var DanglingTypeReference = (function () {
    function DanglingTypeReference(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DanglingTypeReference.create = function (value0) {
        return function (value1) {
            return new DanglingTypeReference(value0, value1);
        };
    };
    return DanglingTypeReference;
})();
var TypeRelationIsCyclic = (function () {
    function TypeRelationIsCyclic() {

    };
    TypeRelationIsCyclic.value = new TypeRelationIsCyclic();
    return TypeRelationIsCyclic;
})();
var ReservedDefined = (function () {
    function ReservedDefined(value0) {
        this.value0 = value0;
    };
    ReservedDefined.create = function (value0) {
        return new ReservedDefined(value0);
    };
    return ReservedDefined;
})();
var DefinedButNotUsed = (function () {
    function DefinedButNotUsed(value0) {
        this.value0 = value0;
    };
    DefinedButNotUsed.create = function (value0) {
        return new DefinedButNotUsed(value0);
    };
    return DefinedButNotUsed;
})();
var MinMoreThanMax = (function () {
    function MinMoreThanMax(value0) {
        this.value0 = value0;
    };
    MinMoreThanMax.create = function (value0) {
        return new MinMoreThanMax(value0);
    };
    return MinMoreThanMax;
})();
var DanglingTypeRefProp = (function () {
    function DanglingTypeRefProp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DanglingTypeRefProp.create = function (value0) {
        return function (value1) {
            return new DanglingTypeRefProp(value0, value1);
        };
    };
    return DanglingTypeRefProp;
})();
var DanglingTypeRefList = (function () {
    function DanglingTypeRefList(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DanglingTypeRefList.create = function (value0) {
        return function (value1) {
            return new DanglingTypeRefList(value0, value1);
        };
    };
    return DanglingTypeRefList;
})();
var DanglingTypeRefTuple = (function () {
    function DanglingTypeRefTuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DanglingTypeRefTuple.create = function (value0) {
        return function (value1) {
            return new DanglingTypeRefTuple(value0, value1);
        };
    };
    return DanglingTypeRefTuple;
})();
var PropertyWithoutObject = (function () {
    function PropertyWithoutObject(value0) {
        this.value0 = value0;
    };
    PropertyWithoutObject.create = function (value0) {
        return new PropertyWithoutObject(value0);
    };
    return PropertyWithoutObject;
})();
var ListWithoutArray = (function () {
    function ListWithoutArray(value0) {
        this.value0 = value0;
    };
    ListWithoutArray.create = function (value0) {
        return new ListWithoutArray(value0);
    };
    return ListWithoutArray;
})();
var TupleWithoutArray = (function () {
    function TupleWithoutArray(value0) {
        this.value0 = value0;
    };
    TupleWithoutArray.create = function (value0) {
        return new TupleWithoutArray(value0);
    };
    return TupleWithoutArray;
})();
var StringValsWithoutString = (function () {
    function StringValsWithoutString(value0) {
        this.value0 = value0;
    };
    StringValsWithoutString.create = function (value0) {
        return new StringValsWithoutString(value0);
    };
    return StringValsWithoutString;
})();
var DuplicatePropName = (function () {
    function DuplicatePropName(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    DuplicatePropName.create = function (value0) {
        return function (value1) {
            return new DuplicatePropName(value0, value1);
        };
    };
    return DuplicatePropName;
})();
var UnexpectedTypeNode = (function () {
    function UnexpectedTypeNode() {

    };
    UnexpectedTypeNode.value = new UnexpectedTypeNode();
    return UnexpectedTypeNode;
})();
var stringNode = new PrimitiveNode(Data_Medea_JSONType.JSONString.value);
var objectNode = new PrimitiveNode(Data_Medea_JSONType.JSONObject.value);
var mapAlterF = function (dictFunctor) {
    return function (dictOrd) {
        return function (f) {
            return function (k) {
                return function (m) {
                    var mv = Data_Map_Internal.lookup(dictOrd)(k)(m);
                    return (function (v) {
                        return Data_Functor.map(dictFunctor)(v)(f(mv));
                    })(function (fres) {
                        if (fres instanceof Data_Maybe.Nothing) {
                            return Data_Map_Internal["delete"](dictOrd)(k)(m);
                        };
                        if (fres instanceof Data_Maybe.Just) {
                            return Data_Map_Internal.insert(dictOrd)(k)(fres.value0)(m);
                        };
                        throw new Error("Failed pattern match at Data.Medea.Analysis (line 263, column 18 - line 265, column 39): " + [ fres.constructor.name ]);
                    });
                };
            };
        };
    };
};
var identToNode = function (v) {
    if (v instanceof Data_Maybe.Nothing) {
        return AnyNode.value;
    };
    if (v instanceof Data_Maybe.Just) {
        return Data_Maybe.maybe(new CustomNode(v.value0))(function ($161) {
            return PrimitiveNode.create(Data_Medea_Parser_Primitive.typeOf($161));
        })(Data_Medea_Parser_Primitive.tryPrimType(v.value0));
    };
    throw new Error("Failed pattern match at Data.Medea.Analysis (line 219, column 15 - line 221, column 76): " + [ v.constructor.name ]);
};
var hashMapAlterF = function (dictFunctor) {
    return function (dictEq) {
        return function (dictHashable) {
            return function (f) {
                return function (k) {
                    return function (m) {
                        var mv = Data_HashMap.lookup(dictHashable)(k)(m);
                        return (function (v) {
                            return Data_Functor.map(dictFunctor)(v)(f(mv));
                        })(function (fres) {
                            if (fres instanceof Data_Maybe.Nothing) {
                                return Data_HashMap["delete"](dictHashable)(k)(m);
                            };
                            if (fres instanceof Data_Maybe.Just) {
                                return Data_HashMap.insert(dictHashable)(k)(fres.value0)(m);
                            };
                            throw new Error("Failed pattern match at Data.Medea.Analysis (line 273, column 18 - line 275, column 38): " + [ fres.constructor.name ]);
                        });
                    };
                };
            };
        };
    };
};
var hasTupleSpec = function (v) {
    if (v.value0.arrayTypes instanceof Data_Maybe.Just && v.value0.arrayTypes.value0 instanceof TupleType) {
        return true;
    };
    return false;
};
var hasStringSpec = function (v) {
    return !Data_Array["null"](v.value0.stringVals);
};
var hasListSpec = function (v) {
    if (v.value0.arrayTypes instanceof Data_Maybe.Just && v.value0.arrayTypes.value0 instanceof ListType) {
        return true;
    };
    if (v.value0.arrayTypes instanceof Data_Maybe.Just && v.value0.arrayTypes.value0 instanceof TupleType) {
        return false;
    };
    return Data_Maybe.isJust(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.minListLen)(v.value0.maxListLen));
};
var getTupleTypeRefs = function (v) {
    if (v.value0.arrayTypes instanceof Data_Maybe.Just && v.value0.arrayTypes.value0 instanceof TupleType) {
        return v.value0.arrayTypes.value0.value0;
    };
    return [  ];
};
var getTupleTypeLen = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof TupleType) {
        return Data_Maybe.Just.create(Data_Natural.intToNat(Data_Array.length(v.value0.value0)));
    };
    return Data_Maybe.Nothing.value;
};
var getPropertyTypeRefs = function (v) {
    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(Data_HashMap.values(v.value0.props)))([ v.value0.additionalPropSchema ]);
};
var getListTypeRefs = function (v) {
    if (v.value0.arrayTypes instanceof Data_Maybe.Just && v.value0.arrayTypes.value0 instanceof ListType) {
        return [ v.value0.arrayTypes.value0.value0 ];
    };
    return [  ];
};
var getArrayTypes = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(ListType.create(identToNode(Data_Maybe.Just.create(v.value0))));
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(TupleType.create(Data_Functor.map(Data_Functor.functorArray)(function ($162) {
                return identToNode(Data_Maybe.Just.create($162));
            })(v1.value0)));
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 245, column 1 - line 245, column 81): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var genericTypeNode = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return AnyNode.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new PrimitiveNode(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new CustomNode(x.value0.value0);
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof AnyNode) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof PrimitiveNode) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof CustomNode) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
    }
};
var showTypeNode = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericTypeNode)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
            reflectSymbol: function () {
                return "AnyNode";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Medea_JSONType.showJSONType))({
            reflectSymbol: function () {
                return "PrimitiveNode";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Medea_Parser_Primitive.showIdentifier))({
            reflectSymbol: function () {
                return "CustomNode";
            }
        }))))(x);
    }
};
var genericCompiledSchema = {
    to: function (x) {
        return new CompiledSchema(x);
    },
    from: function (x) {
        return x.value0;
    }
};
var genericArrayType = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new ListType(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new TupleType(x.value0);
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 84, column 1 - line 84, column 56): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof ListType) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof TupleType) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 84, column 1 - line 84, column 56): " + [ x.constructor.name ]);
    }
};
var showArrayType = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericArrayType)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showTypeNode))({
            reflectSymbol: function () {
                return "ListType";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showTypeNode)))({
            reflectSymbol: function () {
                return "TupleType";
            }
        })))(x);
    }
};
var showCompiledSchema = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericCompiledSchema)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "additionalPropSchema";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "additionalProps";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "arrayTypes";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "maxListLen";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "minListLen";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "props";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "schemaNode";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "stringVals";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "typesAs";
            }
        })(Data_Show.showRecordFieldsNil)(Data_NonEmpty.showNonEmpty(showTypeNode)(Data_Set.showSet(showTypeNode))))(Data_Show.showArray(Data_Show.showString)))(showTypeNode))(Data_HashMap.showHashMap(Data_Show.showString)(Data_Tuple.showTuple(showTypeNode)(Data_Show.showBoolean))))(Data_Maybe.showMaybe(Data_Natural.showNatural)))(Data_Maybe.showMaybe(Data_Natural.showNatural)))(Data_Maybe.showMaybe(showArrayType)))(Data_Show.showBoolean))(showTypeNode))))({
            reflectSymbol: function () {
                return "CompiledSchema";
            }
        }))(x);
    }
};
var eqTypeNode = {
    eq: function (x) {
        return function (y) {
            if (x instanceof AnyNode && y instanceof AnyNode) {
                return true;
            };
            if (x instanceof PrimitiveNode && y instanceof PrimitiveNode) {
                return Data_Eq.eq(Data_Medea_JSONType.eqJSONType)(x.value0)(y.value0);
            };
            if (x instanceof CustomNode && y instanceof CustomNode) {
                return Data_Eq.eq(Data_Medea_Parser_Primitive.eqIdentifier)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var ordTypeNode = {
    compare: function (x) {
        return function (y) {
            if (x instanceof AnyNode && y instanceof AnyNode) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof AnyNode) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof AnyNode) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof PrimitiveNode && y instanceof PrimitiveNode) {
                return Data_Ord.compare(Data_Medea_JSONType.ordJSONType)(x.value0)(y.value0);
            };
            if (x instanceof PrimitiveNode) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PrimitiveNode) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof CustomNode && y instanceof CustomNode) {
                return Data_Ord.compare(Data_Medea_Parser_Primitive.ordIdentifier)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Data.Medea.Analysis (line 55, column 1 - line 55, column 44): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqTypeNode;
    }
};
var getTypeRefs = function (v) {
    return Data_Array.fromFoldable(Data_Set.foldableSet)(Data_NonEmpty.fromNonEmpty(Data_Set.insert(ordTypeNode))(v.value0.typesAs));
};
var intoTypesAsEdges = function (v) {
    return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.Tuple.create(v.value0.schemaNode))(Data_Array.fromFoldable(Data_Set.foldableSet)(Data_NonEmpty.fromNonEmpty(Data_Set.insert(ordTypeNode))(v.value0.typesAs)));
};
var getTypesAsGraph = (function () {
    var $163 = Data_AdjacencyMap.edges(ordTypeNode);
    var $164 = Data_Array.concatMap(intoTypesAsEdges);
    var $165 = Data_Array.fromFoldable(Data_List_Types.foldableList);
    return function ($166) {
        return $163($164($165(Data_Map_Internal.values($166))));
    };
})();
var isNodeType = function (node) {
    return function (v) {
        return Data_Set.member(ordTypeNode)(node)(Data_NonEmpty.fromNonEmpty(Data_Set.insert(ordTypeNode))(v.value0.typesAs));
    };
};
var shouldNotHavePropertySpec = function (scm) {
    return function (hasPropSpec) {
        return hasPropSpec && !isNodeType(objectNode)(scm);
    };
};
var shouldNotHaveStringSpec = function (scm) {
    return hasStringSpec(scm) && !isNodeType(stringNode)(scm);
};
var checkUnusedSchemata = function (dictMonadError) {
    return function (m) {
        var getReferences = function (scm) {
            return Data_Set.fromFoldable(Data_Foldable.foldableArray)(ordTypeNode)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(getTypeRefs(scm))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(getPropertyTypeRefs(scm))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(getListTypeRefs(scm))(getTupleTypeRefs(scm)))));
        };
        var allReferences = Data_Set.unions(Data_List_Types.foldableList)(ordTypeNode)(Data_Functor.map(Data_List_Types.functorList)(getReferences)(Data_Map_Internal.values(m)));
        var checkUnused = function (ident) {
            if (Data_Set.member(ordTypeNode)(new CustomNode(ident))(allReferences)) {
                return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Unit.unit);
            };
            if (Data_Medea_Parser_Primitive.isStartIdent(ident)) {
                return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Unit.unit);
            };
            if (Data_Boolean.otherwise) {
                return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(new DefinedButNotUsed(ident));
            };
            throw new Error("Failed pattern match at Data.Medea.Analysis (line 203, column 3 - line 206, column 55): " + [ ident.constructor.name ]);
        };
        return Data_Foldable.traverse_(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Set.foldableSet)(checkUnused)(Data_Map.keys(m));
    };
};
var checkStartSchema = function (dictMonadError) {
    return function (mic) {
        var v = Data_Map_Internal.lookup(Data_Medea_Parser_Primitive.ordIdentifier)(Data_Medea_Parser_Primitive.identFromReserved(Data_Medea_Parser_Primitive.RStart.value))(mic);
        if (v instanceof Data_Maybe.Nothing) {
            return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(NoStartSchema.value);
        };
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Unit.unit);
        };
        throw new Error("Failed pattern match at Data.Medea.Analysis (line 175, column 24 - line 177, column 24): " + [ v.constructor.name ]);
    };
};
var checkDanglingReferences = function (dictMonadError) {
    return function (getRefs) {
        return function (err) {
            return function (m) {
                var isUndefined = function (ident) {
                    return Data_Maybe.isNothing(Data_Map_Internal.lookup(Data_Medea_Parser_Primitive.ordIdentifier)(ident)(m));
                };
                var fromCustomNode = function (v) {
                    if (v instanceof CustomNode) {
                        return new Data_Maybe.Just(v.value0);
                    };
                    return Data_Maybe.Nothing.value;
                };
                var getDanglingRefs = (function () {
                    var $167 = Data_Array.filter(isUndefined);
                    var $168 = Data_Array.mapMaybe(fromCustomNode);
                    return function ($169) {
                        return $167($168(getRefs($169)));
                    };
                })();
                var go = function (v) {
                    var v1 = Data_Array.uncons(getDanglingRefs(v.value1));
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Unit.unit);
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(err(v1.value0.head)(v.value0));
                    };
                    throw new Error("Failed pattern match at Data.Medea.Analysis (line 184, column 31 - line 186, column 74): " + [ v1.constructor.name ]);
                };
                var array = Control_Category.identity(Control_Category.categoryFn);
                return Data_Foldable.traverse_(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Foldable.foldableArray)(go)(array(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(m)));
            };
        };
    };
};
var checkAcyclic = function (dictMonadError) {
    return function (m) {
        return Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Maybe.isNothing(Data_AcyclicAdjacencyMap.toAcyclic(ordTypeNode)(getTypesAsGraph(m))))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(TypeRelationIsCyclic.value));
    };
};
var arrayNode = new PrimitiveNode(Data_Medea_JSONType.JSONArray.value);
var shouldNotHaveListSpec = function (scm) {
    return hasListSpec(scm) && !isNodeType(arrayNode)(scm);
};
var shouldNotHaveTupleSpec = function (scm) {
    return hasTupleSpec(scm) && !isNodeType(arrayNode)(scm);
};
var compileSchema = function (dictMonadError) {
    return function (v) {
        var defaultToAny = function (xs) {
            var v1 = Data_Array.uncons(xs);
            if (v1 instanceof Data_Maybe.Nothing) {
                return new Data_NonEmpty.NonEmpty(AnyNode.value, Data_Set.empty);
            };
            if (v1 instanceof Data_Maybe.Just) {
                return new Data_NonEmpty.NonEmpty(v1.value0.head, Data_Set.fromFoldable(Data_Foldable.foldableArray)(ordTypeNode)(v1.value0.tail));
            };
            throw new Error("Failed pattern match at Data.Medea.Analysis (line 170, column 21 - line 172, column 57): " + [ v1.constructor.name ]);
        };
        var checkedInsert = function (prop) {
            return function (v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(identToNode(Data_Medea_Parser_Spec_Property.propSchema(prop)), Data_Medea_Parser_Spec_Property.propOptional(prop))));
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(new DuplicatePropName(v.value0.name, Data_Medea_Parser_Spec_Property.propName(prop)));
                };
                throw new Error("Failed pattern match at Data.Medea.Analysis (line 165, column 24 - line 167, column 72): " + [ v1.constructor.name ]);
            };
        };
        var go = function (acc) {
            return function (prop) {
                return hashMapAlterF(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Eq.eqString)(Data_Hashable.hashableString)(checkedInsert(prop))(Data_Medea_Parser_Spec_Property.propName(prop))(acc);
            };
        };
        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Medea_Parser_Primitive.isReserved(v.value0.name) && !Data_Medea_Parser_Primitive.isStartIdent(v.value0.name))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(ReservedDefined.create(v.value0.name))))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Natural.ordNatural))(v.value0.array.value0.minLength)(v.value0.array.value0.maxLength) && !Data_Maybe.isNothing(v.value0.array.value0.maxLength))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(new MinMoreThanMax(v.value0.name))))(function () {
                return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Data_Array.foldM((dictMonadError.MonadThrow0()).Monad0())(go)(Data_HashMap.empty)(Data_Maybe.maybe([  ])(Data_Medea_Parser_Spec_Object.properties)(v.value0.object)))(function (propMap) {
                    var hasPropSpec = Data_Maybe.isJust(v.value0.object);
                    var arrType = getArrayTypes(v.value0.array.value0.elementType)(v.value0.array.value0.tupleSpec);
                    var tupleLen = getTupleTypeLen(arrType);
                    var compiledScm = CompiledSchema.create({
                        schemaNode: identToNode(Data_Maybe.Just.create(v.value0.name)),
                        typesAs: defaultToAny(Data_Functor.map(Data_Functor.functorArray)(function ($170) {
                            return identToNode(Data_Maybe.Just.create($170));
                        })(v.value0.types)),
                        minListLen: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.array.value0.minLength)(tupleLen),
                        maxListLen: Control_Alt.alt(Data_Maybe.altMaybe)(v.value0.array.value0.maxLength)(tupleLen),
                        arrayTypes: arrType,
                        props: propMap,
                        additionalProps: Data_Maybe.maybe(true)(Data_Medea_Parser_Spec_Object.additionalAllowed)(v.value0.object),
                        additionalPropSchema: identToNode(Control_Bind.bind(Data_Maybe.bindMaybe)(v.value0.object)(Data_Medea_Parser_Spec_Object.additionalSchema)),
                        stringVals: Data_Medea_Parser_Spec_String.toReducedSpec(v.value0.stringVals)
                    });
                    return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(shouldNotHavePropertySpec(compiledScm)(hasPropSpec))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(PropertyWithoutObject.create(v.value0.name))))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(shouldNotHaveListSpec(compiledScm))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(ListWithoutArray.create(v.value0.name))))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(shouldNotHaveTupleSpec(compiledScm))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(TupleWithoutArray.create(v.value0.name))))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(shouldNotHaveStringSpec(compiledScm))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(StringValsWithoutString.create(v.value0.name))))(function () {
                                    return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(compiledScm);
                                });
                            });
                        });
                    });
                });
            });
        });
    };
};
var compileSchemata = function (dictMonadError) {
    return function (v) {
        var checkedInsert = function (spec) {
            return function (v2) {
                if (v2 instanceof Data_Maybe.Nothing) {
                    return Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Maybe.Just.create)(compileSchema(dictMonadError)(spec));
                };
                if (v2 instanceof Data_Maybe.Just) {
                    return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(DuplicateSchemaName.create(Data_Medea_Parser_Spec_Schema.name(spec)));
                };
                throw new Error("Failed pattern match at Data.Medea.Analysis (line 108, column 24 - line 110, column 68): " + [ v2.constructor.name ]);
            };
        };
        var go = function (acc) {
            return function (spec) {
                return mapAlterF(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Medea_Parser_Primitive.ordIdentifier)(checkedInsert(spec))(Data_Medea_Parser_Spec_Schema.name(spec))(acc);
            };
        };
        return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(Data_Array.foldM((dictMonadError.MonadThrow0()).Monad0())(go)(Data_Map_Internal.empty)(v))(function (m) {
            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkStartSchema(dictMonadError)(m))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkDanglingReferences(dictMonadError)(getTypeRefs)(DanglingTypeReference.create)(m))(function () {
                    return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkDanglingReferences(dictMonadError)(getPropertyTypeRefs)(DanglingTypeRefProp.create)(m))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkDanglingReferences(dictMonadError)(getListTypeRefs)(DanglingTypeRefList.create)(m))(function () {
                            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkDanglingReferences(dictMonadError)(getTupleTypeRefs)(DanglingTypeRefTuple.create)(m))(function () {
                                return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkUnusedSchemata(dictMonadError)(m))(function () {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(checkAcyclic(dictMonadError)(m))(function () {
                                        return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(m);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    };
};
module.exports = {
    DuplicateSchemaName: DuplicateSchemaName,
    NoStartSchema: NoStartSchema,
    DanglingTypeReference: DanglingTypeReference,
    TypeRelationIsCyclic: TypeRelationIsCyclic,
    ReservedDefined: ReservedDefined,
    DefinedButNotUsed: DefinedButNotUsed,
    MinMoreThanMax: MinMoreThanMax,
    DanglingTypeRefProp: DanglingTypeRefProp,
    DanglingTypeRefList: DanglingTypeRefList,
    DanglingTypeRefTuple: DanglingTypeRefTuple,
    PropertyWithoutObject: PropertyWithoutObject,
    ListWithoutArray: ListWithoutArray,
    TupleWithoutArray: TupleWithoutArray,
    StringValsWithoutString: StringValsWithoutString,
    DuplicatePropName: DuplicatePropName,
    UnexpectedTypeNode: UnexpectedTypeNode,
    ListType: ListType,
    TupleType: TupleType,
    CompiledSchema: CompiledSchema,
    AnyNode: AnyNode,
    PrimitiveNode: PrimitiveNode,
    CustomNode: CustomNode,
    compileSchemata: compileSchemata,
    eqTypeNode: eqTypeNode,
    ordTypeNode: ordTypeNode,
    genericTypeNode: genericTypeNode,
    showTypeNode: showTypeNode,
    genericCompiledSchema: genericCompiledSchema,
    showCompiledSchema: showCompiledSchema,
    genericArrayType: genericArrayType,
    showArrayType: showArrayType
};
