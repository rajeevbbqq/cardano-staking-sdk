// Generated by purs version 0.14.5
"use strict";
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_Time = require("../Contract.Time/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Types = require("../Types/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Utils = require("../Utils/index.js");
var toSlotInterval = function (posixTimeRange) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getEraSummaries)(function (es) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getSystemStart)(function (ss) {
            return Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractE(Types_Interval.showPosixTimeToSlotError))(Effect_Class.liftEffect(Contract_Monad.monadEffectContract))(Types_Interval.posixTimeRangeToTransactionValidity(es)(ss)(posixTimeRange));
        });
    });
};
var startPoolNow = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
        var ibp$prime = Types.InitialBondedParams({
            iterations: v.iterations,
            start: v1,
            end: Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v1)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Types_Natural.toBigInt(v.iterations))(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.userLength)(v.bondingLength))))(v.userLength),
            userLength: v.userLength,
            bondingLength: v.bondingLength,
            interest: v.interest,
            minStake: v.minStake,
            maxStake: v.maxStake,
            bondedAssetClass: v.bondedAssetClass
        });
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(ibp$prime, v1));
    });
};
var startPoolFromNow = function (delay) {
    return function (v) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
            var ibp$prime = Types.InitialBondedParams({
                iterations: v.iterations,
                start: Data_Semiring.add(Data_BigInt.semiringBigInt)(v1)(Types_Natural.toBigInt(delay)),
                end: Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v1)(Types_Natural.toBigInt(delay)))(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Types_Natural.toBigInt(v.iterations))(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.userLength)(v.bondingLength))))(v.userLength),
                userLength: v.userLength,
                bondingLength: v.bondingLength,
                interest: v.interest,
                minStake: v.minStake,
                maxStake: v.maxStake,
                bondedAssetClass: v.bondedAssetClass
            });
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(ibp$prime, v1));
        });
    };
};
var getWithdrawingTime = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getWithdrawingTime: pool already closed")))(function () {
            var $27 = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength));
            if ($27) {
                return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                    currTime: v1,
                    range: Types_Interval.interval(Types_Interval.POSIXTime(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Types_Interval.POSIXTime(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(Utils.big(1000))))
                });
            };
            var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
            var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength))(Utils.big(1000)));
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                    return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                });
            });
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondingTime: this is not a bonding period")(Data_Array.head(possibleRanges)))(function (v2) {
                return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                    currTime: v1,
                    range: Types_Interval.interval(v2.value0)(v2.value1)
                });
            });
        });
    });
};
var getStakingTime = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getStakingTime: pool already closed")))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Contract_Monad.throwContractError(Data_Show.showString)("getStakingTime: pool in withdrawing only period")))(function () {
                var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
                var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                    var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength))(Utils.big(1000)));
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                        return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                    });
                });
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getStakingTime: this is not a staking period")(Data_Array.head(possibleRanges)))(function (v2) {
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                        currTime: v1,
                        range: Types_Interval.interval(v2.value0)(v2.value1)
                    });
                });
            });
        });
    });
};
var getClosingTime = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.lessThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getClosingTime: pool can't close yet")))(function () {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                currTime: v1,
                range: Types_Interval.interval(v.end)(Types_Interval.POSIXTime(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.end)(Data_BigInt.fromInt(3600000))))
            });
        });
    });
};
var getBondingTime = function (v) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Utils.currentRoundedTime)(function (v1) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(v.end))(Contract_Monad.throwContractError(Data_Show.showString)("getBondingTime: pool already closed")))(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v.end)(v.userLength)))(Contract_Monad.throwContractError(Data_Show.showString)("getBondingTime: pool in withdrawing only period")))(function () {
                var cycleLength = Data_Semiring.add(Data_BigInt.semiringBigInt)(v.bondingLength)(v.userLength);
                var possibleRanges = Control_Bind.bind(Control_Bind.bindArray)(Utils.bigIntRange(Types_Natural.toBigInt(v.iterations)))(function (n) {
                    var v2 = new Data_Tuple.Tuple(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(n)(cycleLength)))(v.userLength), Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v.start)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(n)(Data_Semiring.one(Data_BigInt.semiringBigInt)))(cycleLength)))(Utils.big(1000)));
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Bind.bindArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v1)(v2.value1)))(function () {
                        return Control_Applicative.pure(Control_Applicative.applicativeArray)(v2);
                    });
                });
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondingTime: this is not a bonding period")(Data_Array.head(possibleRanges)))(function (v2) {
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                        currTime: v1,
                        range: Types_Interval.interval(v2.value0)(v2.value1)
                    });
                });
            });
        });
    });
};
var fromSlotInterval = function (r) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getEraSummaries)(function (es) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Time.getSystemStart)(function (ss) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("fromSlotInterval: could not get validityStartInterval slot")(r.validityStartInterval))(function (startSlot) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("fromSlotInterval: could not get timeToLive slot")(r.timeToLive))(function (endSlot) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractE(Types_Interval.showSlotToPosixTimeError))(Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Types_Interval.slotToPosixTime(es)(ss)(startSlot))))(function (from) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractE(Types_Interval.showSlotToPosixTimeError))(Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Types_Interval.slotToPosixTime(es)(ss)(endSlot))))(function (to) {
                            return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                from: from,
                                to: to
                            });
                        });
                    });
                });
            });
        });
    });
};
module.exports = {
    getBondingTime: getBondingTime,
    getStakingTime: getStakingTime,
    getWithdrawingTime: getWithdrawingTime,
    getClosingTime: getClosingTime,
    startPoolFromNow: startPoolFromNow,
    startPoolNow: startPoolNow,
    toSlotInterval: toSlotInterval,
    fromSlotInterval: fromSlotInterval
};
