// Generated by purs version 0.14.5
"use strict";
var Contract_Test_E2E_Helpers = require("../Contract.Test.E2E.Helpers/index.js");
var Contract_Test_E2E_WalletExt = require("../Contract.Test.E2E.WalletExt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Options_Applicative_Builder = require("../Options.Applicative.Builder/index.js");
var Options_Applicative_Builder_Internal = require("../Options.Applicative.Builder.Internal/index.js");
var Options_Applicative_Extra = require("../Options.Applicative.Extra/index.js");
var Options_Applicative_Types = require("../Options.Applicative.Types/index.js");
var Toppokki = require("../Toppokki/index.js");
var TestOptions = (function () {
    function TestOptions(value0) {
        this.value0 = value0;
    };
    TestOptions.create = function (value0) {
        return new TestOptions(value0);
    };
    return TestOptions;
})();
var Headless = (function () {
    function Headless() {

    };
    Headless.value = new Headless();
    return Headless;
})();
var Visible = (function () {
    function Visible() {

    };
    Visible.value = new Visible();
    return Visible;
})();
var eqMode = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Headless && y instanceof Headless) {
                return true;
            };
            if (x instanceof Visible && y instanceof Visible) {
                return true;
            };
            return false;
        };
    }
};
var optParser = (function () {
    var mkConfig = function (ext) {
        return function (mfp) {
            return function (mpw) {
                return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
                    return new Data_Tuple.Tuple(ext, v);
                })(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Contract_Test_E2E_WalletExt.WalletConfig.create)(mfp))(mpw));
            };
        };
    };
    return Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    return function (v4) {
                        return function (v5) {
                            return function (v6) {
                                return function (v7) {
                                    return function (v8) {
                                        return function (v9) {
                                            return function (v10) {
                                                return function (v11) {
                                                    return function (v12) {
                                                        var wallets = Data_Map_Internal.fromFoldable(Contract_Test_E2E_WalletExt.ordWalletExt)(Data_Foldable.foldableArray)(Data_Array.catMaybes([ mkConfig(Contract_Test_E2E_WalletExt.NamiExt.value)(v3)(v4), mkConfig(Contract_Test_E2E_WalletExt.GeroExt.value)(v5)(v6), mkConfig(Contract_Test_E2E_WalletExt.FlintExt.value)(v7)(v8), mkConfig(Contract_Test_E2E_WalletExt.LodeExt.value)(v9)(v10), mkConfig(Contract_Test_E2E_WalletExt.EternlExt.value)(v1)(v2) ]));
                                                        return new TestOptions({
                                                            chromeExe: v,
                                                            wallets: wallets,
                                                            chromeUserDataDir: v11,
                                                            noHeadless: v12
                                                        });
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    })(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("chrome-exe"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("FILE"), Options_Applicative_Builder.help("Chrome/-ium exe (search in env if not set)"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("eternl-dir"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"), Options_Applicative_Builder.help("Directory where Eternl is unpacked"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(function ($48) {
        return Data_Maybe.Just.create(Contract_Test_E2E_Helpers.WalletPassword($48));
    })(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("eternl-password"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PW"), Options_Applicative_Builder.help("Eternl wallet password"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("nami-dir"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"), Options_Applicative_Builder.help("Directory where nami is unpacked"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(function ($49) {
        return Data_Maybe.Just.create(Contract_Test_E2E_Helpers.WalletPassword($49));
    })(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("nami-password"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PW"), Options_Applicative_Builder.help("Nami wallet password"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("gero-dir"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"), Options_Applicative_Builder.help("Directory where gero is unpacked"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(function ($50) {
        return Data_Maybe.Just.create(Contract_Test_E2E_Helpers.WalletPassword($50));
    })(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("gero-password"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PW"), Options_Applicative_Builder.help("Gero wallet password"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("flint-dir"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"), Options_Applicative_Builder.help("Directory where gero is unpacked"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(function ($51) {
        return Data_Maybe.Just.create(Contract_Test_E2E_Helpers.WalletPassword($51));
    })(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("flint-password"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PW"), Options_Applicative_Builder.help("Flint wallet password"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(Data_Maybe.Just.create)(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("lode-dir"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"), Options_Applicative_Builder.help("Directory where lode is unpacked"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.option(Data_Functor.map(Options_Applicative_Types.readMFunctor)(function ($52) {
        return Data_Maybe.Just.create(Contract_Test_E2E_Helpers.WalletPassword($52));
    })(Options_Applicative_Builder.str))(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("lode-password"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PW"), Options_Applicative_Builder.help("Lode wallet password"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Data_Maybe.Nothing.value) ]))))(Options_Applicative_Builder.strOption(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("chrome-user-data"), Options_Applicative_Builder.help("Chrome/-ium user data dir"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)("test-data/chrome-user-data"), Options_Applicative_Builder.showDefault(Data_Show.showString), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR") ]))))(Options_Applicative_Builder["switch"](Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("no-headless"), Options_Applicative_Builder.help("Show visible browser window") ])));
})();
var parseOptions = Options_Applicative_Extra.execParser(Options_Applicative_Builder.info(optParser)(Options_Applicative_Builder.fullDesc));
var launchWithExtension = function (v) {
    return function (walletExt) {
        var mode = (function () {
            if (v.value0.noHeadless) {
                return Visible.value;
            };
            if (Data_Boolean.otherwise) {
                return Headless.value;
            };
            throw new Error("Failed pattern match at Contract.Test.E2E.Browser (line 199, column 3 - line 199, column 15): " + [  ]);
        })();
        var v1 = Data_Map_Internal.lookup(Contract_Test_E2E_WalletExt.ordWalletExt)(walletExt)(v.value0.wallets);
        if (v1 instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
        };
        if (v1 instanceof Data_Maybe.Just) {
            return Data_Functor.map(Effect_Aff.functorAff)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(Toppokki.launch()({
                args: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "--disable-extensions-except=" + v1.value0.value0, "--load-extension=" + v1.value0.value0 ])((function () {
                    var $37 = Data_Eq.eq(eqMode)(mode)(Headless.value);
                    if ($37) {
                        return [ "--headless=chrome" ];
                    };
                    return [  ];
                })()),
                headless: Data_Eq.eq(eqMode)(mode)(Headless.value),
                userDataDir: v.value0.chromeUserDataDir,
                executablePath: Data_Maybe.fromMaybe("")(v.value0.chromeExe)
            }));
        };
        throw new Error("Failed pattern match at Contract.Test.E2E.Browser (line 187, column 15 - line 197, column 6): " + [ v1.constructor.name ]);
    };
};
var withBrowser = function (opts) {
    return function (ext) {
        return Effect_Aff.bracket(launchWithExtension(opts)(ext))(function (mbrowser) {
            if (mbrowser instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
            if (mbrowser instanceof Data_Maybe.Just) {
                return Toppokki.close(mbrowser.value0);
            };
            throw new Error("Failed pattern match at Contract.Test.E2E.Browser (line 174, column 18 - line 176, column 33): " + [ mbrowser.constructor.name ]);
        });
    };
};
module.exports = {
    Headless: Headless,
    Visible: Visible,
    TestOptions: TestOptions,
    withBrowser: withBrowser,
    parseOptions: parseOptions,
    eqMode: eqMode
};
