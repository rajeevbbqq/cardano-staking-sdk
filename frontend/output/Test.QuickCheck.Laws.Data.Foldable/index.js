// Generated by purs version 0.14.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Laws = require("../Test.QuickCheck.Laws/index.js");
var checkFoldable = function (dictFoldable) {
    return function (dictArbitrary) {
        return function (v) {
            var foldrLaw = function (f) {
                return function (z) {
                    return function (t) {
                        return Data_Eq.eq(Test_QuickCheck_Laws.eqB)(Data_Foldable.foldr(dictFoldable)(f)(z)(t))(Data_Foldable.foldrDefault(dictFoldable)(f)(z)(t));
                    };
                };
            };
            var foldlLaw = function (f) {
                return function (z) {
                    return function (t) {
                        return Data_Eq.eq(Test_QuickCheck_Laws.eqB)(Data_Foldable.foldl(dictFoldable)(f)(z)(t))(Data_Foldable.foldlDefault(dictFoldable)(f)(z)(t));
                    };
                };
            };
            return function __do() {
                Effect_Console.log("Checking 'foldr' law for Foldable")();
                Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB)(Test_QuickCheck_Laws.arbitraryB)))(Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryB)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(foldrLaw)();
                Effect_Console.log("Checking 'foldl' law for Foldable")();
                return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB)(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB)))(Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryB)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(foldlLaw)();
            };
        };
    };
};
var checkFoldableFunctor = function (dictFoldable) {
    return function (dictFunctor) {
        return function (dictArbitrary) {
            return function (ff) {
                var foldMapLaw = function (f) {
                    return function (t) {
                        return Data_Eq.eq(Test_QuickCheck_Laws.eqB)(Data_Foldable.foldMap(dictFoldable)(Test_QuickCheck_Laws.monoidB)(f)(t))(Data_Foldable.fold(dictFoldable)(Test_QuickCheck_Laws.monoidB)(Data_Functor.map(dictFunctor)(f)(t)));
                    };
                };
                return function __do() {
                    checkFoldable(dictFoldable)(dictArbitrary)(ff)();
                    Effect_Console.log("Checking 'foldMap' law for Foldable")();
                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB))(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(foldMapLaw)();
                };
            };
        };
    };
};
module.exports = {
    checkFoldable: checkFoldable,
    checkFoldableFunctor: checkFoldableFunctor
};
