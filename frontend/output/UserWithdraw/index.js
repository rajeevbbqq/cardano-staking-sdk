// Generated by purs version 0.14.5
"use strict";
var BondedStaking_TimeUtils = require("../BondedStaking.TimeUtils/index.js");
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_PlutusData = require("../Contract.PlutusData/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_ScriptLookups = require("../Contract.ScriptLookups/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var FromData = require("../FromData/index.js");
var IsData = require("../IsData/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Scripts_ListNFT = require("../Scripts.ListNFT/index.js");
var Scripts_PoolValidator = require("../Scripts.PoolValidator/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Settings = require("../Settings/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Datum = require("../Types.Datum/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var Types_Redeemer = require("../Types.Redeemer/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var Utils = require("../Utils/index.js");
var getBondedDatum = Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
    var $59 = Contract_Monad.liftContractM("getBondedDatum: could not parse datum as bonded staking datum");
    var $60 = FromData.fromData(Types.fromDataBondedStakingDatu);
    var $61 = Data_Newtype.unwrap();
    return function ($62) {
        return $59($60($61($62)));
    };
})())(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getBondedDatum: could not get datum"))(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_PlutusData.getDatumByHash)((function () {
    var $63 = Contract_Monad.liftContractM("getBondedDatum: could not get datum hash");
    return function ($64) {
        return $63(Utils.getUtxoDatumHash($64));
    };
})())));
var getEntryDatumFromOutput = function (txOut) {
    return Control_Bind.bind(Contract_Monad.bindContract)(getBondedDatum(txOut))(function (bondedDatum) {
        if (bondedDatum instanceof Types.EntryDatum) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(bondedDatum.value0.entry);
        };
        return Contract_Monad.throwContractError(Data_Show.showString)("getEntryDatumFromOutput: datum is not of Entry type");
    });
};
var getStateDatumFromOutput = function (txOut) {
    return Control_Bind.bind(Contract_Monad.bindContract)(getBondedDatum(txOut))(function (bondedDatum) {
        if (bondedDatum instanceof Types.StateDatum) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(bondedDatum.value0.maybeEntryName);
        };
        return Contract_Monad.throwContractError(Data_Show.showString)("getStateDatumFromOutput: datum is not of State type");
    });
};
var getBondedAssetUtxos = function (utxos) {
    var utxoAssocList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos);
    return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Array.catMaybes)(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(utxoAssocList)(function (v) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum hash")(Utils.getUtxoDatumHash(v.value1)))(function (datumHash) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum"))(Contract_PlutusData.getDatumByHash(datumHash)))(function (datum) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not parse datum as a bonded staking datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(datum))))(function (v1) {
                    if (v1 instanceof Types.AssetDatum) {
                        return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Maybe.Just(v));
                    };
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value);
                });
            });
        });
    })))(function (assetUtxos) {
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray)(assetUtxos));
    });
};
var userWithdrawBondedPoolContract = function (v) {
    return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userWithdrawBondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawnBondedPoolContract: Cannot get user's staking pub key hash")(Contract_Address.ownStakePubKeyHash))(function (userStakingPubKeyHash) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userWithdrawBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                    var valHash = Scripts.validatorHash(validator);
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userWithdrawBondedPoolContract: validatorHash")(valHash))(function () {
                                        var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userWithdrawBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: Pool UTxOs")(bondedPoolUtxos))(function () {
                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting head entry of the pool..."))(function () {
                                                                return Control_Bind.bind(Contract_Monad.bindContract)(getStateDatumFromOutput(v1.value1))(function (headEntry) {
                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Maybe.showMaybe(Types_ByteArray.showByteArray))("userWithdrawBondedPoolContract: Head entry of the pool")(headEntry))(function () {
                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting bonded assets in the pool..."))(function () {
                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(getBondedAssetUtxos(bondedPoolUtxos))(function (bondedAssetUtxos) {
                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawnBondedPoolContract: Bonded Asset UTxOs")(bondedAssetUtxos))(function () {
                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Bonded.value)(v.nftCs)))(function (listPolicy) {
                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Getting withdrawing range..."))(function () {
                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getWithdrawingTime(v))(function (v2) {
                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userWithdrawBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v2.currTime)))(function () {
                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userWithdrawBondedPoolContract: TX Range")(v2.range))(function () {
                                                                                                            var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                            var mintEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                            var burnEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Ring.negate(Data_BigInt.ringBigInt)(Data_Semiring.one(Data_BigInt.semiringBigInt)));
                                                                                                            var assocList = Utils.mkOnchainAssocList(v.assocListCs)(bondedPoolUtxos);
                                                                                                            var assetParams = Data_Newtype.unwrap()(v.bondedAssetClass);
                                                                                                            var assetDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(Types.AssetDatum.value));
                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                if (headEntry instanceof Data_Maybe.Nothing) {
                                                                                                                    return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawBondedPoolContract: no entries in the pool, expected at least one");
                                                                                                                };
                                                                                                                if (headEntry instanceof Data_Maybe.Just) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Found the head entry successfully"))(function () {
                                                                                                                        var v3 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(headEntry.value0);
                                                                                                                        if (v3 instanceof Data_Ordering.LT) {
                                                                                                                            return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawBondedPoolContract: entry key < head key (non existent)");
                                                                                                                        };
                                                                                                                        if (v3 instanceof Data_Ordering.EQ) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Compare EQ"))(function () {
                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot extract head from Assoc. List - this should be impossible")(Data_Array.head(assocList)))(function (v4) {
                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of entry toconsume (head)..."))(function () {
                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value1)))(function (oldHeadEntry) {
                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "deposited";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "key";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "newDeposit";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "next";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "rewards";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "staked";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(oldHeadEntry))(function () {
                                                                                                                                                var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(oldHeadEntry.deposited);
                                                                                                                                                var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(oldHeadEntry.rewards))(Types_Rational.denominator(oldHeadEntry.rewards));
                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawBondedPoolContract: rewards")(oldHeadEntry.rewards))(function () {
                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: rewardsRounded")(rewardsRounded))(function () {
                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawnAmt")(oldHeadEntry.deposited))(function () {
                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Value.showValue)("userWithdrawBondedPoolContract: withdrawnVal")(withdrawnVal))(function () {
                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawBondedPoolContract: rewards")(oldHeadEntry.rewards))(function () {
                                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.bondedAssetClass)(oldHeadEntry.deposited)(bondedAssetUtxos)))(function (v5) {
                                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawChange")(v5.value1))(function () {
                                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: consumedAssetUtxos")(v5.value0))(function () {
                                                                                                                                                                                var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.WithdrawAct({
                                                                                                                                                                                    stakeHolder: userPkh,
                                                                                                                                                                                    burningAction: new Types.BurnHead(v1.value0, v4.value1.value0)
                                                                                                                                                                                })));
                                                                                                                                                                                var newState = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.StateDatum({
                                                                                                                                                                                    maybeEntryName: oldHeadEntry.next
                                                                                                                                                                                })));
                                                                                                                                                                                var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnHead(v1.value0, v4.value1.value0))));
                                                                                                                                                                                var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.bondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.bondedAssetClass)).tokenName)(v5.value1);
                                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(newState)))(function (stateDatumLookup) {
                                                                                                                                                                                    var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), stateDatumLookup ]);
                                                                                                                                                                                    var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v1.value0)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v4.value1.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v5.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(newState)(stateTokenValue), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v2.range) ]);
                                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                                                });
                                                                                                                                                                            });
                                                                                                                                                                        });
                                                                                                                                                                    });
                                                                                                                                                                });
                                                                                                                                                            });
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        };
                                                                                                                        if (v3 instanceof Data_Ordering.GT) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: Compare GT"))(function () {
                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get position in Assoc. List")(Utils.findRemoveOtherElem(assocList)(hashedUserPkh)))(function (v4) {
                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of previousentry..."))(function () {
                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value0.firstOutput)))(function (prevEntry) {
                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "deposited";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "key";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "newDeposit";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "next";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "rewards";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                    return "staked";
                                                                                                                                                }
                                                                                                                                            })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(prevEntry))(function () {
                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawBondedPoolContract: getting datum of entry to burn..."))(function () {
                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v4.value1.value0.secondOutput)))(function (burnEntry) {
                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "deposited";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "key";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "newDeposit";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "next";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "rewards";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsCons({
                                                                                                                                                            reflectSymbol: function () {
                                                                                                                                                                return "staked";
                                                                                                                                                            }
                                                                                                                                                        })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawBondedPoolContract: entry to consume")(burnEntry))(function () {
                                                                                                                                                            var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(burnEntry.rewards))(Types_Rational.denominator(burnEntry.rewards));
                                                                                                                                                            var withdrawnAmt = Data_Semiring.add(Data_BigInt.semiringBigInt)(burnEntry.staked)(rewardsRounded);
                                                                                                                                                            var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(withdrawnAmt);
                                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.bondedAssetClass)(withdrawnAmt)(bondedAssetUtxos)))(function (v5) {
                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawBondedPoolContract: withdrawChange")(v5.value1))(function () {
                                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawBondedPoolContract: consumedAssetUtxos")(v5.value0))(function () {
                                                                                                                                                                        var prevEntryUpdated = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(new Types.EntryDatum({
                                                                                                                                                                            entry: Types.Entry({
                                                                                                                                                                                key: prevEntry.key,
                                                                                                                                                                                newDeposit: prevEntry.newDeposit,
                                                                                                                                                                                deposited: prevEntry.deposited,
                                                                                                                                                                                staked: prevEntry.staked,
                                                                                                                                                                                rewards: prevEntry.rewards,
                                                                                                                                                                                next: burnEntry.next
                                                                                                                                                                            })
                                                                                                                                                                        })));
                                                                                                                                                                        var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.bondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.bondedAssetClass)).tokenName)(v5.value1);
                                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawBondedPoolContract: Could not create updated prev  entry datum lookup")(Types_ScriptLookups.datum(prevEntryUpdated)))(function (prevEntryDatumLookup) {
                                                                                                                                                                            var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(new Types.WithdrawAct({
                                                                                                                                                                                stakeHolder: userPkh,
                                                                                                                                                                                burningAction: new Types.BurnOther(v4.value0.firstInput, v4.value0.secondInput)
                                                                                                                                                                            })));
                                                                                                                                                                            var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnOther(v4.value0.firstInput, v4.value0.secondInput))));
                                                                                                                                                                            var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), prevEntryDatumLookup ]);
                                                                                                                                                                            var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustSpendScriptOutput(v4.value0.firstInput)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v4.value0.secondInput)(valRedeemer), Utils.mkAssetUtxosConstraints(v5.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(prevEntryUpdated)(mintEntryValue), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v2.range) ]);
                                                                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, lookup));
                                                                                                                                                                        });
                                                                                                                                                                    });
                                                                                                                                                                });
                                                                                                                                                            });
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        };
                                                                                                                        throw new Error("Failed pattern match at UserWithdraw (line 189, column 7 - line 415, column 39): " + [ v3.constructor.name ]);
                                                                                                                    });
                                                                                                                };
                                                                                                                throw new Error("Failed pattern match at UserWithdraw (line 182, column 28 - line 415, column 39): " + [ headEntry.constructor.name ]);
                                                                                                            })())(function (v3) {
                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(v3.value1)(v3.value0)))(function (unattachedBalancedTx) {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log.logAesonInfo(Contract_Monad.monadLoggerContract)(Types_ScriptLookups.encodeAesonUnattachedUnba)(unattachedBalancedTx))(function () {
                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawBondedPoolContract: Cannot balance, reindex redeemers, attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                            return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                signedTx: signedTx
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }));
};
module.exports = {
    userWithdrawBondedPoolContract: userWithdrawBondedPoolContract
};
