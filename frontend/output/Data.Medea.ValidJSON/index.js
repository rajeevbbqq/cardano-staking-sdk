// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_FoldableWithIndex = require("../Data.FoldableWithIndex/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_HashMap = require("../Data.HashMap/index.js");
var Data_Hashable = require("../Data.Hashable/index.js");
var Data_Medea_MedeaJSON = require("../Data.Medea.MedeaJSON/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var AnythingF = (function () {
    function AnythingF(value0) {
        this.value0 = value0;
    };
    AnythingF.create = function (value0) {
        return new AnythingF(value0);
    };
    return AnythingF;
})();
var NullF = (function () {
    function NullF() {

    };
    NullF.value = new NullF();
    return NullF;
})();
var BooleanF = (function () {
    function BooleanF(value0) {
        this.value0 = value0;
    };
    BooleanF.create = function (value0) {
        return new BooleanF(value0);
    };
    return BooleanF;
})();
var NumberF = (function () {
    function NumberF(value0) {
        this.value0 = value0;
    };
    NumberF.create = function (value0) {
        return new NumberF(value0);
    };
    return NumberF;
})();
var StringF = (function () {
    function StringF(value0) {
        this.value0 = value0;
    };
    StringF.create = function (value0) {
        return new StringF(value0);
    };
    return StringF;
})();
var ArrayF = (function () {
    function ArrayF(value0) {
        this.value0 = value0;
    };
    ArrayF.create = function (value0) {
        return new ArrayF(value0);
    };
    return ArrayF;
})();
var ObjectF = (function () {
    function ObjectF(value0) {
        this.value0 = value0;
    };
    ObjectF.create = function (value0) {
        return new ObjectF(value0);
    };
    return ObjectF;
})();
var objectToHashMap = function (o) {
    return Data_FoldableWithIndex.foldrWithIndex(Foreign_Object.foldableWithIndexObject)(Data_HashMap.insert(Data_Hashable.hashableString))(Data_HashMap.empty)(o);
};
var hashmapToObject = function (hma) {
    return Data_FoldableWithIndex.foldrWithIndex(Data_HashMap.foldableWithIndexHashMap)(Foreign_Object.insert)(Foreign_Object.empty)(hma);
};
var genericValidJSONF = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new AnythingF(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return NullF.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new BooleanF(x.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new NumberF(x.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return new StringF(x.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
            return new ArrayF(x.value0.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
            return new ObjectF(x.value0.value0.value0.value0.value0.value0);
        };
        throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 27, column 1 - line 27, column 62): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof AnythingF) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof NullF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof BooleanF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
        };
        if (x instanceof NumberF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
        };
        if (x instanceof StringF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
        };
        if (x instanceof ArrayF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
        };
        if (x instanceof ObjectF) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))));
        };
        throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 27, column 1 - line 27, column 62): " + [ x.constructor.name ]);
    }
};
var functorValidJSONF = {
    map: function (f) {
        return function (m) {
            if (m instanceof AnythingF) {
                return new AnythingF(m.value0);
            };
            if (m instanceof NullF) {
                return NullF.value;
            };
            if (m instanceof BooleanF) {
                return new BooleanF(m.value0);
            };
            if (m instanceof NumberF) {
                return new NumberF(m.value0);
            };
            if (m instanceof StringF) {
                return new StringF(m.value0);
            };
            if (m instanceof ArrayF) {
                return new ArrayF(Data_Functor.map(Data_Functor.functorArray)(f)(m.value0));
            };
            if (m instanceof ObjectF) {
                return new ObjectF(Data_Functor.map(Data_HashMap.functorHashMap)(f)(m.value0));
            };
            throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 25, column 1 - line 25, column 56): " + [ m.constructor.name ]);
        };
    }
};
var foldableValidJSONF = {
    foldMap: function (dictMonoid) {
        return function (v) {
            return function (v1) {
                if (v1 instanceof AnythingF) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v1 instanceof NullF) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v1 instanceof BooleanF) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v1 instanceof NumberF) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v1 instanceof StringF) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v1 instanceof ArrayF) {
                    return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(v)(v1.value0);
                };
                if (v1 instanceof ObjectF) {
                    return Data_Foldable.foldMap(Data_HashMap.foldableHashMap)(dictMonoid)(v)(v1.value0);
                };
                throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 29, column 1 - line 38, column 37): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    },
    foldl: function (f) {
        return function (a) {
            return function (xs) {
                return Data_Foldable.foldlDefault(foldableValidJSONF)(f)(a)(xs);
            };
        };
    },
    foldr: function (f) {
        return function (a) {
            return function (xs) {
                return Data_Foldable.foldrDefault(foldableValidJSONF)(f)(a)(xs);
            };
        };
    }
};
var traversableValidJSONF = {
    traverse: function (dictApplicative) {
        return function (v) {
            return function (v1) {
                if (v1 instanceof AnythingF) {
                    return Control_Applicative.pure(dictApplicative)(AnythingF.create(v1.value0));
                };
                if (v1 instanceof NullF) {
                    return Control_Applicative.pure(dictApplicative)(NullF.value);
                };
                if (v1 instanceof BooleanF) {
                    return Control_Applicative.pure(dictApplicative)(BooleanF.create(v1.value0));
                };
                if (v1 instanceof NumberF) {
                    return Control_Applicative.pure(dictApplicative)(NumberF.create(v1.value0));
                };
                if (v1 instanceof StringF) {
                    return Control_Applicative.pure(dictApplicative)(StringF.create(v1.value0));
                };
                if (v1 instanceof ArrayF) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(ArrayF.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(v)(v1.value0));
                };
                if (v1 instanceof ObjectF) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(ObjectF.create)(Data_Traversable.traverse(Data_HashMap.traversableHashMap)(dictApplicative)(v)(v1.value0));
                };
                throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 40, column 1 - line 48, column 29): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    },
    sequence: function (dictApplicative) {
        return Data_Traversable.sequenceDefault(traversableValidJSONF)(dictApplicative);
    },
    Functor0: function () {
        return functorValidJSONF;
    },
    Foldable1: function () {
        return foldableValidJSONF;
    }
};
var eqValidJSONF = function (dictEq) {
    return {
        eq: function (x) {
            return function (y) {
                if (x instanceof AnythingF && y instanceof AnythingF) {
                    return Data_Eq.eq(Data_Medea_MedeaJSON.eqMJSON)(x.value0)(y.value0);
                };
                if (x instanceof NullF && y instanceof NullF) {
                    return true;
                };
                if (x instanceof BooleanF && y instanceof BooleanF) {
                    return x.value0 === y.value0;
                };
                if (x instanceof NumberF && y instanceof NumberF) {
                    return x.value0 === y.value0;
                };
                if (x instanceof StringF && y instanceof StringF) {
                    return x.value0 === y.value0;
                };
                if (x instanceof ArrayF && y instanceof ArrayF) {
                    return Data_Eq.eq(Data_Eq.eqArray(dictEq))(x.value0)(y.value0);
                };
                if (x instanceof ObjectF && y instanceof ObjectF) {
                    return Data_Eq.eq(Data_HashMap.eqHashMap(Data_Eq.eqString)(dictEq))(x.value0)(y.value0);
                };
                return false;
            };
        }
    };
};
var hashableValidJSONF = function (dictHashable) {
    return {
        hash: function (v) {
            if (v instanceof AnythingF) {
                return Data_Hashable.hash(Data_Medea_MedeaJSON.hashableMJSON)(v.value0);
            };
            if (v instanceof NullF) {
                return 0;
            };
            if (v instanceof BooleanF) {
                if (v.value0) {
                    return 1;
                };
                return 0;
            };
            if (v instanceof NumberF) {
                return Data_Hashable.hash(Data_Hashable.hashableNumber)(v.value0);
            };
            if (v instanceof StringF) {
                return Data_Hashable.hash(Data_Hashable.hashableString)(v.value0);
            };
            if (v instanceof ArrayF) {
                return Data_Hashable.hash(Data_Hashable.hashableArray(dictHashable))(v.value0);
            };
            if (v instanceof ObjectF) {
                return Data_Hashable.hash(Data_HashMap.hashHashMap(Data_Hashable.hashableString)(dictHashable))(v.value0);
            };
            throw new Error("Failed pattern match at Data.Medea.ValidJSON (line 78, column 1 - line 85, column 28): " + [ v.constructor.name ]);
        },
        Eq0: function () {
            return eqValidJSONF(dictHashable.Eq0());
        }
    };
};
var eq1ValidJSONF = {
    eq1: function (dictEq) {
        return function (v) {
            return function (v1) {
                if (v instanceof AnythingF && v1 instanceof AnythingF) {
                    return Data_Eq.eq(Data_Medea_MedeaJSON.eqMJSON)(v.value0)(v1.value0);
                };
                if (v instanceof NullF && v1 instanceof NullF) {
                    return false;
                };
                if (v instanceof BooleanF && v1 instanceof BooleanF) {
                    return v.value0 === v1.value0;
                };
                if (v instanceof NumberF && v1 instanceof NumberF) {
                    return v.value0 === v1.value0;
                };
                if (v instanceof StringF && v1 instanceof StringF) {
                    return v.value0 === v1.value0;
                };
                if (v instanceof ArrayF && v1 instanceof ArrayF) {
                    return Data_Eq.eq(Data_Eq.eqArray(dictEq))(v.value0)(v1.value0);
                };
                if (v instanceof ObjectF && v1 instanceof ObjectF) {
                    return Data_Eq.eq(Data_HashMap.eqHashMap(Data_Eq.eqString)(dictEq))(v.value0)(v1.value0);
                };
                return false;
            };
        };
    }
};
module.exports = {
    AnythingF: AnythingF,
    NullF: NullF,
    BooleanF: BooleanF,
    NumberF: NumberF,
    StringF: StringF,
    ArrayF: ArrayF,
    ObjectF: ObjectF,
    objectToHashMap: objectToHashMap,
    eqValidJSONF: eqValidJSONF,
    functorValidJSONF: functorValidJSONF,
    genericValidJSONF: genericValidJSONF,
    foldableValidJSONF: foldableValidJSONF,
    traversableValidJSONF: traversableValidJSONF,
    eq1ValidJSONF: eq1ValidJSONF,
    hashableValidJSONF: hashableValidJSONF
};
