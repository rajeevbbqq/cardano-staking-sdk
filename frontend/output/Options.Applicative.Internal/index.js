// Generated by purs version 0.14.5
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Alternative = require("../Control.Alternative/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Control_Monad_Reader = require("../Control.Monad.Reader/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Exists = require("../Data.Exists/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Options_Applicative_Types = require("../Options.Applicative.Types/index.js");
var TNil = (function () {
    function TNil() {

    };
    TNil.value = new TNil();
    return TNil;
})();
var TCons = (function () {
    function TCons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TCons.create = function (value0) {
        return function (value1) {
            return new TCons(value0, value1);
        };
    };
    return TCons;
})();
var P = function (x) {
    return x;
};
var ListT = function (x) {
    return x;
};
var NondetT = function (x) {
    return x;
};
var ComplParser = (function () {
    function ComplParser(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ComplParser.create = function (value0) {
        return function (value1) {
            return new ComplParser(value0, value1);
        };
    };
    return ComplParser;
})();
var ComplOption = (function () {
    function ComplOption(value0) {
        this.value0 = value0;
    };
    ComplOption.create = function (value0) {
        return new ComplOption(value0);
    };
    return ComplOption;
})();
var ComplResult = (function () {
    function ComplResult(value0) {
        this.value0 = value0;
    };
    ComplResult.create = function (value0) {
        return new ComplResult(value0);
    };
    return ComplResult;
})();
var Completion = function (x) {
    return x;
};
var withReadM = function (f) {
    var f$prime = function (v) {
        if (v instanceof Options_Applicative_Types.ErrorMsg) {
            return new Options_Applicative_Types.ErrorMsg(f(v.value0));
        };
        return v;
    };
    var $142 = Control_Monad_Reader_Trans.mapReaderT(Control_Monad_Except.withExcept(f$prime));
    var $143 = Data_Newtype.un()(Options_Applicative_Types.ReadM);
    return function ($144) {
        return Options_Applicative_Types.ReadM($142($143($144)));
    };
};
var stepListT = function (v) {
    return v;
};
var runP = function (v) {
    return Control_Monad_Reader.runReader(Data_Function.flip(Control_Monad_State_Trans.runStateT)([  ])(Control_Monad_Except_Trans.runExceptT(v)));
};
var runNondetT = function (v) {
    return v;
};
var runListT = function (dictMonad) {
    return function (xs) {
        return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
            if (s instanceof TNil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            };
            if (s instanceof TCons) {
                return Control_Monad.liftM1(dictMonad)(Data_List_Types.Cons.create(s.value0))(runListT(dictMonad)(s.value1));
            };
            throw new Error("Failed pattern match at Options.Applicative.Internal (line 200, column 3 - line 202, column 53): " + [ s.constructor.name ]);
        });
    };
};
var runCompletion = function (v) {
    return function (prefs) {
        var v1 = Control_Monad_Reader_Trans.runReaderT(Control_Monad_Except_Trans.runExceptT(v))(prefs);
        if (v1 instanceof ComplResult) {
            return Data_Maybe.Nothing.value;
        };
        if (v1 instanceof ComplParser) {
            return Data_Maybe.Just.create(new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v1.value1)));
        };
        if (v1 instanceof ComplOption) {
            return Data_Maybe.Just.create(new Data_Either.Right(v1.value0));
        };
        throw new Error("Failed pattern match at Options.Applicative.Internal (line 170, column 38 - line 173, column 42): " + [ v1.constructor.name ]);
    };
};
var pFunctor = {
    map: function (f) {
        return function (v) {
            return P(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity))))(f)(v));
        };
    }
};
var pApply = {
    apply: function (v) {
        return function (v1) {
            return P(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
        };
    },
    Functor0: function () {
        return pFunctor;
    }
};
var pBind = {
    bind: function (v) {
        return function (k) {
            return P(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    },
    Apply0: function () {
        return pApply;
    }
};
var pApplicative = {
    pure: function (a) {
        return P(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(a));
    },
    Apply0: function () {
        return pApply;
    }
};
var pMonad = {
    Applicative0: function () {
        return pApplicative;
    },
    Bind1: function () {
        return pBind;
    }
};
var pAlt = {
    alt: function (v) {
        return function (v1) {
            return P(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
        };
    },
    Functor0: function () {
        return pFunctor;
    }
};
var missingArgP = function (dict) {
    return dict.missingArgP;
};
var getPrefs = function (dict) {
    return dict.getPrefs;
};
var exitP = function (dict) {
    return dict.exitP;
};
var exitContext = function (dict) {
    return dict.exitContext;
};
var errorP = function (dict) {
    return dict.errorP;
};
var hoistEither = function (dictMonadP) {
    return Data_Either.either(errorP(dictMonadP))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
};
var runReadM = function (dictMonadP) {
    return function (v) {
        return function (s) {
            return hoistEither(dictMonadP)(Control_Monad_Except.runExcept(Control_Monad_Reader_Trans.runReaderT(v)(s)));
        };
    };
};
var hoistMaybe = function (dictMonadP) {
    return function (err) {
        return Data_Maybe.maybe(errorP(dictMonadP)(err))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
    };
};
var pMonadP = {
    enterContext: function (name) {
        return function (pinfo) {
            return P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.cons(new Options_Applicative_Types.Context(name, Data_Exists.mkExists(pinfo))))));
        };
    },
    exitContext: P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.drop(1)))),
    getPrefs: P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))),
    missingArgP: function (e) {
        return function (v) {
            return errorP(pMonadP)(e);
        };
    },
    exitP: function (i) {
        return function (v) {
            return function (p) {
                var $145 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Options_Applicative_Types.MissingError.create(i)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
                return function ($146) {
                    return P($145($146));
                };
            };
        };
    },
    errorP: (function () {
        var $147 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))));
        return function ($148) {
            return P($147($148));
        };
    })(),
    Monad0: function () {
        return pMonad;
    },
    Alt1: function () {
        return pAlt;
    }
};
var enterContext = function (dict) {
    return dict.enterContext;
};
var contextNames = function (ns) {
    var go = function (v) {
        return v.value0;
    };
    return Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(go)(ns));
};
var complResultMonad = {
    Applicative0: function () {
        return complResultApplicative;
    },
    Bind1: function () {
        return complResultBind;
    }
};
var complResultFunctor = {
    map: Control_Monad.liftM1(complResultMonad)
};
var complResultBind = {
    bind: function (m) {
        return function (f) {
            if (m instanceof ComplResult) {
                return f(m.value0);
            };
            if (m instanceof ComplParser) {
                return new ComplParser(m.value0, m.value1);
            };
            if (m instanceof ComplOption) {
                return new ComplOption(m.value0);
            };
            throw new Error("Failed pattern match at Options.Applicative.Internal (line 134, column 14 - line 137, column 35): " + [ m.constructor.name ]);
        };
    },
    Apply0: function () {
        return complResultApply;
    }
};
var complResultApply = {
    apply: Control_Monad.ap(complResultMonad),
    Functor0: function () {
        return complResultFunctor;
    }
};
var complResultApplicative = {
    pure: ComplResult.create,
    Apply0: function () {
        return complResultApply;
    }
};
var completionFunctor = {
    map: function (f) {
        return function (v) {
            return Completion(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(complResultFunctor)))(f)(v));
        };
    }
};
var completionAlt = {
    alt: function (v) {
        return function (v1) {
            return Completion(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
        };
    },
    Functor0: function () {
        return completionFunctor;
    }
};
var completionApply = {
    apply: function (v) {
        return function (v1) {
            return Completion(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
        };
    },
    Functor0: function () {
        return completionFunctor;
    }
};
var completionApplicative = {
    pure: function (a) {
        return Completion(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(a));
    },
    Apply0: function () {
        return completionApply;
    }
};
var completionBind = {
    bind: function (v) {
        return function (k) {
            return Completion(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(function (a) {
                var v1 = k(a);
                return v1;
            }));
        };
    },
    Apply0: function () {
        return completionApply;
    }
};
var completionMonad = {
    Applicative0: function () {
        return completionApplicative;
    },
    Bind1: function () {
        return completionBind;
    }
};
var completionMonadP = {
    enterContext: function (v) {
        return function (v1) {
            return Control_Applicative.pure(completionApplicative)(Data_Unit.unit);
        };
    },
    exitContext: Control_Applicative.pure(completionApplicative)(Data_Unit.unit),
    getPrefs: Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(complResultMonad)))),
    missingArgP: function (v) {
        var $149 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad));
        var $150 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad);
        return function ($151) {
            return Completion($149($150(ComplOption.create($151))));
        };
    },
    exitP: function (v) {
        return function (a) {
            return function (p) {
                return function (v1) {
                    return Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad)(new ComplParser(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)), a))));
                };
            };
        };
    },
    errorP: (function () {
        var $152 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)));
        return function ($153) {
            return Completion($152($153));
        };
    })(),
    Monad0: function () {
        return completionMonad;
    },
    Alt1: function () {
        return completionAlt;
    }
};
var bimapTStep = function (v) {
    return function (v1) {
        return function (v2) {
            if (v2 instanceof TNil) {
                return TNil.value;
            };
            if (v2 instanceof TCons) {
                return new TCons(v(v2.value0), v1(v2.value1));
            };
            throw new Error("Failed pattern match at Options.Applicative.Internal (line 186, column 1 - line 186, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var listTFunctor = function (dictMonad) {
    return {
        map: function (f) {
            return function (v) {
                return ListT(Control_Monad.liftM1(dictMonad)(bimapTStep(f)(Data_Functor.map(listTFunctor(dictMonad))(f)))(stepListT(v)));
            };
        }
    };
};
var listTAlt = function (dictMonad) {
    return {
        alt: function (xs) {
            return function (ys) {
                return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                    if (s instanceof TNil) {
                        return stepListT(ys);
                    };
                    if (s instanceof TCons) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(s.value0, Control_Alt.alt(listTAlt(dictMonad))(s.value1)(ys)));
                    };
                    throw new Error("Failed pattern match at Options.Applicative.Internal (line 227, column 5 - line 229, column 49): " + [ s.constructor.name ]);
                }));
            };
        },
        Functor0: function () {
            return listTFunctor(dictMonad);
        }
    };
};
var listTPlus = function (dictMonad) {
    return {
        empty: Control_Applicative.pure(dictMonad.Applicative0())(TNil.value),
        Alt0: function () {
            return listTAlt(dictMonad);
        }
    };
};
var hoistList = function (dictMonad) {
    return Data_Array.foldr(function (x) {
        return function (xt) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(x, xt));
        };
    })(Control_Plus.empty(listTPlus(dictMonad)));
};
var listTMonadTrans = {
    lift: function (dictMonad) {
        var $154 = Control_Monad.liftM1(dictMonad)(function (v) {
            return new TCons(v, Control_Plus.empty(listTPlus(dictMonad)));
        });
        return function ($155) {
            return ListT($154($155));
        };
    }
};
var cut = function (dictMonad) {
    return NondetT(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(true)));
};
var nondetTMonadTrans = {
    lift: function (dictMonad) {
        var $156 = Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad));
        var $157 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
        return function ($158) {
            return NondetT($156($157($158)));
        };
    }
};
var listTMonad = function (dictMonad) {
    return {
        Applicative0: function () {
            return listTApplicative(dictMonad);
        },
        Bind1: function () {
            return listTBind(dictMonad);
        }
    };
};
var listTBind = function (dictMonad) {
    return {
        bind: function (xs) {
            return function (f) {
                return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                    if (s instanceof TNil) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(TNil.value);
                    };
                    if (s instanceof TCons) {
                        return stepListT(Control_Alt.alt(listTAlt(dictMonad))(f(s.value0))(Control_Bind.bind(listTBind(dictMonad))(s.value1)(f)));
                    };
                    throw new Error("Failed pattern match at Options.Applicative.Internal (line 218, column 5 - line 220, column 53): " + [ s.constructor.name ]);
                }));
            };
        },
        Apply0: function () {
            return listTApply(dictMonad);
        }
    };
};
var listTApply = function (dictMonad) {
    return {
        apply: Control_Monad.ap(listTMonad(dictMonad)),
        Functor0: function () {
            return listTFunctor(dictMonad);
        }
    };
};
var listTApplicative = function (dictMonad) {
    return {
        pure: (function () {
            var $159 = hoistList(dictMonad);
            var $160 = Control_Applicative.pure(Control_Applicative.applicativeArray);
            return function ($161) {
                return $159($160($161));
            };
        })(),
        Apply0: function () {
            return listTApply(dictMonad);
        }
    };
};
var listTAlternative = function (dictMonad) {
    return {
        Applicative0: function () {
            return listTApplicative(dictMonad);
        },
        Plus1: function () {
            return listTPlus(dictMonad);
        }
    };
};
var listTMonadPlus = function (dictMonad) {
    return {
        Monad0: function () {
            return listTMonad(dictMonad);
        },
        Alternative1: function () {
            return listTAlternative(dictMonad);
        }
    };
};
var nondetTAltOp = function (dictMonad) {
    return function (m1) {
        return function (m2) {
            return NondetT(Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(runNondetT(m1))(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (s) {
                return Control_Bind.discard(Control_Bind.discardUnit)(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Alternative.guard(listTAlternative(Control_Monad_State_Trans.monadStateT(dictMonad)))(!s))(function () {
                    return runNondetT(m2);
                });
            })));
        };
    };
};
var nondetTFunctor = function (dictMonad) {
    return {
        map: function (f) {
            var $162 = Data_Functor.map(listTFunctor(Control_Monad_State_Trans.monadStateT(dictMonad)))(f);
            return function ($163) {
                return NondetT($162(runNondetT($163)));
            };
        }
    };
};
var nondetTAlt = function (dictMonad) {
    return {
        alt: function (v) {
            return function (v1) {
                return Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
            };
        },
        Functor0: function () {
            return nondetTFunctor(dictMonad);
        }
    };
};
var nondetTPlus = function (dictMonad) {
    return {
        empty: Control_Plus.empty(listTPlus(Control_Monad_State_Trans.monadStateT(dictMonad))),
        Alt0: function () {
            return nondetTAlt(dictMonad);
        }
    };
};
var nondetTApply = function (dictMonad) {
    return {
        apply: function (v) {
            return function (v1) {
                return Control_Apply.apply(listTApply(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
            };
        },
        Functor0: function () {
            return nondetTFunctor(dictMonad);
        }
    };
};
var nondetTApplicative = function (dictMonad) {
    return {
        pure: (function () {
            var $164 = Control_Applicative.pure(listTApplicative(Control_Monad_State_Trans.monadStateT(dictMonad)));
            return function ($165) {
                return NondetT($164($165));
            };
        })(),
        Apply0: function () {
            return nondetTApply(dictMonad);
        }
    };
};
var nondetTAlternative = function (dictMonad) {
    return {
        Applicative0: function () {
            return nondetTApplicative(dictMonad);
        },
        Plus1: function () {
            return nondetTPlus(dictMonad);
        }
    };
};
var nondetTBind = function (dictMonad) {
    return {
        bind: function (v) {
            return function (f) {
                return NondetT(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(function ($166) {
                    return runNondetT(f($166));
                }));
            };
        },
        Apply0: function () {
            return nondetTApply(dictMonad);
        }
    };
};
var nondetTMonad = function (dictMonad) {
    return {
        Applicative0: function () {
            return nondetTApplicative(dictMonad);
        },
        Bind1: function () {
            return nondetTBind(dictMonad);
        }
    };
};
var nondetTMonadPlus = function (dictMonad) {
    return {
        Monad0: function () {
            return nondetTMonad(dictMonad);
        },
        Alternative1: function () {
            return nondetTAlternative(dictMonad);
        }
    };
};
var takeListT = function (dictMonad) {
    return function (v) {
        if (v === 0) {
            return Data_Function["const"](Control_Plus.empty(listTPlus(dictMonad)));
        };
        var $167 = Control_Monad.liftM1(dictMonad)(bimapTStep(Control_Category.identity(Control_Category.categoryFn))(takeListT(dictMonad)(v - 1 | 0)));
        return function ($168) {
            return ListT($167(stepListT($168)));
        };
    };
};
var disamb = function (dictMonad) {
    return function (allow_amb) {
        return function (xs) {
            return Control_Bind.bind(dictMonad.Bind1())((function (v) {
                return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(v)(false);
            })(runListT(Control_Monad_State_Trans.monadStateT(dictMonad))(takeListT(Control_Monad_State_Trans.monadStateT(dictMonad))((function () {
                if (allow_amb) {
                    return 1;
                };
                return 2;
            })())(runNondetT(xs)))))(function (xs$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                    if (xs$prime instanceof Data_List_Types.Cons && xs$prime.value1 instanceof Data_List_Types.Nil) {
                        return new Data_Maybe.Just(xs$prime.value0);
                    };
                    return Data_Maybe.Nothing.value;
                })());
            });
        };
    };
};
module.exports = {
    enterContext: enterContext,
    exitContext: exitContext,
    getPrefs: getPrefs,
    missingArgP: missingArgP,
    errorP: errorP,
    exitP: exitP,
    hoistMaybe: hoistMaybe,
    hoistEither: hoistEither,
    runReadM: runReadM,
    withReadM: withReadM,
    runP: runP,
    runCompletion: runCompletion,
    contextNames: contextNames,
    takeListT: takeListT,
    runListT: runListT,
    cut: cut,
    nondetTAltOp: nondetTAltOp,
    disamb: disamb,
    pFunctor: pFunctor,
    pApply: pApply,
    pApplicative: pApplicative,
    pAlt: pAlt,
    pBind: pBind,
    pMonad: pMonad,
    pMonadP: pMonadP,
    completionFunctor: completionFunctor,
    completionApply: completionApply,
    completionApplicative: completionApplicative,
    completionAlt: completionAlt,
    completionBind: completionBind,
    completionMonad: completionMonad,
    completionMonadP: completionMonadP,
    listTFunctor: listTFunctor,
    listTApply: listTApply,
    listTApplicative: listTApplicative,
    listTBind: listTBind,
    listTMonad: listTMonad,
    listTAlt: listTAlt,
    listTPlus: listTPlus,
    listTAlternative: listTAlternative,
    listTMonadTrans: listTMonadTrans,
    listTMonadPlus: listTMonadPlus,
    nondetTFunctor: nondetTFunctor,
    nondetTApply: nondetTApply,
    nondetTApplicative: nondetTApplicative,
    nondetTBind: nondetTBind,
    nondetTMonad: nondetTMonad,
    nondetTMonadPlus: nondetTMonadPlus,
    nondetTAlt: nondetTAlt,
    nondetTPlus: nondetTPlus,
    nondetTAlternative: nondetTAlternative,
    nondetTMonadTrans: nondetTMonadTrans,
    ErrorMsg: Options_Applicative_Types.ErrorMsg,
    ExpectsArgError: Options_Applicative_Types.ExpectsArgError,
    InfoMsg: Options_Applicative_Types.InfoMsg,
    MissingError: Options_Applicative_Types.MissingError,
    ShowHelpText: Options_Applicative_Types.ShowHelpText,
    UnexpectedError: Options_Applicative_Types.UnexpectedError
};
