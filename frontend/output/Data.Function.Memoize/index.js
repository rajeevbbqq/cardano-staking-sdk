// Generated by purs version 0.14.5
"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Char = require("../Data.Char/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var NatTrie = (function () {
    function NatTrie(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    NatTrie.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new NatTrie(value0, value1, value2);
            };
        };
    };
    return NatTrie;
})();
var tabulateUnit = {
    tabulate: function (f) {
        var r = Data_Lazy.defer(function (v) {
            return f(Data_Unit.unit);
        });
        return function (v) {
            return r;
        };
    }
};
var tabulateNoArguments = {
    tabulate: function (f) {
        var r = Data_Lazy.defer(function (v) {
            return f(Data_Generic_Rep.NoArguments.value);
        });
        return function (v) {
            return r;
        };
    }
};
var tabulateNat = {
    tabulate: (function () {
        var tabulateImpl = function (f) {
            var walk = function (v) {
                return function (v1) {
                    if (v instanceof Data_List_Types.Nil) {
                        return v1.value0;
                    };
                    if (v instanceof Data_List_Types.Cons && !v.value0) {
                        return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                    };
                    if (v instanceof Data_List_Types.Cons && v.value0) {
                        return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            var build = function (n) {
                return new NatTrie(Data_Lazy.defer(function (v) {
                    return f(n);
                }), Data_Lazy.defer(function (v) {
                    return build(n * 2 | 0);
                }), Data_Lazy.defer(function (v) {
                    return build((n * 2 | 0) + 1 | 0);
                }));
            };
            var trie = build(0);
            var bits = (function () {
                var bits$prime = function ($copy_acc) {
                    return function ($copy_v) {
                        var $tco_var_acc = $copy_acc;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(acc, v) {
                            if (v === 0) {
                                $tco_done = true;
                                return acc;
                            };
                            $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                            $copy_v = v >>> 1;
                            return;
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_acc, $copy_v);
                        };
                        return $tco_result;
                    };
                };
                return bits$prime(Data_List_Types.Nil.value);
            })();
            var go = function (n) {
                return walk(bits(n))(trie);
            };
            return go;
        };
        return tabulateImpl;
    })()
};
var tabulateBool = {
    tabulate: function (f) {
        var r2 = Data_Lazy.defer(function (v) {
            return f(false);
        });
        var r1 = Data_Lazy.defer(function (v) {
            return f(true);
        });
        return function (b) {
            if (b) {
                return r1;
            };
            return r2;
        };
    }
};
var tabulate = function (dict) {
    return dict.tabulate;
};
var tabulateArgument = function (dictTabulate) {
    return {
        tabulate: function (f) {
            var g = tabulate(dictTabulate)(function ($86) {
                return f(Data_Generic_Rep.Argument($86));
            });
            return function ($87) {
                return g((function (v) {
                    return v;
                })($87));
            };
        }
    };
};
var tabulateChar = {
    tabulate: function (f) {
        var f1 = tabulate(tabulateNat)((function () {
            var $88 = Data_Maybe.fromJust();
            return function ($89) {
                return f($88(Data_Char.fromCharCode($89)));
            };
        })());
        return function ($90) {
            return f1(Data_Char.toCharCode($90));
        };
    }
};
var tabulateConstructor = function (dictTabulate) {
    return {
        tabulate: function (f) {
            var g = tabulate(dictTabulate)(function ($91) {
                return f(Data_Generic_Rep.Constructor($91));
            });
            return function ($92) {
                return g((function (v) {
                    return v;
                })($92));
            };
        }
    };
};
var tabulateEither = function (dictTabulate) {
    return function (dictTabulate1) {
        return {
            tabulate: function (f) {
                var r = tabulate(dictTabulate1)(function ($93) {
                    return f(Data_Either.Right.create($93));
                });
                var l = tabulate(dictTabulate)(function ($94) {
                    return f(Data_Either.Left.create($94));
                });
                return function (v) {
                    if (v instanceof Data_Either.Left) {
                        return l(v.value0);
                    };
                    if (v instanceof Data_Either.Right) {
                        return r(v.value0);
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 74, column 19 - line 76, column 35): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var tabulateMaybe = function (dictTabulate) {
    return {
        tabulate: function (f) {
            var n = Data_Lazy.defer(function (v) {
                return f(Data_Maybe.Nothing.value);
            });
            var j = tabulate(dictTabulate)(function ($95) {
                return f(Data_Maybe.Just.create($95));
            });
            return function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return n;
                };
                if (v instanceof Data_Maybe.Just) {
                    return j(v.value0);
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 67, column 19 - line 69, column 35): " + [ v.constructor.name ]);
            };
        }
    };
};
var tabulateProduct = function (dictTabulate) {
    return function (dictTabulate1) {
        return {
            tabulate: function (f) {
                var f$prime = tabulate(dictTabulate)(function (a) {
                    return tabulate(dictTabulate1)(function (b) {
                        return f(new Data_Generic_Rep.Product(a, b));
                    });
                });
                return function (v) {
                    return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (g) {
                        return g(v.value1);
                    });
                };
            }
        };
    };
};
var tabulateSum = function (dictTabulate) {
    return function (dictTabulate1) {
        return {
            tabulate: function (f) {
                var r = tabulate(dictTabulate1)(function ($96) {
                    return f(Data_Generic_Rep.Inr.create($96));
                });
                var l = tabulate(dictTabulate)(function ($97) {
                    return f(Data_Generic_Rep.Inl.create($97));
                });
                return function (v) {
                    if (v instanceof Data_Generic_Rep.Inl) {
                        return l(v.value0);
                    };
                    if (v instanceof Data_Generic_Rep.Inr) {
                        return r(v.value0);
                    };
                    throw new Error("Failed pattern match at Data.Function.Memoize (line 81, column 19 - line 83, column 33): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var tabulateTuple = function (dictTabulate) {
    return function (dictTabulate1) {
        return {
            tabulate: function (f) {
                var f$prime = tabulate(dictTabulate)(function (a) {
                    return tabulate(dictTabulate1)(function (b) {
                        return f(new Data_Tuple.Tuple(a, b));
                    });
                });
                return function (v) {
                    return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (g) {
                        return g(v.value1);
                    });
                };
            }
        };
    };
};
var tabulateList = function (dictTabulate) {
    return {
        tabulate: function (f) {
            var toList = function (v) {
                if (v instanceof Data_Maybe.Nothing) {
                    return Data_List_Types.Nil.value;
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_List_Types.Cons(v.value0.value0, v.value0.value1);
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 99, column 7 - line 99, column 27): " + [ v.constructor.name ]);
            };
            var fromList = function (v) {
                if (v instanceof Data_List_Types.Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Data_List_Types.Cons) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
                };
                throw new Error("Failed pattern match at Data.Function.Memoize (line 102, column 7 - line 102, column 29): " + [ v.constructor.name ]);
            };
            var f$prime = tabulate(tabulateMaybe(tabulateTuple(dictTabulate)(tabulateList(dictTabulate))))(function ($98) {
                return f(toList($98));
            });
            return function ($99) {
                return f$prime(fromList($99));
            };
        }
    };
};
var tabulateArray = function (dictTabulate) {
    return {
        tabulate: function (f) {
            var f1 = tabulate(tabulateList(dictTabulate))((function () {
                var $100 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
                return function ($101) {
                    return f($100($101));
                };
            })());
            var $102 = Data_List.fromFoldable(Data_Foldable.foldableArray);
            return function ($103) {
                return f1($102($103));
            };
        }
    };
};
var tabulateString = {
    tabulate: function (f) {
        var f1 = tabulate(tabulateArray(tabulateChar))(function ($104) {
            return f(Data_String_CodeUnits.fromCharArray($104));
        });
        return function ($105) {
            return f1(Data_String_CodeUnits.toCharArray($105));
        };
    }
};
var memoize = function (dictTabulate) {
    return function (f) {
        var f1 = tabulate(dictTabulate)(f);
        return function ($106) {
            return Data_Lazy.force(f1($106));
        };
    };
};
var memoize2 = function (dictTabulate) {
    return function (dictTabulate1) {
        return function (f) {
            var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
            return Data_Tuple.curry(f1);
        };
    };
};
var memoize3 = function (dictTabulate) {
    return function (dictTabulate1) {
        return function (dictTabulate2) {
            return function (f) {
                var f1 = memoize(tabulateTuple(tabulateTuple(dictTabulate)(dictTabulate1))(dictTabulate2))(Data_Tuple.uncurry(Data_Tuple.uncurry(f)));
                return Data_Tuple.curry(Data_Tuple.curry(f1));
            };
        };
    };
};
var genericTabulate = function (dictGeneric) {
    return function (dictTabulate) {
        return function (f) {
            var f1 = tabulate(dictTabulate)((function () {
                var $107 = Data_Generic_Rep.to(dictGeneric);
                return function ($108) {
                    return f($107($108));
                };
            })());
            var $109 = Data_Generic_Rep.from(dictGeneric);
            return function ($110) {
                return f1($109($110));
            };
        };
    };
};
module.exports = {
    tabulate: tabulate,
    memoize: memoize,
    memoize2: memoize2,
    memoize3: memoize3,
    genericTabulate: genericTabulate,
    tabulateUnit: tabulateUnit,
    tabulateNoArguments: tabulateNoArguments,
    tabulateBool: tabulateBool,
    tabulateChar: tabulateChar,
    tabulateString: tabulateString,
    tabulateConstructor: tabulateConstructor,
    tabulateArgument: tabulateArgument,
    tabulateMaybe: tabulateMaybe,
    tabulateEither: tabulateEither,
    tabulateSum: tabulateSum,
    tabulateTuple: tabulateTuple,
    tabulateProduct: tabulateProduct,
    tabulateList: tabulateList,
    tabulateArray: tabulateArray,
    tabulateNat: tabulateNat
};
