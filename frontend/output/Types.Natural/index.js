// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_ToMetadata = require("../Metadata.ToMetadata/index.js");
var ToData = require("../ToData/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Natural = function (x) {
    return x;
};
var toMetadataNatural = Metadata_ToMetadata.toMetadataBigInt;
var toDataNatural = {
    toData: function (v) {
        return ToData.toData(ToData.toDataBigInt)(v);
    }
};
var showNatural = {
    show: function (v) {
        return "(fromBigInt' (BigInt." + (Data_Show.show(Data_BigInt.showBigInt)(v) + "))");
    }
};
var semiringNatural = Data_BigInt.semiringBigInt;
var ordNatural = Data_BigInt.ordBigInt;
var fromMetadataNatural = Metadata_FromMetadata.fromMetadataBigInt;
var eqNatural = Data_BigInt.eqBigInt;
var toBigInt = function (v) {
    return v;
};
var fromSemiringType$prime = function (dictSemiring) {
    return function (dictOrd) {
        return function (f) {
            return function (n) {
                if (Data_Ord.greaterThanOrEq(dictOrd)(n)(Data_Semiring.zero(dictSemiring))) {
                    return f(n);
                };
                if (Data_Boolean.otherwise) {
                    return Data_Ring.negate(Data_BigInt.ringBigInt)(f(n));
                };
                throw new Error("Failed pattern match at Types.Natural (line 67, column 1 - line 68, column 78): " + [ f.constructor.name, n.constructor.name ]);
            };
        };
    };
};
var fromSemiringType = function (dictSemiring) {
    return function (dictOrd) {
        return function (f) {
            return function (n) {
                if (Data_Ord.greaterThanOrEq(dictOrd)(n)(Data_Semiring.zero(dictSemiring))) {
                    return new Data_Maybe.Just(Natural(f(n)));
                };
                if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Types.Natural (line 59, column 1 - line 60, column 79): " + [ f.constructor.name, n.constructor.name ]);
            };
        };
    };
};
var fromInt$prime = fromSemiringType$prime(Data_Semiring.semiringInt)(Data_Ord.ordInt)(Data_BigInt.fromInt);
var fromInt = fromSemiringType(Data_Semiring.semiringInt)(Data_Ord.ordInt)(Data_BigInt.fromInt);
var fromBigInt$prime = fromSemiringType$prime(Data_BigInt.semiringBigInt)(Data_BigInt.ordBigInt)(Control_Category.identity(Control_Category.categoryFn));
var fromBigInt = fromSemiringType(Data_BigInt.semiringBigInt)(Data_BigInt.ordBigInt)(Control_Category.identity(Control_Category.categoryFn));
var fromString = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromBigInt)(Data_BigInt.fromString);
var decodeAesonNatural = {
    decodeAeson: Aeson.caseAesonBigInt(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected BigInt from Aeson decoding")))(function (bi) {
        return Data_Either.note(Data_Argonaut_Decode_Error.TypeMismatch.create("Invalid Natural number: " + Data_Show.show(Data_BigInt.showBigInt)(bi)))(fromBigInt(bi));
    })
};
var fromDataNatural = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Integer) {
            return fromBigInt(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var binaryOnBigInt = function (bin) {
    return function (n) {
        var $26 = Data_Function.on(bin)(toBigInt)(n);
        return function ($27) {
            return fromBigInt($26($27));
        };
    };
};
var minus = function (n) {
    var $28 = Data_Maybe.fromMaybe(Data_Semiring.zero(semiringNatural));
    var $29 = binaryOnBigInt(Data_Ring.sub(Data_BigInt.ringBigInt))(n);
    return function ($30) {
        return $28($29($30));
    };
};
module.exports = {
    binaryOnBigInt: binaryOnBigInt,
    fromBigInt: fromBigInt,
    "fromBigInt'": fromBigInt$prime,
    fromInt: fromInt,
    "fromInt'": fromInt$prime,
    fromString: fromString,
    minus: minus,
    toBigInt: toBigInt,
    eqNatural: eqNatural,
    ordNatural: ordNatural,
    semiringNatural: semiringNatural,
    fromMetadataNatural: fromMetadataNatural,
    toMetadataNatural: toMetadataNatural,
    showNatural: showNatural,
    fromDataNatural: fromDataNatural,
    toDataNatural: toDataNatural,
    decodeAesonNatural: decodeAesonNatural
};
