// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Cardano_Types_ScriptRef = require("../Cardano.Types.ScriptRef/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Deserialization_Transaction = require("../Deserialization.Transaction/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Serialization_NativeScript = require("../Serialization.NativeScript/index.js");
var Serialization_PlutusData = require("../Serialization.PlutusData/index.js");
var Serialization_PlutusScript = require("../Serialization.PlutusScript/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var transactionHash = (function () {
    var $4 = Data_Newtype.wrap();
    var $5 = Untagged_Union.asOneOf();
    return function ($6) {
        return $4($foreign.blake2b256Hash(Serialization.toBytes($5(Deserialization_Transaction["_txBody"]($6)))));
    };
})();
var plutusScriptHash = function ($7) {
    return $foreign.hashPlutusScript(Serialization_PlutusScript.convertPlutusScript($7));
};
var scriptRefHash = function (v) {
    if (v instanceof Cardano_Types_ScriptRef.PlutusScriptRef) {
        return new Data_Maybe.Just(plutusScriptHash(v.value0));
    };
    if (v instanceof Cardano_Types_ScriptRef.NativeScriptRef) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Hash.nativeScriptHash)(Serialization_NativeScript.convertNativeScript(v.value0));
    };
    throw new Error("Failed pattern match at Hashing (line 65, column 1 - line 65, column 47): " + [ v.constructor.name ]);
};
var datumHash = (function () {
    var $8 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
        var $11 = Data_Newtype.wrap();
        return function ($12) {
            return $11($foreign.hashPlutusData($12));
        };
    })());
    var $9 = Data_Newtype.unwrap();
    return function ($10) {
        return $8(Serialization_PlutusData.convertPlutusData($9($10)));
    };
})();
module.exports = {
    datumHash: datumHash,
    plutusScriptHash: plutusScriptHash,
    transactionHash: transactionHash,
    scriptRefHash: scriptRefHash,
    blake2b256Hash: $foreign.blake2b256Hash,
    blake2b256HashHex: $foreign.blake2b256HashHex,
    sha256Hash: $foreign.sha256Hash,
    sha256HashHex: $foreign.sha256HashHex,
    sha3_256Hash: $foreign.sha3_256Hash,
    sha3_256HashHex: $foreign.sha3_256HashHex
};
