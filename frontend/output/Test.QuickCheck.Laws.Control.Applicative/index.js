// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var Test_QuickCheck_Arbitrary = require("../Test.QuickCheck.Arbitrary/index.js");
var Test_QuickCheck_Laws = require("../Test.QuickCheck.Laws/index.js");
var checkApplicative = function (dictApplicative) {
    return function (dictArbitrary) {
        return function (dictArbitrary1) {
            return function (dictArbitrary2) {
                return function (dictEq) {
                    return function (dictEq1) {
                        return function (dictEq2) {
                            return function (v) {
                                var interchange = function (y) {
                                    return function (u) {
                                        return Data_Eq.eq(dictEq1)(Control_Apply.apply(dictApplicative.Apply0())(u)(Control_Applicative.pure(dictApplicative)(y)))(Control_Apply.apply(dictApplicative.Apply0())(Control_Applicative.pure(dictApplicative)(function (v1) {
                                            return v1(y);
                                        }))(u));
                                    };
                                };
                                var identity = function (v1) {
                                    return Data_Eq.eq(dictEq)(Control_Apply.apply(dictApplicative.Apply0())(Control_Applicative.pure(dictApplicative)(Control_Category.identity(Control_Category.categoryFn)))(v1))(v1);
                                };
                                var homomorphism = function (f) {
                                    return function (x) {
                                        return Data_Eq.eq(dictEq1)(Control_Apply.apply(dictApplicative.Apply0())(Control_Applicative.pure(dictApplicative)(f))(Control_Applicative.pure(dictApplicative)(x)))(Control_Applicative.pure(dictApplicative)(f(x)));
                                    };
                                };
                                var composition = function (f) {
                                    return function (g) {
                                        return function (x) {
                                            return Data_Eq.eq(dictEq2)(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Applicative.pure(dictApplicative)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)))(f))(g))(x))(Control_Apply.apply(dictApplicative.Apply0())(f)(Control_Apply.apply(dictApplicative.Apply0())(g)(x)));
                                        };
                                    };
                                };
                                return function __do() {
                                    Effect_Console.log("Checking 'Identity' law for Applicative")();
                                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identity)();
                                    Effect_Console.log("Checking 'Composition' law for Applicative")();
                                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary2)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(composition)();
                                    Effect_Console.log("Checking 'Homomorphism' law for Applicative")();
                                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB))(Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryA)(Test_QuickCheck.testableBoolean)))(1000)(homomorphism)();
                                    Effect_Console.log("Checking 'Interchange' law for Applicative")();
                                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryA)(Test_QuickCheck.testableFunction(dictArbitrary1)(Test_QuickCheck.testableBoolean)))(1000)(interchange)();
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    checkApplicative: checkApplicative
};
