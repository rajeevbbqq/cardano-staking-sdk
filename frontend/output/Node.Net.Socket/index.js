// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Options = require("../Data.Options/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Effect = require("../Effect/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var writeString = function (socket) {
    return function (str) {
        return function (encoding) {
            return function (callback) {
                return function () {
                    return $foreign.writeStringImpl(socket, str, Node_Encoding.encodingToNode(encoding), callback);
                };
            };
        };
    };
};
var write = function (socket) {
    return function (buffer) {
        return function (callback) {
            return function () {
                return $foreign.writeImpl(socket, buffer, callback);
            };
        };
    };
};
var socketWritable = Data_Options.opt("writable");
var socketTimeout = Data_Options.opt("timeout");
var socketReadable = Data_Options.opt("readable");
var socketPort = Data_Options.opt("port");
var socketPath = Data_Options.opt("path");
var socketHost = Data_Options.opt("host");
var socketFd = Data_Options.opt("fd");
var socketAllowHalfOpen = Data_Options.opt("allowHalfOpen");
var setTimeout = function (socket) {
    return function (timeout) {
        return function (callback) {
            return function () {
                return $foreign.setTimeoutImpl(socket, timeout, callback);
            };
        };
    };
};
var setNoDelay = function (socket) {
    return function (noDelay) {
        return function () {
            return $foreign.setNoDelayImpl(socket, noDelay);
        };
    };
};
var setKeepAlive = function (socket) {
    return function (enable) {
        return function (initialDelay) {
            return function () {
                return $foreign.setKeepAliveImpl(socket, enable, initialDelay);
            };
        };
    };
};
var setEncoding = function (socket) {
    return function (encoding) {
        return function () {
            return $foreign.setEncodingImpl(socket, Node_Encoding.encodingToNode(encoding));
        };
    };
};
var resume = function (socket) {
    return function () {
        return $foreign.resumeImpl(socket);
    };
};
var remotePort = function (socket) {
    return function __do() {
        var port = $foreign.remotePortImpl(socket);
        return Data_Nullable.toMaybe(port);
    };
};
var remoteFamily = function (socket) {
    return function __do() {
        var family = $foreign.remoteFamilyImpl(socket);
        return Data_Nullable.toMaybe(family);
    };
};
var remoteAddress = function (socket) {
    return function __do() {
        var address$prime = $foreign.remoteAddressImpl(socket);
        return Data_Nullable.toMaybe(address$prime);
    };
};
var pending = function (socket) {
    return function () {
        return $foreign.pendingImpl(socket);
    };
};
var pause = function (socket) {
    return function () {
        return $foreign.pauseImpl(socket);
    };
};
var onTimeout = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("timeout", socket, callback);
        };
    };
};
var onReady = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("ready", socket, callback);
        };
    };
};
var onLookup = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("lookup", socket, function (err$prime, address$prime$prime, family$prime, host$prime) {
                var v = Data_Nullable.toMaybe(host$prime);
                var v1 = Data_Nullable.toMaybe(family$prime);
                var v2 = Data_Nullable.toMaybe(address$prime$prime);
                var v3 = Data_Nullable.toMaybe(err$prime);
                if (v3 instanceof Data_Maybe.Just) {
                    return callback(new Data_Either.Left(v3.value0))();
                };
                if (v3 instanceof Data_Maybe.Nothing && (v2 instanceof Data_Maybe.Just && (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just))) {
                    return callback(new Data_Either.Right({
                        address: v2.value0,
                        family: Data_Nullable.toMaybe(v1.value0),
                        host: v.value0
                    }))();
                };
                return Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))();
            });
        };
    };
};
var onError = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("error", socket, function (err) {
                return callback(err)();
            });
        };
    };
};
var onEnd = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("end", socket, callback);
        };
    };
};
var onDrain = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("drain", socket, callback);
        };
    };
};
var onData = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onDataImpl(socket, function (buffer) {
                return callback(new Data_Either.Left(buffer))();
            }, function (str) {
                return callback(new Data_Either.Right(str))();
            });
        };
    };
};
var onConnect = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("connect", socket, callback);
        };
    };
};
var onClose = function (socket) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("close", socket, function (hadError) {
                return callback(hadError)();
            });
        };
    };
};
var localPort = function (socket) {
    return function __do() {
        var port = $foreign.localPortImpl(socket);
        return Data_Nullable.toMaybe(port);
    };
};
var localAddress = function (socket) {
    return function __do() {
        var address$prime = $foreign.localAddressImpl(socket);
        return Data_Nullable.toMaybe(address$prime);
    };
};
var endString = function (socket) {
    return function (str) {
        return function (encoding) {
            return function (callback) {
                return function () {
                    return $foreign.endStringImpl(socket, str, Node_Encoding.encodingToNode(encoding), callback);
                };
            };
        };
    };
};
var end = function (socket) {
    return function (buffer) {
        return function (callback) {
            return function () {
                return $foreign.endImpl(socket, buffer, callback);
            };
        };
    };
};
var destroyed = function (socket) {
    return function () {
        return $foreign.destroyedImpl(socket);
    };
};
var destroy = function (socket) {
    return function (err) {
        return function () {
            return $foreign.destroyImpl(socket, Data_Nullable.toNullable(err));
        };
    };
};
var createConnectionTCP = function (port) {
    return function (host) {
        return function (callback) {
            return function () {
                return $foreign.createConnectionImpl(Data_Options.options(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(socketHost)(host))(Data_Options.assoc(socketPort)(port))), callback);
            };
        };
    };
};
var createConnectionICP = function (path) {
    return function (callback) {
        return function () {
            return $foreign.createConnectionImpl(Data_Options.options(Data_Options.assoc(socketPath)(path)), callback);
        };
    };
};
var createConnection = function (opts) {
    return function (callback) {
        return function () {
            return $foreign.createConnectionImpl(Data_Options.options(opts), callback);
        };
    };
};
var connecting = function (socket) {
    return function () {
        return $foreign.connectingImpl(socket);
    };
};
var connectPort = Data_Options.opt("port");
var connectPath = Data_Options.opt("path");
var connectLocalPort = Data_Options.opt("localPort");
var connectLocalAddress = Data_Options.opt("localAddress");
var connectICP = function (socket) {
    return function (path) {
        return function (callback) {
            return function () {
                return $foreign.connectImpl(socket, Data_Options.options(Data_Options.assoc(connectPath)(path)), callback);
            };
        };
    };
};
var connectHost = Data_Options.opt("host");
var connectTCP = function (socket) {
    return function (port) {
        return function (host) {
            return function (callback) {
                return function () {
                    return $foreign.connectImpl(socket, Data_Options.options(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(connectHost)(host))(Data_Options.assoc(connectPort)(port))), callback);
                };
            };
        };
    };
};
var connectHints = Data_Options.opt("hints");
var connectFamily = Data_Options.opt("family");
var connect = function (socket) {
    return function (opts) {
        return function (callback) {
            return function () {
                return $foreign.connectImpl(socket, Data_Options.options(opts), callback);
            };
        };
    };
};
var bytesWritten = function (socket) {
    return function () {
        return $foreign.bytesWrittenImpl(socket);
    };
};
var bytesRead = function (socket) {
    return function () {
        return $foreign.bytesReadImpl(socket);
    };
};
var bufferSize = function (socket) {
    return function __do() {
        var size = $foreign.bufferSizeImpl(socket);
        return Data_Nullable.toMaybe(size);
    };
};
module.exports = {
    bufferSize: bufferSize,
    bytesRead: bytesRead,
    bytesWritten: bytesWritten,
    connect: connect,
    connectFamily: connectFamily,
    connectHints: connectHints,
    connectHost: connectHost,
    connectICP: connectICP,
    connectLocalAddress: connectLocalAddress,
    connectLocalPort: connectLocalPort,
    connectPath: connectPath,
    connectPort: connectPort,
    connectTCP: connectTCP,
    connecting: connecting,
    createConnection: createConnection,
    createConnectionICP: createConnectionICP,
    createConnectionTCP: createConnectionTCP,
    destroy: destroy,
    destroyed: destroyed,
    end: end,
    endString: endString,
    localAddress: localAddress,
    localPort: localPort,
    onClose: onClose,
    onConnect: onConnect,
    onData: onData,
    onDrain: onDrain,
    onEnd: onEnd,
    onError: onError,
    onLookup: onLookup,
    onReady: onReady,
    onTimeout: onTimeout,
    pause: pause,
    pending: pending,
    remoteAddress: remoteAddress,
    remoteFamily: remoteFamily,
    remotePort: remotePort,
    resume: resume,
    setEncoding: setEncoding,
    setKeepAlive: setKeepAlive,
    setNoDelay: setNoDelay,
    setTimeout: setTimeout,
    socketAllowHalfOpen: socketAllowHalfOpen,
    socketFd: socketFd,
    socketHost: socketHost,
    socketPath: socketPath,
    socketPort: socketPort,
    socketReadable: socketReadable,
    socketTimeout: socketTimeout,
    socketWritable: socketWritable,
    write: write,
    writeString: writeString
};
