// Generated by purs version 0.14.5
"use strict";
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_PlutusData = require("../Contract.PlutusData/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_ScriptLookups = require("../Contract.ScriptLookups/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var FromData = require("../FromData/index.js");
var IsData = require("../IsData/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Scripts_ListNFT = require("../Scripts.ListNFT/index.js");
var Scripts_PoolValidator = require("../Scripts.PoolValidator/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Settings = require("../Settings/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Datum = require("../Types.Datum/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var Types_Redeemer = require("../Types.Redeemer/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var UnbondedStaking_Types = require("../UnbondedStaking.Types/index.js");
var UnbondedStaking_Utils = require("../UnbondedStaking.Utils/index.js");
var Utils = require("../Utils/index.js");
var getUnbondedDatum = Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)((function () {
    var $64 = Contract_Monad.liftContractM("getUnbondedDatum: could not parse datum as unbonded staking datum");
    var $65 = FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa);
    var $66 = Data_Newtype.unwrap();
    return function ($67) {
        return $64($65($66($67)));
    };
})())(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getUnbondedDatum: could not get datum"))(Control_Bind.composeKleisliFlipped(Contract_Monad.bindContract)(Contract_PlutusData.getDatumByHash)((function () {
    var $68 = Contract_Monad.liftContractM("getUnbondedDatum: could not get datum hash");
    return function ($69) {
        return $68(Utils.getUtxoDatumHash($69));
    };
})())));
var getUnbondedAssetUtxos = function (utxos) {
    var utxoAssocList = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos);
    return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Array.catMaybes)(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(utxoAssocList)(function (v) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum hash")(Utils.getUtxoDatumHash(v.value1)))(function (datumHash) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not get datum"))(Contract_PlutusData.getDatumByHash(datumHash)))(function (datum) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("getAssetUtxos: could not parse datum as a bonded staking datum")(FromData.fromData(UnbondedStaking_Types.fromDataUnbondedStakingDa)(Data_Newtype.unwrap()(datum))))(function (v1) {
                    if (v1 instanceof UnbondedStaking_Types.AssetDatum) {
                        return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Maybe.Just(v));
                    };
                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value);
                });
            });
        });
    })))(function (assetUtxos) {
        return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray)(assetUtxos));
    });
};
var getStateDatumFromOutput = function (txOut) {
    return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedDatum(txOut))(function (unbondedDatum) {
        if (unbondedDatum instanceof UnbondedStaking_Types.StateDatum) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(unbondedDatum.value0.maybeEntryName, unbondedDatum.value0.open));
        };
        return Contract_Monad.throwContractError(Data_Show.showString)("getStateDatumFromOutput: datum is not of State type");
    });
};
var getEntryDatumFromOutput = function (txOut) {
    return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedDatum(txOut))(function (unbondedDatum) {
        if (unbondedDatum instanceof UnbondedStaking_Types.EntryDatum) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(unbondedDatum.value0.entry);
        };
        return Contract_Monad.throwContractError(Data_Show.showString)("getEntryDatumFromOutput: datum is not of Entry type");
    });
};
var userWithdrawUnbondedPoolContract = function (v) {
    return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("userWithdrawUnbondedPoolContract: User's PaymentPubKeyHash")(userPkh))(function () {
                return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Utils.hashPkh(userPkh)))(function (hashedUserPkh) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawnUnbondedPoolContract: Cannot get user's staking pub key hash")(Contract_Address.ownStakePubKeyHash))(function (userStakingPubKeyHash) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (userAddr) {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(userAddr)))(function (userUtxos) {
                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("userWithdrawUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(v)))(function (validator) {
                                    var valHash = Scripts.validatorHash(validator);
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("userWithdrawUnbondedPoolContract: validatorHash")(valHash))(function () {
                                        var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("userWithdrawUnbondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (unbondedPoolUtxos) {
                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawUnbondedPoolContract: Pool UTxOs")(unbondedPoolUtxos))(function () {
                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting unbonded assets in the pool..."))(function () {
                                                        return Control_Bind.bind(Contract_Monad.bindContract)(getUnbondedAssetUtxos(unbondedPoolUtxos))(function (unbondedAssetUtxos) {
                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawnUnbondedPoolContract: Bonded Asset UTxOs")(unbondedAssetUtxos))(function () {
                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(v.nftCs)))(function (listPolicy) {
                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting user range..."))(function () {
                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(UnbondedStaking_Utils.getBondingTime(v))(function (v1) {
                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("userWithdrawUnbondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v1.currTime)))(function () {
                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("userWithdrawUnbondedPoolContract: TX Range")(v1.range))(function () {
                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create token name for user`")(Types_TokenName.mkTokenName(hashedUserPkh)))(function (assocListTn) {
                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get assocList utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.assocListCs)(assocListTn)))(function (v2) {
                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v2.value1)))(function (userEntry) {
                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "deposited";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "key";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "newDeposit";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "next";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "open";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "rewards";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "totalDeposited";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                    reflectSymbol: function () {
                                                                                                        return "totalRewards";
                                                                                                    }
                                                                                                })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(userEntry))(function () {
                                                                                                    var rewardsRounded = Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(Types_Rational.numerator(userEntry.rewards))(Types_Rational.denominator(userEntry.rewards));
                                                                                                    var withdrawnAmt = Data_Semiring.add(Data_BigInt.semiringBigInt)(userEntry.deposited)(rewardsRounded);
                                                                                                    var mintEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                    var burnEntryValue = Plutus_Types_Value.singleton(v.assocListCs)(assocListTn)(Data_Ring.negate(Data_BigInt.ringBigInt)(Data_Semiring.one(Data_BigInt.semiringBigInt)));
                                                                                                    var assocList = Utils.mkOnchainAssocList(v.assocListCs)(unbondedPoolUtxos);
                                                                                                    var assetParams = Data_Newtype.unwrap()(v.unbondedAssetClass);
                                                                                                    var assetDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(UnbondedStaking_Types.AssetDatum.value));
                                                                                                    var withdrawnVal = Plutus_Types_Value.singleton(assetParams.currencySymbol)(assetParams.tokenName)(withdrawnAmt);
                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawUnbondedPoolContract: rewards")(userEntry.rewards))(function () {
                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: rewardsRounded")(rewardsRounded))(function () {
                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: withdrawnAmt")(withdrawnAmt))(function () {
                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Plutus_Types_Value.showValue)("userWithdrawUnbondedPoolContract: withdrawnVal")(withdrawnVal))(function () {
                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Rational.showRational)("userWithdrawUnbondedPoolContract: rewards")(userEntry.rewards))(function () {
                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get asset UTxOs to consume")(Utils.getAssetsToConsume(v.unbondedAssetClass)(withdrawnAmt)(unbondedAssetUtxos)))(function (v3) {
                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_BigInt.showBigInt)("userWithdrawUnbondedPoolContract: withdrawChange")(v3.value1))(function () {
                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("userWithdrawUnbondedPoolContract: consumedAssetUtxos")(v3.value0))(function () {
                                                                                                                                    var changeValue = Plutus_Types_Value.singleton((Data_Newtype.unwrap()(v.unbondedAssetClass)).currencySymbol)((Data_Newtype.unwrap()(v.unbondedAssetClass)).tokenName)(v3.value1);
                                                                                                                                    var baseLookups = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.mintingPolicy(listPolicy), Types_ScriptLookups.unspentOutputs(userUtxos), Types_ScriptLookups.unspentOutputs(unbondedPoolUtxos) ]);
                                                                                                                                    var baseConstraints = (function () {
                                                                                                                                        var $29 = Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v3.value1)(Data_BigInt.fromInt(0));
                                                                                                                                        if ($29) {
                                                                                                                                            return Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Utils.mustPayToScript(valHash)(assetDatum)(changeValue), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v1.range) ]);
                                                                                                                                        };
                                                                                                                                        return Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustBeSignedBy(userPkh), Types_TxConstraints.mustPayToPubKeyAddress(userPkh)(userStakingPubKeyHash)(withdrawnVal), Types_TxConstraints.mustValidateIn(v1.range) ]);
                                                                                                                                    })();
                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                        if (!userEntry.open) {
                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Pool closed withdrawal"))(function () {
                                                                                                                                                var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                    stakeHolder: userPkh,
                                                                                                                                                    burningAction: new Types.BurnSingle(v2.value0)
                                                                                                                                                })));
                                                                                                                                                var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnSingle(v2.value0))));
                                                                                                                                                var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v2.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue) ]);
                                                                                                                                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups)));
                                                                                                                                            });
                                                                                                                                        };
                                                                                                                                        if (userEntry.open) {
                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(unbondedPoolUtxos)(v.nftCs)(tokenName)))(function (v4) {
                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Getting head entry of the pool..."))(function () {
                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(getStateDatumFromOutput(v4.value1))(function (v5) {
                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Maybe.showMaybe(Types_ByteArray.showByteArray))("userWithdrawUnbondedPoolContract: Head entry of the pool")(v5.value0))(function () {
                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                                                                                    if (v5.value0 instanceof Data_Maybe.Nothing) {
                                                                                                                                                                        return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawUnbondedPoolContract: no entries in the pool, expected at least one");
                                                                                                                                                                    };
                                                                                                                                                                    if (v5.value0 instanceof Data_Maybe.Just) {
                                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Found the head entry successfully"))(function () {
                                                                                                                                                                            var v6 = Data_Ord.compare(Types_ByteArray.ordByteArray)(hashedUserPkh)(v5.value0.value0);
                                                                                                                                                                            if (v6 instanceof Data_Ordering.LT) {
                                                                                                                                                                                return Contract_Monad.throwContractError(Data_Show.showString)("userWithdrawUnbondedPoolContract: entry key < head key (non existent)");
                                                                                                                                                                            };
                                                                                                                                                                            if (v6 instanceof Data_Ordering.EQ) {
                                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Compare EQ"))(function () {
                                                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of entry toconsume (head)..."))(function () {
                                                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v2.value1)))(function (oldHeadEntry) {
                                                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "deposited";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "key";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "newDeposit";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "next";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "open";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "rewards";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "totalDeposited";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                    return "totalRewards";
                                                                                                                                                                                                }
                                                                                                                                                                                            })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(oldHeadEntry))(function () {
                                                                                                                                                                                                var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                                                                    stakeHolder: userPkh,
                                                                                                                                                                                                    burningAction: new Types.BurnHead(v4.value0, v2.value0)
                                                                                                                                                                                                })));
                                                                                                                                                                                                var newState = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                                                                                                                                                    maybeEntryName: oldHeadEntry.next,
                                                                                                                                                                                                    open: v5.value1
                                                                                                                                                                                                })));
                                                                                                                                                                                                var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnHead(v4.value0, v2.value0))));
                                                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(newState)))(function (stateDatumLookup) {
                                                                                                                                                                                                    var stateTokenValue = Plutus_Types_Value.singleton(v.nftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                                                                                                                                                                    var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v4.value0)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v2.value0)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(newState)(stateTokenValue) ]);
                                                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, stateDatumLookup));
                                                                                                                                                                                                });
                                                                                                                                                                                            });
                                                                                                                                                                                        });
                                                                                                                                                                                    });
                                                                                                                                                                                });
                                                                                                                                                                            };
                                                                                                                                                                            if (v6 instanceof Data_Ordering.GT) {
                                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: Compare GT"))(function () {
                                                                                                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Cannot get position in Assoc. List")(Utils.findRemoveOtherElem(assocList)(hashedUserPkh)))(function (v7) {
                                                                                                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of previousentry..."))(function () {
                                                                                                                                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v7.value1.value0.firstOutput)))(function (prevEntry) {
                                                                                                                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "deposited";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "key";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "newDeposit";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "next";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "open";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "rewards";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "totalDeposited";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                    reflectSymbol: function () {
                                                                                                                                                                                                        return "totalRewards";
                                                                                                                                                                                                    }
                                                                                                                                                                                                })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(prevEntry))(function () {
                                                                                                                                                                                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("userWithdrawUnbondedPoolContract: getting datum of entry to burn..."))(function () {
                                                                                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Newtype.unwrap())(getEntryDatumFromOutput(v7.value1.value0.secondOutput)))(function (burnEntry) {
                                                                                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "deposited";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "key";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "newDeposit";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "next";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "open";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "rewards";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "totalDeposited";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsCons({
                                                                                                                                                                                                                reflectSymbol: function () {
                                                                                                                                                                                                                    return "totalRewards";
                                                                                                                                                                                                                }
                                                                                                                                                                                                            })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))(Types_Rational.showRational))(Data_Show.showBoolean))(Data_Maybe.showMaybe(Types_ByteArray.showByteArray)))(Data_BigInt.showBigInt))(Types_ByteArray.showByteArray))(Data_BigInt.showBigInt)))("userWithdrawUnbondedPoolContract: entry to consume")(burnEntry))(function () {
                                                                                                                                                                                                                var prevEntryUpdated = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.EntryDatum({
                                                                                                                                                                                                                    entry: UnbondedStaking_Types.Entry({
                                                                                                                                                                                                                        key: prevEntry.key,
                                                                                                                                                                                                                        deposited: prevEntry.deposited,
                                                                                                                                                                                                                        newDeposit: prevEntry.newDeposit,
                                                                                                                                                                                                                        rewards: prevEntry.rewards,
                                                                                                                                                                                                                        totalRewards: prevEntry.totalRewards,
                                                                                                                                                                                                                        totalDeposited: prevEntry.totalDeposited,
                                                                                                                                                                                                                        open: prevEntry.open,
                                                                                                                                                                                                                        next: burnEntry.next
                                                                                                                                                                                                                    })
                                                                                                                                                                                                                })));
                                                                                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("userWithdrawUnbondedPoolContract: Could not create updated prev  entry datum lookup")(Types_ScriptLookups.datum(prevEntryUpdated)))(function (prevEntryDatumLookup) {
                                                                                                                                                                                                                    var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingActi)(new UnbondedStaking_Types.WithdrawAct({
                                                                                                                                                                                                                        stakeHolder: userPkh,
                                                                                                                                                                                                                        burningAction: new Types.BurnOther(v7.value0.firstInput, v7.value0.secondInput)
                                                                                                                                                                                                                    })));
                                                                                                                                                                                                                    var mintRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataListAction)(Types.ListRemove.create(new Types.BurnOther(v7.value0.firstInput, v7.value0.secondInput))));
                                                                                                                                                                                                                    var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Types_TxConstraints.mustSpendScriptOutput(v7.value0.firstInput)(valRedeemer), Types_TxConstraints.mustSpendScriptOutput(v7.value0.secondInput)(valRedeemer), Utils.mkAssetUtxosConstraints(v3.value0)(valRedeemer), Types_TxConstraints.mustMintValueWithRedeemer(mintRedeemer)(burnEntryValue), Utils.mustPayToScript(valHash)(prevEntryUpdated)(mintEntryValue) ]);
                                                                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(constraints, prevEntryDatumLookup));
                                                                                                                                                                                                                });
                                                                                                                                                                                                            });
                                                                                                                                                                                                        });
                                                                                                                                                                                                    });
                                                                                                                                                                                                });
                                                                                                                                                                                            });
                                                                                                                                                                                        });
                                                                                                                                                                                    });
                                                                                                                                                                                });
                                                                                                                                                                            };
                                                                                                                                                                            throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 285, column 11 - line 405, column 57): " + [ v6.constructor.name ]);
                                                                                                                                                                        });
                                                                                                                                                                    };
                                                                                                                                                                    throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 278, column 33 - line 405, column 57): " + [ v5.value0.constructor.name ]);
                                                                                                                                                                })())(function (v6) {
                                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(v6.value0, v6.value1));
                                                                                                                                                                });
                                                                                                                                                            });
                                                                                                                                                        });
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        };
                                                                                                                                        throw new Error("Failed pattern match at UnbondedStaking.UserWithdraw (line 243, column 29 - line 406, column 36): " + [ userEntry.open.constructor.name ]);
                                                                                                                                    })())(function (v4) {
                                                                                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(baseLookups)(v4.value1))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(baseConstraints)(v4.value0))))(function (unattachedBalancedTx) {
                                                                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_ScriptLookups.showUnattachedUnbalancedT)("userWithdrawUnbondedPoolContract: unAttachedUnbalancedTx")(unattachedBalancedTx))(function () {
                                                                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("userWithdrawUnbondedPoolContract: Cannot balance, reindex redeemers,  attach datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                                                                                                    return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                                                                                                        signedTx: signedTx
                                                                                                                                                    });
                                                                                                                                                });
                                                                                                                                            });
                                                                                                                                        });
                                                                                                                                    });
                                                                                                                                });
                                                                                                                            });
                                                                                                                        });
                                                                                                                    });
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }));
};
module.exports = {
    userWithdrawUnbondedPoolContract: userWithdrawUnbondedPoolContract
};
