// Generated by purs version 0.14.5
"use strict";
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_Rational = require("../Types.Rational/index.js");
var NatRatio = function (x) {
    return x;
};
var showNatRatio = {
    show: function (v) {
        return "(NatRatio " + (Data_Show.show(Types_Rational.showRational)(v) + ")");
    }
};
var semiringNatRatio = Types_Rational.semiringRational;
var ordNatRatio = Types_Rational.ordRational;
var eqNatRatio = Types_Rational.eqRational;
var toRational = function (v) {
    return v;
};
var numeratorAsNat = function (v) {
    return Types_Natural["fromBigInt'"](Types_Rational.numerator(v));
};
var numerator = function (v) {
    return Types_Rational.numerator(v);
};
var fromNaturals = function (n) {
    return function (d) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(NatRatio)(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(Types_Natural.toBigInt(n))(Types_Natural.toBigInt(d)));
    };
};
var fromBigInts = function (n) {
    return function (d) {
        if (Data_Ord.lessThan(Data_BigInt.ordBigInt)(n)(Data_Semiring.zero(Data_BigInt.semiringBigInt)) === Data_Ord.lessThan(Data_BigInt.ordBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(NatRatio)(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(n)(d));
        };
        if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Types.NatRatio (line 52, column 1 - line 52, column 50): " + [ n.constructor.name, d.constructor.name ]);
    };
};
var fromRational = function (r) {
    return fromBigInts(Types_Rational.numerator(r))(Types_Rational.denominator(r));
};
var denominatorAsNat = function (v) {
    return Types_Rational.denominatorAsNat(v);
};
var denominator = function (v) {
    return Types_Rational.denominator(v);
};
module.exports = {
    denominator: denominator,
    denominatorAsNat: denominatorAsNat,
    fromBigInts: fromBigInts,
    fromNaturals: fromNaturals,
    fromRational: fromRational,
    numerator: numerator,
    numeratorAsNat: numeratorAsNat,
    toRational: toRational,
    eqNatRatio: eqNatRatio,
    ordNatRatio: ordNatRatio,
    semiringNatRatio: semiringNatRatio,
    showNatRatio: showNatRatio
};
