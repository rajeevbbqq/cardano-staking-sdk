// Generated by purs version 0.14.5
"use strict";
var BondedStaking_TimeUtils = require("../BondedStaking.TimeUtils/index.js");
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_PlutusData = require("../Contract.PlutusData/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var FromData = require("../FromData/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Scripts = require("../Scripts/index.js");
var Scripts_PoolValidator = require("../Scripts.PoolValidator/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Settings = require("../Settings/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_Datum = require("../Types.Datum/index.js");
var Types_Interval = require("../Types.Interval/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_Redeemer = require("../Types.Redeemer/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var Utils = require("../Utils/index.js");
var createUtxoConstraint = function (v) {
    var valRedeemer = Types_Redeemer.Redeemer(ToData.toData(Types.toDataBondedStakingAction)(Types.CloseAct.value));
    return new Data_Tuple.Tuple(Types_TxConstraints.mustSpendScriptOutput(v.value0)(valRedeemer), Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups));
};
var closeBondedPoolContract = function (v) {
    return function (batchSize) {
        return function (closeList) {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.getNetworkId)(function (networkId) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get user's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (userPkh) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.unless(Contract_Monad.applicativeContract)(Data_Eq.eq(Types_PubKeyHash.eqPaymentPubKeyHash)(userPkh)(v.admin))(Contract_Monad.throwContractError(Data_Show.showString)("closeBondedPoolContract: Admin is not current user")))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("closeBondedPoolContract: Admin PaymentPubKeyHash")(v.admin))(function () {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("closeBondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkBondedPoolValidator(v)))(function (validator) {
                                var valHash = Scripts.validatorHash(validator);
                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Scripts.showValidatorHash)("closeBondedPoolContract: validatorHash")(valHash))(function () {
                                    var poolAddr = Plutus_Types_Address.scriptHashAddress(valHash);
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Serialization_Address.showAddress)("closeBondedPoolContract: Pool address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(poolAddr)))(function () {
                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get pool's utxos at pool address")(Contract_Utxos.utxosAt(poolAddr)))(function (bondedPoolUtxos) {
                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("closeBondedPoolContract: Pool's UTXOs")(bondedPoolUtxos))(function () {
                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot create TokenName")(Settings.bondedStakingTokenName))(function (tokenName) {
                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot get state utxo")(Utils.getUtxoWithNFT(bondedPoolUtxos)(v.nftCs)(tokenName)))(function (v1) {
                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showTransactionInput)("closeBondedPoolContract: Pool's UTXO")(v1.value0))(function () {
                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Could not get Pool UTXO's Datum Hash")(Utils.getUtxoDatumHash(v1.value1)))(function (poolDatumHash) {
                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Transaction.showDataHash)("closeBondedPoolContract: Pool's UTXO DatumHash")(poolDatumHash))(function () {
                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("closeBondedPoolContract: Cannot get datum")(Contract_PlutusData.getDatumByHash(poolDatumHash)))(function (poolDatum) {
                                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Cannot extract NFT State datum")(FromData.fromData(Types.fromDataBondedStakingDatu)(Data_Newtype.unwrap()(poolDatum))))(function (v2) {
                                                                            var bondedStateDatum = Types_Datum.Datum(ToData.toData(Types.toDataBondedStakingDatum)(v2));
                                                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("closeBondedPoolContract: Could not create state datum lookup")(Types_ScriptLookups.datum(bondedStateDatum)))(function (bondedStateDatumLookup) {
                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logInfo'"](Contract_Monad.monadLoggerContract)("closeBondedPoolContract: Getting withdrawing range..."))(function () {
                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(BondedStaking_TimeUtils.getClosingTime(v))(function (v3) {
                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("closeBondedPoolContract: Current time: ")(Data_Show.show(Types_Interval.showPOSIXTime)(v3.currTime)))(function () {
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_Interval.showInterval(Types_Interval.showPOSIXTime))("closeBondedPoolContract: TX Range")(v3.range))(function () {
                                                                                                return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                    var allConstraints = Data_Functor.map(Data_Functor.functorArray)(createUtxoConstraint)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(bondedPoolUtxos));
                                                                                                    var $14 = Data_Foldable["null"](Data_Foldable.foldableArray)(closeList);
                                                                                                    if ($14) {
                                                                                                        return Control_Applicative.pure(Contract_Monad.applicativeContract)(allConstraints);
                                                                                                    };
                                                                                                    return Contract_Monad.liftContractM("depositBondedPoolContract: Failed to create updateList")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Array.index(allConstraints))(closeList));
                                                                                                })())(function (spendList) {
                                                                                                    var lookups = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(bondedPoolUtxos), bondedStateDatumLookup ]);
                                                                                                    var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustBeSignedBy(v.admin))(Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustIncludeDatum(bondedStateDatum))(Types_TxConstraints.mustValidateIn(v3.range)));
                                                                                                    return Control_Bind.bind(Contract_Monad.bindContract)((function () {
                                                                                                        var $15 = Data_Eq.eq(Types_Natural.eqNatural)(batchSize)(Data_Semiring.zero(Types_Natural.semiringNatural));
                                                                                                        if ($15) {
                                                                                                            return Utils.submitTransaction(constraints)(lookups)(spendList)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                        };
                                                                                                        var updateBatches = Utils.splitByLength(Utils.toIntUnsafe(batchSize))(spendList);
                                                                                                        return Data_Functor.map(Contract_Monad.functorContract)(Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Data_Monoid.monoidArray))(Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(updateBatches)(function (txBatch) {
                                                                                                            return Utils.submitTransaction(constraints)(lookups)(txBatch)(Settings.confirmationTimeout)(Settings.submissionAttempts);
                                                                                                        }));
                                                                                                    })())(function (failedDeposits) {
                                                                                                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showArray(Data_Tuple.showTuple(Types_TxConstraints.showTxConstraints(Data_Unit.showUnit)(Data_Unit.showUnit))(Types_ScriptLookups.showScriptLookups)))("closeBondedPoolContract: Finished updating pool entries. /Entries with failed updates")(failedDeposits))(function () {
                                                                                                            return Contract_Monad.liftContractM("depositUnbondedPoolContract: Failed to create /failedDepositsIndicies list")(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Function.flip(Data_Array.elemIndex(Data_Tuple.eqTuple(Types_TxConstraints.eqTxConstraints(Data_Eq.eqUnit)(Data_Eq.eqUnit))(Types_ScriptLookups.eqScriptLookups)))(spendList))(failedDeposits));
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    };
};
module.exports = {
    closeBondedPoolContract: closeBondedPoolContract
};
