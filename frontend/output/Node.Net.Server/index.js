// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except = require("../Control.Monad.Except/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Options = require("../Data.Options/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Effect = require("../Effect/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Index = require("../Foreign.Index/index.js");
var serverPauseOnConnect = Data_Options.opt("pauseOnConnect");
var serverAllowHalfOpen = Data_Options.opt("allowHalfOpen");
var onListening = function (server) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("listening", server, callback);
        };
    };
};
var onError = function (server) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("error", server, function (error) {
                return callback(error)();
            });
        };
    };
};
var onConnection = function (server) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("connection", server, function (socket) {
                return callback(socket)();
            });
        };
    };
};
var onClose = function (server) {
    return function (callback) {
        return function () {
            return $foreign.onImpl("close", server, callback);
        };
    };
};
var listening = function (server) {
    return function () {
        return $foreign.listeningImpl(server);
    };
};
var listenWritableAll = Data_Options.opt("writableAll");
var listenReadableAll = Data_Options.opt("readableAll");
var listenPort = Data_Options.opt("port");
var listenPath = Data_Options.opt("path");
var listenIpv6Only = Data_Options.opt("ipv6Only");
var listenHost = Data_Options.opt("host");
var listenExclusive = Data_Options.opt("exclusive");
var listenBacklog = Data_Options.opt("backlog");
var listenICP = function (server) {
    return function (path) {
        return function (backlog) {
            return function (callback) {
                return function () {
                    return $foreign.listenImpl(server, Data_Options.options(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(listenBacklog)(backlog))(Data_Options.assoc(listenPath)(path))), callback);
                };
            };
        };
    };
};
var listenTCP = function (server) {
    return function (port) {
        return function (host) {
            return function (backlog) {
                return function (callback) {
                    return function () {
                        return $foreign.listenImpl(server, Data_Options.options(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(listenBacklog)(backlog))(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(listenHost)(host))(Data_Options.assoc(listenPort)(port)))), callback);
                    };
                };
            };
        };
    };
};
var listen = function (server) {
    return function (opts) {
        return function (callback) {
            return function () {
                return $foreign.listenImpl(server, Data_Options.options(opts), callback);
            };
        };
    };
};
var getConnections = function (server) {
    return function (callback) {
        return function () {
            return $foreign.getConnectionsImpl(server, function (err$prime, count$prime) {
                var v = Data_Nullable.toMaybe(count$prime);
                var v1 = Data_Nullable.toMaybe(err$prime);
                if (v1 instanceof Data_Maybe.Just) {
                    return callback(new Data_Either.Left(v1.value0))();
                };
                if (v instanceof Data_Maybe.Just) {
                    return callback(new Data_Either.Right(v.value0))();
                };
                return Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))();
            });
        };
    };
};
var createServer = function (opts) {
    return function (callback) {
        return function () {
            return $foreign.createServerImpl(Data_Options.options(opts), function (socket) {
                return callback(socket)();
            });
        };
    };
};
var close = function (server) {
    return function (callback) {
        return function () {
            return $foreign.closeImpl(server, function (err) {
                return callback(Data_Nullable.toMaybe(err))();
            });
        };
    };
};
var address = function (server) {
    var readAddress = function (value) {
        return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function (v) {
            return function (v1) {
                return function (v2) {
                    return {
                        address: v,
                        family: v1,
                        port: v2
                    };
                };
            };
        })(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp(Data_Identity.monadIdentity)("address")(value))(Foreign.readString(Data_Identity.monadIdentity))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp(Data_Identity.monadIdentity)("family")(value))(Foreign.readString(Data_Identity.monadIdentity))))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp(Data_Identity.monadIdentity)("port")(value))(Foreign.readInt(Data_Identity.monadIdentity)));
    };
    var hush = function (f) {
        return Data_Either.either(function (v) {
            return Data_Maybe.Nothing.value;
        })(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(f));
    };
    var read = function (value) {
        return Control_Alt.alt(Data_Maybe.altMaybe)(hush(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Left.create)(readAddress(value))))(hush(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Either.Right.create)(Foreign.readString(Data_Identity.monadIdentity)(value))));
    };
    return function __do() {
        var x = $foreign.addressImpl(server);
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(x))(read);
    };
};
module.exports = {
    address: address,
    close: close,
    createServer: createServer,
    getConnections: getConnections,
    listen: listen,
    listenBacklog: listenBacklog,
    listenExclusive: listenExclusive,
    listenHost: listenHost,
    listenICP: listenICP,
    listenIpv6Only: listenIpv6Only,
    listenPath: listenPath,
    listenPort: listenPort,
    listenReadableAll: listenReadableAll,
    listenTCP: listenTCP,
    listenWritableAll: listenWritableAll,
    listening: listening,
    onClose: onClose,
    onConnection: onConnection,
    onError: onError,
    onListening: onListening,
    serverAllowHalfOpen: serverAllowHalfOpen,
    serverPauseOnConnect: serverPauseOnConnect
};
