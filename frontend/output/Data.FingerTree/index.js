// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_FingerTree_Digit = require("../Data.FingerTree.Digit/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lazy = require("../Data.Lazy/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Sequence_Internal = require("../Data.Sequence.Internal/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Partial = require("../Partial/index.js");
var NilR = (function () {
    function NilR() {

    };
    NilR.value = new NilR();
    return NilR;
})();
var SnocR = (function () {
    function SnocR(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SnocR.create = function (value0) {
        return function (value1) {
            return new SnocR(value0, value1);
        };
    };
    return SnocR;
})();
var NilL = (function () {
    function NilL() {

    };
    NilL.value = new NilL();
    return NilL;
})();
var ConsL = (function () {
    function ConsL(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ConsL.create = function (value0) {
        return function (value1) {
            return new ConsL(value0, value1);
        };
    };
    return ConsL;
})();
var Split = (function () {
    function Split(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Split.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Split(value0, value1, value2);
            };
        };
    };
    return Split;
})();
var Node2 = (function () {
    function Node2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Node2.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Node2(value0, value1, value2);
            };
        };
    };
    return Node2;
})();
var Node3 = (function () {
    function Node3(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Node3.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Node3(value0, value1, value2, value3);
                };
            };
        };
    };
    return Node3;
})();
var LazySplit = (function () {
    function LazySplit(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LazySplit.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LazySplit(value0, value1, value2);
            };
        };
    };
    return LazySplit;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var Single = (function () {
    function Single(value0) {
        this.value0 = value0;
    };
    Single.create = function (value0) {
        return new Single(value0);
    };
    return Single;
})();
var Deep = (function () {
    function Deep(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Deep.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Deep(value0, value1, value2, value3);
                };
            };
        };
    };
    return Deep;
})();
var splitDigit = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return function (i) {
                return function (as) {
                    var v = Data_FingerTree_Digit.digitLength(as);
                    if (v === 1) {
                        return new Split([  ], Data_FingerTree_Digit.headDigit(as), [  ]);
                    };
                    var bs$prime = Data_FingerTree_Digit.tailDigit(as);
                    var bs = Data_FingerTree_Digit.mkDigit()(bs$prime);
                    var a = Data_FingerTree_Digit.headDigit(as);
                    var i$prime = Data_Semigroup.append(dictMonoid.Semigroup0())(i)(Data_Sequence_Internal.measure(dictMeasured)(a));
                    var $150 = p(i$prime);
                    if ($150) {
                        return new Split([  ], a, bs$prime);
                    };
                    var v1 = splitDigit(dictMonoid)(dictMeasured)(p)(i$prime)(bs);
                    return new Split(Data_Array.cons(a)(v1.value0), v1.value1, v1.value2);
                };
            };
        };
    };
};
var showNode = function (dictShow) {
    return function (dictShow1) {
        return {
            show: function (v) {
                if (v instanceof Node2) {
                    return "Node2 (" + (Data_Show.show(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow)(v.value2) + ")")))));
                };
                if (v instanceof Node3) {
                    return "Node3 (" + (Data_Show.show(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow)(v.value2) + (") (" + (Data_Show.show(dictShow)(v.value3) + ")")))))));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 66, column 1 - line 77, column 13): " + [ v.constructor.name ]);
            }
        };
    };
};
var showFingerTree = function (dictShow) {
    return function (dictShow1) {
        return {
            show: function (v) {
                if (v instanceof Empty) {
                    return "Empty";
                };
                if (v instanceof Single) {
                    return "Single (" + (Data_Show.show(dictShow1)(v.value0) + ")");
                };
                if (v instanceof Deep) {
                    return "Deep (" + (Data_Show.show(Data_Lazy.showLazy(dictShow))(v.value0) + (") (" + (Data_Show.show(Data_FingerTree_Digit.showDigit(dictShow1))(v.value1) + (") (" + (Data_Show.show(Data_Lazy.showLazy(showFingerTree(dictShow)(showNode(dictShow1)(dictShow))))(v.value2) + (") (" + (Data_Show.show(Data_FingerTree_Digit.showDigit(dictShow1))(v.value3) + ")")))))));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 133, column 1 - line 141, column 13): " + [ v.constructor.name ]);
            }
        };
    };
};
var nodeToDigit = (function () {
    var go = function (v) {
        if (v instanceof Node2) {
            return Data_FingerTree_Digit.mkDigit2(v.value1)(v.value2);
        };
        if (v instanceof Node3) {
            return Data_FingerTree_Digit.mkDigit3(v.value1)(v.value2)(v.value3);
        };
        throw new Error("Failed pattern match at Data.FingerTree (line 88, column 3 - line 88, column 34): " + [ v.constructor.name ]);
    };
    return go;
})();
var node3 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return new Node3(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(b))(Data_Sequence_Internal.measure(dictMeasured)(c))), a, b, c);
                };
            };
        };
    };
};
var node2 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (b) {
                return new Node2(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Sequence_Internal.measure(dictMeasured)(b)), a, b);
            };
        };
    };
};
var nodes = function (dictMonoid) {
    return function (dictMeasured) {
        return function (xs) {
            if (xs.length === 2) {
                return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]) ];
            };
            if (xs.length === 3) {
                return [ node3(dictMonoid)(dictMeasured)(xs[0])(xs[1])(xs[2]) ];
            };
            if (xs.length === 4) {
                return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]), node2(dictMonoid)(dictMeasured)(xs[2])(xs[3]) ];
            };
            var idx = Data_Array.unsafeIndex();
            return Data_Array.cons(node3(dictMonoid)(dictMeasured)(idx(xs)(0))(idx(xs)(1))(idx(xs)(2)))(nodes(dictMonoid)(dictMeasured)(Data_Array.drop(3)(xs)));
        };
    };
};
var measuredNode = {
    measure: function (v) {
        if (v instanceof Node2) {
            return v.value0;
        };
        if (v instanceof Node3) {
            return v.value0;
        };
        throw new Error("Failed pattern match at Data.FingerTree (line 107, column 1 - line 109, column 30): " + [ v.constructor.name ]);
    }
};
var measuredFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return {
            measure: function (v) {
                if (v instanceof Empty) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v instanceof Single) {
                    return Data_Sequence_Internal.measure(dictMeasured)(v.value0);
                };
                if (v instanceof Deep) {
                    return Data_Lazy.force(v.value0);
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 228, column 1 - line 232, column 37): " + [ v.constructor.name ]);
            }
        };
    };
};
var lazyEmpty = Data_Lazy.defer(function (v) {
    return Empty.value;
});
var functorViewL = function (dictFunctor) {
    return {
        map: function (f) {
            return function (v) {
                if (v instanceof NilL) {
                    return NilL.value;
                };
                if (v instanceof ConsL) {
                    return new ConsL(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(dictFunctor)(f))(v.value1));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 290, column 1 - line 292, column 51): " + [ f.constructor.name, v.constructor.name ]);
            };
        }
    };
};
var functorNode = {
    map: function (f) {
        return function (v) {
            if (v instanceof Node2) {
                return new Node2(v.value0, f(v.value1), f(v.value2));
            };
            if (v instanceof Node3) {
                return new Node3(v.value0, f(v.value1), f(v.value2), f(v.value3));
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 91, column 1 - line 93, column 52): " + [ f.constructor.name, v.constructor.name ]);
        };
    }
};
var functorFingerTree = {
    map: function (f) {
        return function (v) {
            if (v instanceof Empty) {
                return Empty.value;
            };
            if (v instanceof Single) {
                return new Single(f(v.value0));
            };
            if (v instanceof Deep) {
                return new Deep(v.value0, Data_Functor.map(Data_FingerTree_Digit.functorDigit)(f)(v.value1), Data_Sequence_Internal.mapmapmap(Data_Lazy.functorLazy)(functorFingerTree)(functorNode)(f)(v.value2), Data_Functor.map(Data_FingerTree_Digit.functorDigit)(f)(v.value3));
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 183, column 1 - line 186, column 68): " + [ f.constructor.name, v.constructor.name ]);
        };
    }
};
var fullyForce = function (ft) {
    if (ft instanceof Deep) {
        var v$prime = Data_Lazy.force(ft.value0);
        var m$prime = fullyForce(Data_Lazy.force(ft.value2));
        return ft;
    };
    return ft;
};
var foldableNode = {
    foldr: function (r) {
        return function (z) {
            return function (v) {
                if (v instanceof Node2) {
                    return r(v.value1)(r(v.value2)(z));
                };
                if (v instanceof Node3) {
                    return r(v.value1)(r(v.value2)(r(v.value3)(z)));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ r.constructor.name, z.constructor.name, v.constructor.name ]);
            };
        };
    },
    foldl: function (l) {
        return function (z) {
            return function (v) {
                if (v instanceof Node2) {
                    return l(l(z)(v.value1))(v.value2);
                };
                if (v instanceof Node3) {
                    return l(l(l(z)(v.value1))(v.value2))(v.value3);
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ l.constructor.name, z.constructor.name, v.constructor.name ]);
            };
        };
    },
    foldMap: function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return Data_Foldable.foldr(foldableNode)(function (x) {
                    return function (acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    }
};
var traversableNode = {
    traverse: function (dictApplicative) {
        return function (f) {
            return function (v) {
                if (v instanceof Node2) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Node2.create(v.value0))(f(v.value1)))(f(v.value2));
                };
                if (v instanceof Node3) {
                    return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Node3.create(v.value0))(f(v.value1)))(f(v.value2)))(f(v.value3));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 102, column 1 - line 105, column 31): " + [ f.constructor.name, v.constructor.name ]);
            };
        };
    },
    sequence: function (dictApplicative) {
        return Data_Traversable.traverse(traversableNode)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    },
    Functor0: function () {
        return functorNode;
    },
    Foldable1: function () {
        return foldableNode;
    }
};
var foldableFingerTree = {
    foldr: function (v) {
        return function (z) {
            return function (v1) {
                if (v1 instanceof Empty) {
                    return z;
                };
                if (v1 instanceof Single) {
                    return v(v1.value0)(z);
                };
                if (v1 instanceof Deep) {
                    var flipFoldr$prime = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                    var flipFoldr = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                    var deepFlipFoldr = Data_Function.flip(Data_Foldable.foldr(foldableFingerTree)(Data_Function.flip(Data_Foldable.foldr(foldableNode)(v))));
                    return flipFoldr$prime(v1.value1)(deepFlipFoldr(Data_Lazy.force(v1.value2))(flipFoldr(v1.value3)(z)));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
            };
        };
    },
    foldl: function (v) {
        return function (z) {
            return function (v1) {
                if (v1 instanceof Empty) {
                    return z;
                };
                if (v1 instanceof Single) {
                    return v(z)(v1.value0);
                };
                if (v1 instanceof Deep) {
                    var leftFold = Data_Foldable.foldl(Data_FingerTree_Digit.foldableDigit)(v);
                    var deepLeftFold = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)(v));
                    return leftFold(deepLeftFold(leftFold(z)(v1.value1))(Data_Lazy.force(v1.value2)))(v1.value3);
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
            };
        };
    },
    foldMap: function (dictMonoid) {
        return function (f) {
            return function (xs) {
                return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                    return function (acc) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(dictMonoid))(xs);
            };
        };
    }
};
var traversableFingerTree = {
    traverse: function (dictApplicative) {
        return function (f) {
            return function (v) {
                if (v instanceof Empty) {
                    return Control_Applicative.pure(dictApplicative)(Empty.value);
                };
                if (v instanceof Single) {
                    return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Single.create)(f(v.value0));
                };
                if (v instanceof Deep) {
                    var l = Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Data_Traversable.traverse(traversableNode)(dictApplicative)(f))(Data_Lazy.force(v.value2));
                    var kl = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function["const"])(l);
                    return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Deep.create(v.value0))(Data_Traversable.traverse(Data_FingerTree_Digit.traversableDigit)(dictApplicative)(f)(v.value1)))(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Lazy.defer)(kl)))(Data_Traversable.traverse(Data_FingerTree_Digit.traversableDigit)(dictApplicative)(f)(v.value3));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 215, column 1 - line 226, column 31): " + [ f.constructor.name, v.constructor.name ]);
            };
        };
    },
    sequence: function (dictApplicative) {
        return Data_Traversable.traverse(traversableFingerTree)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
    },
    Functor0: function () {
        return functorFingerTree;
    },
    Foldable1: function () {
        return foldableFingerTree;
    }
};
var deep = function (dictMonoid) {
    return function (dictMeasured) {
        return function (pr) {
            return function (m) {
                return function (sf) {
                    return new Deep(Data_Lazy.defer(function (v) {
                        return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(pr))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(sf)));
                    }), pr, m, sf);
                };
            };
        };
    };
};
var snoc = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            return function (a) {
                if (v instanceof Empty) {
                    return new Single(a);
                };
                if (v instanceof Single) {
                    return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(v.value0))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(a));
                };
                if (v instanceof Deep) {
                    var v1 = Data_FingerTree_Digit.runDigit(v.value3);
                    if (v1.length === 4) {
                        var forcedM = Data_Lazy.force(v.value2);
                        return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(function (v2) {
                            return snoc(dictMonoid)(measuredNode)(forcedM)(node3(dictMonoid)(dictMeasured)(v1[0])(v1[1])(v1[2]));
                        }))(Data_FingerTree_Digit.mkDigit2(v1[3])(a));
                    };
                    return deep(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.snocDigit()(v.value3)(a));
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 262, column 1 - line 263, column 40): " + [ v.constructor.name, a.constructor.name ]);
            };
        };
    };
};
var snocAll = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return Data_Foldable.foldl(dictFoldable)(snoc(dictMonoid)(dictMeasured));
        };
    };
};
var toFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return function (s) {
                return snocAll(dictMonoid)(dictMeasured)(dictFoldable)(Empty.value)(s);
            };
        };
    };
};
var viewL = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            if (v instanceof Empty) {
                return NilL.value;
            };
            if (v instanceof Single) {
                return new ConsL(v.value0, lazyEmpty);
            };
            if (v instanceof Deep) {
                return new ConsL(Data_FingerTree_Digit.headDigit(v.value1), Data_Lazy.defer(function (v1) {
                    return deepL(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.tailDigit(v.value1))(v.value2)(v.value3);
                }));
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 294, column 1 - line 295, column 50): " + [ v.constructor.name ]);
        };
    };
};
var deepL = function (dictMonoid) {
    return function (dictMeasured) {
        return function (pr$prime) {
            return function (m) {
                return function (sf) {
                    var v = Data_FingerTree_Digit.mkDigitMay(pr$prime);
                    if (v instanceof Data_Maybe.Just) {
                        return deep(dictMonoid)(dictMeasured)(v.value0)(m)(sf);
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        var v1 = viewL(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                        if (v1 instanceof NilL) {
                            return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(sf);
                        };
                        if (v1 instanceof ConsL) {
                            return deep(dictMonoid)(dictMeasured)(nodeToDigit(v1.value0))(v1.value1)(sf);
                        };
                        throw new Error("Failed pattern match at Data.FingerTree (line 321, column 7 - line 323, column 49): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.FingerTree (line 317, column 3 - line 323, column 49): " + [ v.constructor.name ]);
                };
            };
        };
    };
};
var eqFingerTree = function ($copy_dictMonoid) {
    return function ($copy_dictMeasured) {
        return function ($copy_dictEq) {
            return function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_dictMonoid = $copy_dictMonoid;
                    var $tco_var_dictMeasured = $copy_dictMeasured;
                    var $tco_var_dictEq = $copy_dictEq;
                    var $tco_var_xs = $copy_xs;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(dictMonoid, dictMeasured, dictEq, xs, ys) {
                        var v = new Data_Tuple.Tuple(viewL(dictMonoid)(dictMeasured)(xs), viewL(dictMonoid)(dictMeasured)(ys));
                        if (v.value0 instanceof NilL && v.value1 instanceof NilL) {
                            $tco_done = true;
                            return true;
                        };
                        if (v.value0 instanceof NilL) {
                            $tco_done = true;
                            return false;
                        };
                        if (v.value1 instanceof NilL) {
                            $tco_done = true;
                            return false;
                        };
                        if (v.value0 instanceof ConsL && v.value1 instanceof ConsL) {
                            var $308 = Data_Eq.eq(dictEq)(v.value0.value0)(v.value1.value0);
                            if ($308) {
                                var ys$prime$prime = Data_Lazy.force(v.value1.value1);
                                var xs$prime$prime = Data_Lazy.force(v.value0.value1);
                                $tco_var_dictMonoid = dictMonoid;
                                $tco_var_dictMeasured = dictMeasured;
                                $tco_var_dictEq = dictEq;
                                $tco_var_xs = xs$prime$prime;
                                $copy_ys = ys$prime$prime;
                                return;
                            };
                            $tco_done = true;
                            return false;
                        };
                        throw new Error("Failed pattern match at Data.FingerTree (line 153, column 3 - line 164, column 17): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_dictMonoid, $tco_var_dictMeasured, $tco_var_dictEq, $tco_var_xs, $copy_ys);
                    };
                    return $tco_result;
                };
            };
        };
    };
};
var head = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var v = viewL(dictMonoid)(dictMeasured)(x);
            if (v instanceof ConsL) {
                return new Data_Maybe.Just(v.value0);
            };
            if (v instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 331, column 10 - line 333, column 23): " + [ v.constructor.name ]);
        };
    };
};
var isEmpty = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var v = viewL(dictMonoid)(dictMeasured)(x);
            if (v instanceof NilL) {
                return true;
            };
            if (v instanceof ConsL) {
                return false;
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 326, column 13 - line 328, column 21): " + [ v.constructor.name ]);
        };
    };
};
var tail = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var v = viewL(dictMonoid)(dictMeasured)(x);
            if (v instanceof ConsL) {
                return new Data_Maybe.Just(Data_Lazy.force(v.value1));
            };
            if (v instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 337, column 10 - line 339, column 24): " + [ v.constructor.name ]);
        };
    };
};
var unfoldLeft = function (dictUnfoldable) {
    return function (dictMonoid) {
        return function (dictMeasured) {
            var step = function (tree) {
                var v = viewL(dictMonoid)(dictMeasured)(tree);
                if (v instanceof ConsL) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v.value1)));
                };
                if (v instanceof NilL) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 482, column 15 - line 484, column 38): " + [ v.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(dictUnfoldable)(step);
        };
    };
};
var viewR = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            if (v instanceof Empty) {
                return NilR.value;
            };
            if (v instanceof Single) {
                return new SnocR(lazyEmpty, v.value0);
            };
            if (v instanceof Deep) {
                return new SnocR(Data_Lazy.defer(function (v1) {
                    return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.initDigit(v.value3));
                }), Data_FingerTree_Digit.lastDigit(v.value3));
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 343, column 1 - line 344, column 50): " + [ v.constructor.name ]);
        };
    };
};
var deepR = function (dictMonoid) {
    return function (dictMeasured) {
        return function (pr) {
            return function (m) {
                return function (sf$prime) {
                    var v = Data_FingerTree_Digit.mkDigitMay(sf$prime);
                    if (v instanceof Data_Maybe.Just) {
                        return deep(dictMonoid)(dictMeasured)(pr)(m)(v.value0);
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        var v1 = viewR(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                        if (v1 instanceof NilR) {
                            return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(pr);
                        };
                        if (v1 instanceof SnocR) {
                            return deep(dictMonoid)(dictMeasured)(pr)(v1.value0)(nodeToDigit(v1.value1));
                        };
                        throw new Error("Failed pattern match at Data.FingerTree (line 357, column 7 - line 359, column 49): " + [ v1.constructor.name ]);
                    };
                    throw new Error("Failed pattern match at Data.FingerTree (line 353, column 3 - line 359, column 49): " + [ v.constructor.name ]);
                };
            };
        };
    };
};
var init = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var v = viewR(dictMonoid)(dictMeasured)(x);
            if (v instanceof SnocR) {
                return new Data_Maybe.Just(Data_Lazy.force(v.value0));
            };
            if (v instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 368, column 10 - line 370, column 24): " + [ v.constructor.name ]);
        };
    };
};
var last = function (dictMonoid) {
    return function (dictMeasured) {
        return function (x) {
            var v = viewR(dictMonoid)(dictMeasured)(x);
            if (v instanceof SnocR) {
                return new Data_Maybe.Just(v.value1);
            };
            if (v instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Data.FingerTree (line 362, column 10 - line 364, column 23): " + [ v.constructor.name ]);
        };
    };
};
var unfoldRight = function (dictUnfoldable) {
    return function (dictMonoid) {
        return function (dictMeasured) {
            var step = function (tree) {
                var v = viewR(dictMonoid)(dictMeasured)(tree);
                if (v instanceof SnocR) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1, Data_Lazy.force(v.value0)));
                };
                if (v instanceof NilR) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 490, column 15 - line 492, column 38): " + [ v.constructor.name ]);
            };
            return Data_Unfoldable.unfoldr(dictUnfoldable)(step);
        };
    };
};
var splitTree = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictPartial) {
            return function (v) {
                return function (v1) {
                    return function (v2) {
                        if (v2 instanceof Single) {
                            return new LazySplit(lazyEmpty, v2.value0, lazyEmpty);
                        };
                        if (v2 instanceof Empty) {
                            return Partial.crashWith()("Data.FingerTree.splitTree: Empty");
                        };
                        if (v2 instanceof Deep) {
                            var vpr = Data_Semigroup.append(dictMonoid.Semigroup0())(v1)(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(v2.value1));
                            var $351 = v(vpr);
                            if ($351) {
                                var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(v1)(v2.value1);
                                return new LazySplit(Data_Lazy.defer(function (v4) {
                                    return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value0);
                                }), v3.value1, Data_Lazy.defer(function (v4) {
                                    return deepL(dictMonoid)(dictMeasured)(v3.value2)(v2.value2)(v2.value3);
                                }));
                            };
                            var vm = Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v2.value2));
                            var $356 = v(vm);
                            if ($356) {
                                var v3 = splitTree(dictMonoid)(measuredNode)()(v)(vpr)(Data_Lazy.force(v2.value2));
                                var v4 = splitDigit(dictMonoid)(dictMeasured)(v)(Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v3.value0)))(nodeToDigit(v3.value1));
                                return new LazySplit(Data_Lazy.defer(function (v5) {
                                    return deepR(dictMonoid)(dictMeasured)(v2.value1)(v3.value0)(v4.value0);
                                }), v4.value1, Data_Lazy.defer(function (v5) {
                                    return deepL(dictMonoid)(dictMeasured)(v4.value2)(v3.value2)(v2.value3);
                                }));
                            };
                            var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(vm)(v2.value3);
                            return new LazySplit(Data_Lazy.defer(function (v4) {
                                return deepR(dictMonoid)(dictMeasured)(v2.value1)(v2.value2)(v3.value0);
                            }), v3.value1, Data_Lazy.defer(function (v4) {
                                return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value2);
                            }));
                        };
                        throw new Error("Failed pattern match at Data.FingerTree (line 428, column 1 - line 429, column 70): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                    };
                };
            };
        };
    };
};
var cons = function (dictMonoid) {
    return function (dictMeasured) {
        return function (a) {
            return function (v) {
                if (v instanceof Empty) {
                    return new Single(a);
                };
                if (v instanceof Single) {
                    return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(a))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(v.value0));
                };
                if (v instanceof Deep) {
                    var v1 = Data_FingerTree_Digit.runDigit(v.value1);
                    if (v1.length === 4) {
                        var forcedM = Data_Lazy.force(v.value2);
                        return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit2(a)(v1[0]))(Data_Lazy.defer(function (v2) {
                            return cons(dictMonoid)(measuredNode)(node3(dictMonoid)(dictMeasured)(v1[1])(v1[2])(v1[3]))(forcedM);
                        }))(v.value3);
                    };
                    var pr$prime = Data_FingerTree_Digit.consDigit()(a)(v.value1);
                    return deep(dictMonoid)(dictMeasured)(pr$prime)(v.value2)(v.value3);
                };
                throw new Error("Failed pattern match at Data.FingerTree (line 234, column 1 - line 235, column 40): " + [ a.constructor.name, v.constructor.name ]);
            };
        };
    };
};
var consAll = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictFoldable) {
            return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(cons(dictMonoid)(dictMeasured)));
        };
    };
};
var filter = function (dictMonoid) {
    return function (dictMeasured) {
        return function (p) {
            return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                return function (acc) {
                    var $385 = p(x);
                    if ($385) {
                        return cons(dictMonoid)(dictMeasured)(x)(acc);
                    };
                    return acc;
                };
            })(Empty.value);
        };
    };
};
var split = function (dictMonoid) {
    return function (dictMeasured) {
        return function (dictPartial) {
            return function (p) {
                return function (v) {
                    if (v instanceof Empty) {
                        return new Data_Tuple.Tuple(lazyEmpty, lazyEmpty);
                    };
                    var $388 = p(Data_Sequence_Internal.measure(measuredFingerTree(dictMonoid)(dictMeasured))(v));
                    if ($388) {
                        var v1 = splitTree(dictMonoid)(dictMeasured)()(p)(Data_Monoid.mempty(dictMonoid))(v);
                        return new Data_Tuple.Tuple(v1.value0, Data_Lazy.defer(function (v2) {
                            return cons(dictMonoid)(dictMeasured)(v1.value1)(Data_Lazy.force(v1.value2));
                        }));
                    };
                    return new Data_Tuple.Tuple(Data_Lazy.defer(function (v1) {
                        return v;
                    }), lazyEmpty);
                };
            };
        };
    };
};
var compareFingerTree = function ($copy_dictMonoid) {
    return function ($copy_dictMeasured) {
        return function ($copy_dictOrd) {
            return function ($copy_xs) {
                return function ($copy_ys) {
                    var $tco_var_dictMonoid = $copy_dictMonoid;
                    var $tco_var_dictMeasured = $copy_dictMeasured;
                    var $tco_var_dictOrd = $copy_dictOrd;
                    var $tco_var_xs = $copy_xs;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(dictMonoid, dictMeasured, dictOrd, xs, ys) {
                        var v = new Data_Tuple.Tuple(viewL(dictMonoid)(dictMeasured)(xs), viewL(dictMonoid)(dictMeasured)(ys));
                        if (v.value0 instanceof NilL && v.value1 instanceof NilL) {
                            $tco_done = true;
                            return Data_Ordering.EQ.value;
                        };
                        if (v.value0 instanceof NilL) {
                            $tco_done = true;
                            return Data_Ordering.LT.value;
                        };
                        if (v.value1 instanceof NilL) {
                            $tco_done = true;
                            return Data_Ordering.GT.value;
                        };
                        if (v.value0 instanceof ConsL && v.value1 instanceof ConsL) {
                            var v1 = Data_Ord.compare(dictOrd)(v.value0.value0)(v.value1.value0);
                            if (v1 instanceof Data_Ordering.EQ) {
                                var ys$prime$prime = Data_Lazy.force(v.value1.value1);
                                var xs$prime$prime = Data_Lazy.force(v.value0.value1);
                                $tco_var_dictMonoid = dictMonoid;
                                $tco_var_dictMeasured = dictMeasured;
                                $tco_var_dictOrd = dictOrd;
                                $tco_var_xs = xs$prime$prime;
                                $copy_ys = ys$prime$prime;
                                return;
                            };
                            $tco_done = true;
                            return v1;
                        };
                        throw new Error("Failed pattern match at Data.FingerTree (line 172, column 3 - line 181, column 23): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_dictMonoid, $tco_var_dictMeasured, $tco_var_dictOrd, $tco_var_xs, $copy_ys);
                    };
                    return $tco_result;
                };
            };
        };
    };
};
var app3 = function (dictMonoid) {
    return function (dictMeasured) {
        return function (v) {
            return function (ts) {
                return function (v1) {
                    if (v instanceof Empty) {
                        return consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1);
                    };
                    if (v1 instanceof Empty) {
                        return snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts);
                    };
                    if (v instanceof Single) {
                        return cons(dictMonoid)(dictMeasured)(v.value0)(consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1));
                    };
                    if (v1 instanceof Single) {
                        return snoc(dictMonoid)(dictMeasured)(snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts))(v1.value0);
                    };
                    if (v instanceof Deep && v1 instanceof Deep) {
                        var computeM$prime = function (v2) {
                            return app3(dictMonoid)(measuredNode)(Data_Lazy.force(v.value2))(nodes(dictMonoid)(dictMeasured)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_FingerTree_Digit.runDigit(v.value3))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ts)(Data_FingerTree_Digit.runDigit(v1.value1)))))(Data_Lazy.force(v1.value2));
                        };
                        return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(computeM$prime))(v1.value3);
                    };
                    throw new Error("Failed pattern match at Data.FingerTree (line 372, column 1 - line 373, column 70): " + [ v.constructor.name, ts.constructor.name, v1.constructor.name ]);
                };
            };
        };
    };
};
var append = function (dictMonoid) {
    return function (dictMeasured) {
        return function (xs) {
            return function (ys) {
                return app3(dictMonoid)(dictMeasured)(xs)([  ])(ys);
            };
        };
    };
};
var semigroupFingerTree = function (dictMonoid) {
    return function (dictMeasured) {
        return {
            append: append(dictMonoid)(dictMeasured)
        };
    };
};
module.exports = {
    Node2: Node2,
    Node3: Node3,
    node2: node2,
    node3: node3,
    nodeToDigit: nodeToDigit,
    Empty: Empty,
    Single: Single,
    Deep: Deep,
    lazyEmpty: lazyEmpty,
    deep: deep,
    eqFingerTree: eqFingerTree,
    compareFingerTree: compareFingerTree,
    cons: cons,
    snoc: snoc,
    consAll: consAll,
    snocAll: snocAll,
    toFingerTree: toFingerTree,
    NilL: NilL,
    ConsL: ConsL,
    viewL: viewL,
    deepL: deepL,
    isEmpty: isEmpty,
    head: head,
    tail: tail,
    NilR: NilR,
    SnocR: SnocR,
    viewR: viewR,
    deepR: deepR,
    last: last,
    init: init,
    app3: app3,
    nodes: nodes,
    append: append,
    Split: Split,
    LazySplit: LazySplit,
    splitDigit: splitDigit,
    splitTree: splitTree,
    split: split,
    filter: filter,
    unfoldLeft: unfoldLeft,
    unfoldRight: unfoldRight,
    fullyForce: fullyForce,
    showNode: showNode,
    functorNode: functorNode,
    foldableNode: foldableNode,
    traversableNode: traversableNode,
    measuredNode: measuredNode,
    showFingerTree: showFingerTree,
    semigroupFingerTree: semigroupFingerTree,
    functorFingerTree: functorFingerTree,
    foldableFingerTree: foldableFingerTree,
    traversableFingerTree: traversableFingerTree,
    measuredFingerTree: measuredFingerTree,
    functorViewL: functorViewL,
    consDigit: Data_FingerTree_Digit.consDigit,
    digitLength: Data_FingerTree_Digit.digitLength,
    dropDigit: Data_FingerTree_Digit.dropDigit,
    headDigit: Data_FingerTree_Digit.headDigit,
    initDigit: Data_FingerTree_Digit.initDigit,
    lastDigit: Data_FingerTree_Digit.lastDigit,
    mkDigit: Data_FingerTree_Digit.mkDigit,
    mkDigit1: Data_FingerTree_Digit.mkDigit1,
    mkDigit2: Data_FingerTree_Digit.mkDigit2,
    mkDigit3: Data_FingerTree_Digit.mkDigit3,
    mkDigitMay: Data_FingerTree_Digit.mkDigitMay,
    runDigit: Data_FingerTree_Digit.runDigit,
    snocDigit: Data_FingerTree_Digit.snocDigit,
    tailDigit: Data_FingerTree_Digit.tailDigit,
    unsafeIndex: Data_FingerTree_Digit.unsafeIndex
};
