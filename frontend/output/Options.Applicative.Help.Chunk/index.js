// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Options_Applicative_Internal_Utils = require("../Options.Applicative.Internal.Utils/index.js");
var Text_PrettyPrint_Leijen = require("../Text.PrettyPrint.Leijen/index.js");
var Chunk = function (x) {
    return x;
};
var chunked = function (v) {
    return function (v1) {
        return function (v2) {
            if (v1 instanceof Data_Maybe.Nothing) {
                return v2;
            };
            if (v2 instanceof Data_Maybe.Nothing) {
                return v1;
            };
            if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(v(v1.value0)(v2.value0));
            };
            throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 59, column 1 - line 60, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
        };
    };
};
var chunkSemigroup = function (dictSemigroup) {
    return {
        append: chunked(Data_Semigroup.append(dictSemigroup))
    };
};
var chunkPlus = Data_Maybe.plusMaybe;
var chunkOrd = function (dictOrd) {
    return Data_Maybe.ordMaybe(dictOrd);
};
var chunkNewtype = {
    Coercible0: function () {
        return undefined;
    }
};
var extractChunk = function (dictMonoid) {
    var $31 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
    var $32 = Data_Newtype.un()(Chunk);
    return function ($33) {
        return $31($32($33));
    };
};
var isEmpty = (function () {
    var $34 = Data_Newtype.un()(Chunk);
    return function ($35) {
        return Data_Maybe.isNothing($34($35));
    };
})();
var chunkMonoid = function (dictSemigroup) {
    return {
        mempty: Data_Maybe.Nothing.value,
        Semigroup0: function () {
            return chunkSemigroup(dictSemigroup);
        }
    };
};
var vcatChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(Text_PrettyPrint_Leijen.appendWithLine))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
var vsepChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(function (x) {
    return function (y) {
        return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid))(y));
    };
}))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
var chunkMonadZero = Data_Maybe.monadZeroMaybe;
var chunkMonad = Data_Maybe.monadMaybe;
var chunkGeneric = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var chunkShow = function (dictShow) {
    return {
        show: Data_Show_Generic.genericShow(chunkGeneric)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Maybe.showMaybe(dictShow)))({
            reflectSymbol: function () {
                return "Chunk";
            }
        }))
    };
};
var chunkFunctor = Data_Maybe.functorMaybe;
var chunkEq = function (dictEq) {
    return Data_Maybe.eqMaybe(dictEq);
};
var chunkBind = Data_Maybe.bindMaybe;
var chunkBesideOrBelow = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
var chunkBeside = chunked(Text_PrettyPrint_Leijen.appendWithSpace);
var chunkApply = Data_Maybe.applyMaybe;
var chunkApplicative = Data_Maybe.applicativeMaybe;
var listToChunk = function (dictMonoid) {
    return function (v) {
        if (v.length === 0) {
            return Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
        };
        return Control_Applicative.pure(chunkApplicative)(Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v));
    };
};
var stringChunk = function (v) {
    if (v === "") {
        return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
    };
    return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.text(v));
};
var paragraph = (function () {
    var $36 = Data_Foldable.foldr(Data_Foldable.foldableArray)((function () {
        var $38 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
        return function ($39) {
            return $38(stringChunk($39));
        };
    })())(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
    return function ($37) {
        return $36(Options_Applicative_Internal_Utils.words($37));
    };
})();
var tabulate$prime = function (v) {
    return function (v1) {
        if (v1.length === 0) {
            return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
        };
        return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.vcat(Data_Functor.mapFlipped(Data_Functor.functorArray)(v1)(function (v2) {
            return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
        })));
    };
};
var tabulate = tabulate$prime(24);
var chunkAlternative = Data_Maybe.alternativeMaybe;
var chunkAlt = Data_Maybe.altMaybe;
module.exports = {
    Chunk: Chunk,
    chunked: chunked,
    listToChunk: listToChunk,
    chunkBeside: chunkBeside,
    chunkBesideOrBelow: chunkBesideOrBelow,
    vcatChunks: vcatChunks,
    vsepChunks: vsepChunks,
    isEmpty: isEmpty,
    stringChunk: stringChunk,
    paragraph: paragraph,
    extractChunk: extractChunk,
    tabulate: tabulate,
    chunkNewtype: chunkNewtype,
    chunkGeneric: chunkGeneric,
    chunkShow: chunkShow,
    chunkEq: chunkEq,
    chunkOrd: chunkOrd,
    chunkFunctor: chunkFunctor,
    chunkApply: chunkApply,
    chunkApplicative: chunkApplicative,
    chunkAlt: chunkAlt,
    chunkPlus: chunkPlus,
    chunkAlternative: chunkAlternative,
    chunkBind: chunkBind,
    chunkMonad: chunkMonad,
    chunkMonadZero: chunkMonadZero,
    chunkSemigroup: chunkSemigroup,
    chunkMonoid: chunkMonoid
};
