// Generated by purs version 0.14.5
"use strict";
var Control_Apply = require("../Control.Apply/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Medea_Parser_Primitive = require("../Data.Medea.Parser.Primitive/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Combinators = require("../Text.Parsing.Parser.Combinators/index.js");
var Specification = (function () {
    function Specification(value0) {
        this.value0 = value0;
    };
    Specification.create = function (value0) {
        return new Specification(value0);
    };
    return Specification;
})();
var propSchema = function (v) {
    return v.value0.propSchema;
};
var propOptional = function (v) {
    return v.value0.propOptional;
};
var propName = function (v) {
    return v.value0.propName;
};
var mkSpec = function (pn) {
    return function (ps) {
        return function (po) {
            return new Specification({
                propName: pn,
                propSchema: ps,
                propOptional: po
            });
        };
    };
};
var parseSpecification = (function () {
    var parsePropSchema = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_Maybe.Nothing.value)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Primitive.parseLine(8)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(Data_Medea_Parser_Primitive.parseKeyVal(Data_Medea_Parser_Primitive.RPropertySchema.value)(Data_Medea_Parser_Primitive.parseIdentifier)))));
    var parsePropOptional = Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(false)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Medea_Parser_Primitive.parseLine(8)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Medea_Parser_Primitive.parseReserved(Data_Medea_Parser_Primitive.ROptionalProperty.value))(true))));
    var parsePropName = Data_Medea_Parser_Primitive.parseLine(8)(Data_Medea_Parser_Primitive.parseKeyVal(Data_Medea_Parser_Primitive.RPropertyName.value)(Data_Medea_Parser_Primitive.parseString));
    return Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(mkSpec)(parsePropName))(parsePropSchema))(parsePropOptional);
})();
var genericSpecification = {
    to: function (x) {
        return new Specification(x);
    },
    from: function (x) {
        return x.value0;
    }
};
var showSpecification = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericSpecification)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propName";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propOptional";
            }
        })(Data_Show.showRecordFieldsCons({
            reflectSymbol: function () {
                return "propSchema";
            }
        })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Medea_Parser_Primitive.showIdentifier)))(Data_Show.showBoolean))(Data_Medea_Parser_Primitive.showMedeaString))))({
            reflectSymbol: function () {
                return "Specification";
            }
        }))(x);
    }
};
var eqSpecification = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_Medea_Parser_Primitive.eqMedeaString)(x.value0.propName)(y.value0.propName) && x.value0.propOptional === y.value0.propOptional && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Medea_Parser_Primitive.eqIdentifier))(x.value0.propSchema)(y.value0.propSchema);
        };
    }
};
module.exports = {
    parseSpecification: parseSpecification,
    mkSpec: mkSpec,
    propName: propName,
    propSchema: propSchema,
    propOptional: propOptional,
    genericSpecification: genericSpecification,
    showSpecification: showSpecification,
    eqSpecification: eqSpecification
};
