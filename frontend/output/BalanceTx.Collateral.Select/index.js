// Generated by purs version 0.14.5
"use strict";
var BalanceTx_FakeOutput = require("../BalanceTx.FakeOutput/index.js");
var BalanceTx_UtxoMinAda = require("../BalanceTx.UtxoMinAda/index.js");
var Cardano_Types_Value = require("../Cardano.Types.Value/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect = require("../Effect/index.js");
var CollateralCandidate = function (x) {
    return x;
};
var AdaOut = function (x) {
    return x;
};
var newtypeCollateralCandidat = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeAdaOut_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqCollateralCandidate = {
    eq: Data_Function.on(Data_Eq.eq(Data_BigInt.eqBigInt))((function () {
        var $26 = Data_Newtype.unwrap();
        return function ($27) {
            return Data_Tuple.snd($26($27));
        };
    })())
};
var subsequences = function (v) {
    if (v instanceof Data_List_Types.Nil) {
        return new Data_List_Types.Cons(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
    };
    if (v instanceof Data_List_Types.Cons) {
        var subs = subsequences(v.value1);
        return Data_Semigroup.append(Data_List_Types.semigroupList)(Data_Functor.map(Data_List_Types.functorList)(Data_List_Types.Cons.create(v.value0))(subs))(subs);
    };
    throw new Error("Failed pattern match at BalanceTx.Collateral.Select (line 170, column 1 - line 170, column 60): " + [ v.constructor.name ]);
};
var nonAdaAsset = (function () {
    var $28 = Data_Newtype.unwrap();
    var $29 = Data_Newtype.unwrap();
    return function ($30) {
        return Cardano_Types_Value.getNonAdaAsset((function (v) {
            return v.amount;
        })($28((function (v) {
            return v.output;
        })($29($30)))));
    };
})();
var mkCollateralCandidate = function (v) {
    return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
        var $31 = Data_Tuple.Tuple.create(v.value0);
        return function ($32) {
            return CollateralCandidate($31($32));
        };
    })())(v.value1);
};
var minRequiredCollateral = Data_BigInt.fromInt(5000000);
var maxCandidateUtxos = 10;
var combinations = function (k) {
    var $33 = Data_List.filter(function (x) {
        return Data_List.length(x) <= k && !Data_List["null"](x);
    });
    return function ($34) {
        return $33(subsequences($34));
    };
};
var collateralReturnMinAdaValue = function (coinsPerUtxoUnit) {
    var $35 = BalanceTx_UtxoMinAda.utxoMinAdaValue(coinsPerUtxoUnit);
    var $36 = Data_Foldable.foldMap(Data_List_Types.foldableList)(Cardano_Types_Value.monoidNonAdaAsset)(nonAdaAsset);
    return function ($37) {
        return $35(BalanceTx_FakeOutput.fakeOutputWithNonAdaAssets($36($37)));
    };
};
var asTxUnspentOutput = function (v) {
    return Data_Newtype.wrap()({
        input: v.value0,
        output: v.value1
    });
};
var adaValue = (function () {
    var $38 = Data_Newtype.unwrap();
    var $39 = Data_Newtype.unwrap();
    return function ($40) {
        return Cardano_Types_Value["valueToCoin'"]((function (v) {
            return v.amount;
        })($38((function (v) {
            return v.output;
        })($39($40)))));
    };
})();
var adaValue$prime = function (init) {
    var $41 = Data_Semiring.add(Data_BigInt.semiringBigInt)(init);
    return function ($42) {
        return $41(adaValue($42));
    };
};
var ordCollateralCandidate = {
    compare: function (lhs) {
        return function (rhs) {
            var caseEq = function (v) {
                return function (v1) {
                    if (v instanceof Data_Ordering.EQ) {
                        return v1;
                    };
                    return v;
                };
            };
            var byReturnOutMinAda = (function () {
                var $43 = Data_Newtype.unwrap();
                return function ($44) {
                    return Data_Tuple.snd($43($44));
                };
            })();
            var byNumOfInputs = (function () {
                var $45 = Data_Newtype.unwrap();
                return function ($46) {
                    return Data_List.length(Data_Tuple.fst($45($46)));
                };
            })();
            var byAdaValue = (function () {
                var $47 = Data_Foldable.foldl(Data_List_Types.foldableList)(adaValue$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                var $48 = Data_Newtype.unwrap();
                return function ($49) {
                    return $47(Data_Tuple.fst($48($49)));
                };
            })();
            return caseEq(Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))(byReturnOutMinAda)(lhs)(rhs))(caseEq(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(byNumOfInputs)(lhs)(rhs))(Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))(byAdaValue)(lhs)(rhs)));
        };
    },
    Eq0: function () {
        return eqCollateralCandidate;
    }
};
var eqAdaOut = {
    eq: Data_Function.on(Data_Eq.eq(Data_BigInt.eqBigInt))((function () {
        var $50 = Data_Newtype.unwrap();
        return function ($51) {
            return adaValue($50($51));
        };
    })())
};
var ordAdaOut = {
    compare: Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))((function () {
        var $52 = Data_Newtype.unwrap();
        return function ($53) {
            return adaValue($52($53));
        };
    })()),
    Eq0: function () {
        return eqAdaOut;
    }
};
var selectCollateral = function (coinsPerUtxoUnit) {
    return function (maxCollateralInputs) {
        var $54 = Data_Functor.map(Effect.functorEffect)((function () {
            var $65 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                var $68 = Data_Newtype.unwrap();
                return function ($69) {
                    return Data_Tuple.fst($68($69));
                };
            })());
            var $66 = Data_List.sort(ordCollateralCandidate);
            return function ($67) {
                return $65(Data_List.head($66($67)));
            };
        })());
        var $55 = Data_Functor.map(Effect.functorEffect)(Data_List.mapMaybe(mkCollateralCandidate));
        var $56 = Data_Traversable.traverse(Data_List_Types.traversableList)(Effect.applicativeEffect)(function (x) {
            return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(x))(collateralReturnMinAdaValue(coinsPerUtxoUnit)(x));
        });
        var $57 = Data_List.filter(function (x) {
            return Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(Data_Foldable.foldl(Data_List_Types.foldableList)(adaValue$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(x))(minRequiredCollateral);
        });
        var $58 = combinations(maxCollateralInputs);
        var $59 = Data_List.take(maxCandidateUtxos);
        var $60 = Data_Functor.map(Data_List_Types.functorList)(Data_Newtype.unwrap());
        var $61 = Data_List.sortBy(function (lhs) {
            var $70 = Data_Ord.compare(ordAdaOut)(lhs);
            return function ($71) {
                return Data_Ordering.invert($70($71));
            };
        });
        var $62 = Data_Functor.map(Data_List_Types.functorList)(function ($72) {
            return AdaOut(asTxUnspentOutput($72));
        });
        var $63 = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
        return function ($64) {
            return $54($55($56($57($58($59($60($61($62($63($64))))))))));
        };
    };
};
module.exports = {
    maxCandidateUtxos: maxCandidateUtxos,
    minRequiredCollateral: minRequiredCollateral,
    selectCollateral: selectCollateral
};
