// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Cardano_Types_Transaction = require("../Cardano.Types.Transaction/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Helpers = require("../Helpers/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Wallet_Cip30 = require("../Wallet.Cip30/index.js");
var Wallet_Key = require("../Wallet.Key/index.js");
var Nami = (function () {
    function Nami(value0) {
        this.value0 = value0;
    };
    Nami.create = function (value0) {
        return new Nami(value0);
    };
    return Nami;
})();
var Gero = (function () {
    function Gero(value0) {
        this.value0 = value0;
    };
    Gero.create = function (value0) {
        return new Gero(value0);
    };
    return Gero;
})();
var Flint = (function () {
    function Flint(value0) {
        this.value0 = value0;
    };
    Flint.create = function (value0) {
        return new Flint(value0);
    };
    return Flint;
})();
var Eternl = (function () {
    function Eternl(value0) {
        this.value0 = value0;
    };
    Eternl.create = function (value0) {
        return new Eternl(value0);
    };
    return Eternl;
})();
var Lode = (function () {
    function Lode(value0) {
        this.value0 = value0;
    };
    Lode.create = function (value0) {
        return new Lode(value0);
    };
    return Lode;
})();
var KeyWallet = (function () {
    function KeyWallet(value0) {
        this.value0 = value0;
    };
    KeyWallet.create = function (value0) {
        return new KeyWallet(value0);
    };
    return KeyWallet;
})();
var mkNamiWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Nami.create)(Wallet_Cip30.mkCip30WalletAff("Nami")($foreign["_enableNami"]));
var mkKeyWallet = function (payKey) {
    return function (mbStakeKey) {
        return KeyWallet.create(Wallet_Key.privateKeysToKeyWallet(payKey)(mbStakeKey));
    };
};
var mkGeroWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Gero.create)(Wallet_Cip30.mkCip30WalletAff("Gero")($foreign["_enableGero"]));
var mkFlintWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Flint.create)(Wallet_Cip30.mkCip30WalletAff("Flint")($foreign["_enableFlint"]));
var mkEternlWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Eternl.create)(Wallet_Cip30.mkCip30WalletAff("Eternl")($foreign["_enableEternl"]));
var isNamiAvailable = $foreign["_isNamiAvailable"];
var isLodeAvailable = $foreign["_isLodeAvailable"];
var mkLodeWalletAff = (function () {
    var retryNWithIntervalUntil = function (n) {
        return function (ms) {
            return function (mBool) {
                var $5 = Data_Eq.eq(Types_Natural.eqNatural)(n)(Data_Semiring.zero(Types_Natural.semiringNatural));
                if ($5) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                };
                return Control_Bind.bind(Effect_Aff.bindAff)(mBool)(function (v) {
                    if (v) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                    };
                    return Control_Apply.applySecond(Effect_Aff.applyAff)(Effect_Aff.delay(Data_Newtype.wrap()(ms)))(retryNWithIntervalUntil(Types_Natural.minus(n)(Data_Semiring.one(Types_Natural.semiringNatural)))(ms)(mBool));
                });
            };
        };
    };
    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(retryNWithIntervalUntil(Types_Natural["fromInt'"](10))(Data_Int.toNumber(100))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(isLodeAvailable)))(function () {
        return Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(Data_Functor.map(Effect_Aff.functorAff)(Lode.create)(Wallet_Cip30.mkCip30WalletAff("Lode")($foreign["_enableLode"])))(function (e) {
            return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(Data_Show.show(Effect_Exception.showError)(e) + " Note: LodeWallet is injected asynchronously and may be unreliable."));
        });
    });
})();
var isGeroAvailable = $foreign["_isGeroAvailable"];
var isFlintAvailable = $foreign["_isFlintAvailable"];
var isEternlAvailable = $foreign["_isEternlAvailable"];
var dummySign = function (v) {
    var vk = new Data_Tuple.Tuple("ed25519_pk1eamrnx3pph58yr5l4z2wghjpu2dt2f0rp0zq9qquqa39p52ct0xsudjp4e", "ed25519_sig1ynufn5umzl746ekpjtzt2rf58ep0wg6mxpgyezh8vx0e8jpgm3kuu3tgm453wlz4rq5yjtth0fnj0ltxctaue0dgc2hwmysr9jvhjzswt86uk");
    return Data_Newtype.over()()(Cardano_Types_Transaction.Transaction)(function (v1) {
        return {
            witnessSet: Data_Newtype.over()()(Cardano_Types_Transaction.TransactionWitnessSet)(function (v2) {
                return {
                    vkeys: Helpers.maybeArrayMerge(Cardano_Types_Transaction.eqVkeywitness)(v.witnessSet.vkeys)(new Data_Maybe.Just([ vk ])),
                    bootstraps: v2.bootstraps,
                    nativeScripts: v2.nativeScripts,
                    plutusData: v2.plutusData,
                    plutusScripts: v2.plutusScripts,
                    redeemers: v2.redeemers
                };
            })(v.witnessSet),
            auxiliaryData: v1.auxiliaryData,
            body: v1.body,
            isValid: v1.isValid
        };
    })(v);
};
var cip30Wallet = function (v) {
    if (v instanceof Nami) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof Gero) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof Flint) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof Eternl) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof Lode) {
        return new Data_Maybe.Just(v.value0);
    };
    if (v instanceof KeyWallet) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Wallet (line 131, column 15 - line 137, column 25): " + [ v.constructor.name ]);
};
module.exports = {
    Gero: Gero,
    Nami: Nami,
    Flint: Flint,
    Lode: Lode,
    Eternl: Eternl,
    KeyWallet: KeyWallet,
    isEternlAvailable: isEternlAvailable,
    isGeroAvailable: isGeroAvailable,
    isNamiAvailable: isNamiAvailable,
    isFlintAvailable: isFlintAvailable,
    isLodeAvailable: isLodeAvailable,
    mkEternlWalletAff: mkEternlWalletAff,
    mkNamiWalletAff: mkNamiWalletAff,
    mkGeroWalletAff: mkGeroWalletAff,
    mkFlintWalletAff: mkFlintWalletAff,
    mkLodeWalletAff: mkLodeWalletAff,
    mkKeyWallet: mkKeyWallet,
    cip30Wallet: cip30Wallet,
    dummySign: dummySign,
    privateKeysToKeyWallet: Wallet_Key.privateKeysToKeyWallet
};
