// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var FromData = require("../FromData/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_ToMetadata = require("../Metadata.ToMetadata/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var CurrencySymbol = function (x) {
    return x;
};
var toMetadataCurrencySymbol = Metadata_ToMetadata.toMetadataByteArray;
var toDataCurrencySymbol = ToData.toDataByteArray;
var showCurrencySymbol = {
    show: function (v) {
        return "(CurrencySymbol " + (Data_Show.show(Types_ByteArray.showByteArray)(v) + ")");
    }
};
var ordCurrencySymbol = Types_ByteArray.ordByteArray;
var fromMetadataCurrencySymbo = Metadata_FromMetadata.fromMetadataByteArray;
var fromDataCurrencySymbol = FromData.fromDataByteArray;
var eqCurrencySymbol = Types_ByteArray.eqByteArray;
var encodeAesonCurrencySymbol = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "unCurrencySymbol";
            }
        })())())({
            unCurrencySymbol: v
        });
    }
};
var decodeAesonCurrencySymbol = {
    decodeAeson: Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonAeson))("unCurrencySymbol"))((function () {
        var $19 = Data_Functor.map(Data_Either.functorEither)(CurrencySymbol);
        var $20 = Aeson.decodeAeson(Types_ByteArray.decodeAesonByteArray);
        return function ($21) {
            return $19($20($21));
        };
    })()))
};
var scriptHashAsCurrencySymbol = (function () {
    var $22 = Data_Newtype.unwrap();
    return function ($23) {
        return CurrencySymbol($22(Serialization_Hash.scriptHashToBytes($23)));
    };
})();
var getCurrencySymbol = function (v) {
    return v;
};
var currencyScriptHash = (function (dictPartial) {
    var $24 = Data_Maybe.fromJust();
    var $25 = Data_Newtype.wrap();
    return function ($26) {
        return $24(Serialization_Hash.scriptHashFromBytes($25(getCurrencySymbol($26))));
    };
})();
var currencyMPSHash = function ($27) {
    return Types_Scripts.MintingPolicyHash(currencyScriptHash($27));
};
var adaSymbol = Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
var mkCurrencySymbol = function (byteArr) {
    if (Data_Eq.eq(Types_ByteArray.eqByteArray)(byteArr)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
        return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(adaSymbol);
    };
    if (Data_Boolean.otherwise) {
        return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(byteArr)))(byteArr);
    };
    throw new Error("Failed pattern match at Plutus.Types.CurrencySymbol (line 72, column 1 - line 72, column 54): " + [ byteArr.constructor.name ]);
};
var mpsSymbol = function (v) {
    return mkCurrencySymbol(Data_Newtype.unwrap()(Serialization_Hash.scriptHashToBytes(v)));
};
module.exports = {
    adaSymbol: adaSymbol,
    currencyMPSHash: currencyMPSHash,
    getCurrencySymbol: getCurrencySymbol,
    mkCurrencySymbol: mkCurrencySymbol,
    mpsSymbol: mpsSymbol,
    scriptHashAsCurrencySymbol: scriptHashAsCurrencySymbol,
    eqCurrencySymbol: eqCurrencySymbol,
    ordCurrencySymbol: ordCurrencySymbol,
    fromDataCurrencySymbol: fromDataCurrencySymbol,
    fromMetadataCurrencySymbo: fromMetadataCurrencySymbo,
    toDataCurrencySymbol: toDataCurrencySymbol,
    toMetadataCurrencySymbol: toMetadataCurrencySymbol,
    decodeAesonCurrencySymbol: decodeAesonCurrencySymbol,
    encodeAesonCurrencySymbol: encodeAesonCurrencySymbol,
    showCurrencySymbol: showCurrencySymbol
};
