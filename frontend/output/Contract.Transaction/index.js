// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var BalanceTx = require("../BalanceTx/index.js");
var BalanceTx_Error = require("../BalanceTx.Error/index.js");
var Cardano_Types_NativeScript = require("../Cardano.Types.NativeScript/index.js");
var Cardano_Types_ScriptRef = require("../Cardano.Types.ScriptRef/index.js");
var Cardano_Types_Transaction = require("../Cardano.Types.Transaction/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Aff_Class = require("../Effect.Aff.Class/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Hashing = require("../Hashing/index.js");
var Plutus_Conversion = require("../Plutus.Conversion/index.js");
var Plutus_Conversion_Address = require("../Plutus.Conversion.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_TransactionUnspentOutput = require("../Plutus.Types.TransactionUnspentOutput/index.js");
var QueryM = require("../QueryM/index.js");
var QueryM_AwaitTxConfirmed = require("../QueryM.AwaitTxConfirmed/index.js");
var QueryM_GetTxByHash = require("../QueryM.GetTxByHash/index.js");
var QueryM_MinFee = require("../QueryM.MinFee/index.js");
var QueryM_Ogmios = require("../QueryM.Ogmios/index.js");
var QueryM_Sign = require("../QueryM.Sign/index.js");
var ReindexRedeemers = require("../ReindexRedeemers/index.js");
var Serialization = require("../Serialization/index.js");
var TxOutput = require("../TxOutput/index.js");
var Types_OutputDatum = require("../Types.OutputDatum/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TransactionMetadata = require("../Types.TransactionMetadata/index.js");
var Types_UnbalancedTransaction = require("../Types.UnbalancedTransaction/index.js");
var Types_UsedTxOuts = require("../Types.UsedTxOuts/index.js");
var Untagged_Union = require("../Untagged.Union/index.js");
var BalancedSignedTransaction = function (x) {
    return x;
};
var newtypeBalancedSignedTran = {
    Coercible0: function () {
        return undefined;
    }
};
var genericBalancedSignedTran = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showBalancedSignedTransac = {
    show: Data_Show_Generic.genericShow(genericBalancedSignedTran)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Transaction.showTransaction))({
        reflectSymbol: function () {
            return "BalancedSignedTransaction";
        }
    }))
};
var eqBalancedSignedTransacti = Cardano_Types_Transaction.eqTransaction;
var encodeAesonBalancedSigned = Cardano_Types_Transaction.encodeAesonTransaction;
var withUsedTxouts = function (f) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
        var $33 = Data_Newtype.unwrap();
        return function ($34) {
            return (function (v) {
                return v.usedTxOuts;
            })((function (v) {
                return v.runtime;
            })($33($34)));
        };
    })()))(Control_Monad_Reader_Trans.runReaderT(f));
};
var withTransactions = function (dictTraversable) {
    return function (prepare) {
        return function (extract) {
            return function (utxs) {
                return function (action) {
                    var cleanup = function (txs) {
                        return Data_Foldable.for_(Contract_Monad.applicativeContract)(dictTraversable.Foldable1())(txs)((function () {
                            var $35 = Types_UsedTxOuts.unlockTransactionInputs(Control_Monad_Reader_Trans.monadAskReaderT(Contract_Monad.monadContract))(Control_Monad_Reader_Trans.monadEffectReader(Contract_Monad.monadEffectContract));
                            return function ($36) {
                                return withUsedTxouts($35(extract($36)));
                            };
                        })());
                    };
                    return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.ask(Contract_Monad.monadAskContractEnvContra))(function (env) {
                        var run = Contract_Monad.runContractInEnv(env);
                        return Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Effect_Aff.bracket(run(prepare(utxs)))(function ($37) {
                            return run(cleanup($37));
                        })(function ($38) {
                            return run(action($38));
                        }));
                    });
                };
            };
        };
    };
};
var withSingleTransaction = function (prepare) {
    return function (extract) {
        return function (utx) {
            return function (action) {
                return withTransactions(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Contract_Monad.applicativeContract)(prepare))(extract)(Data_Array_NonEmpty.singleton(utx))(function ($39) {
                    return action(Data_Array_NonEmpty.head($39));
                });
            };
        };
    };
};
var submitE = function (tx) {
    return Control_Bind.bind(Contract_Monad.bindContract)(Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Serialization.convertTransaction(Data_Newtype.unwrap()(tx))))(function (cslTx) {
        var txHash = Hashing.transactionHash(cslTx);
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Log["logDebug'"](Contract_Monad.monadLoggerContract)("Pre-calculated tx hash: " + Data_Show.show(Types_Transaction.showTransactionHash)(txHash)))(function () {
            var txCborBytes = Data_Newtype.wrap()(Serialization.toBytes(Untagged_Union.asOneOf()(cslTx)));
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM.submitTxOgmios(Data_Newtype.unwrap()(txHash))(txCborBytes)))(function (result) {
                return Control_Applicative.pure(Contract_Monad.applicativeContract)((function () {
                    if (result instanceof QueryM_Ogmios.SubmitTxSuccess) {
                        return Data_Either.Right.create(Data_Newtype.wrap()(result.value0));
                    };
                    if (result instanceof QueryM_Ogmios.SubmitFail) {
                        return new Data_Either.Left(result.value0);
                    };
                    throw new Error("Failed pattern match at Contract.Transaction (line 296, column 10 - line 298, column 33): " + [ result.constructor.name ]);
                })());
            });
        });
    });
};
var submit = function (tx) {
    return Control_Bind.bind(Contract_Monad.bindContract)(submitE(tx))(function (result) {
        if (result instanceof Data_Either.Right) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(result.value0);
        };
        if (result instanceof Data_Either.Left) {
            return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("`submit` call failed. Error from Ogmios: " + Data_Show.show(Data_Show.showArray(Aeson.showAeson))(result.value0)));
        };
        throw new Error("Failed pattern match at Contract.Transaction (line 278, column 3 - line 281, column 63): " + [ result.constructor.name ]);
    });
};
var signTransaction = function ($40) {
    return Contract_Monad.wrapContract(QueryM_Sign.signTransaction($40));
};
var signTransaction$prime = (function () {
    var $41 = Data_Functor.map(Contract_Monad.functorContract)(Data_Functor.map(Data_Maybe.functorMaybe)(BalancedSignedTransaction));
    var $42 = Data_Newtype.unwrap();
    return function ($43) {
        return $41(signTransaction($42($43)));
    };
})();
var scriptOutputToTransactionOutput = function (networkId) {
    var $44 = TxOutput.scriptOutputToTransactionOutput(networkId);
    return function ($45) {
        return Plutus_Conversion.toPlutusTxOutput($44($45));
    };
};
var reindexSpentScriptRedeemers = function (balancedTx) {
    var $46 = ReindexRedeemers.reindexSpentScriptRedeemers(balancedTx);
    return function ($47) {
        return Contract_Monad.wrapContract($46($47));
    };
};
var getTxFinalFee = (function () {
    var $48 = Data_Newtype.unwrap();
    var $49 = Data_Lens_Getter.view((function () {
        var $52 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
        var $53 = Cardano_Types_Transaction["_fee"](Data_Lens_Internal_Forget.strongForget);
        return function ($54) {
            return $52($53($54));
        };
    })());
    var $50 = Data_Newtype.unwrap();
    return function ($51) {
        return $48($49($50($51)));
    };
})();
var getTxByHash = (function () {
    var $55 = Data_Newtype.unwrap();
    return function ($56) {
        return Contract_Monad.wrapContract(QueryM_GetTxByHash.getTxByHash($55($56)));
    };
})();
var calculateMinFee = (function () {
    var $57 = Data_Functor.map(Contract_Monad.functorContract)((function () {
        var $59 = Control_Applicative.pure(Data_Either.applicativeEither);
        return function ($60) {
            return $59(Plutus_Conversion.toPlutusCoin($60));
        };
    })());
    return function ($58) {
        return $57(Contract_Monad.wrapContract(QueryM_MinFee.calculateMinFee($58)));
    };
})();
var calculateMinFeeM = (function () {
    var $61 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
    return function ($62) {
        return $61(calculateMinFee($62));
    };
})();
var balanceTxsWithAddresses = function (dictTraversable) {
    return function (ownAddrs) {
        return function (unbalancedTxs) {
            var uutxToTx = (function () {
                var $63 = Data_Newtype.unwrap();
                var $64 = Data_Newtype.unwrap();
                return function ($65) {
                    return (function (v) {
                        return v.transaction;
                    })($63((function (v) {
                        return v.unbalancedTx;
                    })($64($65))));
                };
            })();
            var unlockAllOnError = function (f) {
                return Control_Monad_Error_Class.catchError(Contract_Monad.monadErrorErrorContract)(f)(function (e) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Data_Foldable.for_(Contract_Monad.applicativeContract)(dictTraversable.Foldable1())(unbalancedTxs)((function () {
                        var $66 = Types_UsedTxOuts.unlockTransactionInputs(Control_Monad_Reader_Trans.monadAskReaderT(Contract_Monad.monadContract))(Control_Monad_Reader_Trans.monadEffectReader(Contract_Monad.monadEffectContract));
                        return function ($67) {
                            return withUsedTxouts($66(uutxToTx($67)));
                        };
                    })()))(function () {
                        return Control_Monad_Error_Class.throwError(Contract_Monad.monadThrowErrorContract)(e);
                    });
                });
            };
            var balanceAndLock = function (unbalancedTx) {
                return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
                    var $68 = Data_Newtype.unwrap();
                    return function ($69) {
                        return (function (v) {
                            return v.networkId;
                        })((function (v) {
                            return v.config;
                        })($68($69)));
                    };
                })()))(function (networkId) {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(BalanceTx_Error.showBalanceTxError)(Contract_Monad.wrapContract(BalanceTx.balanceTxWithAddress(Data_Functor.map(Data_Functor.functorArray)(Plutus_Conversion_Address.fromPlutusAddress(networkId))(ownAddrs))(unbalancedTx))))(function (balancedTx) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Data_Functor["void"](Contract_Monad.functorContract)(withUsedTxouts(Types_UsedTxOuts.lockTransactionInputs(Control_Monad_Reader_Trans.monadAskReaderT(Contract_Monad.monadContract))(Control_Monad_Reader_Trans.monadErrorReaderT(Contract_Monad.monadErrorErrorContract))(Control_Monad_Reader_Trans.monadEffectReader(Contract_Monad.monadEffectContract))(Data_Newtype.unwrap()(balancedTx)))))(function () {
                            return Control_Applicative.pure(Contract_Monad.applicativeContract)(balancedTx);
                        });
                    });
                });
            };
            return unlockAllOnError(Data_Traversable.traverse(dictTraversable)(Contract_Monad.applicativeContract)(balanceAndLock)(unbalancedTxs));
        };
    };
};
var balanceTxsWithAddress = function (dictTraversable) {
    return function (ownAddr) {
        return balanceTxsWithAddresses(dictTraversable)([ ownAddr ]);
    };
};
var balanceTxs = function (dictTraversable) {
    return function (unbalancedTxs) {
        var walletAddresses = Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM.getWalletAddresses))(function (mbAddrs) {
            return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableMaybe)(mbAddrs)(function (addrs) {
                return Data_Traversable["for"](Contract_Monad.applicativeContract)(Data_Traversable.traversableArray)(addrs)((function () {
                    var $70 = Contract_Monad.liftedM("getWalletAddress: failed to deserialize address");
                    var $71 = Control_Applicative.pure(QueryM.applicativeQueryMExtended(Effect_Aff.applicativeAff));
                    return function ($72) {
                        return $70(Contract_Monad.wrapContract($71(Plutus_Conversion_Address.toPlutusAddress($72))));
                    };
                })());
            });
        });
        return Control_Bind.bind(Contract_Monad.bindContract)(walletAddresses)(function (mbOwnAddrs) {
            if (mbOwnAddrs instanceof Data_Maybe.Nothing) {
                return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Failed to get own Address"));
            };
            if (mbOwnAddrs instanceof Data_Maybe.Just) {
                return balanceTxsWithAddresses(dictTraversable)(mbOwnAddrs.value0)(unbalancedTxs);
            };
            throw new Error("Failed pattern match at Contract.Transaction (line 484, column 3 - line 488, column 53): " + [ mbOwnAddrs.constructor.name ]);
        });
    };
};
var withBalancedTxs = withTransactions(Data_Traversable.traversableArray)(balanceTxs(Data_Traversable.traversableArray))(Data_Newtype.unwrap());
var balanceTxWithAddress = function (ownAddresses) {
    return function (tx) {
        return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractEnvContra)((function () {
            var $73 = Data_Newtype.unwrap();
            return function ($74) {
                return (function (v) {
                    return v.networkId;
                })((function (v) {
                    return v.config;
                })($73($74)));
            };
        })()))(function (networkId) {
            return Contract_Monad.wrapContract(BalanceTx.balanceTxWithAddress(Data_Functor.map(Data_Functor.functorArray)(Plutus_Conversion_Address.fromPlutusAddress(networkId))(ownAddresses))(tx));
        });
    };
};
var balanceTx = function ($75) {
    return Contract_Monad.wrapContract(BalanceTx.balanceTx($75));
};
var balanceTxM = (function () {
    var $76 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
    return function ($77) {
        return $76(balanceTx($77));
    };
})();
var withBalancedTx = withSingleTransaction((function () {
    var $78 = Contract_Monad.liftedE(BalanceTx_Error.showBalanceTxError);
    return function ($79) {
        return $78(balanceTx($79));
    };
})())(Data_Newtype.unwrap());
var balanceAndSignTxs = function (txs) {
    return Control_Bind.bind(Contract_Monad.bindContract)(balanceTxs(Data_Traversable.traversableArray)(txs))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)((function () {
        var $80 = Contract_Monad.liftedM("error signing a transaction");
        return function ($81) {
            return $80(signTransaction$prime($81));
        };
    })()));
};
var internalBalanceAndSignTx = function (tx) {
    return Control_Bind.bind(Contract_Monad.bindContract)(balanceAndSignTxs([ tx ]))(function (v) {
        if (v.length === 1) {
            return Control_Applicative.pure(Contract_Monad.applicativeContract)(v[0]);
        };
        return Effect_Class.liftEffect(Contract_Monad.monadEffectContract)(Effect_Exception["throw"]("Unexpected internal error during transaction signing"));
    });
};
var withBalancedAndSignedTx = withSingleTransaction(internalBalanceAndSignTx)(Data_Newtype.unwrap());
var withBalancedAndSignedTxs = withTransactions(Data_Traversable.traversableArray)(balanceAndSignTxs)(Data_Newtype.unwrap());
var balanceAndSignTxE = (function () {
    var $82 = Control_Monad_Error_Class["try"](Contract_Monad.monadErrorErrorContract);
    return function ($83) {
        return $82(internalBalanceAndSignTx($83));
    };
})();
var balanceAndSignTx = function (dictWarn) {
    return function (tx) {
        return Data_Functor.map(Contract_Monad.functorContract)(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(internalBalanceAndSignTx(tx));
    };
};
var awaitTxConfirmedWithTimeoutSlots = function (timeout) {
    var $84 = QueryM_AwaitTxConfirmed.awaitTxConfirmedWithTimeoutSlots(timeout);
    var $85 = Data_Newtype.unwrap();
    return function ($86) {
        return Contract_Monad.wrapContract($84($85($86)));
    };
};
var awaitTxConfirmedWithTimeout = function (timeout) {
    var $87 = QueryM_AwaitTxConfirmed.awaitTxConfirmedWithTimeout(timeout);
    var $88 = Data_Newtype.unwrap();
    return function ($89) {
        return Contract_Monad.wrapContract($87($88($89)));
    };
};
var awaitTxConfirmed = (function () {
    var $90 = Data_Newtype.unwrap();
    return function ($91) {
        return Contract_Monad.wrapContract(QueryM_AwaitTxConfirmed.awaitTxConfirmed($90($91)));
    };
})();
module.exports = {
    BalancedSignedTransaction: BalancedSignedTransaction,
    awaitTxConfirmed: awaitTxConfirmed,
    awaitTxConfirmedWithTimeout: awaitTxConfirmedWithTimeout,
    awaitTxConfirmedWithTimeoutSlots: awaitTxConfirmedWithTimeoutSlots,
    balanceAndSignTx: balanceAndSignTx,
    balanceAndSignTxs: balanceAndSignTxs,
    balanceAndSignTxE: balanceAndSignTxE,
    balanceTx: balanceTx,
    balanceTxWithAddress: balanceTxWithAddress,
    balanceTxM: balanceTxM,
    calculateMinFee: calculateMinFee,
    calculateMinFeeM: calculateMinFeeM,
    getTxByHash: getTxByHash,
    getTxFinalFee: getTxFinalFee,
    reindexSpentScriptRedeemers: reindexSpentScriptRedeemers,
    scriptOutputToTransactionOutput: scriptOutputToTransactionOutput,
    signTransaction: signTransaction,
    submit: submit,
    submitE: submitE,
    withBalancedTxs: withBalancedTxs,
    withBalancedTx: withBalancedTx,
    withBalancedAndSignedTxs: withBalancedAndSignedTxs,
    withBalancedAndSignedTx: withBalancedAndSignedTx,
    balanceTxsWithAddress: balanceTxsWithAddress,
    genericBalancedSignedTran: genericBalancedSignedTran,
    newtypeBalancedSignedTran: newtypeBalancedSignedTran,
    eqBalancedSignedTransacti: eqBalancedSignedTransacti,
    encodeAesonBalancedSigned: encodeAesonBalancedSigned,
    showBalancedSignedTransac: showBalancedSignedTransac,
    ScriptAll: Cardano_Types_NativeScript.ScriptAll,
    ScriptAny: Cardano_Types_NativeScript.ScriptAny,
    ScriptNOfK: Cardano_Types_NativeScript.ScriptNOfK,
    ScriptPubkey: Cardano_Types_NativeScript.ScriptPubkey,
    TimelockExpiry: Cardano_Types_NativeScript.TimelockExpiry,
    TimelockStart: Cardano_Types_NativeScript.TimelockStart,
    NativeScriptRef: Cardano_Types_ScriptRef.NativeScriptRef,
    PlutusScriptRef: Cardano_Types_ScriptRef.PlutusScriptRef,
    AuxiliaryData: Cardano_Types_Transaction.AuxiliaryData,
    AuxiliaryDataHash: Cardano_Types_Transaction.AuxiliaryDataHash,
    GenesisKeyDelegation: Cardano_Types_Transaction.GenesisKeyDelegation,
    MoveInstantaneousRewardsCert: Cardano_Types_Transaction.MoveInstantaneousRewardsCert,
    PoolRegistration: Cardano_Types_Transaction.PoolRegistration,
    PoolRetirement: Cardano_Types_Transaction.PoolRetirement,
    StakeDelegation: Cardano_Types_Transaction.StakeDelegation,
    StakeDeregistration: Cardano_Types_Transaction.StakeDeregistration,
    StakeRegistration: Cardano_Types_Transaction.StakeRegistration,
    CostModel: Cardano_Types_Transaction.CostModel,
    Costmdls: Cardano_Types_Transaction.Costmdls,
    Ed25519Signature: Cardano_Types_Transaction.Ed25519Signature,
    Epoch: Cardano_Types_Transaction.Epoch,
    GenesisHash: Cardano_Types_Transaction.GenesisHash,
    Mint: Cardano_Types_Transaction.Mint,
    HashNonce: Cardano_Types_Transaction.HashNonce,
    IdentityNonce: Cardano_Types_Transaction.IdentityNonce,
    ProposedProtocolParameterUpdates: Cardano_Types_Transaction.ProposedProtocolParameterUpdates,
    PublicKey: Cardano_Types_Transaction.PublicKey,
    RequiredSigner: Cardano_Types_Transaction.RequiredSigner,
    ScriptDataHash: Cardano_Types_Transaction.ScriptDataHash,
    Transaction: Cardano_Types_Transaction.Transaction,
    TransactionWitnessSet: Cardano_Types_Transaction.TransactionWitnessSet,
    TxBody: Cardano_Types_Transaction.TxBody,
    Vkey: Cardano_Types_Transaction.Vkey,
    Vkeywitness: Cardano_Types_Transaction.Vkeywitness,
    "_auxiliaryData": Cardano_Types_Transaction["_auxiliaryData"],
    "_auxiliaryDataHash": Cardano_Types_Transaction["_auxiliaryDataHash"],
    "_body": Cardano_Types_Transaction["_body"],
    "_bootstraps": Cardano_Types_Transaction["_bootstraps"],
    "_certs": Cardano_Types_Transaction["_certs"],
    "_collateral": Cardano_Types_Transaction["_collateral"],
    "_fee": Cardano_Types_Transaction["_fee"],
    "_inputs": Cardano_Types_Transaction["_inputs"],
    "_isValid": Cardano_Types_Transaction["_isValid"],
    "_mint": Cardano_Types_Transaction["_mint"],
    "_nativeScripts": Cardano_Types_Transaction["_nativeScripts"],
    "_networkId": Cardano_Types_Transaction["_networkId"],
    "_outputs": Cardano_Types_Transaction["_outputs"],
    "_plutusData": Cardano_Types_Transaction["_plutusData"],
    "_plutusScripts": Cardano_Types_Transaction["_plutusScripts"],
    "_requiredSigners": Cardano_Types_Transaction["_requiredSigners"],
    "_scriptDataHash": Cardano_Types_Transaction["_scriptDataHash"],
    "_ttl": Cardano_Types_Transaction["_ttl"],
    "_update": Cardano_Types_Transaction["_update"],
    "_validityStartInterval": Cardano_Types_Transaction["_validityStartInterval"],
    "_vkeys": Cardano_Types_Transaction["_vkeys"],
    "_withdrawals": Cardano_Types_Transaction["_withdrawals"],
    "_witnessSet": Cardano_Types_Transaction["_witnessSet"],
    TransactionOutput: Plutus_Types_Transaction.TransactionOutput,
    TransactionOutputWithRefScript: Plutus_Types_Transaction.TransactionOutputWithRefScript,
    TransactionUnspentOutput: Plutus_Types_TransactionUnspentOutput.TransactionUnspentOutput,
    lookupTxHash: Plutus_Types_TransactionUnspentOutput.lookupTxHash,
    mkTxUnspentOut: Plutus_Types_TransactionUnspentOutput.mkTxUnspentOut,
    ClientDecodeJsonError: QueryM.ClientDecodeJsonError,
    ClientEncodingError: QueryM.ClientEncodingError,
    ClientHttpError: QueryM.ClientHttpError,
    ClientHttpResponseError: QueryM.ClientHttpResponseError,
    ClientOtherError: QueryM.ClientOtherError,
    CannotGetTxOutRefIndexForRedeemer: ReindexRedeemers.CannotGetTxOutRefIndexForRedeemer,
    NoOutputDatum: Types_OutputDatum.NoOutputDatum,
    OutputDatum: Types_OutputDatum.OutputDatum,
    OutputDatumHash: Types_OutputDatum.OutputDatumHash,
    outputDatumDataHash: Types_OutputDatum.outputDatumDataHash,
    outputDatumDatum: Types_OutputDatum.outputDatumDatum,
    CannotConvertPOSIXTimeRange: Types_ScriptLookups.CannotConvertPOSIXTimeRange,
    CannotConvertPaymentPubKeyHash: Types_ScriptLookups.CannotConvertPaymentPubKeyHash,
    CannotGetMintingPolicyScriptIndex: Types_ScriptLookups.CannotGetMintingPolicyScriptIndex,
    CannotGetValidatorHashFromAddress: Types_ScriptLookups.CannotGetValidatorHashFromAddress,
    CannotHashDatum: Types_ScriptLookups.CannotHashDatum,
    CannotHashMintingPolicy: Types_ScriptLookups.CannotHashMintingPolicy,
    CannotHashValidator: Types_ScriptLookups.CannotHashValidator,
    CannotMakeValue: Types_ScriptLookups.CannotMakeValue,
    CannotQueryDatum: Types_ScriptLookups.CannotQueryDatum,
    CannotSatisfyAny: Types_ScriptLookups.CannotSatisfyAny,
    DatumNotFound: Types_ScriptLookups.DatumNotFound,
    DatumWrongHash: Types_ScriptLookups.DatumWrongHash,
    MintingPolicyHashNotCurrencySymbol: Types_ScriptLookups.MintingPolicyHashNotCurrencySymbol,
    MintingPolicyNotFound: Types_ScriptLookups.MintingPolicyNotFound,
    MkTypedTxOutFailed: Types_ScriptLookups.MkTypedTxOutFailed,
    ModifyTx: Types_ScriptLookups.ModifyTx,
    OwnPubKeyAndStakeKeyMissing: Types_ScriptLookups.OwnPubKeyAndStakeKeyMissing,
    TxOutRefNotFound: Types_ScriptLookups.TxOutRefNotFound,
    TxOutRefWrongType: Types_ScriptLookups.TxOutRefWrongType,
    TypeCheckFailed: Types_ScriptLookups.TypeCheckFailed,
    TypedTxOutHasNoDatumHash: Types_ScriptLookups.TypedTxOutHasNoDatumHash,
    TypedValidatorMissing: Types_ScriptLookups.TypedValidatorMissing,
    ValidatorHashNotFound: Types_ScriptLookups.ValidatorHashNotFound,
    mkUnbalancedTx: Types_ScriptLookups.mkUnbalancedTx,
    PlutusV1: Types_Scripts.PlutusV1,
    PlutusV2: Types_Scripts.PlutusV2,
    plutusV1Script: Types_Scripts.plutusV1Script,
    plutusV2Script: Types_Scripts.plutusV2Script,
    DataHash: Types_Transaction.DataHash,
    TransactionHash: Types_Transaction.TransactionHash,
    TransactionInput: Types_Transaction.TransactionInput,
    GeneralTransactionMetadata: Types_TransactionMetadata.GeneralTransactionMetadata,
    Bytes: Types_TransactionMetadata.Bytes,
    Int: Types_TransactionMetadata.Int,
    MetadataList: Types_TransactionMetadata.MetadataList,
    MetadataMap: Types_TransactionMetadata.MetadataMap,
    Text: Types_TransactionMetadata.Text,
    TransactionMetadatumLabel: Types_TransactionMetadata.TransactionMetadatumLabel,
    ScriptOutput: Types_UnbalancedTransaction.ScriptOutput,
    UnbalancedTx: Types_UnbalancedTransaction.UnbalancedTx,
    "_transaction": Types_UnbalancedTransaction["_transaction"],
    "_utxoIndex": Types_UnbalancedTransaction["_utxoIndex"],
    emptyUnbalancedTx: Types_UnbalancedTransaction.emptyUnbalancedTx
};
