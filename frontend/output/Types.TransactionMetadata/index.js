// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Helpers = require("../Helpers/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Int = require("../Types.Int/index.js");
var TransactionMetadatumLabel = function (x) {
    return x;
};
var MetadataMap = (function () {
    function MetadataMap(value0) {
        this.value0 = value0;
    };
    MetadataMap.create = function (value0) {
        return new MetadataMap(value0);
    };
    return MetadataMap;
})();
var MetadataList = (function () {
    function MetadataList(value0) {
        this.value0 = value0;
    };
    MetadataList.create = function (value0) {
        return new MetadataList(value0);
    };
    return MetadataList;
})();
var Int = (function () {
    function Int(value0) {
        this.value0 = value0;
    };
    Int.create = function (value0) {
        return new Int(value0);
    };
    return Int;
})();
var Bytes = (function () {
    function Bytes(value0) {
        this.value0 = value0;
    };
    Bytes.create = function (value0) {
        return new Bytes(value0);
    };
    return Bytes;
})();
var Text = (function () {
    function Text(value0) {
        this.value0 = value0;
    };
    Text.create = function (value0) {
        return new Text(value0);
    };
    return Text;
})();
var GeneralTransactionMetadata = function (x) {
    return x;
};
var showTransactionMetadatumL = {
    show: function (v) {
        return Helpers.showWithParens(Data_BigInt.showBigInt)("TransactionMetadatumLabel")(v);
    }
};
var ordTransactionMetadatumLa = Data_BigInt.ordBigInt;
var semigroupGeneralTransacti = {
    append: function (v) {
        return function (v1) {
            return GeneralTransactionMetadata(Helpers.appendRightMap(ordTransactionMetadatumLa)(v)(v1));
        };
    }
};
var newtypeTransactionMetadat = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeGeneralTransaction = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidGeneralTransactionM = {
    mempty: Data_Map_Internal.empty,
    Semigroup0: function () {
        return semigroupGeneralTransacti;
    }
};
var genericTransactionMetadat = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new MetadataMap(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new MetadataList(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new Int(x.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new Bytes(x.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
            return new Text(x.value0.value0.value0.value0);
        };
        throw new Error("Failed pattern match at Types.TransactionMetadata (line 74, column 1 - line 74, column 47): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof MetadataMap) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof MetadataList) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof Int) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
        };
        if (x instanceof Bytes) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
        };
        if (x instanceof Text) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
        };
        throw new Error("Failed pattern match at Types.TransactionMetadata (line 74, column 1 - line 74, column 47): " + [ x.constructor.name ]);
    }
};
var showTransactionMetadatum = {
    show: function (x) {
        return Data_Show_Generic.genericShow(genericTransactionMetadat)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showTransactionMetadatum)(showTransactionMetadatum)))({
            reflectSymbol: function () {
                return "MetadataMap";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showTransactionMetadatum)))({
            reflectSymbol: function () {
                return "MetadataList";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Int.showInt))({
            reflectSymbol: function () {
                return "Int";
            }
        }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
            reflectSymbol: function () {
                return "Bytes";
            }
        }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
            reflectSymbol: function () {
                return "Text";
            }
        }))))))(x);
    }
};
var genericTransactionMetadat1 = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericGeneralTransaction = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showGeneralTransactionMet = {
    show: Data_Show_Generic.genericShow(genericGeneralTransaction)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showTransactionMetadatumL)(showTransactionMetadatum)))({
        reflectSymbol: function () {
            return "GeneralTransactionMetadata";
        }
    }))
};
var eqTransactionMetadatumLab = Data_BigInt.eqBigInt;
var eqTransactionMetadatum = {
    eq: function (x) {
        return function (y) {
            if (x instanceof MetadataMap && y instanceof MetadataMap) {
                return Data_Eq.eq(Data_Map_Internal.eqMap(eqTransactionMetadatum)(eqTransactionMetadatum))(x.value0)(y.value0);
            };
            if (x instanceof MetadataList && y instanceof MetadataList) {
                return Data_Eq.eq(Data_Eq.eqArray(eqTransactionMetadatum))(x.value0)(y.value0);
            };
            if (x instanceof Int && y instanceof Int) {
                return Data_Eq.eq(Types_Int.eqInt)(x.value0)(y.value0);
            };
            if (x instanceof Bytes && y instanceof Bytes) {
                return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
            };
            if (x instanceof Text && y instanceof Text) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var ordTransactionMetadatum = {
    compare: function (x) {
        return function (y) {
            if (x instanceof MetadataMap && y instanceof MetadataMap) {
                return Data_Ord.compare(Data_Map_Internal.ordMap(ordTransactionMetadatum)(ordTransactionMetadatum))(x.value0)(y.value0);
            };
            if (x instanceof MetadataMap) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof MetadataMap) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof MetadataList && y instanceof MetadataList) {
                return Data_Ord.compare(Data_Ord.ordArray(ordTransactionMetadatum))(x.value0)(y.value0);
            };
            if (x instanceof MetadataList) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof MetadataList) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Int && y instanceof Int) {
                return Data_Ord.compare(Types_Int.ordInt)(x.value0)(y.value0);
            };
            if (x instanceof Int) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Int) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Bytes && y instanceof Bytes) {
                return Data_Ord.compare(Types_ByteArray.ordByteArray)(x.value0)(y.value0);
            };
            if (x instanceof Bytes) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Bytes) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Text && y instanceof Text) {
                return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Types.TransactionMetadata (line 73, column 1 - line 73, column 41): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqTransactionMetadatum;
    }
};
var eqGeneralTransactionMetad = Data_Map_Internal.eqMap(eqTransactionMetadatumLab)(eqTransactionMetadatum);
var encodeAesonTransactionMet = {
    "encodeAeson'": function (v) {
        if (v instanceof MetadataMap) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonAeson)("MetadataMap")(Helpers.encodeMap(encodeAesonTransactionMet)(encodeAesonTransactionMet)(v.value0)));
        };
        if (v instanceof MetadataList) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonArray(encodeAesonTransactionMet))("MetadataList")(v.value0));
        };
        if (v instanceof Int) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_Int.encodeAesonInt)("Int")(v.value0));
        };
        if (v instanceof Bytes) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Types_ByteArray.encodeAesonByteArray)("Bytes")(v.value0));
        };
        if (v instanceof Text) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonString)("Text")(v.value0));
        };
        throw new Error("Failed pattern match at Types.TransactionMetadata (line 80, column 18 - line 85, column 62): " + [ v.constructor.name ]);
    }
};
var encodeAesonTransactionMet1 = Aeson.encodeAesonBigInt;
var encodeAesonGeneralTransac = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(encodeAesonTransactionMet1)(encodeAesonTransactionMet)(v));
    }
};
module.exports = {
    GeneralTransactionMetadata: GeneralTransactionMetadata,
    MetadataMap: MetadataMap,
    MetadataList: MetadataList,
    Int: Int,
    Bytes: Bytes,
    Text: Text,
    TransactionMetadatumLabel: TransactionMetadatumLabel,
    newtypeGeneralTransaction: newtypeGeneralTransaction,
    eqGeneralTransactionMetad: eqGeneralTransactionMetad,
    genericGeneralTransaction: genericGeneralTransaction,
    showGeneralTransactionMet: showGeneralTransactionMet,
    encodeAesonGeneralTransac: encodeAesonGeneralTransac,
    semigroupGeneralTransacti: semigroupGeneralTransacti,
    monoidGeneralTransactionM: monoidGeneralTransactionM,
    newtypeTransactionMetadat: newtypeTransactionMetadat,
    eqTransactionMetadatumLab: eqTransactionMetadatumLab,
    ordTransactionMetadatumLa: ordTransactionMetadatumLa,
    encodeAesonTransactionMet1: encodeAesonTransactionMet1,
    genericTransactionMetadat1: genericTransactionMetadat1,
    showTransactionMetadatumL: showTransactionMetadatumL,
    eqTransactionMetadatum: eqTransactionMetadatum,
    ordTransactionMetadatum: ordTransactionMetadatum,
    genericTransactionMetadat: genericTransactionMetadat,
    showTransactionMetadatum: showTransactionMetadatum,
    encodeAesonTransactionMet: encodeAesonTransactionMet
};
