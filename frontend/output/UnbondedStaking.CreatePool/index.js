// Generated by purs version 0.14.5
"use strict";
var Contract_Address = require("../Contract.Address/index.js");
var Contract_Log = require("../Contract.Log/index.js");
var Contract_Monad = require("../Contract.Monad/index.js");
var Contract_Prelude = require("../Contract.Prelude/index.js");
var Contract_ScriptLookups = require("../Contract.ScriptLookups/index.js");
var Contract_Transaction = require("../Contract.Transaction/index.js");
var Contract_Utxos = require("../Contract.Utxos/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var FromData = require("../FromData/index.js");
var IsData = require("../IsData/index.js");
var Plutus_Types_Address = require("../Plutus.Types.Address/index.js");
var Plutus_Types_Transaction = require("../Plutus.Types.Transaction/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var QueryM = require("../QueryM/index.js");
var Scripts = require("../Scripts/index.js");
var Scripts_ListNFT = require("../Scripts.ListNFT/index.js");
var Scripts_PoolValidator = require("../Scripts.PoolValidator/index.js");
var Scripts_StateNFT = require("../Scripts.StateNFT/index.js");
var Settings = require("../Settings/index.js");
var ToData = require("../ToData/index.js");
var Types = require("../Types/index.js");
var Types_Datum = require("../Types.Datum/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_ScriptLookups = require("../Types.ScriptLookups/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TxConstraints = require("../Types.TxConstraints/index.js");
var UnbondedStaking_Types = require("../UnbondedStaking.Types/index.js");
var UnbondedStaking_Utils = require("../UnbondedStaking.Utils/index.js");
var Utils = require("../Utils/index.js");
var getUnbondedPoolsContract = function (addrStr) {
    return function (ibp) {
        var getValue = (function () {
            var $7 = Data_Newtype.unwrap();
            var $8 = Data_Newtype.unwrap();
            return function ($9) {
                return (function (v) {
                    return v.amount;
                })($7((function (v) {
                    return v.output;
                })($8($9))));
            };
        })();
        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getUnbondedPoolsContract) Could not get pool UTxOs")(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Utxos.utxosAt)(Utils.addressFromBech32(addrStr))))(function (poolUtxos) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("(getUnbondedPoolContract) UTxOs at pool address: ")(Data_Show.show(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))(poolUtxos)))(function () {
                return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("(getUnbondedPoolsContract) Could not get bonded staking token name"))(Settings.unbondedStakingTokenName))(function (stateTokenTn) {
                    var getStateTokenCs = (function () {
                        var $10 = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst);
                        var $11 = Data_Array.filter(function ($13) {
                            return (function (v) {
                                return Data_Eq.eq(Types_TokenName.eqTokenName)(v)(stateTokenTn);
                            })(Data_Tuple.fst(Data_Tuple.snd($13)));
                        });
                        return function ($12) {
                            return Data_Array.head($10($11(Plutus_Types_Value.flattenValue($12))));
                        };
                    })();
                    var addListTokenCs = function (stateNftCs) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(stateNftCs)))(function (listPolicy) {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Error_Class.liftMaybe(Contract_Monad.monadThrowErrorContract)(Effect_Exception.error("Could not obtain currency symbol from list policy"))(Scripts.scriptCurrencySymbol(listPolicy)))(function (listNftCs) {
                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Tuple.Tuple(stateNftCs, listNftCs));
                            });
                        });
                    };
                    return Control_Bind.bind(Contract_Monad.bindContract)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Contract_Monad.applicativeContract)(addListTokenCs)(Data_Array.mapMaybe(function ($14) {
                        return getStateTokenCs(getValue($14));
                    })(Data_Array.fromFoldable(Data_Map_Internal.foldableMap)(poolUtxos))))(function (symbols) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Applicative.when(Contract_Monad.applicativeContract)(Data_Array.length(symbols) > 1)(Contract_Log["logWarn'"](Contract_Monad.monadLoggerContract)("(getUnbondedPoolsContract) More than one pool with the given address")))(function () {
                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("(getUnbondedPoolsContract) Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
                                return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                                    return UnbondedStaking_Utils.mkUnbondedPoolParams(adminPkh)(v.value0)(v.value1)(ibp);
                                })(symbols));
                            });
                        });
                    });
                });
            });
        });
    };
};
var createUnbondedPoolContract = function (iup) {
    return Utils.repeatUntilConfirmed()()(Settings.confirmationTimeout)(Settings.submissionAttempts)(Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get admin's pkh")(Contract_Address.ownPaymentPubKeyHash))(function (adminPkh) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Types_PubKeyHash.showPaymentPubKeyHash)("createUnbondedPoolContract: Admin PaymentPubKeyHash")(adminPkh))(function () {
            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get wallet Address")(Contract_Address.getWalletAddress))(function (adminAddr) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Control_Bind.bindFlipped(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createUnbondedPoolContract: User Address"))(Contract_Address.addressToBech32(adminAddr)))(function () {
                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot get user Utxos")(Contract_Utxos.utxosAt(adminAddr)))(function (adminUtxos) {
                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Could not get head UTXO")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Array.head(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(adminUtxos)))))(function (txOutRef) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Map_Internal.showMap(Types_Transaction.showTransactionInput)(Plutus_Types_Transaction.showTransactionOutputWith))("createUnbondedPoolContract: Admin Utxos")(adminUtxos))(function () {
                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_StateNFT.mkStateNFTPolicy(Types.Unbonded.value)(txOutRef)))(function (statePolicy) {
                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot get CurrencySymbol from /state NFT")(Scripts.scriptCurrencySymbol(statePolicy)))(function (stateNftCs) {
                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(QueryM.showClientError)(Scripts_ListNFT.mkListNFTPolicy(Types.Unbonded.value)(stateNftCs)))(function (listPolicy) {
                                            return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot get CurrencySymbol from /state NFT")(Scripts.scriptCurrencySymbol(listPolicy)))(function (assocListCs) {
                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("createUnbondedPoolContract: Cannot create TokenName")(Settings.unbondedStakingTokenName))(function (tokenName) {
                                                    var unbondedPoolParams = UnbondedStaking_Utils.mkUnbondedPoolParams(adminPkh)(stateNftCs)(assocListCs)(iup);
                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad["liftedE'"]("createUnbondedPoolContract: Cannot create validator")(Scripts_PoolValidator.mkUnbondedPoolValidator(unbondedPoolParams)))(function (validator) {
                                                        var valHash = Scripts.validatorHash(validator);
                                                        var mintValue = Plutus_Types_Value.singleton(stateNftCs)(tokenName)(Data_Semiring.one(Data_BigInt.semiringBigInt));
                                                        return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Address.addressToBech32(Plutus_Types_Address.scriptHashAddress(valHash)))(function (address) {
                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Utils.logInfo_(Data_Show.showString)("createUnbondedPoolContract: UnbondedPool Validator's address")(address))(function () {
                                                                var unbondedStateDatum = Types_Datum.Datum(ToData.toData(UnbondedStaking_Types.toDataUnbondedStakingDatu)(new UnbondedStaking_Types.StateDatum({
                                                                    maybeEntryName: Data_Maybe.Nothing.value,
                                                                    open: true
                                                                })));
                                                                var lookup = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_ScriptLookups.monoidScriptLookups)([ Types_ScriptLookups.mintingPolicy(statePolicy), Types_ScriptLookups.validator(validator), Types_ScriptLookups.unspentOutputs(adminUtxos) ]);
                                                                var constraints = Contract_Prelude.mconcat(Data_Foldable.foldableArray)(Types_TxConstraints.monoidTxConstraints)([ Utils.mustPayToScript(valHash)(unbondedStateDatum)(mintValue), Types_TxConstraints.mustMintValue(mintValue), Types_TxConstraints.mustSpendPubKeyOutput(txOutRef) ]);
                                                                return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(IsData.isData(FromData.fromDataUnit)(ToData.toDataUnit))(lookup)(constraints)))(function (unattachedBalancedTx) {
                                                                    return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("createUnbondedPoolContract: Cannot balance, reindex redeemers, attach /datums redeemers and sign")(Contract_Transaction.balanceAndSignTx()(unattachedBalancedTx)))(function (signedTx) {
                                                                        return Control_Applicative.pure(Contract_Monad.applicativeContract)({
                                                                            signedTx: signedTx,
                                                                            unbondedPoolParams: unbondedPoolParams,
                                                                            address: address
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }));
};
module.exports = {
    createUnbondedPoolContract: createUnbondedPoolContract,
    getUnbondedPoolsContract: getUnbondedPoolsContract
};
