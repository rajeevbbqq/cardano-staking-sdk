// Generated by purs version 0.14.5
"use strict";
var Data_Lens_Common = require("../Data.Lens.Common/index.js");
var Data_Lens_Fold = require("../Data.Lens.Fold/index.js");
var Data_Lens_Getter = require("../Data.Lens.Getter/index.js");
var Data_Lens_Grate = require("../Data.Lens.Grate/index.js");
var Data_Lens_Iso = require("../Data.Lens.Iso/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Lens_Prism = require("../Data.Lens.Prism/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Lens_Traversal = require("../Data.Lens.Traversal/index.js");
var Data_Lens_Types = require("../Data.Lens.Types/index.js");
module.exports = {
    "_1": Data_Lens_Common["_1"],
    "_2": Data_Lens_Common["_2"],
    "_Just": Data_Lens_Common["_Just"],
    "_Left": Data_Lens_Common["_Left"],
    "_Nothing": Data_Lens_Common["_Nothing"],
    "_Right": Data_Lens_Common["_Right"],
    first: Data_Lens_Common.first,
    left: Data_Lens_Common.left,
    right: Data_Lens_Common.right,
    second: Data_Lens_Common.second,
    united: Data_Lens_Common.united,
    allOf: Data_Lens_Fold.allOf,
    andOf: Data_Lens_Fold.andOf,
    anyOf: Data_Lens_Fold.anyOf,
    elemOf: Data_Lens_Fold.elemOf,
    filtered: Data_Lens_Fold.filtered,
    findOf: Data_Lens_Fold.findOf,
    firstOf: Data_Lens_Fold.firstOf,
    foldMapOf: Data_Lens_Fold.foldMapOf,
    foldOf: Data_Lens_Fold.foldOf,
    folded: Data_Lens_Fold.folded,
    foldlOf: Data_Lens_Fold.foldlOf,
    foldrOf: Data_Lens_Fold.foldrOf,
    has: Data_Lens_Fold.has,
    "hasn't": Data_Lens_Fold["hasn't"],
    iallOf: Data_Lens_Fold.iallOf,
    ianyOf: Data_Lens_Fold.ianyOf,
    ifoldMapOf: Data_Lens_Fold.ifoldMapOf,
    ifoldlOf: Data_Lens_Fold.ifoldlOf,
    ifoldrOf: Data_Lens_Fold.ifoldrOf,
    itoListOf: Data_Lens_Fold.itoListOf,
    itraverseOf_: Data_Lens_Fold.itraverseOf_,
    lastOf: Data_Lens_Fold.lastOf,
    lengthOf: Data_Lens_Fold.lengthOf,
    maximumOf: Data_Lens_Fold.maximumOf,
    minimumOf: Data_Lens_Fold.minimumOf,
    notElemOf: Data_Lens_Fold.notElemOf,
    orOf: Data_Lens_Fold.orOf,
    preview: Data_Lens_Fold.preview,
    previewOn: Data_Lens_Fold.previewOn,
    productOf: Data_Lens_Fold.productOf,
    replicated: Data_Lens_Fold.replicated,
    sequenceOf_: Data_Lens_Fold.sequenceOf_,
    sumOf: Data_Lens_Fold.sumOf,
    toArrayOf: Data_Lens_Fold.toArrayOf,
    toArrayOfOn: Data_Lens_Fold.toArrayOfOn,
    toListOf: Data_Lens_Fold.toListOf,
    toListOfOn: Data_Lens_Fold.toListOfOn,
    unfolded: Data_Lens_Fold.unfolded,
    cloneGetter: Data_Lens_Getter.cloneGetter,
    iuse: Data_Lens_Getter.iuse,
    iview: Data_Lens_Getter.iview,
    takeBoth: Data_Lens_Getter.takeBoth,
    to: Data_Lens_Getter.to,
    use: Data_Lens_Getter.use,
    view: Data_Lens_Getter.view,
    viewOn: Data_Lens_Getter.viewOn,
    collectOf: Data_Lens_Grate.collectOf,
    zipFWithOf: Data_Lens_Grate.zipFWithOf,
    zipWithOf: Data_Lens_Grate.zipWithOf,
    au: Data_Lens_Iso.au,
    auf: Data_Lens_Iso.auf,
    cloneIso: Data_Lens_Iso.cloneIso,
    curried: Data_Lens_Iso.curried,
    flipped: Data_Lens_Iso.flipped,
    iso: Data_Lens_Iso.iso,
    non: Data_Lens_Iso.non,
    re: Data_Lens_Iso.re,
    uncurried: Data_Lens_Iso.uncurried,
    under: Data_Lens_Iso.under,
    withIso: Data_Lens_Iso.withIso,
    cloneLens: Data_Lens_Lens.cloneLens,
    lens: Data_Lens_Lens.lens,
    "lens'": Data_Lens_Lens["lens'"],
    lensStore: Data_Lens_Lens.lensStore,
    withLens: Data_Lens_Lens.withLens,
    clonePrism: Data_Lens_Prism.clonePrism,
    is: Data_Lens_Prism.is,
    "isn't": Data_Lens_Prism["isn't"],
    matching: Data_Lens_Prism.matching,
    nearly: Data_Lens_Prism.nearly,
    only: Data_Lens_Prism.only,
    prism: Data_Lens_Prism.prism,
    "prism'": Data_Lens_Prism["prism'"],
    review: Data_Lens_Prism.review,
    withPrism: Data_Lens_Prism.withPrism,
    addModifying: Data_Lens_Setter.addModifying,
    addOver: Data_Lens_Setter.addOver,
    appendModifying: Data_Lens_Setter.appendModifying,
    appendOver: Data_Lens_Setter.appendOver,
    assign: Data_Lens_Setter.assign,
    assignJust: Data_Lens_Setter.assignJust,
    conjModifying: Data_Lens_Setter.conjModifying,
    conjOver: Data_Lens_Setter.conjOver,
    disjModifying: Data_Lens_Setter.disjModifying,
    disjOver: Data_Lens_Setter.disjOver,
    divModifying: Data_Lens_Setter.divModifying,
    divOver: Data_Lens_Setter.divOver,
    iover: Data_Lens_Setter.iover,
    modifying: Data_Lens_Setter.modifying,
    mulModifying: Data_Lens_Setter.mulModifying,
    mulOver: Data_Lens_Setter.mulOver,
    over: Data_Lens_Setter.over,
    set: Data_Lens_Setter.set,
    setJust: Data_Lens_Setter.setJust,
    subModifying: Data_Lens_Setter.subModifying,
    subOver: Data_Lens_Setter.subOver,
    element: Data_Lens_Traversal.element,
    elementsOf: Data_Lens_Traversal.elementsOf,
    failover: Data_Lens_Traversal.failover,
    itraverseOf: Data_Lens_Traversal.itraverseOf,
    sequenceOf: Data_Lens_Traversal.sequenceOf,
    traverseOf: Data_Lens_Traversal.traverseOf,
    traversed: Data_Lens_Traversal.traversed,
    Exchange: Data_Lens_Types.Exchange,
    Forget: Data_Lens_Types.Forget,
    Indexed: Data_Lens_Types.Indexed,
    Market: Data_Lens_Types.Market,
    Re: Data_Lens_Types.Re,
    Shop: Data_Lens_Types.Shop,
    Tagged: Data_Lens_Types.Tagged,
    wander: Data_Lens_Types.wander
};
