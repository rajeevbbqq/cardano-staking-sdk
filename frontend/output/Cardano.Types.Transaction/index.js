// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Cardano_Types_NativeScript = require("../Cardano.Types.NativeScript/index.js");
var Cardano_Types_ScriptRef = require("../Cardano.Types.ScriptRef/index.js");
var Cardano_Types_Value = require("../Cardano.Types.Value/index.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Lens_Iso_Newtype = require("../Data.Lens.Iso.Newtype/index.js");
var Data_Lens_Lens = require("../Data.Lens.Lens/index.js");
var Data_Lens_Record = require("../Data.Lens.Record/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Helpers = require("../Helpers/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Serialization_Types = require("../Serialization.Types/index.js");
var Types_BigNum = require("../Types.BigNum/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_Int = require("../Types.Int/index.js");
var Types_OutputDatum = require("../Types.OutputDatum/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Types_RedeemerTag = require("../Types.RedeemerTag/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var Types_Transaction = require("../Types.Transaction/index.js");
var Types_TransactionMetadata = require("../Types.TransactionMetadata/index.js");
var URL = function (x) {
    return x;
};
var TransactionOutput = function (x) {
    return x;
};
var ScriptDataHash = function (x) {
    return x;
};
var RequiredSigner = function (x) {
    return x;
};
var PublicKey = function (x) {
    return x;
};
var Vkey = function (x) {
    return x;
};
var PoolMetadataHash = function (x) {
    return x;
};
var PoolMetadata = function (x) {
    return x;
};
var IdentityNonce = (function () {
    function IdentityNonce() {

    };
    IdentityNonce.value = new IdentityNonce();
    return IdentityNonce;
})();
var HashNonce = (function () {
    function HashNonce(value0) {
        this.value0 = value0;
    };
    HashNonce.create = function (value0) {
        return new HashNonce(value0);
    };
    return HashNonce;
})();
var Mint = function (x) {
    return x;
};
var MIRToStakeCredentials = function (x) {
    return x;
};
var ToOtherPot = (function () {
    function ToOtherPot(value0) {
        this.value0 = value0;
    };
    ToOtherPot.create = function (value0) {
        return new ToOtherPot(value0);
    };
    return ToOtherPot;
})();
var ToStakeCreds = (function () {
    function ToStakeCreds(value0) {
        this.value0 = value0;
    };
    ToStakeCreds.create = function (value0) {
        return new ToStakeCreds(value0);
    };
    return ToStakeCreds;
})();
var Ipv6 = function (x) {
    return x;
};
var Ipv4 = function (x) {
    return x;
};
var SingleHostAddr = (function () {
    function SingleHostAddr(value0) {
        this.value0 = value0;
    };
    SingleHostAddr.create = function (value0) {
        return new SingleHostAddr(value0);
    };
    return SingleHostAddr;
})();
var SingleHostName = (function () {
    function SingleHostName(value0) {
        this.value0 = value0;
    };
    SingleHostName.create = function (value0) {
        return new SingleHostName(value0);
    };
    return SingleHostName;
})();
var MultiHostName = (function () {
    function MultiHostName(value0) {
        this.value0 = value0;
    };
    MultiHostName.create = function (value0) {
        return new MultiHostName(value0);
    };
    return MultiHostName;
})();
var GenesisHash = function (x) {
    return x;
};
var GenesisDelegateHash = function (x) {
    return x;
};
var Redeemer = function (x) {
    return x;
};
var Epoch = function (x) {
    return x;
};
var Ed25519Signature = function (x) {
    return x;
};
var Vkeywitness = function (x) {
    return x;
};
var CostModel = function (x) {
    return x;
};
var Costmdls = function (x) {
    return x;
};
var ProposedProtocolParameterUpdates = function (x) {
    return x;
};
var StakeRegistration = (function () {
    function StakeRegistration(value0) {
        this.value0 = value0;
    };
    StakeRegistration.create = function (value0) {
        return new StakeRegistration(value0);
    };
    return StakeRegistration;
})();
var StakeDeregistration = (function () {
    function StakeDeregistration(value0) {
        this.value0 = value0;
    };
    StakeDeregistration.create = function (value0) {
        return new StakeDeregistration(value0);
    };
    return StakeDeregistration;
})();
var StakeDelegation = (function () {
    function StakeDelegation(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    StakeDelegation.create = function (value0) {
        return function (value1) {
            return new StakeDelegation(value0, value1);
        };
    };
    return StakeDelegation;
})();
var PoolRegistration = (function () {
    function PoolRegistration(value0) {
        this.value0 = value0;
    };
    PoolRegistration.create = function (value0) {
        return new PoolRegistration(value0);
    };
    return PoolRegistration;
})();
var PoolRetirement = (function () {
    function PoolRetirement(value0) {
        this.value0 = value0;
    };
    PoolRetirement.create = function (value0) {
        return new PoolRetirement(value0);
    };
    return PoolRetirement;
})();
var GenesisKeyDelegation = (function () {
    function GenesisKeyDelegation(value0) {
        this.value0 = value0;
    };
    GenesisKeyDelegation.create = function (value0) {
        return new GenesisKeyDelegation(value0);
    };
    return GenesisKeyDelegation;
})();
var MoveInstantaneousRewardsCert = (function () {
    function MoveInstantaneousRewardsCert(value0) {
        this.value0 = value0;
    };
    MoveInstantaneousRewardsCert.create = function (value0) {
        return new MoveInstantaneousRewardsCert(value0);
    };
    return MoveInstantaneousRewardsCert;
})();
var TransactionWitnessSet = function (x) {
    return x;
};
var AuxiliaryDataHash = function (x) {
    return x;
};
var TxBody = function (x) {
    return x;
};
var AuxiliaryData = function (x) {
    return x;
};
var Transaction = function (x) {
    return x;
};
var semigroupMint = Cardano_Types_Value.semigroupNonAdaAsset;
var semigroupAuxiliaryData = {
    append: function (v) {
        return function (v1) {
            return {
                metadata: Data_Semigroup.append(Data_Maybe.semigroupMaybe(Types_TransactionMetadata.semigroupGeneralTransacti))(v.metadata)(v1.metadata),
                nativeScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Cardano_Types_NativeScript.eqNativeScript))(v.nativeScripts)(v1.nativeScripts),
                plutusScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Scripts.eqPlutusScript))(v.plutusScripts)(v1.plutusScripts)
            };
        };
    }
};
var ordRequiredSigner = Serialization_Hash.ordEd25519KeyHash;
var ordRedeemer = Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
    reflectSymbol: function () {
        return "tag";
    }
})(Types_RedeemerTag.ordRedeemerTag))()({
    reflectSymbol: function () {
        return "index";
    }
})(Data_BigInt.ordBigInt))()({
    reflectSymbol: function () {
        return "exUnits";
    }
})(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
    reflectSymbol: function () {
        return "steps";
    }
})(Data_BigInt.ordBigInt))()({
    reflectSymbol: function () {
        return "mem";
    }
})(Data_BigInt.ordBigInt))))()({
    reflectSymbol: function () {
        return "data";
    }
})(Types_PlutusData.ordPlutusData));
var ordPublicKey = Data_Ord.ordString;
var ordVkey = ordPublicKey;
var ordGenesisHash = Types_ByteArray.ordByteArray;
var ordEd25519Signature = Data_Ord.ordString;
var newtypeVkeywitness_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeVkey_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeURL_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeTxBody_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeTransaction_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeTransactionWitness = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeTransactionOutput_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeScriptDataHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeRequiredSigner_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeRedeemer_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypePublicKey_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeProposedProtocolPa = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypePoolMetadataHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeMint_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeIpv6_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeIpv4_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeGenesisHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeEpoch_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCostmdls_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeCostModel_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeAuxiliaryData_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeAuxiliaryDataHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidMint = Cardano_Types_Value.monoidNonAdaAsset;
var monoidAuxiliaryData = {
    mempty: {
        metadata: Data_Maybe.Nothing.value,
        nativeScripts: Data_Maybe.Nothing.value,
        plutusScripts: Data_Maybe.Nothing.value
    },
    Semigroup0: function () {
        return semigroupAuxiliaryData;
    }
};
var genericVkeywitness_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericVkey_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericURL_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showURL = {
    show: Data_Show_Generic.genericShow(genericURL_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "URL";
        }
    }))
};
var genericTxBody_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericTransaction_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericTransactionWitness = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericTransactionOutput_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showTransactionOutput = {
    show: Data_Show_Generic.genericShow(genericTransactionOutput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "address";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "amount";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "datum";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "scriptRef";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Cardano_Types_ScriptRef.showScriptRef)))(Types_OutputDatum.showOutputDatum))(Cardano_Types_Value.showValue))(Serialization_Address.showAddress))))({
        reflectSymbol: function () {
            return "TransactionOutput";
        }
    }))
};
var genericScriptDataHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showScriptDataHash = {
    show: Data_Show_Generic.genericShow(genericScriptDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "ScriptDataHash";
        }
    }))
};
var genericRequiredSigner_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showRequiredSigner = {
    show: Data_Show_Generic.genericShow(genericRequiredSigner_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash))({
        reflectSymbol: function () {
            return "RequiredSigner";
        }
    }))
};
var genericRelay_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new SingleHostAddr(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new SingleHostName(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return new MultiHostName(x.value0.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 483, column 1 - line 483, column 32): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof SingleHostAddr) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof SingleHostName) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof MultiHostName) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 483, column 1 - line 483, column 32): " + [ x.constructor.name ]);
    }
};
var genericRedeemer_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showRedeemer = {
    show: Data_Show_Generic.genericShow(genericRedeemer_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "data";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "exUnits";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "index";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "tag";
        }
    })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Data_BigInt.showBigInt))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mem";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "steps";
        }
    })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))))(Types_PlutusData.showPlutusData))))({
        reflectSymbol: function () {
            return "Redeemer";
        }
    }))
};
var genericPublicKey_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showPublicKey = {
    show: Data_Show_Generic.genericShow(genericPublicKey_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "PublicKey";
        }
    }))
};
var showVkey = {
    show: Data_Show_Generic.genericShow(genericVkey_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPublicKey))({
        reflectSymbol: function () {
            return "Vkey";
        }
    }))
};
var genericProposedProtocolPa = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericPoolMetadata_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericPoolMetadataHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showPoolMetadataHash = {
    show: Data_Show_Generic.genericShow(genericPoolMetadataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "PoolMetadataHash";
        }
    }))
};
var showPoolMetadata = {
    show: Data_Show_Generic.genericShow(genericPoolMetadata_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "hash";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "url";
        }
    })(Data_Show.showRecordFieldsNil)(showURL))(showPoolMetadataHash))))({
        reflectSymbol: function () {
            return "PoolMetadata";
        }
    }))
};
var genericNonce_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return IdentityNonce.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new HashNonce(x.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 399, column 1 - line 399, column 32): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof IdentityNonce) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof HashNonce) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 399, column 1 - line 399, column 32): " + [ x.constructor.name ]);
    }
};
var showNonce = {
    show: Data_Show_Generic.genericShow(genericNonce_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "IdentityNonce";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "HashNonce";
        }
    })))
};
var genericMoveInstantaneousR = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new ToOtherPot(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new ToStakeCreds(x.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 560, column 1 - line 560, column 50): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof ToOtherPot) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof ToStakeCreds) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 560, column 1 - line 560, column 50): " + [ x.constructor.name ]);
    }
};
var genericMint_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showMint = {
    show: Data_Show_Generic.genericShow(genericMint_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showNonAdaAsset))({
        reflectSymbol: function () {
            return "Mint";
        }
    }))
};
var genericMIRToStakeCredenti = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showMIRToStakeCredentials = {
    show: Data_Show_Generic.genericShow(genericMIRToStakeCredenti)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Serialization_Address.showStakeCredential)(Types_Int.showInt)))({
        reflectSymbol: function () {
            return "MIRToStakeCredentials";
        }
    }))
};
var showMoveInstantaneousRewa = {
    show: Data_Show_Generic.genericShow(genericMoveInstantaneousR)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "amount";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "pot";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(Types_BigNum.showBigNum))))({
        reflectSymbol: function () {
            return "ToOtherPot";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "amounts";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "pot";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(showMIRToStakeCredentials))))({
        reflectSymbol: function () {
            return "ToStakeCreds";
        }
    })))
};
var genericIpv6_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showIpv6 = {
    show: Data_Show_Generic.genericShow(genericIpv6_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "Ipv6";
        }
    }))
};
var genericIpv4_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showIpv4 = {
    show: Data_Show_Generic.genericShow(genericIpv4_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "Ipv4";
        }
    }))
};
var showRelay = {
    show: Data_Show_Generic.genericShow(genericRelay_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "ipv4";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "ipv6";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "port";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(showIpv6)))(Data_Maybe.showMaybe(showIpv4)))))({
        reflectSymbol: function () {
            return "SingleHostAddr";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "dnsName";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "port";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Show.showString))))({
        reflectSymbol: function () {
            return "SingleHostName";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "dnsName";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showString))))({
        reflectSymbol: function () {
            return "MultiHostName";
        }
    }))))
};
var genericGenesisHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showGenesisHash = {
    show: Data_Show_Generic.genericShow(genericGenesisHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "GenesisHash";
        }
    }))
};
var genericGenesisDelegateHas = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showGenesisDelegateHash = {
    show: Data_Show_Generic.genericShow(genericGenesisDelegateHas)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "GenesisDelegateHash";
        }
    }))
};
var genericEpoch_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showEpoch = {
    show: Data_Show_Generic.genericShow(genericEpoch_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_UInt.uintShowInstance))({
        reflectSymbol: function () {
            return "Epoch";
        }
    }))
};
var genericEd25519Signature_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showEd25519Signature = {
    show: Data_Show_Generic.genericShow(genericEd25519Signature_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
        reflectSymbol: function () {
            return "Ed25519Signature";
        }
    }))
};
var showVkeywitness = {
    show: Data_Show_Generic.genericShow(genericVkeywitness_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Tuple.showTuple(showVkey)(showEd25519Signature)))({
        reflectSymbol: function () {
            return "Vkeywitness";
        }
    }))
};
var showTransactionWitnessSet = {
    show: Data_Show_Generic.genericShow(genericTransactionWitness)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "bootstraps";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "nativeScripts";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "plutusData";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "plutusScripts";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "redeemers";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "vkeys";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(showVkeywitness))))(Data_Maybe.showMaybe(Data_Show.showArray(showRedeemer))))(Data_Maybe.showMaybe(Data_Show.showArray(Types_Scripts.showPlutusScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Types_PlutusData.showPlutusData))))(Data_Maybe.showMaybe(Data_Show.showArray(Cardano_Types_NativeScript.showNativeScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "attributes";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "chainCode";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "signature";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "vkey";
        }
    })(Data_Show.showRecordFieldsNil)(showVkey))(showEd25519Signature))(Types_ByteArray.showByteArray))(Types_ByteArray.showByteArray))))))))({
        reflectSymbol: function () {
            return "TransactionWitnessSet";
        }
    }))
};
var genericCostmdls_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericCostModel_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showCostModel = {
    show: Data_Show_Generic.genericShow(genericCostModel_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Types_Int.showInt)))({
        reflectSymbol: function () {
            return "CostModel";
        }
    }))
};
var showCostmdls = {
    show: Data_Show_Generic.genericShow(genericCostmdls_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(Types_Scripts.showLanguage)(showCostModel)))({
        reflectSymbol: function () {
            return "Costmdls";
        }
    }))
};
var showProposedProtocolParam = {
    show: Data_Show_Generic.genericShow(genericProposedProtocolPa)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Map_Internal.showMap(showGenesisHash)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "adaPerUtxoByte";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "costModels";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "executionCosts";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "expansionRate";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "keyDeposit";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxBlockBodySize";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxBlockExUnits";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxBlockHeaderSize";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxEpoch";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxTxExUnits";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxTxSize";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "maxValueSize";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "minPoolCost";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "minfeeA";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "minfeeB";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "nOpt";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "poolDeposit";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "poolPledgeInfluence";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "protocolVersion";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "treasuryGrowthRate";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "major";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "minor";
        }
    })(Data_Show.showRecordFieldsNil)(Data_UInt.uintShowInstance))(Data_UInt.uintShowInstance)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Types_BigNum.showBigNum)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mem";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "steps";
        }
    })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt)))))(Data_Maybe.showMaybe(showEpoch)))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mem";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "steps";
        }
    })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt)))))(Data_Maybe.showMaybe(Data_UInt.uintShowInstance)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "memPrice";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "stepPrice";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum)))))))(Data_Maybe.showMaybe(showCostmdls)))(Data_Maybe.showMaybe(Types_BigNum.showBigNum))))))({
        reflectSymbol: function () {
            return "ProposedProtocolParameterUpdates";
        }
    }))
};
var genericCertificate_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new StakeRegistration(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return new StakeDeregistration(x.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
            return new StakeDelegation(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
            return new PoolRegistration(x.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
            return new PoolRetirement(x.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
            return new GenesisKeyDelegation(x.value0.value0.value0.value0.value0.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
            return new MoveInstantaneousRewardsCert(x.value0.value0.value0.value0.value0.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 597, column 1 - line 597, column 38): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof StakeRegistration) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof StakeDeregistration) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        };
        if (x instanceof StakeDelegation) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
        };
        if (x instanceof PoolRegistration) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
        };
        if (x instanceof PoolRetirement) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
        };
        if (x instanceof GenesisKeyDelegation) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
        };
        if (x instanceof MoveInstantaneousRewardsCert) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))));
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 597, column 1 - line 597, column 38): " + [ x.constructor.name ]);
    }
};
var showCertificate = {
    show: Data_Show_Generic.genericShow(genericCertificate_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))({
        reflectSymbol: function () {
            return "StakeRegistration";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))({
        reflectSymbol: function () {
            return "StakeDeregistration";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showStakeCredential))(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash)))({
        reflectSymbol: function () {
            return "StakeDelegation";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "cost";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "margin";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "operator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "pledge";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "poolMetadata";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "poolOwners";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "relays";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "rewardAccount";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "vrfKeyhash";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Types.showVRFKeyHash))(Serialization_Address.showRewardAddress))(Data_Show.showArray(showRelay)))(Data_Show.showArray(Serialization_Hash.showEd25519KeyHash)))(Data_Maybe.showMaybe(showPoolMetadata)))(Types_BigNum.showBigNum))(Serialization_Hash.showEd25519KeyHash))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "denominator";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "numerator";
        }
    })(Data_Show.showRecordFieldsNil)(Types_BigNum.showBigNum))(Types_BigNum.showBigNum))))(Types_BigNum.showBigNum))))({
        reflectSymbol: function () {
            return "PoolRegistration";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "epoch";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "poolKeyhash";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Hash.showEd25519KeyHash))(showEpoch))))({
        reflectSymbol: function () {
            return "PoolRetirement";
        }
    }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "genesisDelegateHash";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "genesisHash";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "vrfKeyhash";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Types.showVRFKeyHash))(showGenesisHash))(showGenesisDelegateHash))))({
        reflectSymbol: function () {
            return "GenesisKeyDelegation";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showMoveInstantaneousRewa))({
        reflectSymbol: function () {
            return "MoveInstantaneousRewardsCert";
        }
    }))))))))
};
var genericAuxiliaryData_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showAuxiliaryData = {
    show: Data_Show_Generic.genericShow(genericAuxiliaryData_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "metadata";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "nativeScripts";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "plutusScripts";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showArray(Types_Scripts.showPlutusScript))))(Data_Maybe.showMaybe(Data_Show.showArray(Cardano_Types_NativeScript.showNativeScript))))(Data_Maybe.showMaybe(Types_TransactionMetadata.showGeneralTransactionMet)))))({
        reflectSymbol: function () {
            return "AuxiliaryData";
        }
    }))
};
var genericAuxiliaryDataHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showAuxiliaryDataHash = {
    show: Data_Show_Generic.genericShow(genericAuxiliaryDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
        reflectSymbol: function () {
            return "AuxiliaryDataHash";
        }
    }))
};
var showTxBody = {
    show: Data_Show_Generic.genericShow(genericTxBody_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "auxiliaryDataHash";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "certs";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "collateral";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "collateralReturn";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "fee";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "inputs";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "mint";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "networkId";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "outputs";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "referenceInputs";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "requiredSigners";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "scriptDataHash";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "totalCollateral";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "ttl";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "update";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "validityStartInterval";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "withdrawals";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Map_Internal.showMap(Serialization_Address.showRewardAddress)(Cardano_Types_Value.showCoin))))(Data_Maybe.showMaybe(Serialization_Address.showSlot)))(Data_Maybe.showMaybe(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "epoch";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "proposedProtocolParameterUpdates";
        }
    })(Data_Show.showRecordFieldsNil)(showProposedProtocolParam))(showEpoch)))))(Data_Maybe.showMaybe(Serialization_Address.showSlot)))(Data_Maybe.showMaybe(Cardano_Types_Value.showCoin)))(Data_Maybe.showMaybe(showScriptDataHash)))(Data_Maybe.showMaybe(Data_Show.showArray(showRequiredSigner))))(Data_Set.showSet(Types_Transaction.showTransactionInput)))(Data_Show.showArray(showTransactionOutput)))(Data_Maybe.showMaybe(Serialization_Address.showNetworkId)))(Data_Maybe.showMaybe(showMint)))(Data_Set.showSet(Types_Transaction.showTransactionInput)))(Cardano_Types_Value.showCoin))(Data_Maybe.showMaybe(showTransactionOutput)))(Data_Maybe.showMaybe(Data_Show.showArray(Types_Transaction.showTransactionInput))))(Data_Maybe.showMaybe(Data_Show.showArray(showCertificate))))(Data_Maybe.showMaybe(showAuxiliaryDataHash)))))({
        reflectSymbol: function () {
            return "TxBody";
        }
    }))
};
var showTransaction = {
    show: Data_Show_Generic.genericShow(genericTransaction_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "auxiliaryData";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "body";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "isValid";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "witnessSet";
        }
    })(Data_Show.showRecordFieldsNil)(showTransactionWitnessSet))(Data_Show.showBoolean))(showTxBody))(Data_Maybe.showMaybe(showAuxiliaryData)))))({
        reflectSymbol: function () {
            return "Transaction";
        }
    }))
};
var eqURL = {
    eq: function (x) {
        return function (y) {
            return x === y;
        };
    }
};
var eqTransactionOutput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "scriptRef";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_ScriptRef.eqScriptRef)))()({
    reflectSymbol: function () {
        return "datum";
    }
})(Types_OutputDatum.eqOutputDatum))()({
    reflectSymbol: function () {
        return "amount";
    }
})(Cardano_Types_Value.eqValue))()({
    reflectSymbol: function () {
        return "address";
    }
})(Serialization_Address.eqAddress));
var eqScriptDataHash = Types_ByteArray.eqByteArray;
var eqRequiredSigner = Serialization_Hash.eqEd25519KeyHash;
var eqRedeemer = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "tag";
    }
})(Types_RedeemerTag.eqRedeemerTag))()({
    reflectSymbol: function () {
        return "index";
    }
})(Data_BigInt.eqBigInt))()({
    reflectSymbol: function () {
        return "exUnits";
    }
})(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "steps";
    }
})(Data_BigInt.eqBigInt))()({
    reflectSymbol: function () {
        return "mem";
    }
})(Data_BigInt.eqBigInt))))()({
    reflectSymbol: function () {
        return "data";
    }
})(Types_PlutusData.eqPlutusData));
var eqPublicKey = Data_Eq.eqString;
var eqVkey = eqPublicKey;
var eqPoolMetadataHash = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
        };
    }
};
var eqPoolMetadata = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(eqPoolMetadataHash)(x.hash)(y.hash) && Data_Eq.eq(eqURL)(x.url)(y.url);
        };
    }
};
var eqNonce = {
    eq: function (x) {
        return function (y) {
            if (x instanceof IdentityNonce && y instanceof IdentityNonce) {
                return true;
            };
            if (x instanceof HashNonce && y instanceof HashNonce) {
                return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var eqMint = Cardano_Types_Value.eqNonAdaAsset;
var eqMIRToStakeCredentials = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(Serialization_Address.eqStakeCredential)(Types_Int.eqInt))(x)(y);
        };
    }
};
var eqMoveInstantaneousReward = {
    eq: function (x) {
        return function (y) {
            if (x instanceof ToOtherPot && y instanceof ToOtherPot) {
                return Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.amount)(y.value0.amount) && x.value0.pot === y.value0.pot;
            };
            if (x instanceof ToStakeCreds && y instanceof ToStakeCreds) {
                return Data_Eq.eq(eqMIRToStakeCredentials)(x.value0.amounts)(y.value0.amounts) && x.value0.pot === y.value0.pot;
            };
            return false;
        };
    }
};
var eqIpv6 = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
        };
    }
};
var eqIpv4 = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
        };
    }
};
var eqRelay = {
    eq: function (x) {
        return function (y) {
            if (x instanceof SingleHostAddr && y instanceof SingleHostAddr) {
                return Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv4))(x.value0.ipv4)(y.value0.ipv4) && Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv6))(x.value0.ipv6)(y.value0.ipv6) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
            };
            if (x instanceof SingleHostName && y instanceof SingleHostName) {
                return x.value0.dnsName === y.value0.dnsName && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
            };
            if (x instanceof MultiHostName && y instanceof MultiHostName) {
                return x.value0.dnsName === y.value0.dnsName;
            };
            return false;
        };
    }
};
var eqGenesisHash = Types_ByteArray.eqByteArray;
var eqGenesisDelegateHash = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
        };
    }
};
var eqEpoch = Data_UInt.uintEqInstance;
var eqEd25519Signature = Data_Eq.eqString;
var eqVkeywitness = Data_Tuple.eqTuple(eqVkey)(eqEd25519Signature);
var eqTransactionWitnessSet = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "vkeys";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqVkeywitness))))()({
    reflectSymbol: function () {
        return "redeemers";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqRedeemer))))()({
    reflectSymbol: function () {
        return "plutusScripts";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Types_Scripts.eqPlutusScript))))()({
    reflectSymbol: function () {
        return "plutusData";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Types_PlutusData.eqPlutusData))))()({
    reflectSymbol: function () {
        return "nativeScripts";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Cardano_Types_NativeScript.eqNativeScript))))()({
    reflectSymbol: function () {
        return "bootstraps";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "vkey";
    }
})(eqVkey))()({
    reflectSymbol: function () {
        return "signature";
    }
})(eqEd25519Signature))()({
    reflectSymbol: function () {
        return "chainCode";
    }
})(Types_ByteArray.eqByteArray))()({
    reflectSymbol: function () {
        return "attributes";
    }
})(Types_ByteArray.eqByteArray))))));
var semigroupTransactionWitne = {
    append: function (v) {
        return function (v1) {
            return {
                vkeys: Helpers.maybeArrayMerge(eqVkeywitness)(v.vkeys)(v1.vkeys),
                nativeScripts: Helpers.maybeArrayMerge(Cardano_Types_NativeScript.eqNativeScript)(v.nativeScripts)(v1.nativeScripts),
                bootstraps: Helpers.maybeArrayMerge(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                    reflectSymbol: function () {
                        return "vkey";
                    }
                })(eqVkey))()({
                    reflectSymbol: function () {
                        return "signature";
                    }
                })(eqEd25519Signature))()({
                    reflectSymbol: function () {
                        return "chainCode";
                    }
                })(Types_ByteArray.eqByteArray))()({
                    reflectSymbol: function () {
                        return "attributes";
                    }
                })(Types_ByteArray.eqByteArray)))(v.bootstraps)(v1.bootstraps),
                plutusScripts: Helpers.maybeArrayMerge(Types_Scripts.eqPlutusScript)(v.plutusScripts)(v1.plutusScripts),
                plutusData: Helpers.maybeArrayMerge(Types_PlutusData.eqPlutusData)(v.plutusData)(v1.plutusData),
                redeemers: Helpers.maybeArrayMerge(eqRedeemer)(v.redeemers)(v1.redeemers)
            };
        };
    }
};
var monoidTransactionWitnessS = {
    mempty: {
        vkeys: Data_Maybe.Nothing.value,
        nativeScripts: Data_Maybe.Nothing.value,
        bootstraps: Data_Maybe.Nothing.value,
        plutusScripts: Data_Maybe.Nothing.value,
        plutusData: Data_Maybe.Nothing.value,
        redeemers: Data_Maybe.Nothing.value
    },
    Semigroup0: function () {
        return semigroupTransactionWitne;
    }
};
var eqCostModel = Data_Eq.eqArray(Types_Int.eqInt);
var eqCostmdls = Data_Map_Internal.eqMap(Types_Scripts.eqLanguage)(eqCostModel);
var eqProposedProtocolParamet = Data_Map_Internal.eqMap(eqGenesisHash)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "treasuryGrowthRate";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "numerator";
    }
})(Types_BigNum.eqBigNum))()({
    reflectSymbol: function () {
        return "denominator";
    }
})(Types_BigNum.eqBigNum)))))()({
    reflectSymbol: function () {
        return "protocolVersion";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "minor";
    }
})(Data_UInt.uintEqInstance))()({
    reflectSymbol: function () {
        return "major";
    }
})(Data_UInt.uintEqInstance)))))()({
    reflectSymbol: function () {
        return "poolPledgeInfluence";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "numerator";
    }
})(Types_BigNum.eqBigNum))()({
    reflectSymbol: function () {
        return "denominator";
    }
})(Types_BigNum.eqBigNum)))))()({
    reflectSymbol: function () {
        return "poolDeposit";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
    reflectSymbol: function () {
        return "nOpt";
    }
})(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
    reflectSymbol: function () {
        return "minfeeB";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
    reflectSymbol: function () {
        return "minfeeA";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
    reflectSymbol: function () {
        return "minPoolCost";
    }
})(Data_Maybe.eqMaybe(Types_BigNum.eqBigNum)))()({
    reflectSymbol: function () {
        return "maxValueSize";
    }
})(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
    reflectSymbol: function () {
        return "maxTxSize";
    }
})(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
    reflectSymbol: function () {
        return "maxTxExUnits";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "steps";
    }
})(Data_BigInt.eqBigInt))()({
    reflectSymbol: function () {
        return "mem";
    }
})(Data_BigInt.eqBigInt)))))()({
    reflectSymbol: function () {
        return "maxEpoch";
    }
})(Data_Maybe.eqMaybe(eqEpoch)))()({
    reflectSymbol: function () {
        return "maxBlockHeaderSize";
    }
})(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
    reflectSymbol: function () {
        return "maxBlockExUnits";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "steps";
    }
})(Data_BigInt.eqBigInt))()({
    reflectSymbol: function () {
        return "mem";
    }
})(Data_BigInt.eqBigInt)))))()({
    reflectSymbol: function () {
        return "maxBlockBodySize";
    }
})(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
    reflectSymbol: function () {
        return "keyDeposit";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
    reflectSymbol: function () {
        return "expansionRate";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "numerator";
    }
})(Types_BigNum.eqBigNum))()({
    reflectSymbol: function () {
        return "denominator";
    }
})(Types_BigNum.eqBigNum)))))()({
    reflectSymbol: function () {
        return "executionCosts";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "stepPrice";
    }
})(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "numerator";
    }
})(Types_BigNum.eqBigNum))()({
    reflectSymbol: function () {
        return "denominator";
    }
})(Types_BigNum.eqBigNum))))()({
    reflectSymbol: function () {
        return "memPrice";
    }
})(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "numerator";
    }
})(Types_BigNum.eqBigNum))()({
    reflectSymbol: function () {
        return "denominator";
    }
})(Types_BigNum.eqBigNum)))))))()({
    reflectSymbol: function () {
        return "costModels";
    }
})(Data_Maybe.eqMaybe(eqCostmdls)))()({
    reflectSymbol: function () {
        return "adaPerUtxoByte";
    }
})(Data_Maybe.eqMaybe(Types_BigNum.eqBigNum))));
var eqCertificate = {
    eq: function (x) {
        return function (y) {
            if (x instanceof StakeRegistration && y instanceof StakeRegistration) {
                return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakeDeregistration && y instanceof StakeDeregistration) {
                return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakeDelegation && y instanceof StakeDelegation) {
                return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value1)(y.value1);
            };
            if (x instanceof PoolRegistration && y instanceof PoolRegistration) {
                return Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.cost)(y.value0.cost) && (Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.margin.denominator)(y.value0.margin.denominator) && Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.margin.numerator)(y.value0.margin.numerator)) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.operator)(y.value0.operator) && Data_Eq.eq(Types_BigNum.eqBigNum)(x.value0.pledge)(y.value0.pledge) && Data_Eq.eq(Data_Maybe.eqMaybe(eqPoolMetadata))(x.value0.poolMetadata)(y.value0.poolMetadata) && Data_Eq.eq(Data_Eq.eqArray(Serialization_Hash.eqEd25519KeyHash))(x.value0.poolOwners)(y.value0.poolOwners) && Data_Eq.eq(Data_Eq.eqArray(eqRelay))(x.value0.relays)(y.value0.relays) && Data_Eq.eq(Serialization_Address.eqRewardAddress)(x.value0.rewardAccount)(y.value0.rewardAccount) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
            };
            if (x instanceof PoolRetirement && y instanceof PoolRetirement) {
                return Data_Eq.eq(eqEpoch)(x.value0.epoch)(y.value0.epoch) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.poolKeyhash)(y.value0.poolKeyhash);
            };
            if (x instanceof GenesisKeyDelegation && y instanceof GenesisKeyDelegation) {
                return Data_Eq.eq(eqGenesisDelegateHash)(x.value0.genesisDelegateHash)(y.value0.genesisDelegateHash) && Data_Eq.eq(eqGenesisHash)(x.value0.genesisHash)(y.value0.genesisHash) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
            };
            if (x instanceof MoveInstantaneousRewardsCert && y instanceof MoveInstantaneousRewardsCert) {
                return Data_Eq.eq(eqMoveInstantaneousReward)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var semigroupTxBody = {
    append: function (v) {
        return function (v1) {
            var lowerbound = function (v2) {
                return function (v3) {
                    return Serialization_Address.Slot(Data_Ord.min(Types_BigNum.ordBigNum)(v2)(v3));
                };
            };
            return {
                inputs: Data_Set.union(Types_Transaction.ordTransactionInput)(v.inputs)(v1.inputs),
                outputs: Data_Array.union(eqTransactionOutput)(v.outputs)(v1.outputs),
                fee: Data_Semigroup.append(Cardano_Types_Value.semigroupCoin)(v.fee)(v1.fee),
                ttl: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.ttl)(v1.ttl),
                certs: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqCertificate))(v.certs)(v1.certs),
                withdrawals: Control_Apply.lift2(Data_Maybe.applyMaybe)(Helpers.appendMap(Serialization_Address.ordRewardAddress)(Cardano_Types_Value.semigroupCoin))(v.withdrawals)(v1.withdrawals),
                update: Helpers.appendLastMaybe(v.update)(v1.update),
                auxiliaryDataHash: Helpers.appendLastMaybe(v.auxiliaryDataHash)(v1.auxiliaryDataHash),
                validityStartInterval: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.validityStartInterval)(v1.validityStartInterval),
                mint: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupMint))(v.mint)(v1.mint),
                referenceInputs: Data_Semigroup.append(Data_Set.semigroupSet(Types_Transaction.ordTransactionInput))(v.referenceInputs)(v1.referenceInputs),
                scriptDataHash: Helpers.appendLastMaybe(v.scriptDataHash)(v1.scriptDataHash),
                collateral: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Transaction.eqTransactionInput))(v.collateral)(v1.collateral),
                requiredSigners: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqRequiredSigner))(v.requiredSigners)(v1.requiredSigners),
                networkId: Helpers.appendLastMaybe(v.networkId)(v1.networkId),
                collateralReturn: Control_Alt.alt(Data_Maybe.altMaybe)(v.collateralReturn)(v.collateralReturn),
                totalCollateral: Control_Alt.alt(Data_Maybe.altMaybe)(v.totalCollateral)(v.totalCollateral)
            };
        };
    }
};
var monoidTxBody = {
    mempty: {
        inputs: Data_Monoid.mempty(Data_Set.monoidSet(Types_Transaction.ordTransactionInput)),
        outputs: Data_Monoid.mempty(Data_Monoid.monoidArray),
        fee: Data_Monoid.mempty(Cardano_Types_Value.monoidCoin),
        ttl: Data_Maybe.Nothing.value,
        certs: Data_Maybe.Nothing.value,
        withdrawals: Data_Maybe.Nothing.value,
        update: Data_Maybe.Nothing.value,
        auxiliaryDataHash: Data_Maybe.Nothing.value,
        validityStartInterval: Data_Maybe.Nothing.value,
        mint: Data_Maybe.Nothing.value,
        scriptDataHash: Data_Maybe.Nothing.value,
        collateral: Data_Maybe.Nothing.value,
        requiredSigners: Data_Maybe.Nothing.value,
        networkId: Data_Maybe.Nothing.value,
        collateralReturn: Data_Maybe.Nothing.value,
        totalCollateral: Data_Maybe.Nothing.value,
        referenceInputs: Data_Monoid.mempty(Data_Set.monoidSet(Types_Transaction.ordTransactionInput))
    },
    Semigroup0: function () {
        return semigroupTxBody;
    }
};
var semigroupTransaction = {
    append: function (v) {
        return function (v1) {
            var txCheck$prime = function (dictMonoid) {
                return Data_Monoid.guard(dictMonoid)(v1.isValid);
            };
            var txCheck = function (dictMonoid) {
                return Data_Monoid.guard(dictMonoid)(v.isValid);
            };
            return {
                body: Data_Semigroup.append(semigroupTxBody)(txCheck(monoidTxBody)(v.body))(txCheck$prime(monoidTxBody)(v1.body)),
                witnessSet: Data_Semigroup.append(semigroupTransactionWitne)(txCheck(monoidTransactionWitnessS)(v.witnessSet))(txCheck$prime(monoidTransactionWitnessS)(v1.witnessSet)),
                isValid: v.isValid && v1.isValid,
                auxiliaryData: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupAuxiliaryData))(txCheck(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v.auxiliaryData))(txCheck$prime(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v1.auxiliaryData))
            };
        };
    }
};
var monoidTransaction = {
    mempty: {
        body: Data_Monoid.mempty(monoidTxBody),
        witnessSet: Data_Monoid.mempty(monoidTransactionWitnessS),
        isValid: true,
        auxiliaryData: Data_Maybe.Nothing.value
    },
    Semigroup0: function () {
        return semigroupTransaction;
    }
};
var eqAuxiliaryDataHash = Types_ByteArray.eqByteArray;
var eqTxBody = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "withdrawals";
    }
})(Data_Maybe.eqMaybe(Data_Map_Internal.eqMap(Serialization_Address.eqRewardAddress)(Cardano_Types_Value.eqCoin))))()({
    reflectSymbol: function () {
        return "validityStartInterval";
    }
})(Data_Maybe.eqMaybe(Serialization_Address.eqSlot)))()({
    reflectSymbol: function () {
        return "update";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "proposedProtocolParameterUpdates";
    }
})(eqProposedProtocolParamet))()({
    reflectSymbol: function () {
        return "epoch";
    }
})(eqEpoch)))))()({
    reflectSymbol: function () {
        return "ttl";
    }
})(Data_Maybe.eqMaybe(Serialization_Address.eqSlot)))()({
    reflectSymbol: function () {
        return "totalCollateral";
    }
})(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
    reflectSymbol: function () {
        return "scriptDataHash";
    }
})(Data_Maybe.eqMaybe(eqScriptDataHash)))()({
    reflectSymbol: function () {
        return "requiredSigners";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqRequiredSigner))))()({
    reflectSymbol: function () {
        return "referenceInputs";
    }
})(Data_Set.eqSet(Types_Transaction.eqTransactionInput)))()({
    reflectSymbol: function () {
        return "outputs";
    }
})(Data_Eq.eqArray(eqTransactionOutput)))()({
    reflectSymbol: function () {
        return "networkId";
    }
})(Data_Maybe.eqMaybe(Serialization_Address.eqNetworkId)))()({
    reflectSymbol: function () {
        return "mint";
    }
})(Data_Maybe.eqMaybe(eqMint)))()({
    reflectSymbol: function () {
        return "inputs";
    }
})(Data_Set.eqSet(Types_Transaction.eqTransactionInput)))()({
    reflectSymbol: function () {
        return "fee";
    }
})(Cardano_Types_Value.eqCoin))()({
    reflectSymbol: function () {
        return "collateralReturn";
    }
})(Data_Maybe.eqMaybe(eqTransactionOutput)))()({
    reflectSymbol: function () {
        return "collateral";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Types_Transaction.eqTransactionInput))))()({
    reflectSymbol: function () {
        return "certs";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqCertificate))))()({
    reflectSymbol: function () {
        return "auxiliaryDataHash";
    }
})(Data_Maybe.eqMaybe(eqAuxiliaryDataHash)));
var eqAuxiliaryData = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
    reflectSymbol: function () {
        return "plutusScripts";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Types_Scripts.eqPlutusScript))))()({
    reflectSymbol: function () {
        return "nativeScripts";
    }
})(Data_Maybe.eqMaybe(Data_Eq.eqArray(Cardano_Types_NativeScript.eqNativeScript))))()({
    reflectSymbol: function () {
        return "metadata";
    }
})(Data_Maybe.eqMaybe(Types_TransactionMetadata.eqGeneralTransactionMetad)));
var eqTransaction = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(eqAuxiliaryData))(x.auxiliaryData)(y.auxiliaryData) && Data_Eq.eq(eqTxBody)(x.body)(y.body) && x.isValid === y.isValid && Data_Eq.eq(eqTransactionWitnessSet)(x.witnessSet)(y.witnessSet);
        };
    }
};
var encodeAesonURL = Aeson.encodeAesonString;
var encodeAesonTransactionOut = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonAddress)(Aeson.gEncodeAesonCons(Cardano_Types_Value.encodeAesonValue)(Aeson.gEncodeAesonCons(Types_OutputDatum.encodeAesonOutputDatum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_ScriptRef.encodeAesonScriptRef))(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "scriptRef";
    }
})())({
    reflectSymbol: function () {
        return "datum";
    }
})())({
    reflectSymbol: function () {
        return "amount";
    }
})())({
    reflectSymbol: function () {
        return "address";
    }
})())();
var encodeAesonScriptDataHash = Types_ByteArray.encodeAesonByteArray;
var encodeAesonRequiredSigner = Serialization_Hash.encodeAesonEd25519KeyHash;
var encodeAesonRedeemer = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_PlutusData.encodeAesonPlutusData)(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "steps";
    }
})())({
    reflectSymbol: function () {
        return "mem";
    }
})())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Types_RedeemerTag.encodeAesonRedeemerTag)(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "tag";
    }
})())({
    reflectSymbol: function () {
        return "index";
    }
})())({
    reflectSymbol: function () {
        return "exUnits";
    }
})())({
    reflectSymbol: function () {
        return "data";
    }
})())();
var encodeAesonPublicKey = Aeson.encodeAesonString;
var encodeAesonVkey = encodeAesonPublicKey;
var encodeAesonPoolMetadataHa = Types_ByteArray.encodeAesonByteArray;
var encodeAesonPoolMetadata = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonPoolMetadataHa)(Aeson.gEncodeAesonCons(encodeAesonURL)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "url";
            }
        })())({
            reflectSymbol: function () {
                return "hash";
            }
        })())())(v);
    }
};
var encodeAesonNonce = {
    "encodeAeson'": function (v) {
        if (v instanceof IdentityNonce) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonString)("neutral");
        };
        if (v instanceof HashNonce) {
            return Aeson["encodeAeson'"](Types_ByteArray.encodeAesonByteArray)(v.value0);
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 430, column 1 - line 432, column 52): " + [ v.constructor.name ]);
    }
};
var encodeAesonMint = Cardano_Types_Value.encodeAesonNonAdaAsset;
var encodeAesonMIRToStakeCred = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(Serialization_Address.encodeAesonStakeCredentia)(Types_Int.encodeAesonInt)(v));
    }
};
var encodeAesonMoveInstantane = {
    "encodeAeson'": function (v) {
        if (v instanceof ToOtherPot) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonNumber)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "pot";
                }
            })())({
                reflectSymbol: function () {
                    return "amount";
                }
            })())())("ToOtherPot")(v.value0));
        };
        if (v instanceof ToStakeCreds) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonMIRToStakeCred)(Aeson.gEncodeAesonCons(Aeson.encodeAesonNumber)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "pot";
                }
            })())({
                reflectSymbol: function () {
                    return "amounts";
                }
            })())())("ToStakeCreds")(v.value0));
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 566, column 18 - line 568, column 68): " + [ v.constructor.name ]);
    }
};
var encodeAesonIpv6 = Types_ByteArray.encodeAesonByteArray;
var encodeAesonIpv4 = Types_ByteArray.encodeAesonByteArray;
var encodeAesonRelay = {
    "encodeAeson'": function (v) {
        if (v instanceof SingleHostAddr) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonIpv4))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonIpv6))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonInt))(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "port";
                }
            })())({
                reflectSymbol: function () {
                    return "ipv6";
                }
            })())({
                reflectSymbol: function () {
                    return "ipv4";
                }
            })())())("SingleHostAddr")(v.value0));
        };
        if (v instanceof SingleHostName) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonInt))(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "port";
                }
            })())({
                reflectSymbol: function () {
                    return "dnsName";
                }
            })())())("SingleHostName")(v.value0));
        };
        if (v instanceof MultiHostName) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "dnsName";
                }
            })())())("MultiHostName")(v.value0));
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 489, column 18 - line 492, column 70): " + [ v.constructor.name ]);
    }
};
var encodeAesonGenesisHash = Types_ByteArray.encodeAesonByteArray;
var encodeAesonGenesisDelegat = Types_ByteArray.encodeAesonByteArray;
var encodeAesonEpoch = Aeson.encodeAesonUInt;
var encodeAesonEd25519Signatu = Aeson.encodeAesonString;
var encodeAesonVkeywitness = Aeson.encodeAesonTuple(encodeAesonVkey)(encodeAesonEd25519Signatu);
var encodeAesonTransactionWit = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonCons(Types_ByteArray.encodeAesonByteArray)(Aeson.gEncodeAesonCons(encodeAesonEd25519Signatu)(Aeson.gEncodeAesonCons(encodeAesonVkey)(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "vkey";
    }
})())({
    reflectSymbol: function () {
        return "signature";
    }
})())({
    reflectSymbol: function () {
        return "chainCode";
    }
})())({
    reflectSymbol: function () {
        return "attributes";
    }
})())())))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Cardano_Types_NativeScript.encodeAesonNativeScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_PlutusData.encodeAesonPlutusData)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Scripts.encodeAesonPlutusScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonRedeemer)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonVkeywitness)))(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "vkeys";
    }
})())({
    reflectSymbol: function () {
        return "redeemers";
    }
})())({
    reflectSymbol: function () {
        return "plutusScripts";
    }
})())({
    reflectSymbol: function () {
        return "plutusData";
    }
})())({
    reflectSymbol: function () {
        return "nativeScripts";
    }
})())({
    reflectSymbol: function () {
        return "bootstraps";
    }
})())();
var encodeAesonCostModel = Aeson.encodeAesonArray(Types_Int.encodeAesonInt);
var encodeAesonCostmdls = {
    "encodeAeson'": (function () {
        var $583 = Aeson["encodeAeson'"](Aeson.encodeAesonAeson);
        var $584 = Helpers.encodeMap(Types_Scripts.encodeAesonLanguage)(encodeAesonCostModel);
        var $585 = Data_Newtype.unwrap();
        return function ($586) {
            return $583($584($585($586)));
        };
    })()
};
var encodeAesonProposedProtoc = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers.encodeMap(encodeAesonGenesisHash)(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_BigNum.encodeAesonBigNum))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonCostmdls))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())())(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "stepPrice";
            }
        })())({
            reflectSymbol: function () {
                return "memPrice";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "steps";
            }
        })())({
            reflectSymbol: function () {
                return "mem";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonEpoch))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "steps";
            }
        })())({
            reflectSymbol: function () {
                return "mem";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_BigNum.encodeAesonBigNum))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonUInt))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "minor";
            }
        })())({
            reflectSymbol: function () {
                return "major";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())()))(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "treasuryGrowthRate";
            }
        })())({
            reflectSymbol: function () {
                return "protocolVersion";
            }
        })())({
            reflectSymbol: function () {
                return "poolPledgeInfluence";
            }
        })())({
            reflectSymbol: function () {
                return "poolDeposit";
            }
        })())({
            reflectSymbol: function () {
                return "nOpt";
            }
        })())({
            reflectSymbol: function () {
                return "minfeeB";
            }
        })())({
            reflectSymbol: function () {
                return "minfeeA";
            }
        })())({
            reflectSymbol: function () {
                return "minPoolCost";
            }
        })())({
            reflectSymbol: function () {
                return "maxValueSize";
            }
        })())({
            reflectSymbol: function () {
                return "maxTxSize";
            }
        })())({
            reflectSymbol: function () {
                return "maxTxExUnits";
            }
        })())({
            reflectSymbol: function () {
                return "maxEpoch";
            }
        })())({
            reflectSymbol: function () {
                return "maxBlockHeaderSize";
            }
        })())({
            reflectSymbol: function () {
                return "maxBlockExUnits";
            }
        })())({
            reflectSymbol: function () {
                return "maxBlockBodySize";
            }
        })())({
            reflectSymbol: function () {
                return "keyDeposit";
            }
        })())({
            reflectSymbol: function () {
                return "expansionRate";
            }
        })())({
            reflectSymbol: function () {
                return "executionCosts";
            }
        })())({
            reflectSymbol: function () {
                return "costModels";
            }
        })())({
            reflectSymbol: function () {
                return "adaPerUtxoByte";
            }
        })())())(v));
    }
};
var encodeAesonCertificate = {
    "encodeAeson'": function (v) {
        if (v instanceof StakeRegistration) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonStakeCredentia)("StakeRegistration")(v.value0));
        };
        if (v instanceof StakeDeregistration) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Serialization_Address.encodeAesonStakeCredentia)("StakeDeregistration")(v.value0));
        };
        if (v instanceof StakeDelegation) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonStakeCredentia)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "stakeCredential";
                }
            })())({
                reflectSymbol: function () {
                    return "ed25519KeyHash";
                }
            })())())("StakeDelegation")({
                stakeCredential: v.value0,
                ed25519KeyHash: v.value1
            }));
        };
        if (v instanceof PoolRegistration) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "numerator";
                }
            })())({
                reflectSymbol: function () {
                    return "denominator";
                }
            })())())(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonCons(Types_BigNum.encodeAesonBigNum)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonPoolMetadata))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Serialization_Hash.encodeAesonEd25519KeyHash))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(encodeAesonRelay))(Aeson.gEncodeAesonCons(Serialization_Address.encodeAesonRewardAddress)(Aeson.gEncodeAesonCons(Serialization_Types.encodeAesonVRFKeyHash)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "vrfKeyhash";
                }
            })())({
                reflectSymbol: function () {
                    return "rewardAccount";
                }
            })())({
                reflectSymbol: function () {
                    return "relays";
                }
            })())({
                reflectSymbol: function () {
                    return "poolOwners";
                }
            })())({
                reflectSymbol: function () {
                    return "poolMetadata";
                }
            })())({
                reflectSymbol: function () {
                    return "pledge";
                }
            })())({
                reflectSymbol: function () {
                    return "operator";
                }
            })())({
                reflectSymbol: function () {
                    return "margin";
                }
            })())({
                reflectSymbol: function () {
                    return "cost";
                }
            })())())("PoolRegistration")(v.value0));
        };
        if (v instanceof PoolRetirement) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonEpoch)(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonEd25519KeyHash)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "poolKeyhash";
                }
            })())({
                reflectSymbol: function () {
                    return "epoch";
                }
            })())())("PoolRetirement")(v.value0));
        };
        if (v instanceof GenesisKeyDelegation) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonGenesisDelegat)(Aeson.gEncodeAesonCons(encodeAesonGenesisHash)(Aeson.gEncodeAesonCons(Serialization_Types.encodeAesonVRFKeyHash)(Aeson.gEncodeAesonNil)({
                reflectSymbol: function () {
                    return "vrfKeyhash";
                }
            })())({
                reflectSymbol: function () {
                    return "genesisHash";
                }
            })())({
                reflectSymbol: function () {
                    return "genesisDelegateHash";
                }
            })())())("GenesisKeyDelegation")(v.value0));
        };
        if (v instanceof MoveInstantaneousRewardsCert) {
            return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Helpers["encodeTagged'"](encodeAesonMoveInstantane)("MoveInstantaneousReward")(v.value0));
        };
        throw new Error("Failed pattern match at Cardano.Types.Transaction (line 603, column 18 - line 616, column 8): " + [ v.constructor.name ]);
    }
};
var encodeAesonAuxiliaryDataH = Types_ByteArray.encodeAesonByteArray;
var encodeAesonTxBody = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonAuxiliaryDataH))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonCertificate)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Transaction.encodeAesonTransactionInp)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonTransactionOut))(Aeson.gEncodeAesonCons(Cardano_Types_Value.encodeAesonCoin)(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonMint))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonNetworkId))(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(encodeAesonTransactionOut))(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(encodeAesonRequiredSigner)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonScriptDataHash))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Cardano_Types_Value.encodeAesonCoin))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonSlot))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonEpoch)(Aeson.gEncodeAesonCons(encodeAesonProposedProtoc)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "proposedProtocolParameterUpdates";
            }
        })())({
            reflectSymbol: function () {
                return "epoch";
            }
        })())()))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Serialization_Address.encodeAesonSlot))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonAeson))(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "withdrawals";
            }
        })())({
            reflectSymbol: function () {
                return "validityStartInterval";
            }
        })())({
            reflectSymbol: function () {
                return "update";
            }
        })())({
            reflectSymbol: function () {
                return "ttl";
            }
        })())({
            reflectSymbol: function () {
                return "totalCollateral";
            }
        })())({
            reflectSymbol: function () {
                return "scriptDataHash";
            }
        })())({
            reflectSymbol: function () {
                return "requiredSigners";
            }
        })())({
            reflectSymbol: function () {
                return "referenceInputs";
            }
        })())({
            reflectSymbol: function () {
                return "outputs";
            }
        })())({
            reflectSymbol: function () {
                return "networkId";
            }
        })())({
            reflectSymbol: function () {
                return "mint";
            }
        })())({
            reflectSymbol: function () {
                return "inputs";
            }
        })())({
            reflectSymbol: function () {
                return "fee";
            }
        })())({
            reflectSymbol: function () {
                return "collateralReturn";
            }
        })())({
            reflectSymbol: function () {
                return "collateral";
            }
        })())({
            reflectSymbol: function () {
                return "certs";
            }
        })())({
            reflectSymbol: function () {
                return "auxiliaryDataHash";
            }
        })())())({
            inputs: Helpers.encodeSet(Types_Transaction.encodeAesonTransactionInp)(v.inputs),
            withdrawals: Data_Functor.map(Data_Maybe.functorMaybe)(Helpers.encodeMap(Serialization_Address.encodeAesonRewardAddress)(Cardano_Types_Value.encodeAesonCoin))(v.withdrawals),
            referenceInputs: Helpers.encodeSet(Types_Transaction.encodeAesonTransactionInp)(v.referenceInputs),
            auxiliaryDataHash: v.auxiliaryDataHash,
            certs: v.certs,
            collateral: v.collateral,
            collateralReturn: v.collateralReturn,
            fee: v.fee,
            mint: v.mint,
            networkId: v.networkId,
            outputs: v.outputs,
            requiredSigners: v.requiredSigners,
            scriptDataHash: v.scriptDataHash,
            totalCollateral: v.totalCollateral,
            ttl: v.ttl,
            update: v.update,
            validityStartInterval: v.validityStartInterval
        });
    }
};
var encodeAesonAuxiliaryData = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Types_TransactionMetadata.encodeAesonGeneralTransac))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Cardano_Types_NativeScript.encodeAesonNativeScript)))(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Aeson.encodeAesonArray(Types_Scripts.encodeAesonPlutusScript)))(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "plutusScripts";
    }
})())({
    reflectSymbol: function () {
        return "nativeScripts";
    }
})())({
    reflectSymbol: function () {
        return "metadata";
    }
})())();
var encodeAesonTransaction = Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(encodeAesonAuxiliaryData))(Aeson.gEncodeAesonCons(encodeAesonTxBody)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBoolean)(Aeson.gEncodeAesonCons(encodeAesonTransactionWit)(Aeson.gEncodeAesonNil)({
    reflectSymbol: function () {
        return "witnessSet";
    }
})())({
    reflectSymbol: function () {
        return "isValid";
    }
})())({
    reflectSymbol: function () {
        return "body";
    }
})())({
    reflectSymbol: function () {
        return "auxiliaryData";
    }
})())();
var decodeAesonNonce = {
    decodeAeson: function (aeson) {
        var err = new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Nonce"));
        return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(HashNonce.create)(Aeson.decodeAeson(Types_ByteArray.decodeAesonByteArray)(aeson)))(Aeson.caseAesonString(err)(function (v) {
            if (v === "neutral") {
                return Control_Applicative.pure(Data_Either.applicativeEither)(IdentityNonce.value);
            };
            return err;
        })(aeson));
    }
};
var _witnessSet = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.witnessSet, function (ws) {
            return {
                body: v.body,
                witnessSet: ws,
                isValid: v.isValid,
                auxiliaryData: v.auxiliaryData
            };
        });
    })(dictStrong);
};
var _withdrawals = function (dictStrong) {
    var $587 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $588 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "withdrawals";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($589) {
        return $587($588($589));
    };
};
var _vkeys = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.vkeys, function (vk) {
            return {
                vkeys: vk,
                nativeScripts: v.nativeScripts,
                bootstraps: v.bootstraps,
                plutusScripts: v.plutusScripts,
                plutusData: v.plutusData,
                redeemers: v.redeemers
            };
        });
    })(dictStrong);
};
var _validityStartInterval = function (dictStrong) {
    var $590 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $591 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "validityStartInterval";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($592) {
        return $590($591($592));
    };
};
var _update = function (dictStrong) {
    var $593 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $594 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "update";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($595) {
        return $593($594($595));
    };
};
var _ttl = function (dictStrong) {
    var $596 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $597 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "ttl";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($598) {
        return $596($597($598));
    };
};
var _totalCollateral = function (dictStrong) {
    var $599 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $600 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "totalCollateral";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($601) {
        return $599($600($601));
    };
};
var _scriptDataHash = function (dictStrong) {
    var $602 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $603 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "scriptDataHash";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($604) {
        return $602($603($604));
    };
};
var _requiredSigners = function (dictStrong) {
    var $605 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $606 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "requiredSigners";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($607) {
        return $605($606($607));
    };
};
var _referenceInputs = function (dictStrong) {
    var $608 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $609 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "referenceInputs";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($610) {
        return $608($609($610));
    };
};
var _redeemers = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.redeemers, function (red) {
            return {
                vkeys: v.vkeys,
                nativeScripts: v.nativeScripts,
                bootstraps: v.bootstraps,
                plutusScripts: v.plutusScripts,
                plutusData: v.plutusData,
                redeemers: red
            };
        });
    })(dictStrong);
};
var _plutusScripts = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.plutusScripts, function (ps) {
            return {
                vkeys: v.vkeys,
                nativeScripts: v.nativeScripts,
                bootstraps: v.bootstraps,
                plutusScripts: ps,
                plutusData: v.plutusData,
                redeemers: v.redeemers
            };
        });
    })(dictStrong);
};
var _plutusData = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.plutusData, function (pd) {
            return {
                vkeys: v.vkeys,
                nativeScripts: v.nativeScripts,
                bootstraps: v.bootstraps,
                plutusScripts: v.plutusScripts,
                plutusData: pd,
                redeemers: v.redeemers
            };
        });
    })(dictStrong);
};
var _outputs = function (dictStrong) {
    var $611 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $612 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "outputs";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($613) {
        return $611($612($613));
    };
};
var _networkId = function (dictStrong) {
    var $614 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $615 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "networkId";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($616) {
        return $614($615($616));
    };
};
var _nativeScripts = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.nativeScripts, function (ns) {
            return {
                vkeys: v.vkeys,
                nativeScripts: ns,
                bootstraps: v.bootstraps,
                plutusScripts: v.plutusScripts,
                plutusData: v.plutusData,
                redeemers: v.redeemers
            };
        });
    })(dictStrong);
};
var _mint = function (dictStrong) {
    var $617 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $618 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "mint";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($619) {
        return $617($618($619));
    };
};
var _isValid = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.isValid, function (iv) {
            return {
                body: v.body,
                witnessSet: v.witnessSet,
                isValid: iv,
                auxiliaryData: v.auxiliaryData
            };
        });
    })(dictStrong);
};
var _inputs = function (dictStrong) {
    var $620 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $621 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "inputs";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($622) {
        return $620($621($622));
    };
};
var _fee = function (dictStrong) {
    var $623 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $624 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "fee";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($625) {
        return $623($624($625));
    };
};
var _collateralReturn = function (dictStrong) {
    var $626 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $627 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "collateralReturn";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($628) {
        return $626($627($628));
    };
};
var _collateral = function (dictStrong) {
    var $629 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $630 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "collateral";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($631) {
        return $629($630($631));
    };
};
var _certs = function (dictStrong) {
    var $632 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $633 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "certs";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($634) {
        return $632($633($634));
    };
};
var _bootstraps = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.bootstraps, function (bs) {
            return {
                vkeys: v.vkeys,
                nativeScripts: v.nativeScripts,
                bootstraps: bs,
                plutusScripts: v.plutusScripts,
                plutusData: v.plutusData,
                redeemers: v.redeemers
            };
        });
    })(dictStrong);
};
var _body = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.body, function (bod) {
            return {
                body: bod,
                witnessSet: v.witnessSet,
                isValid: v.isValid,
                auxiliaryData: v.auxiliaryData
            };
        });
    })(dictStrong);
};
var _auxiliaryDataHash = function (dictStrong) {
    var $635 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
    var $636 = Data_Lens_Record.prop({
        reflectSymbol: function () {
            return "auxiliaryDataHash";
        }
    })()()(Data_Symbol.SProxy.value)(dictStrong);
    return function ($637) {
        return $635($636($637));
    };
};
var _auxiliaryData = function (dictStrong) {
    return Data_Lens_Lens["lens'"](function (v) {
        return new Data_Tuple.Tuple(v.auxiliaryData, function (ad) {
            return {
                body: v.body,
                witnessSet: v.witnessSet,
                isValid: v.isValid,
                auxiliaryData: ad
            };
        });
    })(dictStrong);
};
module.exports = {
    AuxiliaryData: AuxiliaryData,
    AuxiliaryDataHash: AuxiliaryDataHash,
    StakeRegistration: StakeRegistration,
    StakeDeregistration: StakeDeregistration,
    StakeDelegation: StakeDelegation,
    PoolRegistration: PoolRegistration,
    PoolRetirement: PoolRetirement,
    GenesisKeyDelegation: GenesisKeyDelegation,
    MoveInstantaneousRewardsCert: MoveInstantaneousRewardsCert,
    CostModel: CostModel,
    Costmdls: Costmdls,
    Ed25519Signature: Ed25519Signature,
    Epoch: Epoch,
    GenesisDelegateHash: GenesisDelegateHash,
    GenesisHash: GenesisHash,
    Ipv4: Ipv4,
    Ipv6: Ipv6,
    MIRToStakeCredentials: MIRToStakeCredentials,
    Mint: Mint,
    ToOtherPot: ToOtherPot,
    ToStakeCreds: ToStakeCreds,
    IdentityNonce: IdentityNonce,
    HashNonce: HashNonce,
    PoolMetadata: PoolMetadata,
    PoolMetadataHash: PoolMetadataHash,
    ProposedProtocolParameterUpdates: ProposedProtocolParameterUpdates,
    PublicKey: PublicKey,
    Redeemer: Redeemer,
    SingleHostAddr: SingleHostAddr,
    SingleHostName: SingleHostName,
    MultiHostName: MultiHostName,
    RequiredSigner: RequiredSigner,
    ScriptDataHash: ScriptDataHash,
    Transaction: Transaction,
    TransactionOutput: TransactionOutput,
    TransactionWitnessSet: TransactionWitnessSet,
    TxBody: TxBody,
    URL: URL,
    Vkey: Vkey,
    Vkeywitness: Vkeywitness,
    "_auxiliaryData": _auxiliaryData,
    "_auxiliaryDataHash": _auxiliaryDataHash,
    "_body": _body,
    "_bootstraps": _bootstraps,
    "_certs": _certs,
    "_collateral": _collateral,
    "_collateralReturn": _collateralReturn,
    "_fee": _fee,
    "_inputs": _inputs,
    "_isValid": _isValid,
    "_mint": _mint,
    "_nativeScripts": _nativeScripts,
    "_networkId": _networkId,
    "_outputs": _outputs,
    "_plutusData": _plutusData,
    "_plutusScripts": _plutusScripts,
    "_redeemers": _redeemers,
    "_referenceInputs": _referenceInputs,
    "_requiredSigners": _requiredSigners,
    "_scriptDataHash": _scriptDataHash,
    "_totalCollateral": _totalCollateral,
    "_ttl": _ttl,
    "_update": _update,
    "_validityStartInterval": _validityStartInterval,
    "_vkeys": _vkeys,
    "_withdrawals": _withdrawals,
    "_witnessSet": _witnessSet,
    genericTransaction_: genericTransaction_,
    eqTransaction: eqTransaction,
    newtypeTransaction_: newtypeTransaction_,
    encodeAesonTransaction: encodeAesonTransaction,
    showTransaction: showTransaction,
    semigroupTransaction: semigroupTransaction,
    monoidTransaction: monoidTransaction,
    genericTxBody_: genericTxBody_,
    newtypeTxBody_: newtypeTxBody_,
    eqTxBody: eqTxBody,
    showTxBody: showTxBody,
    semigroupTxBody: semigroupTxBody,
    monoidTxBody: monoidTxBody,
    encodeAesonTxBody: encodeAesonTxBody,
    newtypeScriptDataHash_: newtypeScriptDataHash_,
    genericScriptDataHash_: genericScriptDataHash_,
    eqScriptDataHash: eqScriptDataHash,
    encodeAesonScriptDataHash: encodeAesonScriptDataHash,
    showScriptDataHash: showScriptDataHash,
    genericMint_: genericMint_,
    newtypeMint_: newtypeMint_,
    eqMint: eqMint,
    semigroupMint: semigroupMint,
    monoidMint: monoidMint,
    encodeAesonMint: encodeAesonMint,
    showMint: showMint,
    genericAuxiliaryDataHash_: genericAuxiliaryDataHash_,
    newtypeAuxiliaryDataHash_: newtypeAuxiliaryDataHash_,
    eqAuxiliaryDataHash: eqAuxiliaryDataHash,
    encodeAesonAuxiliaryDataH: encodeAesonAuxiliaryDataH,
    showAuxiliaryDataHash: showAuxiliaryDataHash,
    newtypeProposedProtocolPa: newtypeProposedProtocolPa,
    eqProposedProtocolParamet: eqProposedProtocolParamet,
    genericProposedProtocolPa: genericProposedProtocolPa,
    showProposedProtocolParam: showProposedProtocolParam,
    encodeAesonProposedProtoc: encodeAesonProposedProtoc,
    newtypeGenesisHash_: newtypeGenesisHash_,
    eqGenesisHash: eqGenesisHash,
    ordGenesisHash: ordGenesisHash,
    genericGenesisHash_: genericGenesisHash_,
    encodeAesonGenesisHash: encodeAesonGenesisHash,
    showGenesisHash: showGenesisHash,
    newtypeCostmdls_: newtypeCostmdls_,
    eqCostmdls: eqCostmdls,
    genericCostmdls_: genericCostmdls_,
    showCostmdls: showCostmdls,
    encodeAesonCostmdls: encodeAesonCostmdls,
    newtypeCostModel_: newtypeCostModel_,
    eqCostModel: eqCostModel,
    encodeAesonCostModel: encodeAesonCostModel,
    genericNonce_: genericNonce_,
    genericCostModel_: genericCostModel_,
    showCostModel: showCostModel,
    eqNonce: eqNonce,
    showNonce: showNonce,
    decodeAesonNonce: decodeAesonNonce,
    encodeAesonNonce: encodeAesonNonce,
    newtypeEpoch_: newtypeEpoch_,
    genericEpoch_: genericEpoch_,
    eqEpoch: eqEpoch,
    encodeAesonEpoch: encodeAesonEpoch,
    showEpoch: showEpoch,
    eqIpv4: eqIpv4,
    genericIpv4_: genericIpv4_,
    newtypeIpv4_: newtypeIpv4_,
    encodeAesonIpv4: encodeAesonIpv4,
    showIpv4: showIpv4,
    eqIpv6: eqIpv6,
    genericIpv6_: genericIpv6_,
    newtypeIpv6_: newtypeIpv6_,
    encodeAesonIpv6: encodeAesonIpv6,
    showIpv6: showIpv6,
    eqRelay: eqRelay,
    genericRelay_: genericRelay_,
    showRelay: showRelay,
    encodeAesonRelay: encodeAesonRelay,
    eqURL: eqURL,
    genericURL_: genericURL_,
    newtypeURL_: newtypeURL_,
    encodeAesonURL: encodeAesonURL,
    showURL: showURL,
    eqPoolMetadataHash: eqPoolMetadataHash,
    genericPoolMetadataHash_: genericPoolMetadataHash_,
    newtypePoolMetadataHash_: newtypePoolMetadataHash_,
    encodeAesonPoolMetadataHa: encodeAesonPoolMetadataHa,
    showPoolMetadataHash: showPoolMetadataHash,
    eqPoolMetadata: eqPoolMetadata,
    genericPoolMetadata_: genericPoolMetadata_,
    showPoolMetadata: showPoolMetadata,
    encodeAesonPoolMetadata: encodeAesonPoolMetadata,
    eqGenesisDelegateHash: eqGenesisDelegateHash,
    genericGenesisDelegateHas: genericGenesisDelegateHas,
    encodeAesonGenesisDelegat: encodeAesonGenesisDelegat,
    showGenesisDelegateHash: showGenesisDelegateHash,
    eqMIRToStakeCredentials: eqMIRToStakeCredentials,
    genericMIRToStakeCredenti: genericMIRToStakeCredenti,
    showMIRToStakeCredentials: showMIRToStakeCredentials,
    encodeAesonMIRToStakeCred: encodeAesonMIRToStakeCred,
    eqMoveInstantaneousReward: eqMoveInstantaneousReward,
    genericMoveInstantaneousR: genericMoveInstantaneousR,
    showMoveInstantaneousRewa: showMoveInstantaneousRewa,
    encodeAesonMoveInstantane: encodeAesonMoveInstantane,
    eqCertificate: eqCertificate,
    genericCertificate_: genericCertificate_,
    showCertificate: showCertificate,
    encodeAesonCertificate: encodeAesonCertificate,
    genericTransactionWitness: genericTransactionWitness,
    newtypeTransactionWitness: newtypeTransactionWitness,
    eqTransactionWitnessSet: eqTransactionWitnessSet,
    encodeAesonTransactionWit: encodeAesonTransactionWit,
    showTransactionWitnessSet: showTransactionWitnessSet,
    semigroupTransactionWitne: semigroupTransactionWitne,
    monoidTransactionWitnessS: monoidTransactionWitnessS,
    newtypeRequiredSigner_: newtypeRequiredSigner_,
    eqRequiredSigner: eqRequiredSigner,
    ordRequiredSigner: ordRequiredSigner,
    encodeAesonRequiredSigner: encodeAesonRequiredSigner,
    genericRequiredSigner_: genericRequiredSigner_,
    showRequiredSigner: showRequiredSigner,
    genericVkeywitness_: genericVkeywitness_,
    eqVkeywitness: eqVkeywitness,
    encodeAesonVkeywitness: encodeAesonVkeywitness,
    newtypeVkeywitness_: newtypeVkeywitness_,
    showVkeywitness: showVkeywitness,
    genericVkey_: genericVkey_,
    newtypeVkey_: newtypeVkey_,
    eqVkey: eqVkey,
    ordVkey: ordVkey,
    encodeAesonVkey: encodeAesonVkey,
    showVkey: showVkey,
    genericPublicKey_: genericPublicKey_,
    newtypePublicKey_: newtypePublicKey_,
    eqPublicKey: eqPublicKey,
    ordPublicKey: ordPublicKey,
    encodeAesonPublicKey: encodeAesonPublicKey,
    showPublicKey: showPublicKey,
    genericEd25519Signature_: genericEd25519Signature_,
    eqEd25519Signature: eqEd25519Signature,
    ordEd25519Signature: ordEd25519Signature,
    encodeAesonEd25519Signatu: encodeAesonEd25519Signatu,
    showEd25519Signature: showEd25519Signature,
    genericRedeemer_: genericRedeemer_,
    newtypeRedeemer_: newtypeRedeemer_,
    eqRedeemer: eqRedeemer,
    ordRedeemer: ordRedeemer,
    encodeAesonRedeemer: encodeAesonRedeemer,
    showRedeemer: showRedeemer,
    genericAuxiliaryData_: genericAuxiliaryData_,
    newtypeAuxiliaryData_: newtypeAuxiliaryData_,
    eqAuxiliaryData: eqAuxiliaryData,
    encodeAesonAuxiliaryData: encodeAesonAuxiliaryData,
    showAuxiliaryData: showAuxiliaryData,
    semigroupAuxiliaryData: semigroupAuxiliaryData,
    monoidAuxiliaryData: monoidAuxiliaryData,
    genericTransactionOutput_: genericTransactionOutput_,
    newtypeTransactionOutput_: newtypeTransactionOutput_,
    eqTransactionOutput: eqTransactionOutput,
    encodeAesonTransactionOut: encodeAesonTransactionOut,
    showTransactionOutput: showTransactionOutput
};
