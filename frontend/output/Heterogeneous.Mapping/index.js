// Generated by purs version 0.14.5
"use strict";
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Functor_Variant = require("../Data.Functor.Variant/index.js");
var Data_FunctorWithIndex = require("../Data.FunctorWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Variant = require("../Data.Variant/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var ConstMapping = function (x) {
    return x;
};
var mappingWithIndex = function (dict) {
    return dict.mappingWithIndex;
};
var mappingFunction = {
    mapping: function (k) {
        return k;
    }
};
var mapping = function (dict) {
    return dict.mapping;
};
var mapVariantWithIndexNil = {
    mapVariantWithIndex: function (v) {
        return function (v1) {
            return Data_Variant.case_;
        };
    }
};
var mapVariantWithIndex = function (dict) {
    return dict.mapVariantWithIndex;
};
var mapVariantWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantWithIndex) {
                    return {
                        mapVariantWithIndex: function (v) {
                            return function (fn) {
                                return Data_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)((function () {
                                    var $72 = Data_Variant.inj()(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                    var $73 = mappingWithIndex(dictMappingWithIndex)(fn)(Type_Proxy["Proxy"].value);
                                    return function ($74) {
                                        return $72($73($74));
                                    };
                                })())(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value)(fn));
                            };
                        }
                    };
                };
            };
        };
    };
};
var mapVariantFWithIndexNil = {
    mapVariantFWithIndex: function (v) {
        return function (v1) {
            return Data_Functor_Variant.case_;
        };
    }
};
var mapVariantFWithIndex = function (dict) {
    return dict.mapVariantFWithIndex;
};
var mapVariantFWithIndexCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictMappingWithIndex) {
                return function (dictMapVariantFWithIndex) {
                    return function (dictFunctor) {
                        return {
                            mapVariantFWithIndex: function (v) {
                                return function (fn) {
                                    return Data_Functor_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)((function () {
                                        var $75 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(Type_Proxy["Proxy"].value);
                                        var $76 = mappingWithIndex(dictMappingWithIndex)(fn)(Type_Proxy["Proxy"].value);
                                        return function ($77) {
                                            return $75($76($77));
                                        };
                                    })())(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value)(fn));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var mapRecordWithIndexNil = {
    mapRecordWithIndexBuilder: function (v) {
        return function (v1) {
            return Control_Category.identity(Record_Builder.categoryBuilder);
        };
    }
};
var mapRecordWithIndexBuilder = function (dict) {
    return dict.mapRecordWithIndexBuilder;
};
var mapRecordWithIndexCons = function (dictIsSymbol) {
    return function (dictMappingWithIndex) {
        return function (dictMapRecordWithIndex) {
            return function (dictCons) {
                return function (dictCons1) {
                    return {
                        mapRecordWithIndexBuilder: function (v) {
                            return function (f) {
                                return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify()()(dictIsSymbol)(Type_Proxy["Proxy"].value)(mappingWithIndex(dictMappingWithIndex)(f)(Type_Proxy["Proxy"].value)))(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value)(f));
                            };
                        }
                    };
                };
            };
        };
    };
};
var hmapWithIndexVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return {
            hmapWithIndex: mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value)
        };
    };
};
var hmapWithIndexVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return {
            hmapWithIndex: mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value)
        };
    };
};
var hmapWithIndexRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return {
            hmapWithIndex: (function () {
                var $78 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
                return function ($79) {
                    return Record_Builder.build($78($79));
                };
            })()
        };
    };
};
var hmapWithIndexApp = function (dictFunctorWithIndex) {
    return function (dictMappingWithIndex) {
        return {
            hmapWithIndex: function (f) {
                return function (v) {
                    return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(mappingWithIndex(dictMappingWithIndex)(f))(v);
                };
            }
        };
    };
};
var hmapWithIndex = function (dict) {
    return dict.hmapWithIndex;
};
var hmapVariantF = function (dictRowToList) {
    return function (dictMapVariantFWithIndex) {
        return {
            hmap: (function () {
                var $80 = mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value);
                return function ($81) {
                    return $80(ConstMapping($81));
                };
            })()
        };
    };
};
var hmapVariant = function (dictRowToList) {
    return function (dictMapVariantWithIndex) {
        return {
            hmap: (function () {
                var $82 = mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value);
                return function ($83) {
                    return $82(ConstMapping($83));
                };
            })()
        };
    };
};
var hmapTuple = function (dictMapping) {
    return function (dictMapping1) {
        return {
            hmap: function (fn) {
                return function (v) {
                    return new Data_Tuple.Tuple(mapping(dictMapping)(fn)(v.value0), mapping(dictMapping1)(fn)(v.value1));
                };
            }
        };
    };
};
var hmapRecord = function (dictRowToList) {
    return function (dictMapRecordWithIndex) {
        return {
            hmap: (function () {
                var $84 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
                return function ($85) {
                    return Record_Builder.build($84(ConstMapping($85)));
                };
            })()
        };
    };
};
var hmapEither = function (dictMapping) {
    return function (dictMapping1) {
        return {
            hmap: function (fn) {
                return function (v) {
                    if (v instanceof Data_Either.Left) {
                        return new Data_Either.Left(mapping(dictMapping)(fn)(v.value0));
                    };
                    if (v instanceof Data_Either.Right) {
                        return new Data_Either.Right(mapping(dictMapping1)(fn)(v.value0));
                    };
                    throw new Error("Failed pattern match at Heterogeneous.Mapping (line 119, column 13 - line 121, column 36): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var hmapApp = function (dictFunctor) {
    return function (dictMapping) {
        return {
            hmap: function (f) {
                return function (v) {
                    return Data_Functor.map(dictFunctor)(mapping(dictMapping)(f))(v);
                };
            }
        };
    };
};
var hmap = function (dict) {
    return dict.hmap;
};
var constMapping = function (dictMapping) {
    return {
        mappingWithIndex: function (v) {
            return function (v1) {
                return mapping(dictMapping)(v);
            };
        }
    };
};
module.exports = {
    hmap: hmap,
    hmapWithIndex: hmapWithIndex,
    mapRecordWithIndexBuilder: mapRecordWithIndexBuilder,
    mapVariantFWithIndex: mapVariantFWithIndex,
    mapVariantWithIndex: mapVariantWithIndex,
    mapping: mapping,
    mappingWithIndex: mappingWithIndex,
    ConstMapping: ConstMapping,
    mappingFunction: mappingFunction,
    constMapping: constMapping,
    hmapApp: hmapApp,
    hmapWithIndexApp: hmapWithIndexApp,
    hmapRecord: hmapRecord,
    hmapWithIndexRecord: hmapWithIndexRecord,
    mapRecordWithIndexCons: mapRecordWithIndexCons,
    mapRecordWithIndexNil: mapRecordWithIndexNil,
    hmapTuple: hmapTuple,
    hmapEither: hmapEither,
    hmapVariant: hmapVariant,
    hmapWithIndexVariant: hmapWithIndexVariant,
    mapVariantWithIndexCons: mapVariantWithIndexCons,
    mapVariantWithIndexNil: mapVariantWithIndexNil,
    hmapVariantF: hmapVariantF,
    hmapWithIndexVariantF: hmapWithIndexVariantF,
    mapVariantFWithIndexCons: mapVariantFWithIndexCons,
    mapVariantFWithIndexNil: mapVariantFWithIndexNil
};
