// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Aeson_Decode = require("../Aeson.Decode/index.js");
var Aeson_Encode = require("../Aeson.Encode/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var FromData = require("../FromData/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var ToData = require("../ToData/index.js");
var TypeLevel_Nat = require("../TypeLevel.Nat/index.js");
var TypeLevel_RowList_Unordered_Indexed = require("../TypeLevel.RowList.Unordered.Indexed/index.js");
var Types_PubKeyHash = require("../Types.PubKeyHash/index.js");
var Types_Scripts = require("../Types.Scripts/index.js");
var PubKeyCredential = (function () {
    function PubKeyCredential(value0) {
        this.value0 = value0;
    };
    PubKeyCredential.create = function (value0) {
        return new PubKeyCredential(value0);
    };
    return PubKeyCredential;
})();
var ScriptCredential = (function () {
    function ScriptCredential(value0) {
        this.value0 = value0;
    };
    ScriptCredential.create = function (value0) {
        return new ScriptCredential(value0);
    };
    return ScriptCredential;
})();
var StakingHash = (function () {
    function StakingHash(value0) {
        this.value0 = value0;
    };
    StakingHash.create = function (value0) {
        return new StakingHash(value0);
    };
    return StakingHash;
})();
var StakingPtr = (function () {
    function StakingPtr(value0) {
        this.value0 = value0;
    };
    StakingPtr.create = function (value0) {
        return new StakingPtr(value0);
    };
    return StakingPtr;
})();
var hasPlutusSchemaStakingCre = {};
var hasPlutusSchemaCredential = {};
var genericStakingCredential_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new StakingHash(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new StakingPtr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 108, column 1 - line 108, column 44): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof StakingHash) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof StakingPtr) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 108, column 1 - line 108, column 44): " + [ x.constructor.name ]);
    }
};
var genericCredential_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new PubKeyCredential(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new ScriptCredential(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 50, column 1 - line 50, column 37): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof PubKeyCredential) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof ScriptCredential) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Plutus.Types.Credential (line 50, column 1 - line 50, column 37): " + [ x.constructor.name ]);
    }
};
var showCredential = {
    show: Data_Show_Generic.genericShow(genericCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPubKeyHash))({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })))
};
var showStakingCredential = {
    show: Data_Show_Generic.genericShow(genericStakingCredential_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCredential))({
        reflectSymbol: function () {
            return "StakingHash";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "certIx";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "slot";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "txIx";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Address.showTransactionIndex))(Serialization_Address.showSlot))(Serialization_Address.showCertificateIndex))))({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })))
};
var toDataCredential = {
    toData: ToData.genericToData(genericCredential_)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    })(ToData.toDataArgsArgument(Types_PubKeyHash.toDataPubKeyHash)({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaConstruct({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })(ToData.toDataArgsArgument(Types_Scripts.toDataValidatorHash)({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))
};
var toDataStakingCredential = {
    toData: ToData.genericToData(genericStakingCredential_)(ToData.toDataWithSchemaSum(ToData.toDataWithSchemaConstruct({
        reflectSymbol: function () {
            return "StakingHash";
        }
    })(ToData.toDataArgsArgument(toDataCredential)({
        reflectSymbol: function () {
            return "StakingHash";
        }
    }))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "StakingHash";
        }
    })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))(ToData.toDataWithSchemaConstruct({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(Serialization_Address.toDataCertificateIndex)(ToData.toDataArgsRLHelperCons(Serialization_Address.toDataSlot)(ToData.toDataArgsRLHelperCons(Serialization_Address.toDataTransactionIndex)(ToData.toDataArgsRLHelperNilRow)()()()({
        reflectSymbol: function () {
            return "txIx";
        }
    })({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
        reflectSymbol: function () {
            return "slot";
        }
    })({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })()()()()(TypeLevel_Nat.knownNatZ))()()()({
        reflectSymbol: function () {
            return "certIx";
        }
    })({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))
};
var fromDataCredential = {
    fromData: FromData.genericFromData(genericCredential_)(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "PubKeyCredential";
        }
    })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgument(Types_PubKeyHash.fromDataPubKeyHash))(TypeLevel_Nat.knownNatZ))(FromData.fromDataWithSchemaConstru({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
        reflectSymbol: function () {
            return "ScriptCredential";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataArgsArgument(Types_Scripts.fromDataValidatorHash))(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))
};
var fromDataStakingCredential = {
    fromData: FromData.genericFromData(genericStakingCredential_)(FromData.fromDataWithSchemaSum(FromData.fromDataWithSchemaConstru({
        reflectSymbol: function () {
            return "StakingHash";
        }
    })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "StakingHash";
        }
    })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgument(fromDataCredential))(TypeLevel_Nat.knownNatZ))(FromData.fromDataWithSchemaConstru({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()({
        reflectSymbol: function () {
            return "StakingPtr";
        }
    })(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(Serialization_Address.fromDataSlot)(FromData.fromDataArgsRLCons(Serialization_Address.fromDataTransactionIndex)(FromData.fromDataArgsRLCons(Serialization_Address.fromDataCertificateIndex)(FromData.fromDataArgsRLNilRow)()()({
        reflectSymbol: function () {
            return "certIx";
        }
    }))()()({
        reflectSymbol: function () {
            return "txIx";
        }
    }))()()({
        reflectSymbol: function () {
            return "slot";
        }
    }))()()())(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ))))
};
var eqCredential = {
    eq: function (x) {
        return function (y) {
            if (x instanceof PubKeyCredential && y instanceof PubKeyCredential) {
                return Data_Eq.eq(Types_PubKeyHash.eqPubKeyHash)(x.value0)(y.value0);
            };
            if (x instanceof ScriptCredential && y instanceof ScriptCredential) {
                return Data_Eq.eq(Types_Scripts.eqValidatorHash)(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var eqStakingCredential = {
    eq: function (x) {
        return function (y) {
            if (x instanceof StakingHash && y instanceof StakingHash) {
                return Data_Eq.eq(eqCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakingPtr && y instanceof StakingPtr) {
                return Data_Eq.eq(Serialization_Address.eqCertificateIndex)(x.value0.certIx)(y.value0.certIx) && Data_Eq.eq(Serialization_Address.eqSlot)(x.value0.slot)(y.value0.slot) && Data_Eq.eq(Serialization_Address.eqTransactionIndex)(x.value0.txIx)(y.value0.txIx);
            };
            return false;
        };
    }
};
var ordCredential = {
    compare: function (x) {
        return function (y) {
            if (x instanceof PubKeyCredential && y instanceof PubKeyCredential) {
                return Data_Ord.compare(Types_PubKeyHash.ordPubKeyHash)(x.value0)(y.value0);
            };
            if (x instanceof PubKeyCredential) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PubKeyCredential) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof ScriptCredential && y instanceof ScriptCredential) {
                return Data_Ord.compare(Types_Scripts.ordValidatorHash)(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 49, column 1 - line 49, column 31): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqCredential;
    }
};
var ordStakingCredential = {
    compare: function (x) {
        return function (y) {
            if (x instanceof StakingHash && y instanceof StakingHash) {
                return Data_Ord.compare(ordCredential)(x.value0)(y.value0);
            };
            if (x instanceof StakingHash) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof StakingHash) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof StakingPtr && y instanceof StakingPtr) {
                var v = Data_Ord.compare(Serialization_Address.ordCertificateIndex)(x.value0.certIx)(y.value0.certIx);
                if (v instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                var v1 = Data_Ord.compare(Serialization_Address.ordSlot)(x.value0.slot)(y.value0.slot);
                if (v1 instanceof Data_Ordering.LT) {
                    return Data_Ordering.LT.value;
                };
                if (v1 instanceof Data_Ordering.GT) {
                    return Data_Ordering.GT.value;
                };
                return Data_Ord.compare(Serialization_Address.ordTransactionIndex)(x.value0.txIx)(y.value0.txIx);
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 107, column 1 - line 107, column 38): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqStakingCredential;
    }
};
var encodeAesonCredential = {
    "encodeAeson'": (function () {
        var $102 = Aeson["encodeAeson'"](Aeson.encodeAesonAeson);
        var $103 = Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](function (v) {
            if (v instanceof PubKeyCredential) {
                return Aeson_Encode.encodeTagged("PubKeyCredential")(v.value0)(Aeson_Encode.value(Types_PubKeyHash.encodeAesonPubKeyHash));
            };
            if (v instanceof ScriptCredential) {
                return Aeson_Encode.encodeTagged("ScriptCredential")(v.value0)(Aeson_Encode.value(Types_Scripts.encodeAesonValidatorHash));
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 68, column 23 - line 72, column 23): " + [ v.constructor.name ]);
        }));
        return function ($104) {
            return $102($103($104));
        };
    })()
};
var encodeAesonStakingCredent = {
    "encodeAeson'": (function () {
        var $105 = Aeson["encodeAeson'"](Aeson.encodeAesonAeson);
        var $106 = Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](function (v) {
            if (v instanceof StakingHash) {
                return Aeson_Encode.encodeTagged("StakingHash")(v.value0)(Aeson_Encode.value(encodeAesonCredential));
            };
            if (v instanceof StakingPtr) {
                return Aeson_Encode.encodeTagged("StakingPtr")(new Data_Tuple.Tuple(v.value0.slot, new Data_Tuple.Tuple(v.value0.txIx, v.value0.certIx)))(Aeson_Encode.tuple(Aeson_Encode.tupleDivided(Aeson_Encode.toTupleEncoderTupleEncoder)(Aeson_Encode.value(Serialization_Address.encodeAesonSlot))(Aeson_Encode.tupleDivided(Aeson_Encode.toTupleEncoderEncoder)(Aeson_Encode.value(Serialization_Address.encodeAesonTransactionInd))(Aeson_Encode.value(Serialization_Address.encodeAesonCertificateInd)))));
            };
            throw new Error("Failed pattern match at Plutus.Types.Credential (line 136, column 15 - line 140, column 76): " + [ v.constructor.name ]);
        }));
        return function ($107) {
            return $105($106($107));
        };
    })()
};
var decodeAesonCredential = {
    decodeAeson: Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](Aeson_Decode.decode(Aeson_Decode.sumType("Credential")(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("PubKeyCredential", Aeson_Decode.content(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(PubKeyCredential.create)(Aeson_Decode.value(Types_PubKeyHash.decodeAesonPubKeyHash)))), new Data_Tuple.Tuple("ScriptCredential", Aeson_Decode.content(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(ScriptCredential.create)(Aeson_Decode.value(Types_Scripts.decodeAesonValidatorHash)))) ])))))
};
var decodeAesonStakingCredent = {
    decodeAeson: (function () {
        var toStakingPtr = function (slot) {
            return function (txIx) {
                return function (certIx) {
                    return new StakingPtr({
                        slot: slot,
                        txIx: txIx,
                        certIx: certIx
                    });
                };
            };
        };
        return Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](Aeson_Decode.decode(Aeson_Decode.sumType("StakingCredential")(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("StakingHash", Aeson_Decode.content(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(StakingHash.create)(Aeson_Decode.value(decodeAesonCredential)))), new Data_Tuple.Tuple("StakingPtr", Aeson_Decode.content(Aeson_Decode.tuple(Aeson_Decode.tupleApply(Aeson_Decode.toTupleDecoderDecoder)(Aeson_Decode.tupleApply(Aeson_Decode.toTupleDecoderDecoder)(Aeson_Decode.tupleMap(Aeson_Decode.toTupleDecoderDecoder)(toStakingPtr)(Aeson_Decode.value(Serialization_Address.decodeAesonSlot)))(Aeson_Decode.value(Serialization_Address.decodeAesonTransactionInd)))(Aeson_Decode.value(Serialization_Address.decodeAesonCertificateInd))))) ])))));
    })()
};
module.exports = {
    PubKeyCredential: PubKeyCredential,
    ScriptCredential: ScriptCredential,
    StakingHash: StakingHash,
    StakingPtr: StakingPtr,
    eqCredential: eqCredential,
    ordCredential: ordCredential,
    genericCredential_: genericCredential_,
    showCredential: showCredential,
    hasPlutusSchemaCredential: hasPlutusSchemaCredential,
    encodeAesonCredential: encodeAesonCredential,
    decodeAesonCredential: decodeAesonCredential,
    toDataCredential: toDataCredential,
    fromDataCredential: fromDataCredential,
    eqStakingCredential: eqStakingCredential,
    ordStakingCredential: ordStakingCredential,
    genericStakingCredential_: genericStakingCredential_,
    showStakingCredential: showStakingCredential,
    hasPlutusSchemaStakingCre: hasPlutusSchemaStakingCre,
    toDataStakingCredential: toDataStakingCredential,
    fromDataStakingCredential: fromDataStakingCredential,
    encodeAesonStakingCredent: encodeAesonStakingCredent,
    decodeAesonStakingCredent: decodeAesonStakingCredent
};
