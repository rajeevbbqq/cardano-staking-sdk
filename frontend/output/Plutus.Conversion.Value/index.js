// Generated by purs version 0.14.5
"use strict";
var Cardano_Types_Value = require("../Cardano.Types.Value/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Plutus_Types_AssocMap = require("../Plutus.Types.AssocMap/index.js");
var Plutus_Types_CurrencySymbol = require("../Plutus.Types.CurrencySymbol/index.js");
var Plutus_Types_Value = require("../Plutus.Types.Value/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var toPlutusValue = function (v) {
    var nonAdaValues = Data_Functor.mapFlipped(Data_List_Types.functorList)(Cardano_Types_Value.flattenNonAdaValue(v.value1))(function (v1) {
        return Data_Maybe.fromJust()(Plutus_Types_Value["singleton'"](Cardano_Types_Value.getCurrencySymbol(v1.value0))(Types_TokenName.getTokenName(v1.value1.value0))(v1.value1.value1));
    });
    var adaValue = (function () {
        if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
            return Data_Monoid.mempty(Plutus_Types_Value.monoidValue);
        };
        if (Data_Boolean.otherwise) {
            return Plutus_Types_Value.lovelaceValueOf(v.value0);
        };
        throw new Error("Failed pattern match at Plutus.Conversion.Value (line 75, column 3 - line 75, column 27): " + [  ]);
    })();
    return Data_Semigroup.append(Plutus_Types_Value.semigroupValue)(adaValue)(Data_Foldable.fold(Data_List_Types.foldableList)(Plutus_Types_Value.monoidValue)(nonAdaValues));
};
var fromPlutusValue = function (plutusValue) {
    var v = (function (x) {
        return {
            adaTokenMap: x.yes,
            nonAdaTokenMap: x.no
        };
    })(Data_Array.partition(function (v1) {
        return Data_Eq.eq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v1.value0)(Plutus_Types_CurrencySymbol.adaSymbol);
    })(Data_Newtype.unwrap()(Plutus_Types_Value.getValue(plutusValue))));
    var nonAdaAssets = Data_Maybe.fromJust()(Cardano_Types_Value.mkNonAdaAssetsFromTokenMap(Data_Traversable.traversableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.nonAdaTokenMap)(function (v1) {
        return new Data_Tuple.Tuple(Plutus_Types_CurrencySymbol.getCurrencySymbol(v1.value0), Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray)(Data_Newtype.unwrap()(v1.value1)));
    })));
    var adaValue = Data_Function.flip(Cardano_Types_Value.mkValue)(Data_Monoid.mempty(Cardano_Types_Value.monoidNonAdaAsset))(Data_Newtype.wrap()(Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(Data_Array.head(v.adaTokenMap)))(function (adaTokens) {
        return Plutus_Types_AssocMap.lookup(Types_TokenName.eqTokenName)(Types_TokenName.adaToken)(adaTokens);
    }))));
    return Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(adaValue)(Cardano_Types_Value.mkValue(Data_Monoid.mempty(Cardano_Types_Value.monoidCoin))(nonAdaAssets));
};
module.exports = {
    fromPlutusValue: fromPlutusValue,
    toPlutusValue: toPlutusValue
};
