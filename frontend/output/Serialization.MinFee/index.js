// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Cardano_Types_NativeScript = require("../Cardano.Types.NativeScript/index.js");
var Cardano_Types_Transaction = require("../Cardano.Types.Transaction/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Lens_Setter = require("../Data.Lens.Setter/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Strong = require("../Data.Profunctor.Strong/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var FfiHelpers = require("../FfiHelpers/index.js");
var NativeScripts = require("../NativeScripts/index.js");
var Serialization = require("../Serialization/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_BigNum = require("../Types.BigNum/index.js");
var fakeVkeywitness = new Data_Tuple.Tuple("ed25519_pk1p9sf9wz3t46u9ghht44203gerxt82kzqaqw74fqrmwjmdy8sjxmqknzq8j", "ed25519_sig1mr6pm5kanam2wkmae70jx7fjkzepghefj0lmnczu6fra6auf2urgrte5axxhunw4x34l3l8tj9c0t4le39tj8lpjdgxmqnujw07tkzs9m6t6x");
var addFakeSignatures = function (selfSigners) {
    return function (tx) {
        var requiredSigners = (function () {
            var $13 = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Serialization_Hash.ordEd25519KeyHash);
            var $14 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
            var $15 = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray));
            var $16 = Data_Newtype.unwrap();
            return function ($17) {
                return $13($14($15((function (v) {
                    return v.requiredSigners;
                })($16((function (v) {
                    return v.body;
                })($17))))));
            };
        })()(Data_Newtype.unwrap()(tx));
        var nsPossibleSigners = NativeScripts.getMaximumSigners(requiredSigners)(new Cardano_Types_NativeScript.ScriptAll((function () {
            var $18 = Data_Maybe.fromMaybe(Data_Monoid.mempty(Data_Monoid.monoidArray));
            var $19 = Data_Newtype.unwrap();
            return function ($20) {
                return $18((function (v) {
                    return v.nativeScripts;
                })($19((function (v) {
                    return v.witnessSet;
                })($20))));
            };
        })()(Data_Newtype.unwrap()(tx))));
        var nSelfSigners = (function () {
            var n = Data_Set.size(selfSigners);
            var $9 = n === 0;
            if ($9) {
                return 1;
            };
            return n;
        })();
        var nRequiredSigners = (function () {
            var $21 = Data_Maybe.fromMaybe(0);
            var $22 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                var $25 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
                return function ($26) {
                    return Data_Array.length($25($26));
                };
            })());
            var $23 = Data_Newtype.unwrap();
            return function ($24) {
                return $21($22((function (v) {
                    return v.requiredSigners;
                })($23((function (v) {
                    return v.body;
                })($24)))));
            };
        })()(Data_Newtype.unwrap()(tx));
        return Data_Lens_Setter.set((function () {
            var $27 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
            var $28 = Cardano_Types_Transaction["_vkeys"](Data_Profunctor_Strong.strongFn);
            return function ($29) {
                return $27($28($29));
            };
        })())(new Data_Maybe.Just(Data_Array.replicate((nRequiredSigners + nsPossibleSigners | 0) + nSelfSigners | 0)(fakeVkeywitness)))(tx);
    };
};
var calculateMinFeeCsl = function (dictMonadEffect) {
    return function (dictMonadThrow) {
        return function (v) {
            return function (selfSigners) {
                return function (txNoSigs) {
                    var tx = addFakeSignatures(selfSigners)(txNoSigs);
                    return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Serialization.convertTransaction(tx)))(function (cslTx) {
                        return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Error_Class.liftMaybe(dictMonadThrow)(Effect_Exception.error("Unable to calculate min_fee"))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_BigNum.toBigInt)($foreign["_minFee"](FfiHelpers.maybeFfiHelper)(cslTx)(Types_BigNum.fromUInt(v.txFeeFixed))(Types_BigNum.fromUInt(v.txFeePerByte)))))(function (minFee) {
                            return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Serialization.convertExUnitPrices(v.prices)))(function (exUnitPricesCsl) {
                                return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Control_Monad_Error_Class.liftMaybe(dictMonadThrow)(Effect_Exception.error("Unable to calculate min_script_fee"))(Types_BigNum.toBigInt($foreign["_minScriptFee"](exUnitPricesCsl)(cslTx))))(function (minScriptFee) {
                                    return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(Data_Newtype.wrap()(Data_Semiring.add(Data_BigInt.semiringBigInt)(minFee)(minScriptFee)));
                                });
                            });
                        });
                    });
                };
            };
        };
    };
};
module.exports = {
    calculateMinFeeCsl: calculateMinFeeCsl
};
