// Generated by purs version 0.14.5
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Array_Partial = require("../Data.Array.Partial/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Sequence_Internal = require("../Data.Sequence.Internal/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Digit = function (x) {
    return x;
};
var traversableDigit = Data_Traversable.traversableArray;
var showDigit = function (dictShow) {
    return Data_Show.showArray(dictShow);
};
var runDigit = function (v) {
    return v;
};
var tailDigit = (function () {
    var $14 = Data_Array_Partial.tail();
    return function ($15) {
        return $14(runDigit($15));
    };
})();
var unsafeIndex = function (dictPartial) {
    return function (xs) {
        return Data_Array.unsafeIndex()(runDigit(xs));
    };
};
var overDigit = Unsafe_Coerce.unsafeCoerce;
var snocDigit = function (dictPartial) {
    return function (dg) {
        return function (x) {
            return overDigit(function (xs) {
                return Data_Array.snoc(xs)(x);
            })(dg);
        };
    };
};
var mkDigitMay = function (xs) {
    var $13 = Data_Ord.between(Data_Ord.ordInt)(1)(4)(Data_Array.length(xs));
    if ($13) {
        return new Data_Maybe.Just(xs);
    };
    return Data_Maybe.Nothing.value;
};
var mkDigit3 = function (x) {
    return function (y) {
        return function (z) {
            return [ x, y, z ];
        };
    };
};
var mkDigit2 = function (x) {
    return function (y) {
        return [ x, y ];
    };
};
var mkDigit1 = function (x) {
    return [ x ];
};
var mkDigit = function (dictPartial) {
    return Digit;
};
var measuredDigit = function (dictMonoid) {
    return function (dictMeasured) {
        return {
            measure: (function () {
                var $16 = Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured));
                return function ($17) {
                    return $16(runDigit($17));
                };
            })()
        };
    };
};
var lastDigit = (function () {
    var $18 = Data_Array_Partial.last();
    return function ($19) {
        return $18(runDigit($19));
    };
})();
var initDigit = (function () {
    var $20 = Data_Array_Partial.init();
    return function ($21) {
        return $20(runDigit($21));
    };
})();
var headDigit = (function () {
    var $22 = Data_Array_Partial.head();
    return function ($23) {
        return $22(runDigit($23));
    };
})();
var functorDigit = Data_Functor.functorArray;
var foldableDigit = Data_Foldable.foldableArray;
var dropDigit = function (n) {
    var $24 = Data_Array.drop(n);
    return function ($25) {
        return $24(runDigit($25));
    };
};
var digitLength = function ($26) {
    return Data_Array.length(runDigit($26));
};
var consDigit = function (dictPartial) {
    return function (x) {
        return function (dg) {
            return overDigit(Data_Array.cons(x))(dg);
        };
    };
};
module.exports = {
    mkDigit: mkDigit,
    mkDigitMay: mkDigitMay,
    mkDigit1: mkDigit1,
    mkDigit2: mkDigit2,
    mkDigit3: mkDigit3,
    runDigit: runDigit,
    headDigit: headDigit,
    tailDigit: tailDigit,
    initDigit: initDigit,
    lastDigit: lastDigit,
    snocDigit: snocDigit,
    consDigit: consDigit,
    dropDigit: dropDigit,
    digitLength: digitLength,
    unsafeIndex: unsafeIndex,
    functorDigit: functorDigit,
    showDigit: showDigit,
    foldableDigit: foldableDigit,
    traversableDigit: traversableDigit,
    measuredDigit: measuredDigit
};
