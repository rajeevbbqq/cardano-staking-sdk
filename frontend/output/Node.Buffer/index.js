// Generated by purs version 0.14.5
"use strict";
var Effect = require("../Effect/index.js");
var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");
var Node_Buffer_Internal = require("../Node.Buffer.Internal/index.js");
var Node_Buffer_Types = require("../Node.Buffer.Types/index.js");
var mutableBufferEffect = {
    create: Node_Buffer_Internal.create(Effect.monadEffect),
    freeze: Node_Buffer_Internal.copyAll,
    unsafeFreeze: Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect),
    thaw: Node_Buffer_Internal.copyAll,
    unsafeThaw: Node_Buffer_Internal.unsafeThaw(Effect.monadEffect),
    fromArray: Node_Buffer_Internal.fromArray(Effect.monadEffect),
    fromString: Node_Buffer_Internal.fromString(Effect.monadEffect),
    fromArrayBuffer: Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect),
    toArrayBuffer: Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect),
    read: Node_Buffer_Internal.read(Effect.monadEffect),
    readString: Node_Buffer_Internal.readString(Effect.monadEffect),
    toString: Node_Buffer_Internal.toString(Effect.monadEffect),
    write: Node_Buffer_Internal.write(Effect.monadEffect),
    writeString: Node_Buffer_Internal.writeString(Effect.monadEffect),
    toArray: Node_Buffer_Internal.toArray(Effect.monadEffect),
    getAtOffset: Node_Buffer_Internal.getAtOffset(Effect.monadEffect),
    setAtOffset: Node_Buffer_Internal.setAtOffset,
    slice: Node_Buffer_Internal.slice,
    size: Node_Buffer_Internal.size(Effect.monadEffect),
    concat: Node_Buffer_Internal.concat,
    "concat'": Node_Buffer_Internal["concat'"](Effect.monadEffect),
    copy: Node_Buffer_Internal.copy,
    fill: Node_Buffer_Internal.fill,
    Monad0: function () {
        return Effect.monadEffect;
    }
};
module.exports = {
    mutableBufferEffect: mutableBufferEffect,
    concat: Node_Buffer_Class.concat,
    "concat'": Node_Buffer_Class["concat'"],
    copy: Node_Buffer_Class.copy,
    create: Node_Buffer_Class.create,
    fill: Node_Buffer_Class.fill,
    freeze: Node_Buffer_Class.freeze,
    fromArray: Node_Buffer_Class.fromArray,
    fromArrayBuffer: Node_Buffer_Class.fromArrayBuffer,
    fromString: Node_Buffer_Class.fromString,
    getAtOffset: Node_Buffer_Class.getAtOffset,
    read: Node_Buffer_Class.read,
    readString: Node_Buffer_Class.readString,
    setAtOffset: Node_Buffer_Class.setAtOffset,
    size: Node_Buffer_Class.size,
    slice: Node_Buffer_Class.slice,
    thaw: Node_Buffer_Class.thaw,
    toArray: Node_Buffer_Class.toArray,
    toArrayBuffer: Node_Buffer_Class.toArrayBuffer,
    toString: Node_Buffer_Class.toString,
    unsafeFreeze: Node_Buffer_Class.unsafeFreeze,
    unsafeThaw: Node_Buffer_Class.unsafeThaw,
    write: Node_Buffer_Class.write,
    writeString: Node_Buffer_Class.writeString,
    DoubleBE: Node_Buffer_Types.DoubleBE,
    DoubleLE: Node_Buffer_Types.DoubleLE,
    FloatBE: Node_Buffer_Types.FloatBE,
    FloatLE: Node_Buffer_Types.FloatLE,
    Int16BE: Node_Buffer_Types.Int16BE,
    Int16LE: Node_Buffer_Types.Int16LE,
    Int32BE: Node_Buffer_Types.Int32BE,
    Int32LE: Node_Buffer_Types.Int32LE,
    Int8: Node_Buffer_Types.Int8,
    UInt16BE: Node_Buffer_Types.UInt16BE,
    UInt16LE: Node_Buffer_Types.UInt16LE,
    UInt32BE: Node_Buffer_Types.UInt32BE,
    UInt32LE: Node_Buffer_Types.UInt32LE,
    UInt8: Node_Buffer_Types.UInt8
};
