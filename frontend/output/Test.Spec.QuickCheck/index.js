// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Random_LCG = require("../Random.LCG/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var getErrorMessage = function (v) {
    if (v instanceof Test_QuickCheck.Failed) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var quickCheckPure = function (dictTestable) {
    return function (seed) {
        return function (n) {
            return function (prop) {
                var results = Test_QuickCheck.quickCheckPure(dictTestable)(seed)(n)(prop);
                var msgs = Data_List.mapMaybe(getErrorMessage)(results);
                var $6 = Data_List.length(msgs) > 0;
                if ($6) {
                    return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\x0a  ")(msgs)));
                };
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
        };
    };
};
var quickCheck$prime = function (dictTestable) {
    return function (n) {
        return function (prop) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Random_LCG.randomSeed))(function (seed) {
                return quickCheckPure(dictTestable)(seed)(n)(prop);
            });
        };
    };
};
var quickCheck = function (dictTestable) {
    return quickCheck$prime(dictTestable)(100);
};
module.exports = {
    quickCheck: quickCheck,
    "quickCheck'": quickCheck$prime,
    quickCheckPure: quickCheckPure
};
