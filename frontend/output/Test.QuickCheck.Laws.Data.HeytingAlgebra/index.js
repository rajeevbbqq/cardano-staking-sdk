// Generated by purs version 0.14.5
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Test_QuickCheck = require("../Test.QuickCheck/index.js");
var checkHeytingAlgebra = function (dictArbitrary) {
    return function (dictHeytingAlgebra) {
        return function (dictEq) {
            return function (v) {
                var implications = function (a) {
                    return function (b) {
                        return Data_Eq.eq(dictEq)(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(a)(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(b)))(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(a)(b)) && Data_Eq.eq(dictEq)(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(b)(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(b)))(b);
                    };
                };
                var implicationId = function (a) {
                    return Data_Eq.eq(dictEq)(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(a))(Data_HeytingAlgebra.tt(dictHeytingAlgebra));
                };
                var identity = function (op) {
                    return function (ident) {
                        return function (a) {
                            return Data_Eq.eq(dictEq)(op(a)(ident))(a);
                        };
                    };
                };
                var idempotent = function (op) {
                    return function (a) {
                        return function (v1) {
                            return Data_Eq.eq(dictEq)(op(a)(a))(a);
                        };
                    };
                };
                var distributiveImplication = function (a) {
                    return function (b) {
                        return function (c) {
                            return Data_Eq.eq(dictEq)(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(b)(c)))(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(b))(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(c)));
                        };
                    };
                };
                var complemented = function (a) {
                    return Data_Eq.eq(dictEq)(Data_HeytingAlgebra.not(dictHeytingAlgebra)(a))(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(a)(Data_HeytingAlgebra.ff(dictHeytingAlgebra)));
                };
                var commutativity = function (op) {
                    return function (a) {
                        return function (b) {
                            return Data_Eq.eq(dictEq)(op(a)(b))(op(b)(a));
                        };
                    };
                };
                var associativity = function (op) {
                    return function (a) {
                        return function (b) {
                            return function (c) {
                                return Data_Eq.eq(dictEq)(op(a)(op(b)(c)))(op(op(a)(b))(c));
                            };
                        };
                    };
                };
                var absorption = function (op1) {
                    return function (op2) {
                        return function (a) {
                            return function (b) {
                                return Data_Eq.eq(dictEq)(op1(a)(op2(a)(b)))(a);
                            };
                        };
                    };
                };
                return function __do() {
                    Effect_Console.log("Checking 'Associativity of disjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(associativity(Data_HeytingAlgebra.disj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Associativity of conjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(associativity(Data_HeytingAlgebra.conj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Commutativity of disjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(commutativity(Data_HeytingAlgebra.disj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Commutativity of conjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(commutativity(Data_HeytingAlgebra.conj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Absorption of disjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(absorption(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(Data_HeytingAlgebra.conj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Absorption of conjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(absorption(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(Data_HeytingAlgebra.disj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Idempotent disjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(idempotent(Data_HeytingAlgebra.disj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Idempotent conjunction' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(idempotent(Data_HeytingAlgebra.conj(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Disjunction identity' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identity(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(Data_HeytingAlgebra.ff(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Conjunction identity' law for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(identity(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(Data_HeytingAlgebra.tt(dictHeytingAlgebra)))();
                    Effect_Console.log("Checking 'Implication' laws for HeytingAlgebra")();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(implicationId)();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean)))(1000)(implications)();
                    Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))))(1000)(distributiveImplication)();
                    Effect_Console.log("Checking 'Complemented' law for HeytingAlgebra")();
                    return Test_QuickCheck["quickCheck'"](Test_QuickCheck.testableFunction(dictArbitrary)(Test_QuickCheck.testableBoolean))(1000)(complemented)();
                };
            };
        };
    };
};
module.exports = {
    checkHeytingAlgebra: checkHeytingAlgebra
};
