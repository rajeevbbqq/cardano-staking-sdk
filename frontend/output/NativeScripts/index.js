// Generated by purs version 0.14.5
"use strict";
var Cardano_Types_NativeScript = require("../Cardano.Types.NativeScript/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Serialization_NativeScript = require("../Serialization.NativeScript/index.js");
var NativeScriptHash = function (x) {
    return x;
};
var showNativeScriptHash = {
    show: function (v) {
        return "(NativeScriptHash " + (Data_Show.show(Serialization_Hash.showScriptHash)(v) + ")");
    }
};
var ordNativeScriptHash = Serialization_Hash.ordScriptHash;
var newtypeNativeScriptHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var eqNativeScriptHash = Serialization_Hash.eqScriptHash;
var sublists = function (n) {
    return function (xs) {
        var sublists$prime = function (v) {
            return function (v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                    return new Data_List_Types.Cons(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
                };
                if (v1 instanceof Data_List_Types.Cons) {
                    return new Data_List_Types.Cons(Data_List.take(v)(v1), sublists$prime(v)(v1.value1));
                };
                throw new Error("Failed pattern match at NativeScripts (line 65, column 3 - line 65, column 46): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Data_List.take((Data_List.length(xs) - n | 0) + 1 | 0)(sublists$prime(n)(xs));
    };
};
var subsetsOfLength = function (n) {
    var $23 = Data_Functor.map(Data_Functor.functorArray)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray));
    var $24 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
    var $25 = sublists(n);
    var $26 = Data_List.fromFoldable(Data_Foldable.foldableArray);
    return function ($27) {
        return $23($24($25($26($27))));
    };
};
var nativeScriptHash = function (ns) {
    return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
        var $28 = Data_Newtype.wrap();
        return function ($29) {
            return $28(Serialization_Hash.nativeScriptHash($29));
        };
    })())(Serialization_NativeScript.convertNativeScript(ns));
};
var emptySetChoice = [ Data_Set.empty ];
var anyChoice = function (dictOrd) {
    return function (as) {
        return function (bs) {
            return Data_Array.nub(Data_Set.ordSet(dictOrd))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(as)(bs));
        };
    };
};
var allChoice = function (dictOrd) {
    return function (as) {
        return function (bs) {
            return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Semigroup.append(Data_Set.semigroupSet(dictOrd)))(as))(bs);
        };
    };
};
var getMaximumSigners = function (alreadyCounted) {
    var sizes = function (v) {
        if (v instanceof Cardano_Types_NativeScript.ScriptPubkey) {
            if (Data_Set.member(Serialization_Hash.ordEd25519KeyHash)(v.value0)(alreadyCounted)) {
                return emptySetChoice;
            };
            if (Data_Boolean.otherwise) {
                return [ Data_Set.singleton(v.value0) ];
            };
        };
        if (v instanceof Cardano_Types_NativeScript.ScriptAll) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(allChoice(Serialization_Hash.ordEd25519KeyHash))(emptySetChoice)(Data_Functor.map(Data_Functor.functorArray)(sizes)(v.value0));
        };
        if (v instanceof Cardano_Types_NativeScript.ScriptAny) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(anyChoice(Serialization_Hash.ordEd25519KeyHash))(emptySetChoice)(Data_Functor.map(Data_Functor.functorArray)(sizes)(v.value0));
        };
        if (v instanceof Cardano_Types_NativeScript.ScriptNOfK) {
            return sizes(Cardano_Types_NativeScript.ScriptAny.create(Data_Functor.map(Data_Functor.functorArray)(Cardano_Types_NativeScript.ScriptAll.create)(subsetsOfLength(v.value0)(v.value1))));
        };
        if (v instanceof Cardano_Types_NativeScript.TimelockStart) {
            return emptySetChoice;
        };
        if (v instanceof Cardano_Types_NativeScript.TimelockExpiry) {
            return emptySetChoice;
        };
        throw new Error("Failed pattern match at NativeScripts (line 80, column 11 - line 91, column 39): " + [ v.constructor.name ]);
    };
    var $30 = Data_Maybe.fromMaybe(0);
    var $31 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Set.size);
    var $32 = Data_Foldable.maximumBy(Data_Foldable.foldableArray)(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(Data_Set.size));
    return function ($33) {
        return $30($31($32(sizes($33))));
    };
};
module.exports = {
    NativeScriptHash: NativeScriptHash,
    nativeScriptHash: nativeScriptHash,
    getMaximumSigners: getMaximumSigners,
    newtypeNativeScriptHash_: newtypeNativeScriptHash_,
    eqNativeScriptHash: eqNativeScriptHash,
    ordNativeScriptHash: ordNativeScriptHash,
    showNativeScriptHash: showNativeScriptHash
};
