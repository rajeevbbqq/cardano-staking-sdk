// Generated by purs version 0.14.5
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Metadata_FromMetadata = require("../Metadata.FromMetadata/index.js");
var Metadata_ToMetadata = require("../Metadata.ToMetadata/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var RawBytes = function (x) {
    return x;
};
var toMetadataRawBytes = Metadata_ToMetadata.toMetadataByteArray;
var semigroupRawBytes = Types_ByteArray.semigroupByteArray;
var ordRawBytes = Types_ByteArray.ordByteArray;
var newtypeRawBytes_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidRawBytes = Types_ByteArray.monoidByteArray;
var fromMetadataRawBytes = Metadata_FromMetadata.fromMetadataByteArray;
var eqRawBytes = Types_ByteArray.eqByteArray;
var encodeAesonRawBytes = Types_ByteArray.encodeAesonByteArray;
var decodeAesonRawBytes = Types_ByteArray.decodeAesonByteArray;
var arbitraryRawBytes = Types_ByteArray.arbitraryByteArray;
var rawBytesToIntArray = (function () {
    var $11 = Data_Newtype.unwrap();
    return function ($12) {
        return Types_ByteArray.byteArrayToIntArray($11($12));
    };
})();
var rawBytesToHex = (function () {
    var $13 = Data_Newtype.unwrap();
    return function ($14) {
        return Types_ByteArray.byteArrayToHex($13($14));
    };
})();
var showRawBytes = {
    show: function (rb) {
        return "(hexToRawBytesUnsafe " + (Data_Show.show(Data_Show.showString)(rawBytesToHex(rb)) + ")");
    }
};
var rawBytesToByteArray = Data_Newtype.unwrap();
var rawBytesFromIntArrayUnsafe = (function () {
    var $15 = Data_Newtype.wrap();
    return function ($16) {
        return $15(Types_ByteArray.byteArrayFromIntArrayUnsafe($16));
    };
})();
var rawBytesFromIntArray = (function () {
    var $17 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
    return function ($18) {
        return $17(Types_ByteArray.byteArrayFromIntArray($18));
    };
})();
var rawBytesFromByteArray = Data_Newtype.wrap();
var rawBytesFromAscii = (function () {
    var $19 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
    return function ($20) {
        return $19(Types_ByteArray.byteArrayFromAscii($20));
    };
})();
var hexToRawBytesUnsafe = (function () {
    var $21 = Data_Newtype.wrap();
    return function ($22) {
        return $21(Types_ByteArray.hexToByteArrayUnsafe($22));
    };
})();
var hexToRawBytes = (function () {
    var $23 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
    return function ($24) {
        return $23(Types_ByteArray.hexToByteArray($24));
    };
})();
var byteLength = (function () {
    var $25 = Data_Newtype.unwrap();
    return function ($26) {
        return Types_ByteArray.byteLength($25($26));
    };
})();
module.exports = {
    RawBytes: RawBytes,
    rawBytesToByteArray: rawBytesToByteArray,
    rawBytesFromByteArray: rawBytesFromByteArray,
    rawBytesToIntArray: rawBytesToIntArray,
    rawBytesFromIntArray: rawBytesFromIntArray,
    rawBytesFromIntArrayUnsafe: rawBytesFromIntArrayUnsafe,
    rawBytesFromAscii: rawBytesFromAscii,
    rawBytesToHex: rawBytesToHex,
    byteLength: byteLength,
    hexToRawBytes: hexToRawBytes,
    hexToRawBytesUnsafe: hexToRawBytesUnsafe,
    showRawBytes: showRawBytes,
    newtypeRawBytes_: newtypeRawBytes_,
    eqRawBytes: eqRawBytes,
    ordRawBytes: ordRawBytes,
    semigroupRawBytes: semigroupRawBytes,
    monoidRawBytes: monoidRawBytes,
    encodeAesonRawBytes: encodeAesonRawBytes,
    decodeAesonRawBytes: decodeAesonRawBytes,
    arbitraryRawBytes: arbitraryRawBytes,
    toMetadataRawBytes: toMetadataRawBytes,
    fromMetadataRawBytes: fromMetadataRawBytes
};
