// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var $$Math = require("../Math/index.js");
var UInt = function (x) {
    return x;
};
var uintShowInstance = {
    show: function (u) {
        return $foreign.toString(u) + "u";
    }
};
var uintEqInstance = {
    eq: $foreign.uintEq
};
var uintOrd = {
    compare: $foreign.uintCmp(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
    Eq0: function () {
        return uintEqInstance;
    }
};
var toInt$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)($foreign.toInt);
var fromNumber = $foreign.from;
var fromNumber$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromNumber);
var fromString = function ($2) {
    return fromNumber$prime($foreign.fromStringImpl($2));
};
var fromInt = $foreign.from;
var fromInt$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromInt);
var uintBounded = {
    bottom: fromInt(0),
    top: fromInt(-1 | 0),
    Ord0: function () {
        return uintOrd;
    }
};
var uintSemiring = {
    zero: fromInt(0),
    add: $foreign.uintAdd,
    one: fromInt(1),
    mul: $foreign.uintMul
};
var uintRing = {
    sub: $foreign.uintSub,
    Semiring0: function () {
        return uintSemiring;
    }
};
var uintCommutativeRing = {
    Ring0: function () {
        return uintRing;
    }
};
var uintEuclideanRing = {
    div: $foreign.uintDiv,
    mod: $foreign.uintMod,
    degree: $foreign.uintDegree,
    CommutativeRing0: function () {
        return uintCommutativeRing;
    }
};
var odd = function (u) {
    return Data_Eq.eq(uintEqInstance)(Data_EuclideanRing.mod(uintEuclideanRing)(u)(fromInt(2)))(fromInt(1));
};
var even = function (u) {
    return Data_Eq.eq(uintEqInstance)(Data_EuclideanRing.mod(uintEuclideanRing)(u)(fromInt(2)))(fromInt(0));
};
var enumUInt = {
    succ: function (n) {
        var $0 = Data_Ord.lessThan(uintOrd)(n)(Data_Bounded.top(uintBounded));
        if ($0) {
            return new Data_Maybe.Just(Data_Semiring.add(uintSemiring)(n)(fromInt(1)));
        };
        return Data_Maybe.Nothing.value;
    },
    pred: function (n) {
        var $1 = Data_Ord.greaterThan(uintOrd)(n)(Data_Bounded.bottom(uintBounded));
        if ($1) {
            return new Data_Maybe.Just(Data_Ring.sub(uintRing)(n)(fromInt(1)));
        };
        return Data_Maybe.Nothing.value;
    },
    Ord0: function () {
        return uintOrd;
    }
};
var clamp$prime = Data_Ord.clamp(Data_Ord.ordNumber)($foreign.toNumber(Data_Bounded.bottom(uintBounded)))($foreign.toNumber(Data_Bounded.top(uintBounded)));
var floor = function ($3) {
    return fromNumber($$Math.floor(clamp$prime($3)));
};
var round = function ($4) {
    return fromNumber($$Math.round(clamp$prime($4)));
};
var ceil = function ($5) {
    return fromNumber($$Math.ceil(clamp$prime($5)));
};
module.exports = {
    fromInt: fromInt,
    "fromInt'": fromInt$prime,
    "toInt'": toInt$prime,
    fromNumber: fromNumber,
    "fromNumber'": fromNumber$prime,
    floor: floor,
    ceil: ceil,
    round: round,
    even: even,
    odd: odd,
    fromString: fromString,
    enumUInt: enumUInt,
    uintSemiring: uintSemiring,
    uintRing: uintRing,
    uintCommutativeRing: uintCommutativeRing,
    uintEuclideanRing: uintEuclideanRing,
    uintEqInstance: uintEqInstance,
    uintOrd: uintOrd,
    uintShowInstance: uintShowInstance,
    uintBounded: uintBounded,
    toInt: $foreign.toInt,
    toNumber: $foreign.toNumber,
    pow: $foreign.pow,
    and: $foreign.and,
    or: $foreign.or,
    xor: $foreign.xor,
    shl: $foreign.shl,
    shr: $foreign.shr,
    zshr: $foreign.zshr,
    complement: $foreign.complement,
    toString: $foreign.toString
};
