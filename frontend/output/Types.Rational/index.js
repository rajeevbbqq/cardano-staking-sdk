// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ratio = require("../Data.Ratio/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Types_Natural = require("../Types.Natural/index.js");
var Types_PlutusData = require("../Types.PlutusData/index.js");
var Rational = function (x) {
    return x;
};
var showRational = Data_Ratio.showRatio(Data_BigInt.showBigInt);
var semiringRational = Data_Ratio.semiringRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var ringRational = Data_Ratio.ringRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var rationalComponentBigInt = {
    reduce: function (n) {
        return function (d) {
            if (Data_Eq.eq(Data_BigInt.eqBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                return Data_Maybe.Nothing.value;
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Just.create(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(n)(d));
            };
            throw new Error("Failed pattern match at Types.Rational (line 126, column 1 - line 129, column 48): " + [ n.constructor.name, d.constructor.name ]);
        };
    }
};
var ordRational = Data_Ratio.ordRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var eqRational = Data_Ratio.eqRatio(Data_BigInt.eqBigInt);
var commutativeRingRational = Data_Ratio.commutativeRingRatio(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt);
var reduce = function (dict) {
    return dict.reduce;
};
var decodeAesonRational = {
    decodeAeson: function (aes) {
        return Aeson.caseAesonObject(Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(aes))))(function (obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonBigInt)(obj)("numerator"))(function (v) {
                return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonBigInt)(obj)("denominator"))(function (d) {
                    return Data_Maybe.maybe(Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(aes))))(Control_Applicative.pure(Data_Either.applicativeEither))(reduce(rationalComponentBigInt)(v)(d));
                });
            });
        })(aes);
    }
};
var fromDataRational = {
    fromData: function (v) {
        if (v instanceof Types_PlutusData.Constr && (v.value1.length === 2 && (v["value1"][0] instanceof Types_PlutusData.Integer && (v["value1"][1] instanceof Types_PlutusData.Integer && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))))) {
            return reduce(rationalComponentBigInt)(v["value1"][0].value0)(v["value1"][1].value0);
        };
        return Data_Maybe.Nothing.value;
    }
};
var rationalComponentInt = {
    reduce: function (n) {
        return function (d) {
            return reduce(rationalComponentBigInt)(Data_BigInt.fromInt(n))(Data_BigInt.fromInt(d));
        };
    }
};
var rationalComponentNatural = {
    reduce: function (n) {
        return function (d) {
            return reduce(rationalComponentBigInt)(Types_Natural.toBigInt(n))(Types_Natural.toBigInt(d));
        };
    }
};
var numerator = function (v) {
    return Data_Ratio.numerator(v);
};
var denominator = function (v) {
    return Data_Ratio.denominator(v);
};
var denominatorAsNat = function ($37) {
    return Types_Natural["fromBigInt'"](denominator($37));
};
var recip = function (r) {
    if (Data_Eq.eq(Data_BigInt.eqBigInt)(numerator(r))(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
        return Data_Maybe.Nothing.value;
    };
    if (Data_Boolean.otherwise) {
        return reduce(rationalComponentBigInt)(denominator(r))(numerator(r));
    };
    throw new Error("Failed pattern match at Types.Rational (line 81, column 1 - line 81, column 36): " + [ r.constructor.name ]);
};
var encodeAesonRational = {
    "encodeAeson'": function (r) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonBigInt)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "numerator";
            }
        })())({
            reflectSymbol: function () {
                return "denominator";
            }
        })())())({
            numerator: numerator(r),
            denominator: denominator(r)
        });
    }
};
var euclideanRingRational = {
    degree: function (v) {
        return 1;
    },
    mod: function (v) {
        return function (v1) {
            return Data_Semiring.zero(semiringRational);
        };
    },
    div: function (a) {
        return function (b) {
            if (Data_Eq.eq(Data_BigInt.eqBigInt)(numerator(b))(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                return Data_Semiring.zero(semiringRational);
            };
            if (Data_Boolean.otherwise) {
                return Rational(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(numerator(a))(denominator(b)))(Data_Semiring.mul(Data_BigInt.semiringBigInt)(denominator(a))(numerator(b))));
            };
            throw new Error("Failed pattern match at Types.Rational (line 70, column 1 - line 76, column 76): " + [ a.constructor.name, b.constructor.name ]);
        };
    },
    CommutativeRing0: function () {
        return commutativeRingRational;
    }
};
var toDataRational = {
    toData: function (r) {
        return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [ new Types_PlutusData.Integer(numerator(r)), new Types_PlutusData.Integer(denominator(r)) ]);
    }
};
module.exports = {
    reduce: reduce,
    recip: recip,
    numerator: numerator,
    denominator: denominator,
    denominatorAsNat: denominatorAsNat,
    showRational: showRational,
    eqRational: eqRational,
    ordRational: ordRational,
    semiringRational: semiringRational,
    ringRational: ringRational,
    commutativeRingRational: commutativeRingRational,
    encodeAesonRational: encodeAesonRational,
    decodeAesonRational: decodeAesonRational,
    euclideanRingRational: euclideanRingRational,
    toDataRational: toDataRational,
    fromDataRational: fromDataRational,
    rationalComponentBigInt: rationalComponentBigInt,
    rationalComponentInt: rationalComponentInt,
    rationalComponentNatural: rationalComponentNatural
};
