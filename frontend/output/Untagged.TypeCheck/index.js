// Generated by purs version 0.14.5
"use strict";
var $foreign = require("./foreign.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var hasRuntimeTypeRecordRLNil = {
    hasRuntimeTypeRecRL: function (v) {
        return function (v1) {
            return true;
        };
    }
};
var hasRuntimeTypeRecRL = function (dict) {
    return dict.hasRuntimeTypeRecRL;
};
var hasRuntimeTypeNull = {
    hasRuntimeType: function (v) {
        return Foreign.isNull;
    }
};
var hasRuntimeTypeInt = {
    hasRuntimeType: function (v) {
        return $foreign.isInt;
    }
};
var hasRuntimeTypeForeign = {
    hasRuntimeType: function (v) {
        return function (v1) {
            return true;
        };
    }
};
var hasRuntimeType = function (dict) {
    return dict.hasRuntimeType;
};
var hasRuntimeTypeRecordRLCons = function (dictHasRuntimeTypeRecordRL) {
    return function (dictHasRuntimeType) {
        return function (dictIsSymbol) {
            return {
                hasRuntimeTypeRecRL: function (v) {
                    return function (x) {
                        var propertyName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                        var property = $foreign.getProperty(propertyName)(x);
                        var hasRuntimeTypeA = hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                        return hasRuntimeTypeA(property) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(x);
                    };
                }
            };
        };
    };
};
var newtypeHasRuntimeType = function (dictNewtype) {
    return function (dictHasRuntimeType) {
        return function (v) {
            return hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        };
    };
};
var hasJsType = function (name) {
    return function (x) {
        return Foreign.typeOf(x) === name;
    };
};
var hasRuntimeTypeBoolean = {
    hasRuntimeType: function (v) {
        return hasJsType("boolean");
    }
};
var hasRuntimeTypeNumber = {
    hasRuntimeType: function (v) {
        return hasJsType("number");
    }
};
var hasRuntimeTypeObject = function (dictHasRuntimeType) {
    return {
        hasRuntimeType: function (v) {
            return function (x) {
                var hasRuntimeTypeE = hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                return hasJsType("object")(x) && Foreign_Object.all(function (v1) {
                    return hasRuntimeTypeE;
                })(x);
            };
        }
    };
};
var hasRuntimeTypeRecord = function (dictRowToList) {
    return function (dictHasRuntimeTypeRecordRL) {
        return {
            hasRuntimeType: function (v) {
                return function (x) {
                    return hasJsType("object")(x) && hasRuntimeTypeRecRL(dictHasRuntimeTypeRecordRL)(Type_Proxy["Proxy"].value)(Foreign.unsafeToForeign(x));
                };
            }
        };
    };
};
var hasRuntimeTypeString = {
    hasRuntimeType: function (v) {
        return hasJsType("string");
    }
};
var hasRuntimeTypeUndefined = {
    hasRuntimeType: function (v) {
        return hasJsType("undefined");
    }
};
var cast = function (dictHasRuntimeType) {
    return function (x) {
        var hasRuntimeTypeA = hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
        var $26 = hasRuntimeTypeA(Foreign.unsafeToForeign(x));
        if ($26) {
            return new Data_Maybe.Just(x);
        };
        return Data_Maybe.Nothing.value;
    };
};
module.exports = {
    hasRuntimeType: hasRuntimeType,
    newtypeHasRuntimeType: newtypeHasRuntimeType,
    hasRuntimeTypeRecRL: hasRuntimeTypeRecRL,
    cast: cast,
    hasRuntimeTypeUndefined: hasRuntimeTypeUndefined,
    hasRuntimeTypeNull: hasRuntimeTypeNull,
    hasRuntimeTypeBoolean: hasRuntimeTypeBoolean,
    hasRuntimeTypeInt: hasRuntimeTypeInt,
    hasRuntimeTypeNumber: hasRuntimeTypeNumber,
    hasRuntimeTypeString: hasRuntimeTypeString,
    hasRuntimeTypeForeign: hasRuntimeTypeForeign,
    hasRuntimeTypeObject: hasRuntimeTypeObject,
    hasRuntimeTypeRecord: hasRuntimeTypeRecord,
    hasRuntimeTypeRecordRLNil: hasRuntimeTypeRecordRLNil,
    hasRuntimeTypeRecordRLCons: hasRuntimeTypeRecordRLCons
};
