// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Aeson_Encode = require("../Aeson.Encode/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_JSDate = require("../Data.JSDate/index.js");
var Data_List_Lazy = require("../Data.List.Lazy/index.js");
var Data_List_Lazy_Types = require("../Data.List.Lazy.Types/index.js");
var Data_Log_Formatter_Pretty = require("../Data.Log.Formatter.Pretty/index.js");
var Data_Log_Level = require("../Data.Log.Level/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Typelevel_Undefined = require("../Data.Typelevel.Undefined/index.js");
var Data_UInt = require("../Data.UInt/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Effect = require("../Effect/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Class_Console = require("../Effect.Class.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var uIntToBigInt = (function () {
    var $34 = Data_Maybe.fromJust();
    return function ($35) {
        return $34(Data_BigInt.fromString(Data_UInt.toString($35)));
    };
})();
var showWithParens = function (dictShow) {
    return function (ctorName) {
        return function (x) {
            return "(" + (ctorName + (" (" + (Data_Show.show(dictShow)(x) + "))")));
        };
    };
};
var notImplemented = function (dictWarn) {
    return Data_Typelevel_Undefined["undefined"];
};
var mkErrorRecord = function (errorType) {
    return function (error) {
        return function (a) {
            return {
                errorType: errorType,
                error: error,
                args: a
            };
        };
    };
};
var maybeArrayMerge = function (dictEq) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_Maybe.Nothing) {
                return v1;
            };
            if (v1 instanceof Data_Maybe.Nothing) {
                return v;
            };
            if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                return Data_Maybe.Just.create(Data_Array.union(dictEq)(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Helpers (line 124, column 1 - line 129, column 21): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var logWithLevel = function (dictMonadEffect) {
    return function (lvl) {
        return function (msg) {
            return Control_Applicative.when((dictMonadEffect.Monad0()).Applicative0())(Data_Ord.greaterThanOrEq(Data_Log_Level.ordLogLevel)(msg.level)(lvl))(Control_Bind.bindFlipped((dictMonadEffect.Monad0()).Bind1())(Effect_Class_Console.log(dictMonadEffect))(Data_Log_Formatter_Pretty.prettyFormatter(dictMonadEffect)(msg)));
        };
    };
};
var logString = function (cfgLevel) {
    return function (level) {
        return function (message) {
            return function __do() {
                var timestamp = Data_JSDate.now();
                return logWithLevel(Effect_Class.monadEffectEffect)(cfgLevel)({
                    timestamp: timestamp,
                    message: message,
                    level: level,
                    tags: Data_Map_Internal.empty
                })();
            };
        };
    };
};
var liftEither = function (dictMonadError) {
    return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()));
};
var liftM = function (dictMonadError) {
    return function (err) {
        var $36 = liftEither(dictMonadError);
        var $37 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(Data_Either.Right.create);
        return function ($38) {
            return $36($37($38));
        };
    };
};
var liftMWith = function (dictMonadError) {
    return function (err) {
        return function (f) {
            var $39 = liftEither(dictMonadError);
            var $40 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(function ($42) {
                return Data_Either.Right.create(f($42));
            });
            return function ($41) {
                return $39($40($41));
            };
        };
    };
};
var liftedM = function (dictMonadError) {
    return function (err) {
        return function (mma) {
            return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(mma)((function () {
                var $43 = liftEither(dictMonadError);
                var $44 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(Data_Either.Right.create);
                return function ($45) {
                    return $43($44($45));
                };
            })());
        };
    };
};
var fromRightEff = function (dictShow) {
    return Data_Either.either((function () {
        var $46 = Data_Show.show(dictShow);
        return function ($47) {
            return Effect_Exception["throw"]($46($47));
        };
    })())(Control_Applicative.pure(Effect.applicativeEffect));
};
var fromJustEff = function (e) {
    return function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Effect_Exception["throw"](e);
        };
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
        };
        throw new Error("Failed pattern match at Helpers (line 67, column 17 - line 69, column 19): " + [ v.constructor.name ]);
    };
};
var filterMapWithKeyM = function (dictOrd) {
    return function (dictMonad) {
        return function (p) {
            var $48 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList));
            var $49 = Data_List_Lazy.filterM(dictMonad)(Data_Tuple.uncurry(p));
            var $50 = Data_Map_Internal.toUnfoldable(Data_List_Lazy_Types.unfoldableList);
            return function ($51) {
                return $48($49($50($51)));
            };
        };
    };
};
var filterMapM = function (dictOrd) {
    return function (dictMonad) {
        return function (p) {
            var $52 = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList));
            var $53 = Data_List_Lazy.filterM(dictMonad)(function ($56) {
                return p(Data_Tuple.snd($56));
            });
            var $54 = Data_Map_Internal.toUnfoldable(Data_List_Lazy_Types.unfoldableList);
            return function ($55) {
                return $52($53($54($55)));
            };
        };
    };
};
var encodeTagged$prime = function (dictEncodeAeson) {
    return function (str) {
        return function (x) {
            return Aeson_Encode.encodeTagged(str)(x)(Aeson.encodeAeson(dictEncodeAeson));
        };
    };
};
var encodeSet = function (dictEncodeAeson) {
    return function (set) {
        return Aeson.encodeAeson(Aeson.encodeAesonArray(dictEncodeAeson))(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(set));
    };
};
var encodeMap = function (dictEncodeAeson) {
    return function (dictEncodeAeson1) {
        return Data_Newtype.unwrap()(Aeson_Encode.dictionary(Aeson.encodeAeson(dictEncodeAeson))(Aeson.encodeAeson(dictEncodeAeson1)));
    };
};
var bigIntToUInt = function ($57) {
    return Data_UInt.fromString(Data_BigInt.toString($57));
};
var appendRightMap = function (dictOrd) {
    return Data_Map_Internal.unionWith(dictOrd)(Data_Function.flip(Data_Function["const"]));
};
var appendMap = function (dictOrd) {
    return function (dictSemigroup) {
        return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup));
    };
};
var appendLastMaybe = function (m) {
    return function (m$prime) {
        return (function (v) {
            return v;
        })(Data_Function.on(Data_Semigroup.append(Data_Maybe_Last.semigroupLast))(Data_Maybe_Last.Last)(m)(m$prime));
    };
};
var appendFirstMaybe = function (m) {
    return function (m$prime) {
        return (function (v) {
            return v;
        })(Data_Function.on(Data_Semigroup.append(Data_Maybe_First.semigroupFirst))(Data_Maybe_First.First)(m)(m$prime));
    };
};
module.exports = {
    appendFirstMaybe: appendFirstMaybe,
    appendLastMaybe: appendLastMaybe,
    appendMap: appendMap,
    appendRightMap: appendRightMap,
    bigIntToUInt: bigIntToUInt,
    filterMapM: filterMapM,
    filterMapWithKeyM: filterMapWithKeyM,
    fromJustEff: fromJustEff,
    fromRightEff: fromRightEff,
    liftEither: liftEither,
    liftM: liftM,
    liftMWith: liftMWith,
    liftedM: liftedM,
    logString: logString,
    logWithLevel: logWithLevel,
    maybeArrayMerge: maybeArrayMerge,
    mkErrorRecord: mkErrorRecord,
    notImplemented: notImplemented,
    showWithParens: showWithParens,
    uIntToBigInt: uIntToBigInt,
    encodeMap: encodeMap,
    encodeSet: encodeSet,
    "encodeTagged'": encodeTagged$prime
};
