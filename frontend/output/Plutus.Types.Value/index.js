// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_BigInt = require("../Data.BigInt/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_These = require("../Data.These/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var FromData = require("../FromData/index.js");
var Helpers = require("../Helpers/index.js");
var Plutus_Types_AssocMap = require("../Plutus.Types.AssocMap/index.js");
var Plutus_Types_CurrencySymbol = require("../Plutus.Types.CurrencySymbol/index.js");
var ToData = require("../ToData/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var Types_TokenName = require("../Types.TokenName/index.js");
var Value = function (x) {
    return x;
};
var Coin = function (x) {
    return x;
};
var toDataValue = Plutus_Types_AssocMap.toDataMap(Plutus_Types_CurrencySymbol.toDataCurrencySymbol)(Plutus_Types_AssocMap.toDataMap(Types_TokenName.toDataTokenName)(ToData.toDataBigInt));
var showValue = {
    show: function (v) {
        return "(PlutusValue " + (Data_Show.show(Plutus_Types_AssocMap.showMap(Plutus_Types_CurrencySymbol.showCurrencySymbol)(Plutus_Types_AssocMap.showMap(Types_TokenName.showTokenName)(Data_BigInt.showBigInt)))(v) + ")");
    }
};
var showCoin = {
    show: function (v) {
        return Helpers.showWithParens(Data_BigInt.showBigInt)("Coin")(v);
    }
};
var semigroupCoin = {
    append: function (v) {
        return function (v1) {
            return Data_Semiring.add(Data_BigInt.semiringBigInt)(v)(v1);
        };
    }
};
var newtypeCoin_ = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidCoin = {
    mempty: Data_Semiring.zero(Data_BigInt.semiringBigInt),
    Semigroup0: function () {
        return semigroupCoin;
    }
};
var meetSemilatticeCoin = {
    meet: function (v) {
        return function (v1) {
            return Data_Ord.min(Data_BigInt.ordBigInt)(v)(v1);
        };
    }
};
var joinSemilatticeCoin = {
    join: function (v) {
        return function (v1) {
            return Data_Ord.max(Data_BigInt.ordBigInt)(v)(v1);
        };
    }
};
var genericCoin_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var fromDataValue = Plutus_Types_AssocMap.fromDataMap(Plutus_Types_CurrencySymbol.fromDataCurrencySymbol)(Plutus_Types_AssocMap.fromDataMap(Types_TokenName.fromDataTokenName)(FromData.fromDataBigInt));
var eqCoin = Data_BigInt.eqBigInt;
var encodeAesonValue = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonAeson)(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonAeson)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getValue";
            }
        })())())({
            getValue: Aeson.encodeAeson(Plutus_Types_AssocMap.encodeAesonMap(Plutus_Types_CurrencySymbol.encodeAesonCurrencySymbol)(Plutus_Types_AssocMap.encodeAesonMap(Types_TokenName.encodeAesonTokenName)(Aeson.encodeAesonBigInt)))(v)
        }));
    }
};
var decodeAesonValue = {
    decodeAeson: Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonAeson))("getValue"))((function () {
        var $87 = Data_Functor.map(Data_Either.functorEither)(Value);
        var $88 = Aeson.decodeAeson(Plutus_Types_AssocMap.decodeAesonMap(Plutus_Types_CurrencySymbol.decodeAesonCurrencySymbol)(Plutus_Types_AssocMap.decodeAesonMap(Types_TokenName.decodeAesonTokenName)(Aeson.decodeAesonBigInt)));
        return function ($89) {
            return $87($88($89));
        };
    })()))
};
var valueOf = function (v) {
    return function (cs) {
        return function (tn) {
            return Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Types_AssocMap.lookup(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(cs)(v))(Plutus_Types_AssocMap.lookup(Types_TokenName.eqTokenName)(tn)));
        };
    };
};
var valueToCoin = function (v) {
    return Coin(valueOf(v)(Plutus_Types_CurrencySymbol.adaSymbol)(Types_TokenName.adaToken));
};
var unionVal = function (v) {
    return function (v1) {
        return Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.This.create))(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.That.create))(Plutus_Types_AssocMap.union(Types_TokenName.eqTokenName)))(Plutus_Types_AssocMap.union(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v)(v1));
    };
};
var unionWith = function (f) {
    return function (lhs) {
        var $90 = Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(f)));
        var $91 = unionVal(lhs);
        return function ($92) {
            return Value($90($91($92)));
        };
    };
};
var joinSemilatticeValue = {
    join: unionWith(Data_Ord.max(Data_BigInt.ordBigInt))
};
var meetSemilatticeValue = {
    meet: unionWith(Data_Ord.min(Data_BigInt.ordBigInt))
};
var semigroupValue = {
    append: unionWith(Data_Semiring.add(Data_BigInt.semiringBigInt))
};
var monoidValue = {
    mempty: [  ],
    Semigroup0: function () {
        return semigroupValue;
    }
};
var symbols = function (v) {
    return Plutus_Types_AssocMap.keys(v);
};
var singleton = function (cs) {
    return function (tn) {
        var $93 = Plutus_Types_AssocMap.singleton(cs);
        var $94 = Plutus_Types_AssocMap.singleton(tn);
        return function ($95) {
            return Value($93($94($95)));
        };
    };
};
var singleton$prime = function (cs) {
    return function (tn) {
        return function (amount) {
            if (Data_Eq.eq(Types_ByteArray.eqByteArray)(cs)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray)) && Data_Eq.notEq(Types_ByteArray.eqByteArray)(tn)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
                return Data_Maybe.Nothing.value;
            };
            if (Data_Boolean.otherwise) {
                return Control_Apply.lift3(Data_Maybe.applyMaybe)(singleton)(Plutus_Types_CurrencySymbol.mkCurrencySymbol(cs))(Types_TokenName.mkTokenName(tn))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(amount));
            };
            throw new Error("Failed pattern match at Plutus.Types.Value (line 161, column 1 - line 161, column 62): " + [ cs.constructor.name, tn.constructor.name, amount.constructor.name ]);
        };
    };
};
var scale = function (s) {
    return function (v) {
        return Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(s)))(v);
    };
};
var negation = function (v) {
    return Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Ring.negate(Data_BigInt.ringBigInt)))(v);
};
var split = function (v) {
    var worker = function (mp$prime) {
        var v1 = Plutus_Types_AssocMap.mapThese(function (a) {
            var $69 = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(a)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
            if ($69) {
                return new Data_These.This(a);
            };
            return new Data_These.That(a);
        })(mp$prime);
        return new Data_These.Both(v1.value0, v1.value1);
    };
    var v1 = Plutus_Types_AssocMap.mapThese(worker)(v);
    return new Data_Tuple.Tuple(negation(v1.value0), v1.value1);
};
var lovelaceValueOf = singleton(Plutus_Types_CurrencySymbol.adaSymbol)(Types_TokenName.adaToken);
var isCoinZero = function (v) {
    return Data_Eq.eq(Data_BigInt.eqBigInt)(v)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
};
var getValue = function (v) {
    return v;
};
var isZero = (function () {
    var $96 = Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_BigInt.eqBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))));
    return function ($97) {
        return $96(getValue($97));
    };
})();
var getLovelace = function (v) {
    return v;
};
var valueToCoin$prime = function ($98) {
    return getLovelace(valueToCoin($98));
};
var flattenValue = function (v) {
    return Data_Function.flip(Data_Array.concatMap)(v)(function (v1) {
        return Data_Functor.mapFlipped(Data_Functor.functorArray)(v1.value1)(function (v2) {
            return new Data_Tuple.Tuple(v1.value0, new Data_Tuple.Tuple(v2.value0, v2.value1));
        });
    });
};
var flattenNonAdaAssets = (function () {
    var $99 = Data_Array.filter((function () {
        var $101 = Data_Eq.notEq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(Plutus_Types_CurrencySymbol.adaSymbol);
        return function ($102) {
            return $101(Data_Tuple.fst($102));
        };
    })());
    return function ($100) {
        return $99(flattenValue($100));
    };
})();
var coinToValue = function (v) {
    return lovelaceValueOf(v);
};
var checkPred = function (f) {
    return function (l) {
        return function (r) {
            return Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Plutus_Types_AssocMap.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f))(unionVal(l)(r));
        };
    };
};
var checkBinRel = function (f) {
    return function (l) {
        return function (r) {
            return checkPred(Data_These.these(Data_Function.flip(f)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(f(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(f))(l)(r);
        };
    };
};
var geq = checkBinRel(Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt));
var gt = function (l) {
    return function (r) {
        return !(isZero(l) && isZero(r)) && checkBinRel(Data_Ord.greaterThan(Data_BigInt.ordBigInt))(l)(r);
    };
};
var leq = checkBinRel(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt));
var lt = function (l) {
    return function (r) {
        return !(isZero(l) && isZero(r)) && checkBinRel(Data_Ord.lessThan(Data_BigInt.ordBigInt))(l)(r);
    };
};
var eqValue = {
    eq: checkBinRel(Data_Eq.eq(Data_BigInt.eqBigInt))
};
module.exports = {
    Coin: Coin,
    coinToValue: coinToValue,
    flattenNonAdaAssets: flattenNonAdaAssets,
    flattenValue: flattenValue,
    geq: geq,
    getLovelace: getLovelace,
    getValue: getValue,
    gt: gt,
    isCoinZero: isCoinZero,
    isZero: isZero,
    leq: leq,
    lovelaceValueOf: lovelaceValueOf,
    lt: lt,
    negation: negation,
    scale: scale,
    singleton: singleton,
    "singleton'": singleton$prime,
    split: split,
    symbols: symbols,
    unionWith: unionWith,
    valueOf: valueOf,
    valueToCoin: valueToCoin,
    "valueToCoin'": valueToCoin$prime,
    toDataValue: toDataValue,
    fromDataValue: fromDataValue,
    decodeAesonValue: decodeAesonValue,
    encodeAesonValue: encodeAesonValue,
    eqValue: eqValue,
    showValue: showValue,
    semigroupValue: semigroupValue,
    monoidValue: monoidValue,
    joinSemilatticeValue: joinSemilatticeValue,
    meetSemilatticeValue: meetSemilatticeValue,
    genericCoin_: genericCoin_,
    newtypeCoin_: newtypeCoin_,
    eqCoin: eqCoin,
    showCoin: showCoin,
    semigroupCoin: semigroupCoin,
    monoidCoin: monoidCoin,
    joinSemilatticeCoin: joinSemilatticeCoin,
    meetSemilatticeCoin: meetSemilatticeCoin
};
