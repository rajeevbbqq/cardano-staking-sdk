// Generated by purs version 0.14.5
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans/index.js");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var safely = function (dictMonadRec) {
    return function (f) {
        var lower = function (dictMonadRec1) {
            return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec1)((function () {
                var $17 = Control_Applicative.pure((dictMonadRec1.Monad0()).Applicative0());
                var $18 = Data_Newtype.unwrap();
                return function ($19) {
                    return $17($18($19));
                };
            })());
        };
        return lower(dictMonadRec)(f(Control_Monad_Free_Trans.monadRecFreeT(Data_Identity.functorIdentity)(dictMonadRec.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Data_Identity.functorIdentity))(dictMonadRec.Monad0()))(lower(dictMonadRec)));
    };
};
var traverse_ = function (dictFoldable) {
    return function (dictMonadRec) {
        return function (f) {
            return function (xs) {
                return safely(dictMonadRec)(function (dictMonadRec1) {
                    return function (lift) {
                        return function (v) {
                            return Data_Foldable.traverse_((dictMonadRec1.Monad0()).Applicative0())(dictFoldable)(function ($20) {
                                return lift(f($20));
                            })(xs);
                        };
                    };
                });
            };
        };
    };
};
var replicateM_ = function (dictMonadRec) {
    return function (n) {
        return function (x) {
            var step = function (v) {
                if (v === 0) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                };
                return Data_Functor.voidLeft((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(x)(new Control_Monad_Rec_Class.Loop(v - 1 | 0));
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(step)(n);
        };
    };
};
var for_ = function (dictFoldable) {
    return function (dictMonadRec) {
        return Data_Function.flip(traverse_(dictFoldable)(dictMonadRec));
    };
};
var foldM = function (dictMonadRec) {
    return function (f) {
        var step = function (a) {
            return function (v) {
                if (v instanceof Data_List_Types.Nil) {
                    return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(a));
                };
                if (v instanceof Data_List_Types.Cons) {
                    return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(a)(v.value0))(function (a$prime) {
                        return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                            a: a$prime,
                            b: v.value1
                        }));
                    });
                };
                throw new Error("Failed pattern match at Control.Safely (line 69, column 3 - line 69, column 60): " + [ a.constructor.name, v.constructor.name ]);
            };
        };
        return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(step);
    };
};
module.exports = {
    safely: safely,
    replicateM_: replicateM_,
    traverse_: traverse_,
    for_: for_,
    foldM: foldM
};
