// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Serialization_Hash = require("../Serialization.Hash/index.js");
var Types_ByteArray = require("../Types.ByteArray/index.js");
var ValidatorHash = function (x) {
    return x;
};
var StakeValidatorHash = function (x) {
    return x;
};
var MintingPolicyHash = function (x) {
    return x;
};
var PlutusV1 = (function () {
    function PlutusV1() {

    };
    PlutusV1.value = new PlutusV1();
    return PlutusV1;
})();
var PlutusV2 = (function () {
    function PlutusV2() {

    };
    PlutusV2.value = new PlutusV2();
    return PlutusV2;
})();
var PlutusScript = function (x) {
    return x;
};
var MintingPolicy = function (x) {
    return x;
};
var StakeValidator = function (x) {
    return x;
};
var Validator = function (x) {
    return x;
};
var toMetadataValidatorHash = Serialization_Hash.toMetadataScriptHash;
var toMetadataMintingPolicyHa = Serialization_Hash.toMetadataScriptHash;
var toDataValidatorHash = Serialization_Hash.toDataScriptHash;
var toDataMintingPolicyHash = Serialization_Hash.toDataScriptHash;
var ordValidatorHash = Serialization_Hash.ordScriptHash;
var ordStakeValidatorHash = Serialization_Hash.ordScriptHash;
var ordMintingPolicyHash = Serialization_Hash.ordScriptHash;
var newtypeValidator_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeValidatorHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeStakeValidator_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeStakeValidatorHash = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypePlutusScript_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeMintingPolicy_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeMintingPolicyHash_ = {
    Coercible0: function () {
        return undefined;
    }
};
var genericValidator_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericValidatorHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showValidatorHash = {
    show: Data_Show_Generic.genericShow(genericValidatorHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
        reflectSymbol: function () {
            return "ValidatorHash";
        }
    }))
};
var genericStakeValidator_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericStakeValidatorHash = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showStakeValidatorHash = {
    show: Data_Show_Generic.genericShow(genericStakeValidatorHash)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
        reflectSymbol: function () {
            return "StakeValidatorHash";
        }
    }))
};
var genericPlutusScript_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericMintingPolicy_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericMintingPolicyHash_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showMintingPolicyHash = {
    show: Data_Show_Generic.genericShow(genericMintingPolicyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
        reflectSymbol: function () {
            return "MintingPolicyHash";
        }
    }))
};
var genericLanguage_ = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return PlutusV1.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return PlutusV2.value;
        };
        throw new Error("Failed pattern match at Types.Scripts (line 47, column 1 - line 47, column 35): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof PlutusV1) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof PlutusV2) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Types.Scripts (line 47, column 1 - line 47, column 35): " + [ x.constructor.name ]);
    }
};
var showLanguage = {
    show: Data_Show_Generic.genericShow(genericLanguage_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "PlutusV1";
        }
    }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
        reflectSymbol: function () {
            return "PlutusV2";
        }
    })))
};
var showPlutusScript = {
    show: Data_Show_Generic.genericShow(genericPlutusScript_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Tuple.showTuple(Types_ByteArray.showByteArray)(showLanguage)))({
        reflectSymbol: function () {
            return "PlutusScript";
        }
    }))
};
var showMintingPolicy = {
    show: Data_Show_Generic.genericShow(genericMintingPolicy_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
        reflectSymbol: function () {
            return "MintingPolicy";
        }
    }))
};
var showStakeValidator = {
    show: Data_Show_Generic.genericShow(genericStakeValidator_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
        reflectSymbol: function () {
            return "StakeValidator";
        }
    }))
};
var showValidator = {
    show: Data_Show_Generic.genericShow(genericValidator_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
        reflectSymbol: function () {
            return "Validator";
        }
    }))
};
var fromMetadataValidatorHash = Serialization_Hash.fromMetadataScriptHash;
var fromMetadataMintingPolicy = Serialization_Hash.fromMetadataScriptHash;
var fromDataValidatorHash = Serialization_Hash.fromDataScriptHash;
var fromDataMintingPolicyHash = Serialization_Hash.fromDataScriptHash;
var eqValidatorHash = Serialization_Hash.eqScriptHash;
var eqStakeValidatorHash = Serialization_Hash.eqScriptHash;
var eqMintingPolicyHash = Serialization_Hash.eqScriptHash;
var eqLanguage = {
    eq: function (x) {
        return function (y) {
            if (x instanceof PlutusV1 && y instanceof PlutusV1) {
                return true;
            };
            if (x instanceof PlutusV2 && y instanceof PlutusV2) {
                return true;
            };
            return false;
        };
    }
};
var eqPlutusScript = Data_Tuple.eqTuple(Types_ByteArray.eqByteArray)(eqLanguage);
var eqMintingPolicy = eqPlutusScript;
var eqStakeValidator = eqPlutusScript;
var eqValidator = eqPlutusScript;
var ordLanguage = {
    compare: function (x) {
        return function (y) {
            if (x instanceof PlutusV1 && y instanceof PlutusV1) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof PlutusV1) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof PlutusV1) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof PlutusV2 && y instanceof PlutusV2) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Types.Scripts (line 46, column 1 - line 46, column 29): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqLanguage;
    }
};
var ordPlutusScript = Data_Tuple.ordTuple(Types_ByteArray.ordByteArray)(ordLanguage);
var ordMintingPolicy = ordPlutusScript;
var ordStakeValidator = ordPlutusScript;
var ordValidator = ordPlutusScript;
var encodeAesonValidatorHash = Serialization_Hash.encodeAesonScriptHash;
var encodeAesonStakeValidator = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonScriptHash)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getStakeValidatorHash";
            }
        })())())({
            getStakeValidatorHash: v
        });
    }
};
var encodeAesonMintingPolicyH = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Serialization_Hash.encodeAesonScriptHash)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getMintingPolicyHash";
            }
        })())())({
            getMintingPolicyHash: v
        });
    }
};
var encodeAesonLanguage = {
    "encodeAeson'": (function () {
        var $119 = Aeson["encodeAeson'"](Aeson.encodeAesonString);
        return function ($120) {
            return $119((function (v) {
                if (v instanceof PlutusV1) {
                    return "PlutusV1";
                };
                if (v instanceof PlutusV2) {
                    return "PlutusV2";
                };
                throw new Error("Failed pattern match at Types.Scripts (line 59, column 35 - line 61, column 27): " + [ v.constructor.name ]);
            })($120));
        };
    })()
};
var encodeAesonPlutusScript = Aeson.encodeAesonTuple(Types_ByteArray.encodeAesonByteArray)(encodeAesonLanguage);
var encodeAesonMintingPolicy = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonPlutusScript)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getMintingPolicy";
            }
        })())())({
            getMintingPolicy: v
        });
    }
};
var encodeAesonStakeValidator1 = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonPlutusScript)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getStakeValidator";
            }
        })())())({
            getStakeValidator: v
        });
    }
};
var encodeAesonValidator = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(encodeAesonPlutusScript)(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "getValidator";
            }
        })())())({
            getValidator: v
        });
    }
};
var decodeAesonValidatorHash = Serialization_Hash.decodeAesonScriptHash;
var decodeAesonLanguage = {
    decodeAeson: Aeson.caseAesonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected string")))(function (v) {
        if (v === "PlutusV1") {
            return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusV1.value);
        };
        if (v === "PlutusV2") {
            return Control_Applicative.pure(Data_Either.applicativeEither)(PlutusV2.value);
        };
        return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Aeson.toStringifiedNumbersJson(Aeson.fromString(v))));
    })
};
var decodeAesonPlutusScript = Aeson.decodeAesonTuple(Types_ByteArray.decodeAesonByteArray)(decodeAesonLanguage);
var plutusV2Script = function (ba) {
    return new Data_Tuple.Tuple(ba, PlutusV2.value);
};
var plutusV1Script = function (ba) {
    return new Data_Tuple.Tuple(ba, PlutusV1.value);
};
var decodeAesonHelper = function (dictDecodeAeson) {
    return function (constrName) {
        return function (constr) {
            return Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonAeson))(constrName))((function () {
                var $121 = Data_Functor.map(Data_Either.functorEither)(constr);
                var $122 = Aeson.decodeAeson(dictDecodeAeson);
                return function ($123) {
                    return $121($122($123));
                };
            })()));
        };
    };
};
var decodeAesonMintingPolicy = {
    decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getMintingPolicy")(MintingPolicy)
};
var decodeAesonMintingPolicyH = {
    decodeAeson: decodeAesonHelper(Serialization_Hash.decodeAesonScriptHash)("getMintingPolicyHash")(MintingPolicyHash)
};
var decodeAesonStakeValidator = {
    decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getStakeValidator")(StakeValidator)
};
var decodeAesonStakeValidator1 = {
    decodeAeson: decodeAesonHelper(Serialization_Hash.decodeAesonScriptHash)("getStakeValidatorHash")(StakeValidatorHash)
};
var decodeAesonValidator = {
    decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getValidator")(Validator)
};
module.exports = {
    MintingPolicy: MintingPolicy,
    MintingPolicyHash: MintingPolicyHash,
    PlutusScript: PlutusScript,
    StakeValidator: StakeValidator,
    StakeValidatorHash: StakeValidatorHash,
    Validator: Validator,
    ValidatorHash: ValidatorHash,
    PlutusV1: PlutusV1,
    PlutusV2: PlutusV2,
    plutusV1Script: plutusV1Script,
    plutusV2Script: plutusV2Script,
    eqLanguage: eqLanguage,
    ordLanguage: ordLanguage,
    genericLanguage_: genericLanguage_,
    decodeAesonLanguage: decodeAesonLanguage,
    encodeAesonLanguage: encodeAesonLanguage,
    showLanguage: showLanguage,
    genericPlutusScript_: genericPlutusScript_,
    newtypePlutusScript_: newtypePlutusScript_,
    eqPlutusScript: eqPlutusScript,
    ordPlutusScript: ordPlutusScript,
    decodeAesonPlutusScript: decodeAesonPlutusScript,
    encodeAesonPlutusScript: encodeAesonPlutusScript,
    showPlutusScript: showPlutusScript,
    genericMintingPolicy_: genericMintingPolicy_,
    newtypeMintingPolicy_: newtypeMintingPolicy_,
    eqMintingPolicy: eqMintingPolicy,
    ordMintingPolicy: ordMintingPolicy,
    decodeAesonMintingPolicy: decodeAesonMintingPolicy,
    encodeAesonMintingPolicy: encodeAesonMintingPolicy,
    showMintingPolicy: showMintingPolicy,
    genericValidator_: genericValidator_,
    newtypeValidator_: newtypeValidator_,
    eqValidator: eqValidator,
    ordValidator: ordValidator,
    decodeAesonValidator: decodeAesonValidator,
    encodeAesonValidator: encodeAesonValidator,
    showValidator: showValidator,
    genericStakeValidator_: genericStakeValidator_,
    newtypeStakeValidator_: newtypeStakeValidator_,
    eqStakeValidator: eqStakeValidator,
    ordStakeValidator: ordStakeValidator,
    decodeAesonStakeValidator: decodeAesonStakeValidator,
    encodeAesonStakeValidator1: encodeAesonStakeValidator1,
    showStakeValidator: showStakeValidator,
    genericMintingPolicyHash_: genericMintingPolicyHash_,
    newtypeMintingPolicyHash_: newtypeMintingPolicyHash_,
    eqMintingPolicyHash: eqMintingPolicyHash,
    ordMintingPolicyHash: ordMintingPolicyHash,
    fromDataMintingPolicyHash: fromDataMintingPolicyHash,
    toDataMintingPolicyHash: toDataMintingPolicyHash,
    fromMetadataMintingPolicy: fromMetadataMintingPolicy,
    toMetadataMintingPolicyHa: toMetadataMintingPolicyHa,
    decodeAesonMintingPolicyH: decodeAesonMintingPolicyH,
    encodeAesonMintingPolicyH: encodeAesonMintingPolicyH,
    showMintingPolicyHash: showMintingPolicyHash,
    genericValidatorHash_: genericValidatorHash_,
    newtypeValidatorHash_: newtypeValidatorHash_,
    eqValidatorHash: eqValidatorHash,
    ordValidatorHash: ordValidatorHash,
    fromDataValidatorHash: fromDataValidatorHash,
    toDataValidatorHash: toDataValidatorHash,
    fromMetadataValidatorHash: fromMetadataValidatorHash,
    toMetadataValidatorHash: toMetadataValidatorHash,
    encodeAesonValidatorHash: encodeAesonValidatorHash,
    decodeAesonValidatorHash: decodeAesonValidatorHash,
    showValidatorHash: showValidatorHash,
    genericStakeValidatorHash: genericStakeValidatorHash,
    newtypeStakeValidatorHash: newtypeStakeValidatorHash,
    eqStakeValidatorHash: eqStakeValidatorHash,
    ordStakeValidatorHash: ordStakeValidatorHash,
    decodeAesonStakeValidator1: decodeAesonStakeValidator1,
    encodeAesonStakeValidator: encodeAesonStakeValidator,
    showStakeValidatorHash: showStakeValidatorHash
};
