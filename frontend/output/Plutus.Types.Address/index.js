// Generated by purs version 0.14.5
"use strict";
var Aeson = require("../Aeson/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Show_Generic = require("../Data.Show.Generic/index.js");
var FromData = require("../FromData/index.js");
var Plutus_Types_Credential = require("../Plutus.Types.Credential/index.js");
var Serialization_Address = require("../Serialization.Address/index.js");
var ToData = require("../ToData/index.js");
var TypeLevel_Nat = require("../TypeLevel.Nat/index.js");
var TypeLevel_RowList_Unordered_Indexed = require("../TypeLevel.RowList.Unordered.Indexed/index.js");
var Address = function (x) {
    return x;
};
var AddressWithNetworkTag = function (x) {
    return x;
};
var newtypeAddress_ = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeAddressWithNetwork = {
    Coercible0: function () {
        return undefined;
    }
};
var hasPlutusSchemaAddress$34Ad = {};
var genericAddress_ = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showAddress = {
    show: Data_Show_Generic.genericShow(genericAddress_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "addressCredential";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "addressStakingCredential";
        }
    })(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Plutus_Types_Credential.showStakingCredential)))(Plutus_Types_Credential.showCredential))))({
        reflectSymbol: function () {
            return "Address";
        }
    }))
};
var toDataAddress = {
    toData: ToData.genericToData(genericAddress_)(ToData.toDataWithSchemaConstruct({
        reflectSymbol: function () {
            return "Address";
        }
    })(ToData.toDataArgsArgumentRecord(ToData.toDataArgsRecord({
        reflectSymbol: function () {
            return "Address";
        }
    })(ToData.toDataArgsRL(ToData.toDataArgsRLHelperCons(Plutus_Types_Credential.toDataCredential)(ToData.toDataArgsRLHelperCons(ToData.toDataMaybe(Plutus_Types_Credential.toDataStakingCredential))(ToData.toDataArgsRLHelperNilRow)()()()({
        reflectSymbol: function () {
            return "addressStakingCredential";
        }
    })({
        reflectSymbol: function () {
            return "Address";
        }
    })()()()()(TypeLevel_Nat.knownNatS(TypeLevel_Nat.knownNatZ)))()()()({
        reflectSymbol: function () {
            return "addressCredential";
        }
    })({
        reflectSymbol: function () {
            return "Address";
        }
    })()()()()(TypeLevel_Nat.knownNatZ)))()))()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "Address";
        }
    })(TypeLevel_Nat.knownNatZ))(TypeLevel_Nat.knownNatZ))
};
var genericAddressWithNetwork = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showAddressWithNetworkTag = {
    show: Data_Show_Generic.genericShow(genericAddressWithNetwork)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "address";
        }
    })(Data_Show.showRecordFieldsCons({
        reflectSymbol: function () {
            return "networkId";
        }
    })(Data_Show.showRecordFieldsNil)(Serialization_Address.showNetworkId))(showAddress))))({
        reflectSymbol: function () {
            return "AddressWithNetworkTag";
        }
    }))
};
var fromDataAddress = {
    fromData: FromData.genericFromData(genericAddress_)(FromData.fromDataWithSchemaConstru({
        reflectSymbol: function () {
            return "Address";
        }
    })()()(TypeLevel_RowList_Unordered_Indexed.getIndexWithLabelConsI1()()({
        reflectSymbol: function () {
            return "Address";
        }
    })(TypeLevel_Nat.knownNatZ))(FromData.fromDataArgsArgumentRecor(FromData.fromDataArgsRLCons(Plutus_Types_Credential.fromDataCredential)(FromData.fromDataArgsRLCons(FromData.fromDataMaybe(Plutus_Types_Credential.fromDataStakingCredential))(FromData.fromDataArgsRLNilRow)()()({
        reflectSymbol: function () {
            return "addressStakingCredential";
        }
    }))()()({
        reflectSymbol: function () {
            return "addressCredential";
        }
    }))()()())(TypeLevel_Nat.knownNatZ))
};
var eqAddress = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(Plutus_Types_Credential.eqCredential)(x.addressCredential)(y.addressCredential) && Data_Eq.eq(Data_Maybe.eqMaybe(Plutus_Types_Credential.eqStakingCredential))(x.addressStakingCredential)(y.addressStakingCredential);
        };
    }
};
var eqAddressWithNetworkTag = {
    eq: function (x) {
        return function (y) {
            return Data_Eq.eq(eqAddress)(x.address)(y.address) && Data_Eq.eq(Serialization_Address.eqNetworkId)(x.networkId)(y.networkId);
        };
    }
};
var ordAddress = {
    compare: function (x) {
        return function (y) {
            var v = Data_Ord.compare(Plutus_Types_Credential.ordCredential)(x.addressCredential)(y.addressCredential);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return Data_Ord.compare(Data_Maybe.ordMaybe(Plutus_Types_Credential.ordStakingCredential))(x.addressStakingCredential)(y.addressStakingCredential);
        };
    },
    Eq0: function () {
        return eqAddress;
    }
};
var encodeAesonAddress = {
    "encodeAeson'": function (v) {
        return Aeson["encodeAeson'"](Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Plutus_Types_Credential.encodeAesonCredential)(Aeson.gEncodeAesonCons(Aeson.encodeAesonMaybe(Plutus_Types_Credential.encodeAesonStakingCredent))(Aeson.gEncodeAesonNil)({
            reflectSymbol: function () {
                return "addressStakingCredential";
            }
        })())({
            reflectSymbol: function () {
                return "addressCredential";
            }
        })())())(v);
    }
};
var decodeAesonAddress = {
    decodeAeson: Aeson.caseAesonObject(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(function (obj) {
        return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Plutus_Types_Credential.decodeAesonCredential)(obj)("addressCredential"))(function (addressCredential) {
            return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonMaybe(Plutus_Types_Credential.decodeAesonStakingCredent))(obj)("addressStakingCredential"))(function (addressStakingCredential) {
                return Control_Applicative.pure(Data_Either.applicativeEither)({
                    addressCredential: addressCredential,
                    addressStakingCredential: addressStakingCredential
                });
            });
        });
    })
};
var toValidatorHash = function (addr) {
    var v = (Data_Newtype.unwrap()(addr)).addressCredential;
    if (v instanceof Plutus_Types_Credential.ScriptCredential) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var toStakingCredential = (function () {
    var $55 = Data_Newtype.unwrap();
    return function ($56) {
        return (function (v) {
            return v.addressStakingCredential;
        })($55($56));
    };
})();
var toPubKeyHash = function (addr) {
    var v = (Data_Newtype.unwrap()(addr)).addressCredential;
    if (v instanceof Plutus_Types_Credential.PubKeyCredential) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var scriptHashAddress = function (vh) {
    return Data_Newtype.wrap()({
        addressCredential: new Plutus_Types_Credential.ScriptCredential(vh),
        addressStakingCredential: Data_Maybe.Nothing.value
    });
};
var pubKeyHashAddress = function (v) {
    return function (skh) {
        return Data_Newtype.wrap()({
            addressCredential: new Plutus_Types_Credential.PubKeyCredential(v),
            addressStakingCredential: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                var $57 = Data_Newtype.unwrap();
                return function ($58) {
                    return Plutus_Types_Credential.StakingHash.create(Plutus_Types_Credential.PubKeyCredential.create($57($58)));
                };
            })())(skh)
        });
    };
};
module.exports = {
    Address: Address,
    AddressWithNetworkTag: AddressWithNetworkTag,
    pubKeyHashAddress: pubKeyHashAddress,
    scriptHashAddress: scriptHashAddress,
    toPubKeyHash: toPubKeyHash,
    toValidatorHash: toValidatorHash,
    toStakingCredential: toStakingCredential,
    eqAddressWithNetworkTag: eqAddressWithNetworkTag,
    newtypeAddressWithNetwork: newtypeAddressWithNetwork,
    genericAddressWithNetwork: genericAddressWithNetwork,
    showAddressWithNetworkTag: showAddressWithNetworkTag,
    eqAddress: eqAddress,
    ordAddress: ordAddress,
    newtypeAddress_: newtypeAddress_,
    genericAddress_: genericAddress_,
    showAddress: showAddress,
    "hasPlutusSchemaAddress\"Ad": hasPlutusSchemaAddress$34Ad,
    toDataAddress: toDataAddress,
    fromDataAddress: fromDataAddress,
    decodeAesonAddress: decodeAesonAddress,
    encodeAesonAddress: encodeAesonAddress
};
